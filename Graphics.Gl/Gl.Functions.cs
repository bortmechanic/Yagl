/*
 This source file is a part of the project YAGL.
 Copyright (c) 2020 Pavel Melnikov.
 Distributed under the MIT License (http://opensource.org/licenses/MIT).
 See LICENSE.txt for the full license text.
*/

// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
// ReSharper disable CommentTypo

using System;

namespace Yagl.Graphics
{
    public static partial class Gl
    {

        public static void Accum(uint /*AccumOp*/  op, float /*CoordF*/  value) => AccumPtr?.Invoke(op, value);
        public static void AccumxOES(uint  op, int  value) => AccumxOESPtr?.Invoke(op, value);
        public static void ActiveProgramEXT(uint  program) => ActiveProgramEXTPtr?.Invoke(program);
        public static void ActiveShaderProgram(uint  pipeline, uint  program) => ActiveShaderProgramPtr?.Invoke(pipeline, program);
        public static void ActiveShaderProgramEXT(uint  pipeline, uint  program) => ActiveShaderProgramEXTPtr?.Invoke(pipeline, program);
        public static void ActiveStencilFaceEXT(uint /*StencilFaceDirection*/  face) => ActiveStencilFaceEXTPtr?.Invoke(face);
        public static void ActiveTexture(uint /*TextureUnit*/  texture) => ActiveTexturePtr?.Invoke(texture);
        public static void ActiveTextureARB(uint /*TextureUnit*/  texture) => ActiveTextureARBPtr?.Invoke(texture);
        public static void ActiveVaryingNV(uint  program, string  name) => ActiveVaryingNVPtr?.Invoke(program, name);
        public static void AlphaFragmentOp1ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod) => AlphaFragmentOp1ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        public static void AlphaFragmentOp2ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod) => AlphaFragmentOp2ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        public static void AlphaFragmentOp3ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod) => AlphaFragmentOp3ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        public static void AlphaFunc(uint /*AlphaFunction*/  func, float  refVal) => AlphaFuncPtr?.Invoke(func, refVal);
        public static void AlphaFuncQCOM(uint  func, float  refVal) => AlphaFuncQCOMPtr?.Invoke(func, refVal);
        public static void AlphaFuncx(uint /*AlphaFunction*/  func, int  refVal) => AlphaFuncxPtr?.Invoke(func, refVal);
        public static void AlphaFuncxOES(uint /*AlphaFunction*/  func, int /*ClampedFixed*/  refVal) => AlphaFuncxOESPtr?.Invoke(func, refVal);
        public static void AlphaToCoverageDitherControlNV(uint  mode) => AlphaToCoverageDitherControlNVPtr?.Invoke(mode);
        public static void ApplyFramebufferAttachmentCMAAINTEL() => ApplyFramebufferAttachmentCMAAINTELPtr?.Invoke();
        public static void ApplyTextureEXT(uint /*LightTextureModeEXT*/  mode) => ApplyTextureEXTPtr?.Invoke(mode);
        public static bool /*Boolean*/ AcquireKeyedMutexWin32EXT(uint  memory, ulong  key, uint  timeout) => AcquireKeyedMutexWin32EXTPtr?.Invoke(memory, key, timeout) ?? default;
        public static bool /*Boolean*/ AreProgramsResidentNV(uint  n, uint[]  programs, bool[] /*Boolean*/  residences) => AreProgramsResidentNVPtr?.Invoke(n, programs, residences) ?? default;
        public static bool /*Boolean*/ AreTexturesResident(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences) => AreTexturesResidentPtr?.Invoke(n, textures, residences) ?? default;
        public static bool /*Boolean*/ AreTexturesResidentEXT(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences) => AreTexturesResidentEXTPtr?.Invoke(n, textures, residences) ?? default;
        public static void ArrayElement(int  i) => ArrayElementPtr?.Invoke(i);
        public static void ArrayElementEXT(int  i) => ArrayElementEXTPtr?.Invoke(i);
        public static void ArrayObjectATI(uint /*EnableCap*/  array, int  size, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset) => ArrayObjectATIPtr?.Invoke(array, size, type, stride, buffer, offset);
        public static uint AsyncCopyBufferSubDataNVX(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  fenceValueArray, uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray) => AsyncCopyBufferSubDataNVXPtr?.Invoke(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) ?? default;
        public static uint AsyncCopyImageSubDataNVX(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  waitValueArray, uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray) => AsyncCopyImageSubDataNVXPtr?.Invoke(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) ?? default;
        public static void AsyncMarkerSGIX(uint  marker) => AsyncMarkerSGIXPtr?.Invoke(marker);
        public static void AttachObjectARB(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  obj) => AttachObjectARBPtr?.Invoke(containerObj, obj);
        public static void AttachShader(uint  program, uint  shader) => AttachShaderPtr?.Invoke(program, shader);
        public static void Begin(uint /*PrimitiveType*/  mode) => BeginPtr?.Invoke(mode);
        public static void BeginConditionalRender(uint  id, uint /*ConditionalRenderMode*/  mode) => BeginConditionalRenderPtr?.Invoke(id, mode);
        public static void BeginConditionalRenderNV(uint  id, uint /*ConditionalRenderMode*/  mode) => BeginConditionalRenderNVPtr?.Invoke(id, mode);
        public static void BeginConditionalRenderNVX(uint  id) => BeginConditionalRenderNVXPtr?.Invoke(id);
        public static void BeginFragmentShaderATI() => BeginFragmentShaderATIPtr?.Invoke();
        public static void BeginOcclusionQueryNV(uint  id) => BeginOcclusionQueryNVPtr?.Invoke(id);
        public static void BeginPerfMonitorAMD(uint  monitor) => BeginPerfMonitorAMDPtr?.Invoke(monitor);
        public static void BeginPerfQueryINTEL(uint  queryHandle) => BeginPerfQueryINTELPtr?.Invoke(queryHandle);
        public static void BeginQuery(uint /*QueryTarget*/  target, uint  id) => BeginQueryPtr?.Invoke(target, id);
        public static void BeginQueryARB(uint  target, uint  id) => BeginQueryARBPtr?.Invoke(target, id);
        public static void BeginQueryEXT(uint /*QueryTarget*/  target, uint  id) => BeginQueryEXTPtr?.Invoke(target, id);
        public static void BeginQueryIndexed(uint /*QueryTarget*/  target, uint  index, uint  id) => BeginQueryIndexedPtr?.Invoke(target, index, id);
        public static void BeginTransformFeedback(uint /*PrimitiveType*/  primitiveMode) => BeginTransformFeedbackPtr?.Invoke(primitiveMode);
        public static void BeginTransformFeedbackEXT(uint /*PrimitiveType*/  primitiveMode) => BeginTransformFeedbackEXTPtr?.Invoke(primitiveMode);
        public static void BeginTransformFeedbackNV(uint /*PrimitiveType*/  primitiveMode) => BeginTransformFeedbackNVPtr?.Invoke(primitiveMode);
        public static void BeginVertexShaderEXT() => BeginVertexShaderEXTPtr?.Invoke();
        public static void BeginVideoCaptureNV(uint  video_capture_slot) => BeginVideoCaptureNVPtr?.Invoke(video_capture_slot);
        public static void BindAttribLocation(uint  program, uint  index, string  name) => BindAttribLocationPtr?.Invoke(program, index, name);
        public static void BindAttribLocationARB(IntPtr /*handleARB*/  programObj, uint  index, string  name) => BindAttribLocationARBPtr?.Invoke(programObj, index, name);
        public static void BindBuffer(uint /*BufferTargetARB*/  target, uint  buffer) => BindBufferPtr?.Invoke(target, buffer);
        public static void BindBufferARB(uint /*BufferTargetARB*/  target, uint  buffer) => BindBufferARBPtr?.Invoke(target, buffer);
        public static void BindBufferBase(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => BindBufferBasePtr?.Invoke(target, index, buffer);
        public static void BindBufferBaseEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => BindBufferBaseEXTPtr?.Invoke(target, index, buffer);
        public static void BindBufferBaseNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => BindBufferBaseNVPtr?.Invoke(target, index, buffer);
        public static void BindBufferOffsetEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset) => BindBufferOffsetEXTPtr?.Invoke(target, index, buffer, offset);
        public static void BindBufferOffsetNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset) => BindBufferOffsetNVPtr?.Invoke(target, index, buffer, offset);
        public static void BindBufferRange(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => BindBufferRangePtr?.Invoke(target, index, buffer, offset, size);
        public static void BindBufferRangeEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => BindBufferRangeEXTPtr?.Invoke(target, index, buffer, offset, size);
        public static void BindBufferRangeNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => BindBufferRangeNVPtr?.Invoke(target, index, buffer, offset, size);
        public static void BindBuffersBase(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers) => BindBuffersBasePtr?.Invoke(target, first, count, buffers);
        public static void BindBuffersRange(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, IntPtr[]  sizes) => BindBuffersRangePtr?.Invoke(target, first, count, buffers, offsets, sizes);
        public static void BindFragDataLocation(uint  program, uint  color, string  name) => BindFragDataLocationPtr?.Invoke(program, color, name);
        public static void BindFragDataLocationEXT(uint  program, uint  color, string  name) => BindFragDataLocationEXTPtr?.Invoke(program, color, name);
        public static void BindFragDataLocationIndexed(uint  program, uint  colorNumber, uint  index, string  name) => BindFragDataLocationIndexedPtr?.Invoke(program, colorNumber, index, name);
        public static void BindFragDataLocationIndexedEXT(uint  program, uint  colorNumber, uint  index, string  name) => BindFragDataLocationIndexedEXTPtr?.Invoke(program, colorNumber, index, name);
        public static void BindFragmentShaderATI(uint  id) => BindFragmentShaderATIPtr?.Invoke(id);
        public static void BindFramebuffer(uint /*FramebufferTarget*/  target, uint  framebuffer) => BindFramebufferPtr?.Invoke(target, framebuffer);
        public static void BindFramebufferEXT(uint /*FramebufferTarget*/  target, uint  framebuffer) => BindFramebufferEXTPtr?.Invoke(target, framebuffer);
        public static void BindFramebufferOES(uint /*FramebufferTarget*/  target, uint  framebuffer) => BindFramebufferOESPtr?.Invoke(target, framebuffer);
        public static void BindImageTexture(uint  unit, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, uint /*InternalFormat*/  format) => BindImageTexturePtr?.Invoke(unit, texture, level, layered, layer, access, format);
        public static void BindImageTextureEXT(uint  index, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, int  format) => BindImageTextureEXTPtr?.Invoke(index, texture, level, layered, layer, access, format);
        public static void BindImageTextures(uint  first, uint  count, uint[]  textures) => BindImageTexturesPtr?.Invoke(first, count, textures);
        public static uint BindLightParameterEXT(uint /*LightName*/  light, uint /*LightParameter*/  value) => BindLightParameterEXTPtr?.Invoke(light, value) ?? default;
        public static uint BindMaterialParameterEXT(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  value) => BindMaterialParameterEXTPtr?.Invoke(face, value) ?? default;
        public static void BindMultiTextureEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*Texture*/  texture) => BindMultiTextureEXTPtr?.Invoke(texunit, target, texture);
        public static uint BindParameterEXT(uint /*VertexShaderParameterEXT*/  value) => BindParameterEXTPtr?.Invoke(value) ?? default;
        public static void BindProgramARB(uint /*ProgramTarget*/  target, uint  program) => BindProgramARBPtr?.Invoke(target, program);
        public static void BindProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id) => BindProgramNVPtr?.Invoke(target, id);
        public static void BindProgramPipeline(uint  pipeline) => BindProgramPipelinePtr?.Invoke(pipeline);
        public static void BindProgramPipelineEXT(uint  pipeline) => BindProgramPipelineEXTPtr?.Invoke(pipeline);
        public static void BindRenderbuffer(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => BindRenderbufferPtr?.Invoke(target, renderbuffer);
        public static void BindRenderbufferEXT(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => BindRenderbufferEXTPtr?.Invoke(target, renderbuffer);
        public static void BindRenderbufferOES(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => BindRenderbufferOESPtr?.Invoke(target, renderbuffer);
        public static void BindSampler(uint  unit, uint  sampler) => BindSamplerPtr?.Invoke(unit, sampler);
        public static void BindSamplers(uint  first, uint  count, uint[]  samplers) => BindSamplersPtr?.Invoke(first, count, samplers);
        public static void BindShadingRateImageNV(uint  texture) => BindShadingRateImageNVPtr?.Invoke(texture);
        public static uint BindTexGenParameterEXT(uint /*TextureUnit*/  unit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  value) => BindTexGenParameterEXTPtr?.Invoke(unit, coord, value) ?? default;
        public static void BindTexture(uint /*TextureTarget*/  target, uint /*Texture*/  texture) => BindTexturePtr?.Invoke(target, texture);
        public static void BindTextureEXT(uint /*TextureTarget*/  target, uint /*Texture*/  texture) => BindTextureEXTPtr?.Invoke(target, texture);
        public static void BindTextureUnit(uint  unit, uint  texture) => BindTextureUnitPtr?.Invoke(unit, texture);
        public static uint BindTextureUnitParameterEXT(uint /*TextureUnit*/  unit, uint /*VertexShaderTextureUnitParameter*/  value) => BindTextureUnitParameterEXTPtr?.Invoke(unit, value) ?? default;
        public static void BindTextures(uint  first, uint  count, uint[]  textures) => BindTexturesPtr?.Invoke(first, count, textures);
        public static void BindTransformFeedback(uint /*BindTransformFeedbackTarget*/  target, uint  id) => BindTransformFeedbackPtr?.Invoke(target, id);
        public static void BindTransformFeedbackNV(uint /*BufferTargetARB*/  target, uint  id) => BindTransformFeedbackNVPtr?.Invoke(target, id);
        public static void BindVertexArray(uint  array) => BindVertexArrayPtr?.Invoke(array);
        public static void BindVertexArrayAPPLE(uint  array) => BindVertexArrayAPPLEPtr?.Invoke(array);
        public static void BindVertexArrayOES(uint  array) => BindVertexArrayOESPtr?.Invoke(array);
        public static void BindVertexBuffer(uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride) => BindVertexBufferPtr?.Invoke(bindingindex, buffer, offset, stride);
        public static void BindVertexBuffers(uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides) => BindVertexBuffersPtr?.Invoke(first, count, buffers, offsets, strides);
        public static void BindVertexShaderEXT(uint  id) => BindVertexShaderEXTPtr?.Invoke(id);
        public static void BindVideoCaptureStreamBufferNV(uint  video_capture_slot, uint  stream, uint  frame_region, IntPtr /*BufferOffsetARB*/  offset) => BindVideoCaptureStreamBufferNVPtr?.Invoke(video_capture_slot, stream, frame_region, offset);
        public static void BindVideoCaptureStreamTextureNV(uint  video_capture_slot, uint  stream, uint  frame_region, uint  target, uint  texture) => BindVideoCaptureStreamTextureNVPtr?.Invoke(video_capture_slot, stream, frame_region, target, texture);
        public static void Binormal3bEXT(sbyte  bx, sbyte  by, sbyte  bz) => Binormal3bEXTPtr?.Invoke(bx, by, bz);
        public static void Binormal3bvEXT(sbyte[]  v) => Binormal3bvEXTPtr?.Invoke(v);
        public static void Binormal3dEXT(double /*CoordD*/  bx, double /*CoordD*/  by, double /*CoordD*/  bz) => Binormal3dEXTPtr?.Invoke(bx, by, bz);
        public static void Binormal3dvEXT(double[] /*CoordD*/  v) => Binormal3dvEXTPtr?.Invoke(v);
        public static void Binormal3fEXT(float /*CoordF*/  bx, float /*CoordF*/  by, float /*CoordF*/  bz) => Binormal3fEXTPtr?.Invoke(bx, by, bz);
        public static void Binormal3fvEXT(float[] /*CoordF*/  v) => Binormal3fvEXTPtr?.Invoke(v);
        public static void Binormal3iEXT(int  bx, int  by, int  bz) => Binormal3iEXTPtr?.Invoke(bx, by, bz);
        public static void Binormal3ivEXT(int[]  v) => Binormal3ivEXTPtr?.Invoke(v);
        public static void Binormal3sEXT(short  bx, short  by, short  bz) => Binormal3sEXTPtr?.Invoke(bx, by, bz);
        public static void Binormal3svEXT(short[]  v) => Binormal3svEXTPtr?.Invoke(v);
        public static void BinormalPointerEXT(uint /*BinormalPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => BinormalPointerEXTPtr?.Invoke(type, stride, pointer);
        public static void Bitmap(uint  width, uint  height, float /*CoordF*/  xorig, float /*CoordF*/  yorig, float /*CoordF*/  xmove, float /*CoordF*/  ymove, byte[]  bitmap) => BitmapPtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);
        public static void BitmapxOES(uint  width, uint  height, int  xorig, int  yorig, int  xmove, int  ymove, byte[]  bitmap) => BitmapxOESPtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);
        public static void BlendBarrier() => BlendBarrierPtr?.Invoke();
        public static void BlendBarrierKHR() => BlendBarrierKHRPtr?.Invoke();
        public static void BlendBarrierNV() => BlendBarrierNVPtr?.Invoke();
        public static void BlendColor(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => BlendColorPtr?.Invoke(red, green, blue, alpha);
        public static void BlendColorEXT(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => BlendColorEXTPtr?.Invoke(red, green, blue, alpha);
        public static void BlendColorxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => BlendColorxOESPtr?.Invoke(red, green, blue, alpha);
        public static void BlendEquation(uint /*BlendEquationModeEXT*/  mode) => BlendEquationPtr?.Invoke(mode);
        public static void BlendEquationEXT(uint /*BlendEquationModeEXT*/  mode) => BlendEquationEXTPtr?.Invoke(mode);
        public static void BlendEquationIndexedAMD(uint  buf, uint /*BlendEquationModeEXT*/  mode) => BlendEquationIndexedAMDPtr?.Invoke(buf, mode);
        public static void BlendEquationOES(uint /*BlendEquationModeEXT*/  mode) => BlendEquationOESPtr?.Invoke(mode);
        public static void BlendEquationSeparate(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparatePtr?.Invoke(modeRGB, modeAlpha);
        public static void BlendEquationSeparateEXT(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateEXTPtr?.Invoke(modeRGB, modeAlpha);
        public static void BlendEquationSeparateIndexedAMD(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateIndexedAMDPtr?.Invoke(buf, modeRGB, modeAlpha);
        public static void BlendEquationSeparateOES(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateOESPtr?.Invoke(modeRGB, modeAlpha);
        public static void BlendEquationSeparatei(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateiPtr?.Invoke(buf, modeRGB, modeAlpha);
        public static void BlendEquationSeparateiARB(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateiARBPtr?.Invoke(buf, modeRGB, modeAlpha);
        public static void BlendEquationSeparateiEXT(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateiEXTPtr?.Invoke(buf, modeRGB, modeAlpha);
        public static void BlendEquationSeparateiOES(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => BlendEquationSeparateiOESPtr?.Invoke(buf, modeRGB, modeAlpha);
        public static void BlendEquationi(uint  buf, uint /*BlendEquationModeEXT*/  mode) => BlendEquationiPtr?.Invoke(buf, mode);
        public static void BlendEquationiARB(uint  buf, uint /*BlendEquationModeEXT*/  mode) => BlendEquationiARBPtr?.Invoke(buf, mode);
        public static void BlendEquationiEXT(uint  buf, uint /*BlendEquationModeEXT*/  mode) => BlendEquationiEXTPtr?.Invoke(buf, mode);
        public static void BlendEquationiOES(uint  buf, uint /*BlendEquationModeEXT*/  mode) => BlendEquationiOESPtr?.Invoke(buf, mode);
        public static void BlendFunc(uint /*BlendingFactor*/  sfactor, uint /*BlendingFactor*/  dfactor) => BlendFuncPtr?.Invoke(sfactor, dfactor);
        public static void BlendFuncIndexedAMD(uint  buf, uint  src, uint  dst) => BlendFuncIndexedAMDPtr?.Invoke(buf, src, dst);
        public static void BlendFuncSeparate(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => BlendFuncSeparatePtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public static void BlendFuncSeparateEXT(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => BlendFuncSeparateEXTPtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public static void BlendFuncSeparateINGR(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => BlendFuncSeparateINGRPtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        public static void BlendFuncSeparateIndexedAMD(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateIndexedAMDPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFuncSeparateOES(uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateOESPtr?.Invoke(srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFuncSeparatei(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateiPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFuncSeparateiARB(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateiARBPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFuncSeparateiEXT(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateiEXTPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFuncSeparateiOES(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => BlendFuncSeparateiOESPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        public static void BlendFunci(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => BlendFunciPtr?.Invoke(buf, src, dst);
        public static void BlendFunciARB(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => BlendFunciARBPtr?.Invoke(buf, src, dst);
        public static void BlendFunciEXT(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => BlendFunciEXTPtr?.Invoke(buf, src, dst);
        public static void BlendFunciOES(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => BlendFunciOESPtr?.Invoke(buf, src, dst);
        public static void BlendParameteriNV(uint  pname, int  value) => BlendParameteriNVPtr?.Invoke(pname, value);
        public static void BlitFramebuffer(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => BlitFramebufferPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void BlitFramebufferANGLE(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => BlitFramebufferANGLEPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void BlitFramebufferEXT(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => BlitFramebufferEXTPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void BlitFramebufferNV(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => BlitFramebufferNVPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void BlitNamedFramebuffer(uint  readFramebuffer, uint  drawFramebuffer, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => BlitNamedFramebufferPtr?.Invoke(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void BufferAddressRangeNV(uint  pname, uint  index, ulong  address, IntPtr /*BufferSize*/  length) => BufferAddressRangeNVPtr?.Invoke(pname, index, address, length);
        public static void BufferAttachMemoryNV(uint /*BufferTargetARB*/  target, uint  memory, ulong  offset) => BufferAttachMemoryNVPtr?.Invoke(target, memory, offset);
        public static void BufferData(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage) => BufferDataPtr?.Invoke(target, size, data, usage);
        public static void BufferDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferSizeARB*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage) => BufferDataARBPtr?.Invoke(target, size, data, usage);
        public static void BufferPageCommitmentARB(uint  target, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => BufferPageCommitmentARBPtr?.Invoke(target, offset, size, commit);
        public static void BufferParameteriAPPLE(uint  target, uint  pname, int  param) => BufferParameteriAPPLEPtr?.Invoke(target, pname, param);
        public static void BufferStorage(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => BufferStoragePtr?.Invoke(target, size, data, flags);
        public static void BufferStorageEXT(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => BufferStorageEXTPtr?.Invoke(target, size, data, flags);
        public static void BufferStorageExternalEXT(uint  target, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags) => BufferStorageExternalEXTPtr?.Invoke(target, offset, size, clientBuffer, flags);
        public static void BufferStorageMemEXT(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset) => BufferStorageMemEXTPtr?.Invoke(target, size, memory, offset);
        public static void BufferSubData(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => BufferSubDataPtr?.Invoke(target, offset, size, data);
        public static void BufferSubDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data) => BufferSubDataARBPtr?.Invoke(target, offset, size, data);
        public static void CallCommandListNV(uint  list) => CallCommandListNVPtr?.Invoke(list);
        public static void CallList(uint /*List*/  list) => CallListPtr?.Invoke(list);
        public static void CallLists(uint  n, uint /*ListNameType*/  type, IntPtr  lists) => CallListsPtr?.Invoke(n, type, lists);
        public static uint /*FramebufferStatus*/ CheckFramebufferStatus(uint /*FramebufferTarget*/  target) => CheckFramebufferStatusPtr?.Invoke(target) ?? default;
        public static uint /*FramebufferStatus*/ CheckFramebufferStatusEXT(uint /*FramebufferTarget*/  target) => CheckFramebufferStatusEXTPtr?.Invoke(target) ?? default;
        public static uint /*FramebufferStatus*/ CheckFramebufferStatusOES(uint /*FramebufferTarget*/  target) => CheckFramebufferStatusOESPtr?.Invoke(target) ?? default;
        public static uint /*FramebufferStatus*/ CheckNamedFramebufferStatus(uint  framebuffer, uint /*FramebufferTarget*/  target) => CheckNamedFramebufferStatusPtr?.Invoke(framebuffer, target) ?? default;
        public static uint /*FramebufferStatus*/ CheckNamedFramebufferStatusEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferTarget*/  target) => CheckNamedFramebufferStatusEXTPtr?.Invoke(framebuffer, target) ?? default;
        public static void ClampColor(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp) => ClampColorPtr?.Invoke(target, clamp);
        public static void ClampColorARB(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp) => ClampColorARBPtr?.Invoke(target, clamp);
        public static void Clear(uint /*ClearBufferMask*/  mask) => ClearPtr?.Invoke(mask);
        public static void ClearAccum(float  red, float  green, float  blue, float  alpha) => ClearAccumPtr?.Invoke(red, green, blue, alpha);
        public static void ClearAccumxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => ClearAccumxOESPtr?.Invoke(red, green, blue, alpha);
        public static void ClearBufferData(uint /*BufferStorageTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearBufferDataPtr?.Invoke(target, internalformat, format, type, data);
        public static void ClearBufferSubData(uint /*BufferTargetARB*/  target, uint /*InternalFormat*/  internalformat, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearBufferSubDataPtr?.Invoke(target, internalformat, offset, size, format, type, data);
        public static void ClearBufferfi(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float  depth, int  stencil) => ClearBufferfiPtr?.Invoke(buffer, drawbuffer, depth, stencil);
        public static void ClearBufferfv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float[]  value) => ClearBufferfvPtr?.Invoke(buffer, drawbuffer, value);
        public static void ClearBufferiv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, int[]  value) => ClearBufferivPtr?.Invoke(buffer, drawbuffer, value);
        public static void ClearBufferuiv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, uint[]  value) => ClearBufferuivPtr?.Invoke(buffer, drawbuffer, value);
        public static void ClearColor(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => ClearColorPtr?.Invoke(red, green, blue, alpha);
        public static void ClearColorIiEXT(int  red, int  green, int  blue, int  alpha) => ClearColorIiEXTPtr?.Invoke(red, green, blue, alpha);
        public static void ClearColorIuiEXT(uint  red, uint  green, uint  blue, uint  alpha) => ClearColorIuiEXTPtr?.Invoke(red, green, blue, alpha);
        public static void ClearColorx(int  red, int  green, int  blue, int  alpha) => ClearColorxPtr?.Invoke(red, green, blue, alpha);
        public static void ClearColorxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => ClearColorxOESPtr?.Invoke(red, green, blue, alpha);
        public static void ClearDepth(double  depth) => ClearDepthPtr?.Invoke(depth);
        public static void ClearDepthdNV(double  depth) => ClearDepthdNVPtr?.Invoke(depth);
        public static void ClearDepthf(float  d) => ClearDepthfPtr?.Invoke(d);
        public static void ClearDepthfOES(float /*ClampedFloat32*/  depth) => ClearDepthfOESPtr?.Invoke(depth);
        public static void ClearDepthx(int  depth) => ClearDepthxPtr?.Invoke(depth);
        public static void ClearDepthxOES(int /*ClampedFixed*/  depth) => ClearDepthxOESPtr?.Invoke(depth);
        public static void ClearIndex(float /*MaskedColorIndexValueF*/  c) => ClearIndexPtr?.Invoke(c);
        public static void ClearNamedBufferData(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearNamedBufferDataPtr?.Invoke(buffer, internalformat, format, type, data);
        public static void ClearNamedBufferDataEXT(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearNamedBufferDataEXTPtr?.Invoke(buffer, internalformat, format, type, data);
        public static void ClearNamedBufferSubData(uint  buffer, uint /*InternalFormat*/  internalformat, IntPtr  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearNamedBufferSubDataPtr?.Invoke(buffer, internalformat, offset, size, format, type, data);
        public static void ClearNamedBufferSubDataEXT(uint  buffer, uint  internalformat, IntPtr /*BufferSize*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearNamedBufferSubDataEXTPtr?.Invoke(buffer, internalformat, offset, size, format, type, data);
        public static void ClearNamedFramebufferfi(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float  depth, int  stencil) => ClearNamedFramebufferfiPtr?.Invoke(framebuffer, buffer, drawbuffer, depth, stencil);
        public static void ClearNamedFramebufferfv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float[]  value) => ClearNamedFramebufferfvPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        public static void ClearNamedFramebufferiv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, int[]  value) => ClearNamedFramebufferivPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        public static void ClearNamedFramebufferuiv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, uint[]  value) => ClearNamedFramebufferuivPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        public static void ClearPixelLocalStorageuiEXT(uint  offset, uint  n, uint[]  values) => ClearPixelLocalStorageuiEXTPtr?.Invoke(offset, n, values);
        public static void ClearStencil(int /*StencilValue*/  s) => ClearStencilPtr?.Invoke(s);
        public static void ClearTexImage(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearTexImagePtr?.Invoke(texture, level, format, type, data);
        public static void ClearTexImageEXT(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearTexImageEXTPtr?.Invoke(texture, level, format, type, data);
        public static void ClearTexSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearTexSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        public static void ClearTexSubImageEXT(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ClearTexSubImageEXTPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        public static void ClientActiveTexture(uint /*TextureUnit*/  texture) => ClientActiveTexturePtr?.Invoke(texture);
        public static void ClientActiveTextureARB(uint /*TextureUnit*/  texture) => ClientActiveTextureARBPtr?.Invoke(texture);
        public static void ClientActiveVertexStreamATI(uint /*VertexStreamATI*/  stream) => ClientActiveVertexStreamATIPtr?.Invoke(stream);
        public static void ClientAttribDefaultEXT(uint /*ClientAttribMask*/  mask) => ClientAttribDefaultEXTPtr?.Invoke(mask);
        public static void ClientWaitSemaphoreui64NVX(uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => ClientWaitSemaphoreui64NVXPtr?.Invoke(fenceObjectCount, semaphoreArray, fenceValueArray);
        public static uint /*SyncStatus*/ ClientWaitSync(IntPtr /*sync*/  sync, uint /*SyncObjectMask*/  flags, ulong  timeout) => ClientWaitSyncPtr?.Invoke(sync, flags, timeout) ?? default;
        public static uint /*SyncStatus*/ ClientWaitSyncAPPLE(IntPtr  sync, uint /*SyncObjectMask*/  flags, ulong  timeout) => ClientWaitSyncAPPLEPtr?.Invoke(sync, flags, timeout) ?? default;
        public static void ClipControl(uint /*ClipControlOrigin*/  origin, uint /*ClipControlDepth*/  depth) => ClipControlPtr?.Invoke(origin, depth);
        public static void ClipControlEXT(uint  origin, uint  depth) => ClipControlEXTPtr?.Invoke(origin, depth);
        public static void ClipPlane(uint /*ClipPlaneName*/  plane, double[]  equation) => ClipPlanePtr?.Invoke(plane, equation);
        public static void ClipPlanef(uint /*ClipPlaneName*/  p, float[]  eqn) => ClipPlanefPtr?.Invoke(p, eqn);
        public static void ClipPlanefIMG(uint /*ClipPlaneName*/  p, float[]  eqn) => ClipPlanefIMGPtr?.Invoke(p, eqn);
        public static void ClipPlanefOES(uint /*ClipPlaneName*/  plane, float[]  equation) => ClipPlanefOESPtr?.Invoke(plane, equation);
        public static void ClipPlanex(uint /*ClipPlaneName*/  plane, int[]  equation) => ClipPlanexPtr?.Invoke(plane, equation);
        public static void ClipPlanexIMG(uint /*ClipPlaneName*/  p, int[]  eqn) => ClipPlanexIMGPtr?.Invoke(p, eqn);
        public static void ClipPlanexOES(uint /*ClipPlaneName*/  plane, int[]  equation) => ClipPlanexOESPtr?.Invoke(plane, equation);
        public static void Color3b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => Color3bPtr?.Invoke(red, green, blue);
        public static void Color3bv(sbyte[] /*ColorB*/  v) => Color3bvPtr?.Invoke(v);
        public static void Color3d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => Color3dPtr?.Invoke(red, green, blue);
        public static void Color3dv(double[] /*ColorD*/  v) => Color3dvPtr?.Invoke(v);
        public static void Color3f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => Color3fPtr?.Invoke(red, green, blue);
        public static void Color3fVertex3fSUN(float  r, float  g, float  b, float  x, float  y, float  z) => Color3fVertex3fSUNPtr?.Invoke(r, g, b, x, y, z);
        public static void Color3fVertex3fvSUN(float[]  c, float[]  v) => Color3fVertex3fvSUNPtr?.Invoke(c, v);
        public static void Color3fv(float[] /*ColorF*/  v) => Color3fvPtr?.Invoke(v);
        public static void Color3hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue) => Color3hNVPtr?.Invoke(red, green, blue);
        public static void Color3hvNV(ushort[] /*Half16NV*/  v) => Color3hvNVPtr?.Invoke(v);
        public static void Color3i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => Color3iPtr?.Invoke(red, green, blue);
        public static void Color3iv(int[] /*ColorI*/  v) => Color3ivPtr?.Invoke(v);
        public static void Color3s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => Color3sPtr?.Invoke(red, green, blue);
        public static void Color3sv(short[] /*ColorS*/  v) => Color3svPtr?.Invoke(v);
        public static void Color3ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => Color3ubPtr?.Invoke(red, green, blue);
        public static void Color3ubv(byte[] /*ColorUB*/  v) => Color3ubvPtr?.Invoke(v);
        public static void Color3ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => Color3uiPtr?.Invoke(red, green, blue);
        public static void Color3uiv(uint[] /*ColorUI*/  v) => Color3uivPtr?.Invoke(v);
        public static void Color3us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => Color3usPtr?.Invoke(red, green, blue);
        public static void Color3usv(ushort[] /*ColorUS*/  v) => Color3usvPtr?.Invoke(v);
        public static void Color3xOES(int  red, int  green, int  blue) => Color3xOESPtr?.Invoke(red, green, blue);
        public static void Color3xvOES(int[]  components) => Color3xvOESPtr?.Invoke(components);
        public static void Color4b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue, sbyte /*ColorB*/  alpha) => Color4bPtr?.Invoke(red, green, blue, alpha);
        public static void Color4bv(sbyte[] /*ColorB*/  v) => Color4bvPtr?.Invoke(v);
        public static void Color4d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue, double /*ColorD*/  alpha) => Color4dPtr?.Invoke(red, green, blue, alpha);
        public static void Color4dv(double[] /*ColorD*/  v) => Color4dvPtr?.Invoke(v);
        public static void Color4f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => Color4fPtr?.Invoke(red, green, blue, alpha);
        public static void Color4fNormal3fVertex3fSUN(float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => Color4fNormal3fVertex3fSUNPtr?.Invoke(r, g, b, a, nx, ny, nz, x, y, z);
        public static void Color4fNormal3fVertex3fvSUN(float[]  c, float[]  n, float[]  v) => Color4fNormal3fVertex3fvSUNPtr?.Invoke(c, n, v);
        public static void Color4fv(float[] /*ColorF*/  v) => Color4fvPtr?.Invoke(v);
        public static void Color4hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue, ushort /*Half16NV*/  alpha) => Color4hNVPtr?.Invoke(red, green, blue, alpha);
        public static void Color4hvNV(ushort[] /*Half16NV*/  v) => Color4hvNVPtr?.Invoke(v);
        public static void Color4i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue, int /*ColorI*/  alpha) => Color4iPtr?.Invoke(red, green, blue, alpha);
        public static void Color4iv(int[] /*ColorI*/  v) => Color4ivPtr?.Invoke(v);
        public static void Color4s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue, short /*ColorS*/  alpha) => Color4sPtr?.Invoke(red, green, blue, alpha);
        public static void Color4sv(short[] /*ColorS*/  v) => Color4svPtr?.Invoke(v);
        public static void Color4ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue, byte /*ColorUB*/  alpha) => Color4ubPtr?.Invoke(red, green, blue, alpha);
        public static void Color4ubVertex2fSUN(byte  r, byte  g, byte  b, byte  a, float  x, float  y) => Color4ubVertex2fSUNPtr?.Invoke(r, g, b, a, x, y);
        public static void Color4ubVertex2fvSUN(byte[]  c, float[]  v) => Color4ubVertex2fvSUNPtr?.Invoke(c, v);
        public static void Color4ubVertex3fSUN(byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => Color4ubVertex3fSUNPtr?.Invoke(r, g, b, a, x, y, z);
        public static void Color4ubVertex3fvSUN(byte[]  c, float[]  v) => Color4ubVertex3fvSUNPtr?.Invoke(c, v);
        public static void Color4ubv(byte[] /*ColorUB*/  v) => Color4ubvPtr?.Invoke(v);
        public static void Color4ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue, uint /*ColorUI*/  alpha) => Color4uiPtr?.Invoke(red, green, blue, alpha);
        public static void Color4uiv(uint[] /*ColorUI*/  v) => Color4uivPtr?.Invoke(v);
        public static void Color4us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue, ushort /*ColorUS*/  alpha) => Color4usPtr?.Invoke(red, green, blue, alpha);
        public static void Color4usv(ushort[] /*ColorUS*/  v) => Color4usvPtr?.Invoke(v);
        public static void Color4x(int  red, int  green, int  blue, int  alpha) => Color4xPtr?.Invoke(red, green, blue, alpha);
        public static void Color4xOES(int  red, int  green, int  blue, int  alpha) => Color4xOESPtr?.Invoke(red, green, blue, alpha);
        public static void Color4xvOES(int[]  components) => Color4xvOESPtr?.Invoke(components);
        public static void ColorFormatNV(int  size, uint  type, uint  stride) => ColorFormatNVPtr?.Invoke(size, type, stride);
        public static void ColorFragmentOp1ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod) => ColorFragmentOp1ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        public static void ColorFragmentOp2ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod) => ColorFragmentOp2ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        public static void ColorFragmentOp3ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod) => ColorFragmentOp3ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        public static void ColorMask(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha) => ColorMaskPtr?.Invoke(red, green, blue, alpha);
        public static void ColorMaskIndexedEXT(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => ColorMaskIndexedEXTPtr?.Invoke(index, r, g, b, a);
        public static void ColorMaski(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => ColorMaskiPtr?.Invoke(index, r, g, b, a);
        public static void ColorMaskiEXT(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => ColorMaskiEXTPtr?.Invoke(index, r, g, b, a);
        public static void ColorMaskiOES(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => ColorMaskiOESPtr?.Invoke(index, r, g, b, a);
        public static void ColorMaterial(uint /*MaterialFace*/  face, uint /*ColorMaterialParameter*/  mode) => ColorMaterialPtr?.Invoke(face, mode);
        public static void ColorP3ui(uint /*ColorPointerType*/  type, uint  color) => ColorP3uiPtr?.Invoke(type, color);
        public static void ColorP3uiv(uint /*ColorPointerType*/  type, uint[]  color) => ColorP3uivPtr?.Invoke(type, color);
        public static void ColorP4ui(uint /*ColorPointerType*/  type, uint  color) => ColorP4uiPtr?.Invoke(type, color);
        public static void ColorP4uiv(uint /*ColorPointerType*/  type, uint[]  color) => ColorP4uivPtr?.Invoke(type, color);
        public static void ColorPointer(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => ColorPointerPtr?.Invoke(size, type, stride, pointer);
        public static void ColorPointerEXT(int  size, uint /*ColorPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => ColorPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        public static void ColorPointerListIBM(int  size, uint /*ColorPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => ColorPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        public static void ColorPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => ColorPointervINTELPtr?.Invoke(size, type, pointer);
        public static void ColorSubTable(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ColorSubTablePtr?.Invoke(target, start, count, format, type, data);
        public static void ColorSubTableEXT(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => ColorSubTableEXTPtr?.Invoke(target, start, count, format, type, data);
        public static void ColorTable(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => ColorTablePtr?.Invoke(target, internalformat, width, format, type, table);
        public static void ColorTableEXT(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => ColorTableEXTPtr?.Invoke(target, internalFormat, width, format, type, table);
        public static void ColorTableParameterfv(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters) => ColorTableParameterfvPtr?.Invoke(target, pname, parameters);
        public static void ColorTableParameterfvSGI(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters) => ColorTableParameterfvSGIPtr?.Invoke(target, pname, parameters);
        public static void ColorTableParameteriv(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters) => ColorTableParameterivPtr?.Invoke(target, pname, parameters);
        public static void ColorTableParameterivSGI(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters) => ColorTableParameterivSGIPtr?.Invoke(target, pname, parameters);
        public static void ColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => ColorTableSGIPtr?.Invoke(target, internalformat, width, format, type, table);
        public static void CombinerInputNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage) => CombinerInputNVPtr?.Invoke(stage, portion, variable, input, mapping, componentUsage);
        public static void CombinerOutputNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerRegisterNV*/  abOutput, uint /*CombinerRegisterNV*/  cdOutput, uint /*CombinerRegisterNV*/  sumOutput, uint /*CombinerScaleNV*/  scale, uint /*CombinerBiasNV*/  bias, bool /*Boolean*/  abDotProduct, bool /*Boolean*/  cdDotProduct, bool /*Boolean*/  muxSum) => CombinerOutputNVPtr?.Invoke(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        public static void CombinerParameterfNV(uint /*CombinerParameterNV*/  pname, float  param) => CombinerParameterfNVPtr?.Invoke(pname, param);
        public static void CombinerParameterfvNV(uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => CombinerParameterfvNVPtr?.Invoke(pname, parameters);
        public static void CombinerParameteriNV(uint /*CombinerParameterNV*/  pname, int  param) => CombinerParameteriNVPtr?.Invoke(pname, param);
        public static void CombinerParameterivNV(uint /*CombinerParameterNV*/  pname, int[] /*CheckedInt32*/  parameters) => CombinerParameterivNVPtr?.Invoke(pname, parameters);
        public static void CombinerStageParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => CombinerStageParameterfvNVPtr?.Invoke(stage, pname, parameters);
        public static void CommandListSegmentsNV(uint  list, uint  segments) => CommandListSegmentsNVPtr?.Invoke(list, segments);
        public static void CompileCommandListNV(uint  list) => CompileCommandListNVPtr?.Invoke(list);
        public static void CompileShader(uint  shader) => CompileShaderPtr?.Invoke(shader);
        public static void CompileShaderARB(IntPtr /*handleARB*/  shaderObj) => CompileShaderARBPtr?.Invoke(shaderObj);
        public static void CompileShaderIncludeARB(uint  shader, uint  count, string  path, int[]  length) => CompileShaderIncludeARBPtr?.Invoke(shader, count, path, length);
        public static void CompressedMultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedMultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, width, border, imageSize, bits);
        public static void CompressedMultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedMultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        public static void CompressedMultiTexImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedMultiTexImage3DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        public static void CompressedMultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedMultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, width, format, imageSize, bits);
        public static void CompressedMultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedMultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        public static void CompressedMultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedMultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        public static void CompressedTexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage1DPtr?.Invoke(target, level, internalformat, width, border, imageSize, data);
        public static void CompressedTexImage1DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage1DARBPtr?.Invoke(target, level, internalformat, width, border, imageSize, data);
        public static void CompressedTexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage2DPtr?.Invoke(target, level, internalformat, width, height, border, imageSize, data);
        public static void CompressedTexImage2DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage2DARBPtr?.Invoke(target, level, internalformat, width, height, border, imageSize, data);
        public static void CompressedTexImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage3DPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        public static void CompressedTexImage3DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexImage3DARBPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        public static void CompressedTexImage3DOES(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint  imageSize, IntPtr  data) => CompressedTexImage3DOESPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        public static void CompressedTexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage1DPtr?.Invoke(target, level, xoffset, width, format, imageSize, data);
        public static void CompressedTexSubImage1DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage1DARBPtr?.Invoke(target, level, xoffset, width, format, imageSize, data);
        public static void CompressedTexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        public static void CompressedTexSubImage2DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage2DARBPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        public static void CompressedTexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public static void CompressedTexSubImage3DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => CompressedTexSubImage3DARBPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public static void CompressedTexSubImage3DOES(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => CompressedTexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public static void CompressedTextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedTextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, width, border, imageSize, bits);
        public static void CompressedTextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedTextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, border, imageSize, bits);
        public static void CompressedTextureImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => CompressedTextureImage3DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        public static void CompressedTextureSubImage1D(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => CompressedTextureSubImage1DPtr?.Invoke(texture, level, xoffset, width, format, imageSize, data);
        public static void CompressedTextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedTextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, width, format, imageSize, bits);
        public static void CompressedTextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => CompressedTextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        public static void CompressedTextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedTextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        public static void CompressedTextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => CompressedTextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        public static void CompressedTextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => CompressedTextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        public static void ConservativeRasterParameterfNV(uint  pname, float  value) => ConservativeRasterParameterfNVPtr?.Invoke(pname, value);
        public static void ConservativeRasterParameteriNV(uint  pname, int  param) => ConservativeRasterParameteriNVPtr?.Invoke(pname, param);
        public static void ConvolutionFilter1D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => ConvolutionFilter1DPtr?.Invoke(target, internalformat, width, format, type, image);
        public static void ConvolutionFilter1DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => ConvolutionFilter1DEXTPtr?.Invoke(target, internalformat, width, format, type, image);
        public static void ConvolutionFilter2D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => ConvolutionFilter2DPtr?.Invoke(target, internalformat, width, height, format, type, image);
        public static void ConvolutionFilter2DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => ConvolutionFilter2DEXTPtr?.Invoke(target, internalformat, width, height, format, type, image);
        public static void ConvolutionParameterf(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters) => ConvolutionParameterfPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameterfEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters) => ConvolutionParameterfEXTPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameterfv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters) => ConvolutionParameterfvPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameterfvEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters) => ConvolutionParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameteri(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters) => ConvolutionParameteriPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameteriEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters) => ConvolutionParameteriEXTPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameteriv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters) => ConvolutionParameterivPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameterivEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters) => ConvolutionParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void ConvolutionParameterxOES(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int  param) => ConvolutionParameterxOESPtr?.Invoke(target, pname, param);
        public static void ConvolutionParameterxvOES(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => ConvolutionParameterxvOESPtr?.Invoke(target, pname, parameters);
        public static void CopyBufferSubData(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size) => CopyBufferSubDataPtr?.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);
        public static void CopyBufferSubDataNV(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size) => CopyBufferSubDataNVPtr?.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);
        public static void CopyColorSubTable(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyColorSubTablePtr?.Invoke(target, start, x, y, width);
        public static void CopyColorSubTableEXT(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyColorSubTableEXTPtr?.Invoke(target, start, x, y, width);
        public static void CopyColorTable(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyColorTablePtr?.Invoke(target, internalformat, x, y, width);
        public static void CopyColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyColorTableSGIPtr?.Invoke(target, internalformat, x, y, width);
        public static void CopyConvolutionFilter1D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyConvolutionFilter1DPtr?.Invoke(target, internalformat, x, y, width);
        public static void CopyConvolutionFilter1DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyConvolutionFilter1DEXTPtr?.Invoke(target, internalformat, x, y, width);
        public static void CopyConvolutionFilter2D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyConvolutionFilter2DPtr?.Invoke(target, internalformat, x, y, width, height);
        public static void CopyConvolutionFilter2DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyConvolutionFilter2DEXTPtr?.Invoke(target, internalformat, x, y, width, height);
        public static void CopyImageSubData(uint  srcName, uint /*CopyImageSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyImageSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => CopyImageSubDataPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public static void CopyImageSubDataEXT(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => CopyImageSubDataEXTPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public static void CopyImageSubDataNV(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth) => CopyImageSubDataNVPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        public static void CopyImageSubDataOES(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => CopyImageSubDataOESPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public static void CopyMultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => CopyMultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, x, y, width, border);
        public static void CopyMultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => CopyMultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, x, y, width, height, border);
        public static void CopyMultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyMultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, x, y, width);
        public static void CopyMultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyMultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, x, y, width, height);
        public static void CopyMultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyMultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CopyNamedBufferSubData(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr /*BufferSize*/  size) => CopyNamedBufferSubDataPtr?.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);
        public static void CopyPathNV(uint /*Path*/  resultPath, uint /*Path*/  srcPath) => CopyPathNVPtr?.Invoke(resultPath, srcPath);
        public static void CopyPixels(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelCopyType*/  type) => CopyPixelsPtr?.Invoke(x, y, width, height, type);
        public static void CopyTexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => CopyTexImage1DPtr?.Invoke(target, level, internalformat, x, y, width, border);
        public static void CopyTexImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => CopyTexImage1DEXTPtr?.Invoke(target, level, internalformat, x, y, width, border);
        public static void CopyTexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => CopyTexImage2DPtr?.Invoke(target, level, internalformat, x, y, width, height, border);
        public static void CopyTexImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => CopyTexImage2DEXTPtr?.Invoke(target, level, internalformat, x, y, width, height, border);
        public static void CopyTexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyTexSubImage1DPtr?.Invoke(target, level, xoffset, x, y, width);
        public static void CopyTexSubImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyTexSubImage1DEXTPtr?.Invoke(target, level, xoffset, x, y, width);
        public static void CopyTexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, x, y, width, height);
        public static void CopyTexSubImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTexSubImage2DEXTPtr?.Invoke(target, level, xoffset, yoffset, x, y, width, height);
        public static void CopyTexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CopyTexSubImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTexSubImage3DEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CopyTexSubImage3DOES(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height) => CopyTexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CopyTextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => CopyTextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, x, y, width, border);
        public static void CopyTextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => CopyTextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, x, y, width, height, border);
        public static void CopyTextureLevelsAPPLE(uint  destinationTexture, uint  sourceTexture, int  sourceBaseLevel, uint  sourceLevelCount) => CopyTextureLevelsAPPLEPtr?.Invoke(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        public static void CopyTextureSubImage1D(uint  texture, int  level, int  xoffset, int  x, int  y, uint  width) => CopyTextureSubImage1DPtr?.Invoke(texture, level, xoffset, x, y, width);
        public static void CopyTextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => CopyTextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, x, y, width);
        public static void CopyTextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, int  x, int  y, uint  width, uint  height) => CopyTextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, x, y, width, height);
        public static void CopyTextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, x, y, width, height);
        public static void CopyTextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height) => CopyTextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CopyTextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => CopyTextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        public static void CoverFillPathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues) => CoverFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        public static void CoverFillPathNV(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode) => CoverFillPathNVPtr?.Invoke(path, coverMode);
        public static void CoverStrokePathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues) => CoverStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        public static void CoverStrokePathNV(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode) => CoverStrokePathNVPtr?.Invoke(path, coverMode);
        public static void CoverageMaskNV(bool /*Boolean*/  mask) => CoverageMaskNVPtr?.Invoke(mask);
        public static void CoverageModulationNV(uint  components) => CoverageModulationNVPtr?.Invoke(components);
        public static void CoverageModulationTableNV(uint  n, float[]  v) => CoverageModulationTableNVPtr?.Invoke(n, v);
        public static void CoverageOperationNV(uint  operation) => CoverageOperationNVPtr?.Invoke(operation);
        public static void CreateBuffers(uint  n, uint[]  buffers) => CreateBuffersPtr?.Invoke(n, buffers);
        public static void CreateCommandListsNV(uint  n, uint[]  lists) => CreateCommandListsNVPtr?.Invoke(n, lists);
        public static void CreateFramebuffers(uint  n, uint[]  framebuffers) => CreateFramebuffersPtr?.Invoke(n, framebuffers);
        public static void CreateMemoryObjectsEXT(uint  n, uint[]  memoryObjects) => CreateMemoryObjectsEXTPtr?.Invoke(n, memoryObjects);
        public static void CreatePerfQueryINTEL(uint  queryId, uint[]  queryHandle) => CreatePerfQueryINTELPtr?.Invoke(queryId, queryHandle);
        public static uint CreateProgram() => CreateProgramPtr?.Invoke() ?? default;
        public static IntPtr /*handleARB*/ CreateProgramObjectARB() => CreateProgramObjectARBPtr?.Invoke() ?? default;
        public static void CreateProgramPipelines(uint  n, uint[]  pipelines) => CreateProgramPipelinesPtr?.Invoke(n, pipelines);
        public static uint CreateProgressFenceNVX() => CreateProgressFenceNVXPtr?.Invoke() ?? default;
        public static void CreateQueries(uint /*QueryTarget*/  target, uint  n, uint[]  ids) => CreateQueriesPtr?.Invoke(target, n, ids);
        public static void CreateRenderbuffers(uint  n, uint[]  renderbuffers) => CreateRenderbuffersPtr?.Invoke(n, renderbuffers);
        public static void CreateSamplers(uint  n, uint[]  samplers) => CreateSamplersPtr?.Invoke(n, samplers);
        public static uint CreateShader(uint /*ShaderType*/  type) => CreateShaderPtr?.Invoke(type) ?? default;
        public static IntPtr /*handleARB*/ CreateShaderObjectARB(uint /*ShaderType*/  shaderType) => CreateShaderObjectARBPtr?.Invoke(shaderType) ?? default;
        public static uint CreateShaderProgramEXT(uint /*ShaderType*/  type, string  str) => CreateShaderProgramEXTPtr?.Invoke(type, str) ?? default;
        public static uint CreateShaderProgramv(uint /*ShaderType*/  type, uint  count, string  strings) => CreateShaderProgramvPtr?.Invoke(type, count, strings) ?? default;
        public static uint CreateShaderProgramvEXT(uint /*ShaderType*/  type, uint  count, string  strings) => CreateShaderProgramvEXTPtr?.Invoke(type, count, strings) ?? default;
        public static void CreateStatesNV(uint  n, uint[]  states) => CreateStatesNVPtr?.Invoke(n, states);
        public static IntPtr /*sync*/ CreateSyncFromCLeventARB(IntPtr /*cl_context*/  context, IntPtr /*cl_event*/  evnt, uint  flags) => CreateSyncFromCLeventARBPtr?.Invoke(context, evnt, flags) ?? default;
        public static void CreateTextures(uint /*TextureTarget*/  target, uint  n, uint[]  textures) => CreateTexturesPtr?.Invoke(target, n, textures);
        public static void CreateTransformFeedbacks(uint  n, uint[]  ids) => CreateTransformFeedbacksPtr?.Invoke(n, ids);
        public static void CreateVertexArrays(uint  n, uint[]  arrays) => CreateVertexArraysPtr?.Invoke(n, arrays);
        public static void CullFace(uint /*CullFaceMode*/  mode) => CullFacePtr?.Invoke(mode);
        public static void CullParameterdvEXT(uint /*CullParameterEXT*/  pname, double[]  parameters) => CullParameterdvEXTPtr?.Invoke(pname, parameters);
        public static void CullParameterfvEXT(uint /*CullParameterEXT*/  pname, float[]  parameters) => CullParameterfvEXTPtr?.Invoke(pname, parameters);
        public static void CurrentPaletteMatrixARB(int  index) => CurrentPaletteMatrixARBPtr?.Invoke(index);
        public static void CurrentPaletteMatrixOES(uint  matrixpaletteindex) => CurrentPaletteMatrixOESPtr?.Invoke(matrixpaletteindex);
        public static void DebugMessageCallback(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => DebugMessageCallbackPtr?.Invoke(callback, userParam);
        public static void DebugMessageCallbackAMD(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => DebugMessageCallbackAMDPtr?.Invoke(callback, userParam);
        public static void DebugMessageCallbackARB(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => DebugMessageCallbackARBPtr?.Invoke(callback, userParam);
        public static void DebugMessageCallbackKHR(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => DebugMessageCallbackKHRPtr?.Invoke(callback, userParam);
        public static void DebugMessageControl(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => DebugMessageControlPtr?.Invoke(source, type, severity, count, ids, enabled);
        public static void DebugMessageControlARB(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => DebugMessageControlARBPtr?.Invoke(source, type, severity, count, ids, enabled);
        public static void DebugMessageControlKHR(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => DebugMessageControlKHRPtr?.Invoke(source, type, severity, count, ids, enabled);
        public static void DebugMessageEnableAMD(uint  category, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => DebugMessageEnableAMDPtr?.Invoke(category, severity, count, ids, enabled);
        public static void DebugMessageInsert(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => DebugMessageInsertPtr?.Invoke(source, type, id, severity, length, buf);
        public static void DebugMessageInsertAMD(uint  category, uint /*DebugSeverity*/  severity, uint  id, uint  length, string  buf) => DebugMessageInsertAMDPtr?.Invoke(category, severity, id, length, buf);
        public static void DebugMessageInsertARB(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => DebugMessageInsertARBPtr?.Invoke(source, type, id, severity, length, buf);
        public static void DebugMessageInsertKHR(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => DebugMessageInsertKHRPtr?.Invoke(source, type, id, severity, length, buf);
        public static void DeformSGIX(uint /*FfdMaskSGIX*/  mask) => DeformSGIXPtr?.Invoke(mask);
        public static void DeformationMap3dSGIX(uint /*FfdTargetSGIX*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double /*CoordD*/  w1, double /*CoordD*/  w2, int  wstride, int /*CheckedInt32*/  worder, double[] /*CoordD*/  points) => DeformationMap3dSGIXPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        public static void DeformationMap3fSGIX(uint /*FfdTargetSGIX*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float /*CoordF*/  w1, float /*CoordF*/  w2, int  wstride, int /*CheckedInt32*/  worder, float[] /*CoordF*/  points) => DeformationMap3fSGIXPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        public static void DeleteAsyncMarkersSGIX(uint  marker, uint  range) => DeleteAsyncMarkersSGIXPtr?.Invoke(marker, range);
        public static void DeleteBuffers(uint  n, uint[]  buffers) => DeleteBuffersPtr?.Invoke(n, buffers);
        public static void DeleteBuffersARB(uint  n, uint[]  buffers) => DeleteBuffersARBPtr?.Invoke(n, buffers);
        public static void DeleteCommandListsNV(uint  n, uint[]  lists) => DeleteCommandListsNVPtr?.Invoke(n, lists);
        public static void DeleteFencesAPPLE(uint  n, uint[] /*FenceNV*/  fences) => DeleteFencesAPPLEPtr?.Invoke(n, fences);
        public static void DeleteFencesNV(uint  n, uint[] /*FenceNV*/  fences) => DeleteFencesNVPtr?.Invoke(n, fences);
        public static void DeleteFragmentShaderATI(uint  id) => DeleteFragmentShaderATIPtr?.Invoke(id);
        public static void DeleteFramebuffers(uint  n, uint[]  framebuffers) => DeleteFramebuffersPtr?.Invoke(n, framebuffers);
        public static void DeleteFramebuffersEXT(uint  n, uint[]  framebuffers) => DeleteFramebuffersEXTPtr?.Invoke(n, framebuffers);
        public static void DeleteFramebuffersOES(uint  n, uint[]  framebuffers) => DeleteFramebuffersOESPtr?.Invoke(n, framebuffers);
        public static void DeleteLists(uint /*List*/  list, uint  range) => DeleteListsPtr?.Invoke(list, range);
        public static void DeleteMemoryObjectsEXT(uint  n, uint[]  memoryObjects) => DeleteMemoryObjectsEXTPtr?.Invoke(n, memoryObjects);
        public static void DeleteNamedStringARB(int  namelen, string  name) => DeleteNamedStringARBPtr?.Invoke(namelen, name);
        public static void DeleteNamesAMD(uint  identifier, uint  num, uint[]  names) => DeleteNamesAMDPtr?.Invoke(identifier, num, names);
        public static void DeleteObjectARB(IntPtr /*handleARB*/  obj) => DeleteObjectARBPtr?.Invoke(obj);
        public static void DeleteOcclusionQueriesNV(uint  n, uint[]  ids) => DeleteOcclusionQueriesNVPtr?.Invoke(n, ids);
        public static void DeletePathsNV(uint /*Path*/  path, uint  range) => DeletePathsNVPtr?.Invoke(path, range);
        public static void DeletePerfMonitorsAMD(uint  n, uint[]  monitors) => DeletePerfMonitorsAMDPtr?.Invoke(n, monitors);
        public static void DeletePerfQueryINTEL(uint  queryHandle) => DeletePerfQueryINTELPtr?.Invoke(queryHandle);
        public static void DeleteProgram(uint  program) => DeleteProgramPtr?.Invoke(program);
        public static void DeleteProgramPipelines(uint  n, uint[]  pipelines) => DeleteProgramPipelinesPtr?.Invoke(n, pipelines);
        public static void DeleteProgramPipelinesEXT(uint  n, uint[]  pipelines) => DeleteProgramPipelinesEXTPtr?.Invoke(n, pipelines);
        public static void DeleteProgramsARB(uint  n, uint[]  programs) => DeleteProgramsARBPtr?.Invoke(n, programs);
        public static void DeleteProgramsNV(uint  n, uint[]  programs) => DeleteProgramsNVPtr?.Invoke(n, programs);
        public static void DeleteQueries(uint  n, uint[]  ids) => DeleteQueriesPtr?.Invoke(n, ids);
        public static void DeleteQueriesARB(uint  n, uint[]  ids) => DeleteQueriesARBPtr?.Invoke(n, ids);
        public static void DeleteQueriesEXT(uint  n, uint[]  ids) => DeleteQueriesEXTPtr?.Invoke(n, ids);
        public static void DeleteQueryResourceTagNV(uint  n, int[]  tagIds) => DeleteQueryResourceTagNVPtr?.Invoke(n, tagIds);
        public static void DeleteRenderbuffers(uint  n, uint[]  renderbuffers) => DeleteRenderbuffersPtr?.Invoke(n, renderbuffers);
        public static void DeleteRenderbuffersEXT(uint  n, uint[]  renderbuffers) => DeleteRenderbuffersEXTPtr?.Invoke(n, renderbuffers);
        public static void DeleteRenderbuffersOES(uint  n, uint[]  renderbuffers) => DeleteRenderbuffersOESPtr?.Invoke(n, renderbuffers);
        public static void DeleteSamplers(uint  count, uint[]  samplers) => DeleteSamplersPtr?.Invoke(count, samplers);
        public static void DeleteSemaphoresEXT(uint  n, uint[]  semaphores) => DeleteSemaphoresEXTPtr?.Invoke(n, semaphores);
        public static void DeleteShader(uint  shader) => DeleteShaderPtr?.Invoke(shader);
        public static void DeleteStatesNV(uint  n, uint[]  states) => DeleteStatesNVPtr?.Invoke(n, states);
        public static void DeleteSync(IntPtr /*sync*/  sync) => DeleteSyncPtr?.Invoke(sync);
        public static void DeleteSyncAPPLE(IntPtr  sync) => DeleteSyncAPPLEPtr?.Invoke(sync);
        public static void DeleteTextures(uint  n, uint[] /*Texture*/  textures) => DeleteTexturesPtr?.Invoke(n, textures);
        public static void DeleteTexturesEXT(uint  n, uint[] /*Texture*/  textures) => DeleteTexturesEXTPtr?.Invoke(n, textures);
        public static void DeleteTransformFeedbacks(uint  n, uint[]  ids) => DeleteTransformFeedbacksPtr?.Invoke(n, ids);
        public static void DeleteTransformFeedbacksNV(uint  n, uint[]  ids) => DeleteTransformFeedbacksNVPtr?.Invoke(n, ids);
        public static void DeleteVertexArrays(uint  n, uint[]  arrays) => DeleteVertexArraysPtr?.Invoke(n, arrays);
        public static void DeleteVertexArraysAPPLE(uint  n, uint[]  arrays) => DeleteVertexArraysAPPLEPtr?.Invoke(n, arrays);
        public static void DeleteVertexArraysOES(uint  n, uint[]  arrays) => DeleteVertexArraysOESPtr?.Invoke(n, arrays);
        public static void DeleteVertexShaderEXT(uint  id) => DeleteVertexShaderEXTPtr?.Invoke(id);
        public static void DepthBoundsEXT(double /*ClampedFloat64*/  zmin, double /*ClampedFloat64*/  zmax) => DepthBoundsEXTPtr?.Invoke(zmin, zmax);
        public static void DepthBoundsdNV(double  zmin, double  zmax) => DepthBoundsdNVPtr?.Invoke(zmin, zmax);
        public static void DepthFunc(uint /*DepthFunction*/  func) => DepthFuncPtr?.Invoke(func);
        public static void DepthMask(bool /*Boolean*/  flag) => DepthMaskPtr?.Invoke(flag);
        public static void DepthRange(double  n, double  f) => DepthRangePtr?.Invoke(n, f);
        public static void DepthRangeArraydvNV(uint  first, uint  count, double[]  v) => DepthRangeArraydvNVPtr?.Invoke(first, count, v);
        public static void DepthRangeArrayfvNV(uint  first, uint  count, float[]  v) => DepthRangeArrayfvNVPtr?.Invoke(first, count, v);
        public static void DepthRangeArrayfvOES(uint  first, uint  count, float[]  v) => DepthRangeArrayfvOESPtr?.Invoke(first, count, v);
        public static void DepthRangeArrayv(uint  first, uint  count, double[]  v) => DepthRangeArrayvPtr?.Invoke(first, count, v);
        public static void DepthRangeIndexed(uint  index, double  n, double  f) => DepthRangeIndexedPtr?.Invoke(index, n, f);
        public static void DepthRangeIndexeddNV(uint  index, double  n, double  f) => DepthRangeIndexeddNVPtr?.Invoke(index, n, f);
        public static void DepthRangeIndexedfNV(uint  index, float  n, float  f) => DepthRangeIndexedfNVPtr?.Invoke(index, n, f);
        public static void DepthRangeIndexedfOES(uint  index, float  n, float  f) => DepthRangeIndexedfOESPtr?.Invoke(index, n, f);
        public static void DepthRangedNV(double  zNear, double  zFar) => DepthRangedNVPtr?.Invoke(zNear, zFar);
        public static void DepthRangef(float  n, float  f) => DepthRangefPtr?.Invoke(n, f);
        public static void DepthRangefOES(float /*ClampedFloat32*/  n, float /*ClampedFloat32*/  f) => DepthRangefOESPtr?.Invoke(n, f);
        public static void DepthRangex(int  n, int  f) => DepthRangexPtr?.Invoke(n, f);
        public static void DepthRangexOES(int /*ClampedFixed*/  n, int /*ClampedFixed*/  f) => DepthRangexOESPtr?.Invoke(n, f);
        public static void DetachObjectARB(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  attachedObj) => DetachObjectARBPtr?.Invoke(containerObj, attachedObj);
        public static void DetachShader(uint  program, uint  shader) => DetachShaderPtr?.Invoke(program, shader);
        public static void DetailTexFuncSGIS(uint /*TextureTarget*/  target, uint  n, float[]  points) => DetailTexFuncSGISPtr?.Invoke(target, n, points);
        public static void Disable(uint /*EnableCap*/  cap) => DisablePtr?.Invoke(cap);
        public static void DisableClientState(uint /*EnableCap*/  array) => DisableClientStatePtr?.Invoke(array);
        public static void DisableClientStateIndexedEXT(uint /*EnableCap*/  array, uint  index) => DisableClientStateIndexedEXTPtr?.Invoke(array, index);
        public static void DisableClientStateiEXT(uint /*EnableCap*/  array, uint  index) => DisableClientStateiEXTPtr?.Invoke(array, index);
        public static void DisableDriverControlQCOM(uint  driverControl) => DisableDriverControlQCOMPtr?.Invoke(driverControl);
        public static void DisableIndexedEXT(uint /*EnableCap*/  target, uint  index) => DisableIndexedEXTPtr?.Invoke(target, index);
        public static void DisableVariantClientStateEXT(uint  id) => DisableVariantClientStateEXTPtr?.Invoke(id);
        public static void DisableVertexArrayAttrib(uint  vaobj, uint  index) => DisableVertexArrayAttribPtr?.Invoke(vaobj, index);
        public static void DisableVertexArrayAttribEXT(uint  vaobj, uint  index) => DisableVertexArrayAttribEXTPtr?.Invoke(vaobj, index);
        public static void DisableVertexArrayEXT(uint  vaobj, uint /*EnableCap*/  array) => DisableVertexArrayEXTPtr?.Invoke(vaobj, array);
        public static void DisableVertexAttribAPPLE(uint  index, uint  pname) => DisableVertexAttribAPPLEPtr?.Invoke(index, pname);
        public static void DisableVertexAttribArray(uint  index) => DisableVertexAttribArrayPtr?.Invoke(index);
        public static void DisableVertexAttribArrayARB(uint  index) => DisableVertexAttribArrayARBPtr?.Invoke(index);
        public static void Disablei(uint /*EnableCap*/  target, uint  index) => DisableiPtr?.Invoke(target, index);
        public static void DisableiEXT(uint /*EnableCap*/  target, uint  index) => DisableiEXTPtr?.Invoke(target, index);
        public static void DisableiNV(uint /*EnableCap*/  target, uint  index) => DisableiNVPtr?.Invoke(target, index);
        public static void DisableiOES(uint /*EnableCap*/  target, uint  index) => DisableiOESPtr?.Invoke(target, index);
        public static void DiscardFramebufferEXT(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments) => DiscardFramebufferEXTPtr?.Invoke(target, numAttachments, attachments);
        public static void DispatchCompute(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z) => DispatchComputePtr?.Invoke(num_groups_x, num_groups_y, num_groups_z);
        public static void DispatchComputeGroupSizeARB(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z, uint  group_size_x, uint  group_size_y, uint  group_size_z) => DispatchComputeGroupSizeARBPtr?.Invoke(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        public static void DispatchComputeIndirect(IntPtr /*BufferOffset*/  indirect) => DispatchComputeIndirectPtr?.Invoke(indirect);
        public static void DrawArrays(uint /*PrimitiveType*/  mode, int  first, uint  count) => DrawArraysPtr?.Invoke(mode, first, count);
        public static void DrawArraysEXT(uint /*PrimitiveType*/  mode, int  first, uint  count) => DrawArraysEXTPtr?.Invoke(mode, first, count);
        public static void DrawArraysIndirect(uint /*PrimitiveType*/  mode, IntPtr  indirect) => DrawArraysIndirectPtr?.Invoke(mode, indirect);
        public static void DrawArraysInstanced(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount) => DrawArraysInstancedPtr?.Invoke(mode, first, count, instancecount);
        public static void DrawArraysInstancedANGLE(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => DrawArraysInstancedANGLEPtr?.Invoke(mode, first, count, primcount);
        public static void DrawArraysInstancedARB(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => DrawArraysInstancedARBPtr?.Invoke(mode, first, count, primcount);
        public static void DrawArraysInstancedBaseInstance(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance) => DrawArraysInstancedBaseInstancePtr?.Invoke(mode, first, count, instancecount, baseinstance);
        public static void DrawArraysInstancedBaseInstanceEXT(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance) => DrawArraysInstancedBaseInstanceEXTPtr?.Invoke(mode, first, count, instancecount, baseinstance);
        public static void DrawArraysInstancedEXT(uint /*PrimitiveType*/  mode, int  start, uint  count, uint  primcount) => DrawArraysInstancedEXTPtr?.Invoke(mode, start, count, primcount);
        public static void DrawArraysInstancedNV(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => DrawArraysInstancedNVPtr?.Invoke(mode, first, count, primcount);
        public static void DrawBuffer(uint /*DrawBufferMode*/  buf) => DrawBufferPtr?.Invoke(buf);
        public static void DrawBuffers(uint  n, uint[] /*DrawBufferMode*/  bufs) => DrawBuffersPtr?.Invoke(n, bufs);
        public static void DrawBuffersARB(uint  n, uint[] /*DrawBufferMode*/  bufs) => DrawBuffersARBPtr?.Invoke(n, bufs);
        public static void DrawBuffersATI(uint  n, uint[] /*DrawBufferMode*/  bufs) => DrawBuffersATIPtr?.Invoke(n, bufs);
        public static void DrawBuffersEXT(uint  n, uint[]  bufs) => DrawBuffersEXTPtr?.Invoke(n, bufs);
        public static void DrawBuffersIndexedEXT(int  n, uint[]  location, int[]  indices) => DrawBuffersIndexedEXTPtr?.Invoke(n, location, indices);
        public static void DrawBuffersNV(uint  n, uint[]  bufs) => DrawBuffersNVPtr?.Invoke(n, bufs);
        public static void DrawCommandsAddressNV(uint  primitiveMode, ulong[]  indirects, uint[]  sizes, uint  count) => DrawCommandsAddressNVPtr?.Invoke(primitiveMode, indirects, sizes, count);
        public static void DrawCommandsNV(uint  primitiveMode, uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint  count) => DrawCommandsNVPtr?.Invoke(primitiveMode, buffer, indirects, sizes, count);
        public static void DrawCommandsStatesAddressNV(ulong[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => DrawCommandsStatesAddressNVPtr?.Invoke(indirects, sizes, states, fbos, count);
        public static void DrawCommandsStatesNV(uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => DrawCommandsStatesNVPtr?.Invoke(buffer, indirects, sizes, states, fbos, count);
        public static void DrawElementArrayAPPLE(uint /*PrimitiveType*/  mode, int  first, uint  count) => DrawElementArrayAPPLEPtr?.Invoke(mode, first, count);
        public static void DrawElementArrayATI(uint /*PrimitiveType*/  mode, uint  count) => DrawElementArrayATIPtr?.Invoke(mode, count);
        public static void DrawElements(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => DrawElementsPtr?.Invoke(mode, count, type, indices);
        public static void DrawElementsBaseVertex(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawElementsBaseVertexPtr?.Invoke(mode, count, type, indices, basevertex);
        public static void DrawElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawElementsBaseVertexEXTPtr?.Invoke(mode, count, type, indices, basevertex);
        public static void DrawElementsBaseVertexOES(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawElementsBaseVertexOESPtr?.Invoke(mode, count, type, indices, basevertex);
        public static void DrawElementsIndirect(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect) => DrawElementsIndirectPtr?.Invoke(mode, type, indirect);
        public static void DrawElementsInstanced(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount) => DrawElementsInstancedPtr?.Invoke(mode, count, type, indices, instancecount);
        public static void DrawElementsInstancedANGLE(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount) => DrawElementsInstancedANGLEPtr?.Invoke(mode, count, type, indices, primcount);
        public static void DrawElementsInstancedARB(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => DrawElementsInstancedARBPtr?.Invoke(mode, count, type, indices, primcount);
        public static void DrawElementsInstancedBaseInstance(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance) => DrawElementsInstancedBaseInstancePtr?.Invoke(mode, count, type, indices, instancecount, baseinstance);
        public static void DrawElementsInstancedBaseInstanceEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance) => DrawElementsInstancedBaseInstanceEXTPtr?.Invoke(mode, count, type, indices, instancecount, baseinstance);
        public static void DrawElementsInstancedBaseVertex(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => DrawElementsInstancedBaseVertexPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        public static void DrawElementsInstancedBaseVertexBaseInstance(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance) => DrawElementsInstancedBaseVertexBaseInstancePtr?.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);
        public static void DrawElementsInstancedBaseVertexBaseInstanceEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance) => DrawElementsInstancedBaseVertexBaseInstanceEXTPtr?.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);
        public static void DrawElementsInstancedBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => DrawElementsInstancedBaseVertexEXTPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        public static void DrawElementsInstancedBaseVertexOES(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => DrawElementsInstancedBaseVertexOESPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        public static void DrawElementsInstancedEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => DrawElementsInstancedEXTPtr?.Invoke(mode, count, type, indices, primcount);
        public static void DrawElementsInstancedNV(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount) => DrawElementsInstancedNVPtr?.Invoke(mode, count, type, indices, primcount);
        public static void DrawMeshArraysSUN(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  width) => DrawMeshArraysSUNPtr?.Invoke(mode, first, count, width);
        public static void DrawMeshTasksNV(uint  first, uint  count) => DrawMeshTasksNVPtr?.Invoke(first, count);
        public static void DrawMeshTasksIndirectNV(IntPtr  indirect) => DrawMeshTasksIndirectNVPtr?.Invoke(indirect);
        public static void DrawPixels(uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => DrawPixelsPtr?.Invoke(width, height, format, type, pixels);
        public static void DrawRangeElementArrayAPPLE(uint /*PrimitiveType*/  mode, uint  start, uint  end, int  first, uint  count) => DrawRangeElementArrayAPPLEPtr?.Invoke(mode, start, end, first, count);
        public static void DrawRangeElementArrayATI(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count) => DrawRangeElementArrayATIPtr?.Invoke(mode, start, end, count);
        public static void DrawRangeElements(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => DrawRangeElementsPtr?.Invoke(mode, start, end, count, type, indices);
        public static void DrawRangeElementsBaseVertex(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawRangeElementsBaseVertexPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        public static void DrawRangeElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawRangeElementsBaseVertexEXTPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        public static void DrawRangeElementsBaseVertexOES(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => DrawRangeElementsBaseVertexOESPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        public static void DrawRangeElementsEXT(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => DrawRangeElementsEXTPtr?.Invoke(mode, start, end, count, type, indices);
        public static void DrawTexfOES(float  x, float  y, float  z, float  width, float  height) => DrawTexfOESPtr?.Invoke(x, y, z, width, height);
        public static void DrawTexfvOES(float[]  coords) => DrawTexfvOESPtr?.Invoke(coords);
        public static void DrawTexiOES(int  x, int  y, int  z, int  width, int  height) => DrawTexiOESPtr?.Invoke(x, y, z, width, height);
        public static void DrawTexivOES(int[]  coords) => DrawTexivOESPtr?.Invoke(coords);
        public static void DrawTexsOES(short  x, short  y, short  z, short  width, short  height) => DrawTexsOESPtr?.Invoke(x, y, z, width, height);
        public static void DrawTexsvOES(short[]  coords) => DrawTexsvOESPtr?.Invoke(coords);
        public static void DrawTextureNV(uint  texture, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1) => DrawTextureNVPtr?.Invoke(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        public static void DrawTexxOES(int  x, int  y, int  z, int  width, int  height) => DrawTexxOESPtr?.Invoke(x, y, z, width, height);
        public static void DrawTexxvOES(int[]  coords) => DrawTexxvOESPtr?.Invoke(coords);
        public static void DrawTransformFeedback(uint /*PrimitiveType*/  mode, uint  id) => DrawTransformFeedbackPtr?.Invoke(mode, id);
        public static void DrawTransformFeedbackEXT(uint /*PrimitiveType*/  mode, uint  id) => DrawTransformFeedbackEXTPtr?.Invoke(mode, id);
        public static void DrawTransformFeedbackInstanced(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount) => DrawTransformFeedbackInstancedPtr?.Invoke(mode, id, instancecount);
        public static void DrawTransformFeedbackInstancedEXT(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount) => DrawTransformFeedbackInstancedEXTPtr?.Invoke(mode, id, instancecount);
        public static void DrawTransformFeedbackNV(uint /*PrimitiveType*/  mode, uint  id) => DrawTransformFeedbackNVPtr?.Invoke(mode, id);
        public static void DrawTransformFeedbackStream(uint /*PrimitiveType*/  mode, uint  id, uint  stream) => DrawTransformFeedbackStreamPtr?.Invoke(mode, id, stream);
        public static void DrawTransformFeedbackStreamInstanced(uint /*PrimitiveType*/  mode, uint  id, uint  stream, uint  instancecount) => DrawTransformFeedbackStreamInstancedPtr?.Invoke(mode, id, stream, instancecount);
        public static void EGLImageTargetRenderbufferStorageOES(uint  target, IntPtr /*GLeglImageOES*/  image) => EGLImageTargetRenderbufferStorageOESPtr?.Invoke(target, image);
        public static void EGLImageTargetTexStorageEXT(uint  target, IntPtr /*GLeglImageOES*/  image, int  attrib_list) => EGLImageTargetTexStorageEXTPtr?.Invoke(target, image, attrib_list);
        public static void EGLImageTargetTexture2DOES(uint  target, IntPtr /*GLeglImageOES*/  image) => EGLImageTargetTexture2DOESPtr?.Invoke(target, image);
        public static void EGLImageTargetTextureStorageEXT(uint  texture, IntPtr /*GLeglImageOES*/  image, int  attrib_list) => EGLImageTargetTextureStorageEXTPtr?.Invoke(texture, image, attrib_list);
        public static void EdgeFlag(bool /*Boolean*/  flag) => EdgeFlagPtr?.Invoke(flag);
        public static void EdgeFlagFormatNV(uint  stride) => EdgeFlagFormatNVPtr?.Invoke(stride);
        public static void EdgeFlagPointer(uint  stride, IntPtr  pointer) => EdgeFlagPointerPtr?.Invoke(stride, pointer);
        public static void EdgeFlagPointerEXT(uint  stride, uint  count, bool[] /*Boolean*/  pointer) => EdgeFlagPointerEXTPtr?.Invoke(stride, count, pointer);
        public static void EdgeFlagPointerListIBM(int  stride, bool[] /*BooleanPointer*/  pointer, int  ptrstride) => EdgeFlagPointerListIBMPtr?.Invoke(stride, pointer, ptrstride);
        public static void EdgeFlagv(bool[] /*Boolean*/  flag) => EdgeFlagvPtr?.Invoke(flag);
        public static void ElementPointerAPPLE(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer) => ElementPointerAPPLEPtr?.Invoke(type, pointer);
        public static void ElementPointerATI(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer) => ElementPointerATIPtr?.Invoke(type, pointer);
        public static void Enable(uint /*EnableCap*/  cap) => EnablePtr?.Invoke(cap);
        public static void EnableClientState(uint /*EnableCap*/  array) => EnableClientStatePtr?.Invoke(array);
        public static void EnableClientStateIndexedEXT(uint /*EnableCap*/  array, uint  index) => EnableClientStateIndexedEXTPtr?.Invoke(array, index);
        public static void EnableClientStateiEXT(uint /*EnableCap*/  array, uint  index) => EnableClientStateiEXTPtr?.Invoke(array, index);
        public static void EnableDriverControlQCOM(uint  driverControl) => EnableDriverControlQCOMPtr?.Invoke(driverControl);
        public static void EnableIndexedEXT(uint /*EnableCap*/  target, uint  index) => EnableIndexedEXTPtr?.Invoke(target, index);
        public static void EnableVariantClientStateEXT(uint  id) => EnableVariantClientStateEXTPtr?.Invoke(id);
        public static void EnableVertexArrayAttrib(uint  vaobj, uint  index) => EnableVertexArrayAttribPtr?.Invoke(vaobj, index);
        public static void EnableVertexArrayAttribEXT(uint  vaobj, uint  index) => EnableVertexArrayAttribEXTPtr?.Invoke(vaobj, index);
        public static void EnableVertexArrayEXT(uint  vaobj, uint /*EnableCap*/  array) => EnableVertexArrayEXTPtr?.Invoke(vaobj, array);
        public static void EnableVertexAttribAPPLE(uint  index, uint  pname) => EnableVertexAttribAPPLEPtr?.Invoke(index, pname);
        public static void EnableVertexAttribArray(uint  index) => EnableVertexAttribArrayPtr?.Invoke(index);
        public static void EnableVertexAttribArrayARB(uint  index) => EnableVertexAttribArrayARBPtr?.Invoke(index);
        public static void Enablei(uint /*EnableCap*/  target, uint  index) => EnableiPtr?.Invoke(target, index);
        public static void EnableiEXT(uint /*EnableCap*/  target, uint  index) => EnableiEXTPtr?.Invoke(target, index);
        public static void EnableiNV(uint /*EnableCap*/  target, uint  index) => EnableiNVPtr?.Invoke(target, index);
        public static void EnableiOES(uint /*EnableCap*/  target, uint  index) => EnableiOESPtr?.Invoke(target, index);
        public static void End() => EndPtr?.Invoke();
        public static void EndConditionalRender() => EndConditionalRenderPtr?.Invoke();
        public static void EndConditionalRenderNV() => EndConditionalRenderNVPtr?.Invoke();
        public static void EndConditionalRenderNVX() => EndConditionalRenderNVXPtr?.Invoke();
        public static void EndFragmentShaderATI() => EndFragmentShaderATIPtr?.Invoke();
        public static void EndList() => EndListPtr?.Invoke();
        public static void EndOcclusionQueryNV() => EndOcclusionQueryNVPtr?.Invoke();
        public static void EndPerfMonitorAMD(uint  monitor) => EndPerfMonitorAMDPtr?.Invoke(monitor);
        public static void EndPerfQueryINTEL(uint  queryHandle) => EndPerfQueryINTELPtr?.Invoke(queryHandle);
        public static void EndQuery(uint /*QueryTarget*/  target) => EndQueryPtr?.Invoke(target);
        public static void EndQueryARB(uint /*QueryTarget*/  target) => EndQueryARBPtr?.Invoke(target);
        public static void EndQueryEXT(uint /*QueryTarget*/  target) => EndQueryEXTPtr?.Invoke(target);
        public static void EndQueryIndexed(uint /*QueryTarget*/  target, uint  index) => EndQueryIndexedPtr?.Invoke(target, index);
        public static void EndTilingQCOM(uint /*BufferBitQCOM*/  preserveMask) => EndTilingQCOMPtr?.Invoke(preserveMask);
        public static void EndTransformFeedback() => EndTransformFeedbackPtr?.Invoke();
        public static void EndTransformFeedbackEXT() => EndTransformFeedbackEXTPtr?.Invoke();
        public static void EndTransformFeedbackNV() => EndTransformFeedbackNVPtr?.Invoke();
        public static void EndVertexShaderEXT() => EndVertexShaderEXTPtr?.Invoke();
        public static void EndVideoCaptureNV(uint  video_capture_slot) => EndVideoCaptureNVPtr?.Invoke(video_capture_slot);
        public static void EvalCoord1d(double /*CoordD*/  u) => EvalCoord1dPtr?.Invoke(u);
        public static void EvalCoord1dv(double[] /*CoordD*/  u) => EvalCoord1dvPtr?.Invoke(u);
        public static void EvalCoord1f(float /*CoordF*/  u) => EvalCoord1fPtr?.Invoke(u);
        public static void EvalCoord1fv(float[] /*CoordF*/  u) => EvalCoord1fvPtr?.Invoke(u);
        public static void EvalCoord1xOES(int  u) => EvalCoord1xOESPtr?.Invoke(u);
        public static void EvalCoord1xvOES(int[]  coords) => EvalCoord1xvOESPtr?.Invoke(coords);
        public static void EvalCoord2d(double /*CoordD*/  u, double /*CoordD*/  v) => EvalCoord2dPtr?.Invoke(u, v);
        public static void EvalCoord2dv(double[] /*CoordD*/  u) => EvalCoord2dvPtr?.Invoke(u);
        public static void EvalCoord2f(float /*CoordF*/  u, float /*CoordF*/  v) => EvalCoord2fPtr?.Invoke(u, v);
        public static void EvalCoord2fv(float[] /*CoordF*/  u) => EvalCoord2fvPtr?.Invoke(u);
        public static void EvalCoord2xOES(int  u, int  v) => EvalCoord2xOESPtr?.Invoke(u, v);
        public static void EvalCoord2xvOES(int[]  coords) => EvalCoord2xvOESPtr?.Invoke(coords);
        public static void EvalMapsNV(uint /*EvalTargetNV*/  target, uint /*EvalMapsModeNV*/  mode) => EvalMapsNVPtr?.Invoke(target, mode);
        public static void EvalMesh1(uint /*MeshMode1*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2) => EvalMesh1Ptr?.Invoke(mode, i1, i2);
        public static void EvalMesh2(uint /*MeshMode2*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2, int /*CheckedInt32*/  j1, int /*CheckedInt32*/  j2) => EvalMesh2Ptr?.Invoke(mode, i1, i2, j1, j2);
        public static void EvalPoint1(int  i) => EvalPoint1Ptr?.Invoke(i);
        public static void EvalPoint2(int /*CheckedInt32*/  i, int /*CheckedInt32*/  j) => EvalPoint2Ptr?.Invoke(i, j);
        public static void EvaluateDepthValuesARB() => EvaluateDepthValuesARBPtr?.Invoke();
        public static void ExecuteProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id, float[]  parameters) => ExecuteProgramNVPtr?.Invoke(target, id, parameters);
        public static void ExtGetBufferPointervQCOM(uint  target, IntPtr  parameters) => ExtGetBufferPointervQCOMPtr?.Invoke(target, parameters);
        public static void ExtGetBuffersQCOM(uint[]  buffers, int  maxBuffers, int[]  numBuffers) => ExtGetBuffersQCOMPtr?.Invoke(buffers, maxBuffers, numBuffers);
        public static void ExtGetFramebuffersQCOM(uint[]  framebuffers, int  maxFramebuffers, int[]  numFramebuffers) => ExtGetFramebuffersQCOMPtr?.Invoke(framebuffers, maxFramebuffers, numFramebuffers);
        public static void ExtGetProgramBinarySourceQCOM(uint  program, uint /*ShaderType*/  shadertype, string  source, int[]  length) => ExtGetProgramBinarySourceQCOMPtr?.Invoke(program, shadertype, source, length);
        public static void ExtGetProgramsQCOM(uint[]  programs, int  maxPrograms, int[]  numPrograms) => ExtGetProgramsQCOMPtr?.Invoke(programs, maxPrograms, numPrograms);
        public static void ExtGetRenderbuffersQCOM(uint[]  renderbuffers, int  maxRenderbuffers, int[]  numRenderbuffers) => ExtGetRenderbuffersQCOMPtr?.Invoke(renderbuffers, maxRenderbuffers, numRenderbuffers);
        public static void ExtGetShadersQCOM(uint[]  shaders, int  maxShaders, int[]  numShaders) => ExtGetShadersQCOMPtr?.Invoke(shaders, maxShaders, numShaders);
        public static void ExtGetTexLevelParameterivQCOM(uint  texture, uint  face, int  level, uint  pname, int[]  parameters) => ExtGetTexLevelParameterivQCOMPtr?.Invoke(texture, face, level, pname, parameters);
        public static void ExtGetTexSubImageQCOM(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  texels) => ExtGetTexSubImageQCOMPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        public static void ExtGetTexturesQCOM(uint[]  textures, int  maxTextures, int[]  numTextures) => ExtGetTexturesQCOMPtr?.Invoke(textures, maxTextures, numTextures);
        public static bool /*Boolean*/ ExtIsProgramBinaryQCOM(uint  program) => ExtIsProgramBinaryQCOMPtr?.Invoke(program) ?? default;
        public static void ExtTexObjectStateOverrideiQCOM(uint  target, uint  pname, int  param) => ExtTexObjectStateOverrideiQCOMPtr?.Invoke(target, pname, param);
        public static void ExtractComponentEXT(uint  res, uint  src, uint  num) => ExtractComponentEXTPtr?.Invoke(res, src, num);
        public static void FeedbackBuffer(uint  size, uint /*FeedbackType*/  type, float[] /*FeedbackElement*/  buffer) => FeedbackBufferPtr?.Invoke(size, type, buffer);
        public static void FeedbackBufferxOES(uint  n, uint  type, int[]  buffer) => FeedbackBufferxOESPtr?.Invoke(n, type, buffer);
        public static IntPtr /*sync*/ FenceSync(uint /*SyncCondition*/  condition, uint  flags) => FenceSyncPtr?.Invoke(condition, flags) ?? default;
        public static IntPtr FenceSyncAPPLE(uint /*SyncCondition*/  condition, uint  flags) => FenceSyncAPPLEPtr?.Invoke(condition, flags) ?? default;
        public static void FinalCombinerInputNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage) => FinalCombinerInputNVPtr?.Invoke(variable, input, mapping, componentUsage);
        public static void Finish() => FinishPtr?.Invoke();
        public static int FinishAsyncSGIX(uint[]  markerp) => FinishAsyncSGIXPtr?.Invoke(markerp) ?? default;
        public static void FinishFenceAPPLE(uint /*FenceNV*/  fence) => FinishFenceAPPLEPtr?.Invoke(fence);
        public static void FinishFenceNV(uint /*FenceNV*/  fence) => FinishFenceNVPtr?.Invoke(fence);
        public static void FinishObjectAPPLE(uint /*ObjectTypeAPPLE*/  obj, int  name) => FinishObjectAPPLEPtr?.Invoke(obj, name);
        public static void FinishTextureSUNX() => FinishTextureSUNXPtr?.Invoke();
        public static void Flush() => FlushPtr?.Invoke();
        public static void FlushMappedBufferRange(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length) => FlushMappedBufferRangePtr?.Invoke(target, offset, length);
        public static void FlushMappedBufferRangeAPPLE(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => FlushMappedBufferRangeAPPLEPtr?.Invoke(target, offset, size);
        public static void FlushMappedBufferRangeEXT(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length) => FlushMappedBufferRangeEXTPtr?.Invoke(target, offset, length);
        public static void FlushMappedNamedBufferRange(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length) => FlushMappedNamedBufferRangePtr?.Invoke(buffer, offset, length);
        public static void FlushMappedNamedBufferRangeEXT(uint  buffer, IntPtr  offset, IntPtr  length) => FlushMappedNamedBufferRangeEXTPtr?.Invoke(buffer, offset, length);
        public static void FlushPixelDataRangeNV(uint /*PixelDataRangeTargetNV*/  target) => FlushPixelDataRangeNVPtr?.Invoke(target);
        public static void FlushRasterSGIX() => FlushRasterSGIXPtr?.Invoke();
        public static void FlushStaticDataIBM(uint  target) => FlushStaticDataIBMPtr?.Invoke(target);
        public static void FlushVertexArrayRangeAPPLE(uint  length, IntPtr  pointer) => FlushVertexArrayRangeAPPLEPtr?.Invoke(length, pointer);
        public static void FlushVertexArrayRangeNV() => FlushVertexArrayRangeNVPtr?.Invoke();
        public static void FogCoordFormatNV(uint  type, uint  stride) => FogCoordFormatNVPtr?.Invoke(type, stride);
        public static void FogCoordPointer(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => FogCoordPointerPtr?.Invoke(type, stride, pointer);
        public static void FogCoordPointerEXT(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => FogCoordPointerEXTPtr?.Invoke(type, stride, pointer);
        public static void FogCoordPointerListIBM(uint /*FogPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride) => FogCoordPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        public static void FogCoordd(double /*CoordD*/  coord) => FogCoorddPtr?.Invoke(coord);
        public static void FogCoorddEXT(double /*CoordD*/  coord) => FogCoorddEXTPtr?.Invoke(coord);
        public static void FogCoorddv(double[] /*CoordD*/  coord) => FogCoorddvPtr?.Invoke(coord);
        public static void FogCoorddvEXT(double[] /*CoordD*/  coord) => FogCoorddvEXTPtr?.Invoke(coord);
        public static void FogCoordf(float /*CoordF*/  coord) => FogCoordfPtr?.Invoke(coord);
        public static void FogCoordfEXT(float /*CoordF*/  coord) => FogCoordfEXTPtr?.Invoke(coord);
        public static void FogCoordfv(float[] /*CoordF*/  coord) => FogCoordfvPtr?.Invoke(coord);
        public static void FogCoordfvEXT(float[] /*CoordF*/  coord) => FogCoordfvEXTPtr?.Invoke(coord);
        public static void FogCoordhNV(ushort /*Half16NV*/  fog) => FogCoordhNVPtr?.Invoke(fog);
        public static void FogCoordhvNV(ushort[] /*Half16NV*/  fog) => FogCoordhvNVPtr?.Invoke(fog);
        public static void FogFuncSGIS(uint  n, float[]  points) => FogFuncSGISPtr?.Invoke(n, points);
        public static void Fogf(uint /*FogParameter*/  pname, float /*CheckedFloat32*/  param) => FogfPtr?.Invoke(pname, param);
        public static void Fogfv(uint /*FogParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => FogfvPtr?.Invoke(pname, parameters);
        public static void Fogi(uint /*FogParameter*/  pname, int /*CheckedInt32*/  param) => FogiPtr?.Invoke(pname, param);
        public static void Fogiv(uint /*FogParameter*/  pname, int[] /*CheckedInt32*/  parameters) => FogivPtr?.Invoke(pname, parameters);
        public static void Fogx(uint /*FogPName*/  pname, int  param) => FogxPtr?.Invoke(pname, param);
        public static void FogxOES(uint /*FogPName*/  pname, int  param) => FogxOESPtr?.Invoke(pname, param);
        public static void Fogxv(uint /*FogPName*/  pname, int[]  param) => FogxvPtr?.Invoke(pname, param);
        public static void FogxvOES(uint /*FogPName*/  pname, int[]  param) => FogxvOESPtr?.Invoke(pname, param);
        public static void FragmentColorMaterialSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode) => FragmentColorMaterialSGIXPtr?.Invoke(face, mode);
        public static void FragmentCoverageColorNV(uint  color) => FragmentCoverageColorNVPtr?.Invoke(color);
        public static void FragmentLightModelfSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, float /*CheckedFloat32*/  param) => FragmentLightModelfSGIXPtr?.Invoke(pname, param);
        public static void FragmentLightModelfvSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => FragmentLightModelfvSGIXPtr?.Invoke(pname, parameters);
        public static void FragmentLightModeliSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, int /*CheckedInt32*/  param) => FragmentLightModeliSGIXPtr?.Invoke(pname, param);
        public static void FragmentLightModelivSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => FragmentLightModelivSGIXPtr?.Invoke(pname, parameters);
        public static void FragmentLightfSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float /*CheckedFloat32*/  param) => FragmentLightfSGIXPtr?.Invoke(light, pname, param);
        public static void FragmentLightfvSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => FragmentLightfvSGIXPtr?.Invoke(light, pname, parameters);
        public static void FragmentLightiSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int /*CheckedInt32*/  param) => FragmentLightiSGIXPtr?.Invoke(light, pname, param);
        public static void FragmentLightivSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => FragmentLightivSGIXPtr?.Invoke(light, pname, parameters);
        public static void FragmentMaterialfSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param) => FragmentMaterialfSGIXPtr?.Invoke(face, pname, param);
        public static void FragmentMaterialfvSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => FragmentMaterialfvSGIXPtr?.Invoke(face, pname, parameters);
        public static void FragmentMaterialiSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param) => FragmentMaterialiSGIXPtr?.Invoke(face, pname, param);
        public static void FragmentMaterialivSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters) => FragmentMaterialivSGIXPtr?.Invoke(face, pname, parameters);
        public static void FrameTerminatorGREMEDY() => FrameTerminatorGREMEDYPtr?.Invoke();
        public static void FrameZoomSGIX(int /*CheckedInt32*/  factor) => FrameZoomSGIXPtr?.Invoke(factor);
        public static void FramebufferDrawBufferEXT(uint /*Framebuffer*/  framebuffer, uint /*DrawBufferMode*/  mode) => FramebufferDrawBufferEXTPtr?.Invoke(framebuffer, mode);
        public static void FramebufferDrawBuffersEXT(uint /*Framebuffer*/  framebuffer, uint  n, uint[] /*DrawBufferMode*/  bufs) => FramebufferDrawBuffersEXTPtr?.Invoke(framebuffer, n, bufs);
        public static void FramebufferFetchBarrierEXT() => FramebufferFetchBarrierEXTPtr?.Invoke();
        public static void FramebufferFetchBarrierQCOM() => FramebufferFetchBarrierQCOMPtr?.Invoke();
        public static void FramebufferFoveationConfigQCOM(uint /*Framebuffer*/  framebuffer, uint  numLayers, uint  focalPointsPerLayer, uint  requestedFeatures, uint[]  providedFeatures) => FramebufferFoveationConfigQCOMPtr?.Invoke(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        public static void FramebufferFoveationParametersQCOM(uint /*Framebuffer*/  framebuffer, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea) => FramebufferFoveationParametersQCOMPtr?.Invoke(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        public static void FramebufferParameteri(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param) => FramebufferParameteriPtr?.Invoke(target, pname, param);
        public static void FramebufferPixelLocalStorageSizeEXT(uint  target, uint  size) => FramebufferPixelLocalStorageSizeEXTPtr?.Invoke(target, size);
        public static void FramebufferReadBufferEXT(uint /*Framebuffer*/  framebuffer, uint /*ReadBufferMode*/  mode) => FramebufferReadBufferEXTPtr?.Invoke(framebuffer, mode);
        public static void FramebufferRenderbuffer(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => FramebufferRenderbufferPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        public static void FramebufferRenderbufferEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => FramebufferRenderbufferEXTPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        public static void FramebufferRenderbufferOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => FramebufferRenderbufferOESPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        public static void FramebufferSampleLocationsfvARB(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v) => FramebufferSampleLocationsfvARBPtr?.Invoke(target, start, count, v);
        public static void FramebufferSampleLocationsfvNV(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v) => FramebufferSampleLocationsfvNVPtr?.Invoke(target, start, count, v);
        public static void FramebufferSamplePositionsfvAMD(uint /*FramebufferTarget*/  target, uint  numsamples, uint  pixelindex, float[]  values) => FramebufferSamplePositionsfvAMDPtr?.Invoke(target, numsamples, pixelindex, values);
        public static void FramebufferTexture(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level) => FramebufferTexturePtr?.Invoke(target, attachment, texture, level);
        public static void FramebufferTexture1D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => FramebufferTexture1DPtr?.Invoke(target, attachment, textarget, texture, level);
        public static void FramebufferTexture1DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => FramebufferTexture1DEXTPtr?.Invoke(target, attachment, textarget, texture, level);
        public static void FramebufferTexture2D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => FramebufferTexture2DPtr?.Invoke(target, attachment, textarget, texture, level);
        public static void FramebufferTexture2DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => FramebufferTexture2DEXTPtr?.Invoke(target, attachment, textarget, texture, level);
        public static void FramebufferTexture2DDownsampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  xscale, int  yscale) => FramebufferTexture2DDownsampleIMGPtr?.Invoke(target, attachment, textarget, texture, level, xscale, yscale);
        public static void FramebufferTexture2DMultisampleEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples) => FramebufferTexture2DMultisampleEXTPtr?.Invoke(target, attachment, textarget, texture, level, samples);
        public static void FramebufferTexture2DMultisampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples) => FramebufferTexture2DMultisampleIMGPtr?.Invoke(target, attachment, textarget, texture, level, samples);
        public static void FramebufferTexture2DOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => FramebufferTexture2DOESPtr?.Invoke(target, attachment, textarget, texture, level);
        public static void FramebufferTexture3D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => FramebufferTexture3DPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        public static void FramebufferTexture3DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => FramebufferTexture3DEXTPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        public static void FramebufferTexture3DOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => FramebufferTexture3DOESPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        public static void FramebufferTextureARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => FramebufferTextureARBPtr?.Invoke(target, attachment, texture, level);
        public static void FramebufferTextureEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => FramebufferTextureEXTPtr?.Invoke(target, attachment, texture, level);
        public static void FramebufferTextureFaceARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => FramebufferTextureFaceARBPtr?.Invoke(target, attachment, texture, level, face);
        public static void FramebufferTextureFaceEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => FramebufferTextureFaceEXTPtr?.Invoke(target, attachment, texture, level, face);
        public static void FramebufferTextureLayer(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => FramebufferTextureLayerPtr?.Invoke(target, attachment, texture, level, layer);
        public static void FramebufferTextureLayerARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => FramebufferTextureLayerARBPtr?.Invoke(target, attachment, texture, level, layer);
        public static void FramebufferTextureLayerEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => FramebufferTextureLayerEXTPtr?.Invoke(target, attachment, texture, level, layer);
        public static void FramebufferTextureLayerDownsampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer, int  xscale, int  yscale) => FramebufferTextureLayerDownsampleIMGPtr?.Invoke(target, attachment, texture, level, layer, xscale, yscale);
        public static void FramebufferTextureMultisampleMultiviewOVR(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint  samples, int  baseViewIndex, uint  numViews) => FramebufferTextureMultisampleMultiviewOVRPtr?.Invoke(target, attachment, texture, level, samples, baseViewIndex, numViews);
        public static void FramebufferTextureMultiviewOVR(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int  baseViewIndex, uint  numViews) => FramebufferTextureMultiviewOVRPtr?.Invoke(target, attachment, texture, level, baseViewIndex, numViews);
        public static void FramebufferTextureOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => FramebufferTextureOESPtr?.Invoke(target, attachment, texture, level);
        public static void FreeObjectBufferATI(uint  buffer) => FreeObjectBufferATIPtr?.Invoke(buffer);
        public static void FrontFace(uint /*FrontFaceDirection*/  mode) => FrontFacePtr?.Invoke(mode);
        public static void Frustum(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => FrustumPtr?.Invoke(left, right, bottom, top, zNear, zFar);
        public static void Frustumf(float  l, float  r, float  b, float  t, float  n, float  f) => FrustumfPtr?.Invoke(l, r, b, t, n, f);
        public static void FrustumfOES(float  l, float  r, float  b, float  t, float  n, float  f) => FrustumfOESPtr?.Invoke(l, r, b, t, n, f);
        public static void Frustumx(int  l, int  r, int  b, int  t, int  n, int  f) => FrustumxPtr?.Invoke(l, r, b, t, n, f);
        public static void FrustumxOES(int  l, int  r, int  b, int  t, int  n, int  f) => FrustumxOESPtr?.Invoke(l, r, b, t, n, f);
        public static uint GenAsyncMarkersSGIX(uint  range) => GenAsyncMarkersSGIXPtr?.Invoke(range) ?? default;
        public static void GenBuffers(uint  n, uint[]  buffers) => GenBuffersPtr?.Invoke(n, buffers);
        public static void GenBuffersARB(uint  n, uint[]  buffers) => GenBuffersARBPtr?.Invoke(n, buffers);
        public static void GenFencesAPPLE(uint  n, uint[] /*FenceNV*/  fences) => GenFencesAPPLEPtr?.Invoke(n, fences);
        public static void GenFencesNV(uint  n, uint[] /*FenceNV*/  fences) => GenFencesNVPtr?.Invoke(n, fences);
        public static uint GenFragmentShadersATI(uint  range) => GenFragmentShadersATIPtr?.Invoke(range) ?? default;
        public static void GenFramebuffers(uint  n, uint[]  framebuffers) => GenFramebuffersPtr?.Invoke(n, framebuffers);
        public static void GenFramebuffersEXT(uint  n, uint[]  framebuffers) => GenFramebuffersEXTPtr?.Invoke(n, framebuffers);
        public static void GenFramebuffersOES(uint  n, uint[]  framebuffers) => GenFramebuffersOESPtr?.Invoke(n, framebuffers);
        public static uint /*List*/ GenLists(uint  range) => GenListsPtr?.Invoke(range) ?? default;
        public static void GenNamesAMD(uint  identifier, uint  num, uint[]  names) => GenNamesAMDPtr?.Invoke(identifier, num, names);
        public static void GenOcclusionQueriesNV(uint  n, uint[]  ids) => GenOcclusionQueriesNVPtr?.Invoke(n, ids);
        public static uint /*Path*/ GenPathsNV(uint  range) => GenPathsNVPtr?.Invoke(range) ?? default;
        public static void GenPerfMonitorsAMD(uint  n, uint[]  monitors) => GenPerfMonitorsAMDPtr?.Invoke(n, monitors);
        public static void GenProgramPipelines(uint  n, uint[]  pipelines) => GenProgramPipelinesPtr?.Invoke(n, pipelines);
        public static void GenProgramPipelinesEXT(uint  n, uint[]  pipelines) => GenProgramPipelinesEXTPtr?.Invoke(n, pipelines);
        public static void GenProgramsARB(uint  n, uint[]  programs) => GenProgramsARBPtr?.Invoke(n, programs);
        public static void GenProgramsNV(uint  n, uint[]  programs) => GenProgramsNVPtr?.Invoke(n, programs);
        public static void GenQueries(uint  n, uint[]  ids) => GenQueriesPtr?.Invoke(n, ids);
        public static void GenQueriesARB(uint  n, uint[]  ids) => GenQueriesARBPtr?.Invoke(n, ids);
        public static void GenQueriesEXT(uint  n, uint[]  ids) => GenQueriesEXTPtr?.Invoke(n, ids);
        public static void GenQueryResourceTagNV(uint  n, int[]  tagIds) => GenQueryResourceTagNVPtr?.Invoke(n, tagIds);
        public static void GenRenderbuffers(uint  n, uint[]  renderbuffers) => GenRenderbuffersPtr?.Invoke(n, renderbuffers);
        public static void GenRenderbuffersEXT(uint  n, uint[]  renderbuffers) => GenRenderbuffersEXTPtr?.Invoke(n, renderbuffers);
        public static void GenRenderbuffersOES(uint  n, uint[]  renderbuffers) => GenRenderbuffersOESPtr?.Invoke(n, renderbuffers);
        public static void GenSamplers(uint  count, uint[]  samplers) => GenSamplersPtr?.Invoke(count, samplers);
        public static void GenSemaphoresEXT(uint  n, uint[]  semaphores) => GenSemaphoresEXTPtr?.Invoke(n, semaphores);
        public static uint GenSymbolsEXT(uint /*DataTypeEXT*/  datatype, uint /*VertexShaderStorageTypeEXT*/  storagetype, uint /*ParameterRangeEXT*/  range, uint  components) => GenSymbolsEXTPtr?.Invoke(datatype, storagetype, range, components) ?? default;
        public static void GenTextures(uint  n, uint[] /*Texture*/  textures) => GenTexturesPtr?.Invoke(n, textures);
        public static void GenTexturesEXT(uint  n, uint[] /*Texture*/  textures) => GenTexturesEXTPtr?.Invoke(n, textures);
        public static void GenTransformFeedbacks(uint  n, uint[]  ids) => GenTransformFeedbacksPtr?.Invoke(n, ids);
        public static void GenTransformFeedbacksNV(uint  n, uint[]  ids) => GenTransformFeedbacksNVPtr?.Invoke(n, ids);
        public static void GenVertexArrays(uint  n, uint[]  arrays) => GenVertexArraysPtr?.Invoke(n, arrays);
        public static void GenVertexArraysAPPLE(uint  n, uint[]  arrays) => GenVertexArraysAPPLEPtr?.Invoke(n, arrays);
        public static void GenVertexArraysOES(uint  n, uint[]  arrays) => GenVertexArraysOESPtr?.Invoke(n, arrays);
        public static uint GenVertexShadersEXT(uint  range) => GenVertexShadersEXTPtr?.Invoke(range) ?? default;
        public static void GenerateMipmap(uint /*TextureTarget*/  target) => GenerateMipmapPtr?.Invoke(target);
        public static void GenerateMipmapEXT(uint /*TextureTarget*/  target) => GenerateMipmapEXTPtr?.Invoke(target);
        public static void GenerateMipmapOES(uint /*TextureTarget*/  target) => GenerateMipmapOESPtr?.Invoke(target);
        public static void GenerateMultiTexMipmapEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target) => GenerateMultiTexMipmapEXTPtr?.Invoke(texunit, target);
        public static void GenerateTextureMipmap(uint  texture) => GenerateTextureMipmapPtr?.Invoke(texture);
        public static void GenerateTextureMipmapEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target) => GenerateTextureMipmapEXTPtr?.Invoke(texture, target);
        public static void GetActiveAtomicCounterBufferiv(uint  program, uint  bufferIndex, uint /*AtomicCounterBufferPName*/  pname, int[]  parameters) => GetActiveAtomicCounterBufferivPtr?.Invoke(program, bufferIndex, pname, parameters);
        public static void GetActiveAttrib(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name) => GetActiveAttribPtr?.Invoke(program, index, bufSize, length, size, type, name);
        public static void GetActiveAttribARB(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name) => GetActiveAttribARBPtr?.Invoke(programObj, index, maxLength, length, size, type, name);
        public static void GetActiveSubroutineName(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name) => GetActiveSubroutineNamePtr?.Invoke(program, shadertype, index, bufSize, length, name);
        public static void GetActiveSubroutineUniformName(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name) => GetActiveSubroutineUniformNamePtr?.Invoke(program, shadertype, index, bufSize, length, name);
        public static void GetActiveSubroutineUniformiv(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint /*SubroutineParameterName*/  pname, int[]  values) => GetActiveSubroutineUniformivPtr?.Invoke(program, shadertype, index, pname, values);
        public static void GetActiveUniform(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name) => GetActiveUniformPtr?.Invoke(program, index, bufSize, length, size, type, name);
        public static void GetActiveUniformARB(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name) => GetActiveUniformARBPtr?.Invoke(programObj, index, maxLength, length, size, type, name);
        public static void GetActiveUniformBlockName(uint  program, uint  uniformBlockIndex, uint  bufSize, uint[]  length, string  uniformBlockName) => GetActiveUniformBlockNamePtr?.Invoke(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        public static void GetActiveUniformBlockiv(uint  program, uint  uniformBlockIndex, uint /*UniformBlockPName*/  pname, int[]  parameters) => GetActiveUniformBlockivPtr?.Invoke(program, uniformBlockIndex, pname, parameters);
        public static void GetActiveUniformName(uint  program, uint  uniformIndex, uint  bufSize, uint[]  length, string  uniformName) => GetActiveUniformNamePtr?.Invoke(program, uniformIndex, bufSize, length, uniformName);
        public static void GetActiveUniformsiv(uint  program, uint  uniformCount, uint[]  uniformIndices, uint /*UniformPName*/  pname, int[]  parameters) => GetActiveUniformsivPtr?.Invoke(program, uniformCount, uniformIndices, pname, parameters);
        public static void GetActiveVaryingNV(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[]  type, string  name) => GetActiveVaryingNVPtr?.Invoke(program, index, bufSize, length, size, type, name);
        public static void GetArrayObjectfvATI(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => GetArrayObjectfvATIPtr?.Invoke(array, pname, parameters);
        public static void GetArrayObjectivATI(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => GetArrayObjectivATIPtr?.Invoke(array, pname, parameters);
        public static void GetAttachedObjectsARB(IntPtr /*handleARB*/  containerObj, uint  maxCount, uint[]  count, IntPtr[] /*handleARB*/  obj) => GetAttachedObjectsARBPtr?.Invoke(containerObj, maxCount, count, obj);
        public static void GetAttachedShaders(uint  program, uint  maxCount, uint[]  count, uint[]  shaders) => GetAttachedShadersPtr?.Invoke(program, maxCount, count, shaders);
        public static int GetAttribLocation(uint  program, string  name) => GetAttribLocationPtr?.Invoke(program, name) ?? default;
        public static int GetAttribLocationARB(IntPtr /*handleARB*/  programObj, string  name) => GetAttribLocationARBPtr?.Invoke(programObj, name) ?? default;
        public static void GetBooleanIndexedvEXT(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data) => GetBooleanIndexedvEXTPtr?.Invoke(target, index, data);
        public static void GetBooleani_v(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data) => GetBooleani_vPtr?.Invoke(target, index, data);
        public static void GetBooleanv(uint /*GetPName*/  pname, bool[] /*Boolean*/  data) => GetBooleanvPtr?.Invoke(pname, data);
        public static void GetBufferParameteri64v(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, long[]  parameters) => GetBufferParameteri64vPtr?.Invoke(target, pname, parameters);
        public static void GetBufferParameteriv(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters) => GetBufferParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetBufferParameterivARB(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters) => GetBufferParameterivARBPtr?.Invoke(target, pname, parameters);
        public static void GetBufferParameterui64vNV(uint /*BufferTargetARB*/  target, uint  pname, ulong[]  parameters) => GetBufferParameterui64vNVPtr?.Invoke(target, pname, parameters);
        public static void GetBufferPointerv(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => GetBufferPointervPtr?.Invoke(target, pname, parameters);
        public static void GetBufferPointervARB(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => GetBufferPointervARBPtr?.Invoke(target, pname, parameters);
        public static void GetBufferPointervOES(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => GetBufferPointervOESPtr?.Invoke(target, pname, parameters);
        public static void GetBufferSubData(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => GetBufferSubDataPtr?.Invoke(target, offset, size, data);
        public static void GetBufferSubDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data) => GetBufferSubDataARBPtr?.Invoke(target, offset, size, data);
        public static void GetClipPlane(uint /*ClipPlaneName*/  plane, double[]  equation) => GetClipPlanePtr?.Invoke(plane, equation);
        public static void GetClipPlanef(uint /*ClipPlaneName*/  plane, float[]  equation) => GetClipPlanefPtr?.Invoke(plane, equation);
        public static void GetClipPlanefOES(uint /*ClipPlaneName*/  plane, float[]  equation) => GetClipPlanefOESPtr?.Invoke(plane, equation);
        public static void GetClipPlanex(uint /*ClipPlaneName*/  plane, int[]  equation) => GetClipPlanexPtr?.Invoke(plane, equation);
        public static void GetClipPlanexOES(uint /*ClipPlaneName*/  plane, int[]  equation) => GetClipPlanexOESPtr?.Invoke(plane, equation);
        public static void GetColorTable(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => GetColorTablePtr?.Invoke(target, format, type, table);
        public static void GetColorTableEXT(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => GetColorTableEXTPtr?.Invoke(target, format, type, data);
        public static void GetColorTableParameterfv(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => GetColorTableParameterfvPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableParameterfvEXT(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => GetColorTableParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableParameterfvSGI(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => GetColorTableParameterfvSGIPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableParameteriv(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => GetColorTableParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableParameterivEXT(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => GetColorTableParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableParameterivSGI(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => GetColorTableParameterivSGIPtr?.Invoke(target, pname, parameters);
        public static void GetColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => GetColorTableSGIPtr?.Invoke(target, format, type, table);
        public static void GetCombinerInputParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters) => GetCombinerInputParameterfvNVPtr?.Invoke(stage, portion, variable, pname, parameters);
        public static void GetCombinerInputParameterivNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters) => GetCombinerInputParameterivNVPtr?.Invoke(stage, portion, variable, pname, parameters);
        public static void GetCombinerOutputParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, float[]  parameters) => GetCombinerOutputParameterfvNVPtr?.Invoke(stage, portion, pname, parameters);
        public static void GetCombinerOutputParameterivNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, int[]  parameters) => GetCombinerOutputParameterivNVPtr?.Invoke(stage, portion, pname, parameters);
        public static void GetCombinerStageParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[]  parameters) => GetCombinerStageParameterfvNVPtr?.Invoke(stage, pname, parameters);
        public static uint GetCommandHeaderNV(uint  tokenID, uint  size) => GetCommandHeaderNVPtr?.Invoke(tokenID, size) ?? default;
        public static void GetCompressedMultiTexImageEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img) => GetCompressedMultiTexImageEXTPtr?.Invoke(texunit, target, lod, img);
        public static void GetCompressedTexImage(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img) => GetCompressedTexImagePtr?.Invoke(target, level, img);
        public static void GetCompressedTexImageARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img) => GetCompressedTexImageARBPtr?.Invoke(target, level, img);
        public static void GetCompressedTextureImage(uint  texture, int  level, uint  bufSize, IntPtr  pixels) => GetCompressedTextureImagePtr?.Invoke(texture, level, bufSize, pixels);
        public static void GetCompressedTextureImageEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img) => GetCompressedTextureImageEXTPtr?.Invoke(texture, target, lod, img);
        public static void GetCompressedTextureSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint  bufSize, IntPtr  pixels) => GetCompressedTextureSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        public static void GetConvolutionFilter(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => GetConvolutionFilterPtr?.Invoke(target, format, type, image);
        public static void GetConvolutionFilterEXT(uint /*ConvolutionTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => GetConvolutionFilterEXTPtr?.Invoke(target, format, type, image);
        public static void GetConvolutionParameterfv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters) => GetConvolutionParameterfvPtr?.Invoke(target, pname, parameters);
        public static void GetConvolutionParameterfvEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters) => GetConvolutionParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void GetConvolutionParameteriv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => GetConvolutionParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetConvolutionParameterivEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => GetConvolutionParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetConvolutionParameterxvOES(uint  target, uint  pname, int[]  parameters) => GetConvolutionParameterxvOESPtr?.Invoke(target, pname, parameters);
        public static void GetCoverageModulationTableNV(uint  bufSize, float[]  v) => GetCoverageModulationTableNVPtr?.Invoke(bufSize, v);
        public static uint GetDebugMessageLog(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => GetDebugMessageLogPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        public static uint GetDebugMessageLogAMD(uint  count, uint  bufSize, uint[]  categories, uint[] /*DebugSeverity*/  severities, uint[]  ids, uint[]  lengths, string  message) => GetDebugMessageLogAMDPtr?.Invoke(count, bufSize, categories, severities, ids, lengths, message) ?? default;
        public static uint GetDebugMessageLogARB(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => GetDebugMessageLogARBPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        public static uint GetDebugMessageLogKHR(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => GetDebugMessageLogKHRPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        public static void GetDetailTexFuncSGIS(uint /*TextureTarget*/  target, float[]  points) => GetDetailTexFuncSGISPtr?.Invoke(target, points);
        public static void GetDoubleIndexedvEXT(uint  target, uint  index, double[]  data) => GetDoubleIndexedvEXTPtr?.Invoke(target, index, data);
        public static void GetDoublei_v(uint  target, uint  index, double[]  data) => GetDoublei_vPtr?.Invoke(target, index, data);
        public static void GetDoublei_vEXT(uint  pname, uint  index, double[]  parameters) => GetDoublei_vEXTPtr?.Invoke(pname, index, parameters);
        public static void GetDoublev(uint /*GetPName*/  pname, double[]  data) => GetDoublevPtr?.Invoke(pname, data);
        public static void GetDriverControlStringQCOM(uint  driverControl, uint  bufSize, uint[]  length, string  driverControlString) => GetDriverControlStringQCOMPtr?.Invoke(driverControl, bufSize, length, driverControlString);
        public static void GetDriverControlsQCOM(int[]  num, uint  size, uint[]  driverControls) => GetDriverControlsQCOMPtr?.Invoke(num, size, driverControls);
        public static uint /*ErrorCode*/ GetError() => GetErrorPtr?.Invoke() ?? default;
        public static void GetFenceivNV(uint /*FenceNV*/  fence, uint /*FenceParameterNameNV*/  pname, int[]  parameters) => GetFenceivNVPtr?.Invoke(fence, pname, parameters);
        public static void GetFinalCombinerInputParameterfvNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters) => GetFinalCombinerInputParameterfvNVPtr?.Invoke(variable, pname, parameters);
        public static void GetFinalCombinerInputParameterivNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters) => GetFinalCombinerInputParameterivNVPtr?.Invoke(variable, pname, parameters);
        public static void GetFirstPerfQueryIdINTEL(uint[]  queryId) => GetFirstPerfQueryIdINTELPtr?.Invoke(queryId);
        public static void GetFixedv(uint /*GetPName*/  pname, int[]  parameters) => GetFixedvPtr?.Invoke(pname, parameters);
        public static void GetFixedvOES(uint /*GetPName*/  pname, int[]  parameters) => GetFixedvOESPtr?.Invoke(pname, parameters);
        public static void GetFloatIndexedvEXT(uint  target, uint  index, float[]  data) => GetFloatIndexedvEXTPtr?.Invoke(target, index, data);
        public static void GetFloati_v(uint  target, uint  index, float[]  data) => GetFloati_vPtr?.Invoke(target, index, data);
        public static void GetFloati_vEXT(uint  pname, uint  index, float[]  parameters) => GetFloati_vEXTPtr?.Invoke(pname, index, parameters);
        public static void GetFloati_vNV(uint  target, uint  index, float[]  data) => GetFloati_vNVPtr?.Invoke(target, index, data);
        public static void GetFloati_vOES(uint  target, uint  index, float[]  data) => GetFloati_vOESPtr?.Invoke(target, index, data);
        public static void GetFloatv(uint /*GetPName*/  pname, float[]  data) => GetFloatvPtr?.Invoke(pname, data);
        public static void GetFogFuncSGIS(float[]  points) => GetFogFuncSGISPtr?.Invoke(points);
        public static int GetFragDataIndex(uint  program, string  name) => GetFragDataIndexPtr?.Invoke(program, name) ?? default;
        public static int GetFragDataIndexEXT(uint  program, string  name) => GetFragDataIndexEXTPtr?.Invoke(program, name) ?? default;
        public static int GetFragDataLocation(uint  program, string  name) => GetFragDataLocationPtr?.Invoke(program, name) ?? default;
        public static int GetFragDataLocationEXT(uint  program, string  name) => GetFragDataLocationEXTPtr?.Invoke(program, name) ?? default;
        public static void GetFragmentLightfvSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[]  parameters) => GetFragmentLightfvSGIXPtr?.Invoke(light, pname, parameters);
        public static void GetFragmentLightivSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[]  parameters) => GetFragmentLightivSGIXPtr?.Invoke(light, pname, parameters);
        public static void GetFragmentMaterialfvSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters) => GetFragmentMaterialfvSGIXPtr?.Invoke(face, pname, parameters);
        public static void GetFragmentMaterialivSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => GetFragmentMaterialivSGIXPtr?.Invoke(face, pname, parameters);
        public static void GetFramebufferAttachmentParameteriv(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetFramebufferAttachmentParameterivPtr?.Invoke(target, attachment, pname, parameters);
        public static void GetFramebufferAttachmentParameterivEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetFramebufferAttachmentParameterivEXTPtr?.Invoke(target, attachment, pname, parameters);
        public static void GetFramebufferAttachmentParameterivOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetFramebufferAttachmentParameterivOESPtr?.Invoke(target, attachment, pname, parameters);
        public static void GetFramebufferParameterfvAMD(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values) => GetFramebufferParameterfvAMDPtr?.Invoke(target, pname, numsamples, pixelindex, size, values);
        public static void GetFramebufferParameteriv(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetFramebufferParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetFramebufferParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters) => GetFramebufferParameterivEXTPtr?.Invoke(framebuffer, pname, parameters);
        public static uint GetFramebufferPixelLocalStorageSizeEXT(uint /*FramebufferTarget*/  target) => GetFramebufferPixelLocalStorageSizeEXTPtr?.Invoke(target) ?? default;
        public static uint /*GraphicsResetStatus*/ GetGraphicsResetStatus() => GetGraphicsResetStatusPtr?.Invoke() ?? default;
        public static uint /*GraphicsResetStatus*/ GetGraphicsResetStatusARB() => GetGraphicsResetStatusARBPtr?.Invoke() ?? default;
        public static uint /*GraphicsResetStatus*/ GetGraphicsResetStatusEXT() => GetGraphicsResetStatusEXTPtr?.Invoke() ?? default;
        public static uint /*GraphicsResetStatus*/ GetGraphicsResetStatusKHR() => GetGraphicsResetStatusKHRPtr?.Invoke() ?? default;
        public static IntPtr /*handleARB*/ GetHandleARB(uint  pname) => GetHandleARBPtr?.Invoke(pname) ?? default;
        public static void GetHistogram(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => GetHistogramPtr?.Invoke(target, reset, format, type, values);
        public static void GetHistogramEXT(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => GetHistogramEXTPtr?.Invoke(target, reset, format, type, values);
        public static void GetHistogramParameterfv(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters) => GetHistogramParameterfvPtr?.Invoke(target, pname, parameters);
        public static void GetHistogramParameterfvEXT(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters) => GetHistogramParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void GetHistogramParameteriv(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => GetHistogramParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetHistogramParameterivEXT(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => GetHistogramParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetHistogramParameterxvOES(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => GetHistogramParameterxvOESPtr?.Invoke(target, pname, parameters);
        public static ulong GetImageHandleARB(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format) => GetImageHandleARBPtr?.Invoke(texture, level, layered, layer, format) ?? default;
        public static ulong GetImageHandleNV(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format) => GetImageHandleNVPtr?.Invoke(texture, level, layered, layer, format) ?? default;
        public static void GetImageTransformParameterfvHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters) => GetImageTransformParameterfvHPPtr?.Invoke(target, pname, parameters);
        public static void GetImageTransformParameterivHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters) => GetImageTransformParameterivHPPtr?.Invoke(target, pname, parameters);
        public static void GetInfoLogARB(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  infoLog) => GetInfoLogARBPtr?.Invoke(obj, maxLength, length, infoLog);
        public static int GetInstrumentsSGIX() => GetInstrumentsSGIXPtr?.Invoke() ?? default;
        public static void GetInteger64i_v(uint  target, uint  index, long[]  data) => GetInteger64i_vPtr?.Invoke(target, index, data);
        public static void GetInteger64v(uint /*GetPName*/  pname, long[]  data) => GetInteger64vPtr?.Invoke(pname, data);
        public static void GetInteger64vAPPLE(uint /*GetPName*/  pname, long[]  parameters) => GetInteger64vAPPLEPtr?.Invoke(pname, parameters);
        public static void GetInteger64vEXT(uint /*GetPName*/  pname, long[]  data) => GetInteger64vEXTPtr?.Invoke(pname, data);
        public static void GetIntegerIndexedvEXT(uint  target, uint  index, int[]  data) => GetIntegerIndexedvEXTPtr?.Invoke(target, index, data);
        public static void GetIntegeri_v(uint  target, uint  index, int[]  data) => GetIntegeri_vPtr?.Invoke(target, index, data);
        public static void GetIntegeri_vEXT(uint  target, uint  index, int[]  data) => GetIntegeri_vEXTPtr?.Invoke(target, index, data);
        public static void GetIntegerui64i_vNV(uint  value, uint  index, ulong[]  result) => GetIntegerui64i_vNVPtr?.Invoke(value, index, result);
        public static void GetIntegerui64vNV(uint  value, ulong[]  result) => GetIntegerui64vNVPtr?.Invoke(value, result);
        public static void GetIntegerv(uint /*GetPName*/  pname, int[]  data) => GetIntegervPtr?.Invoke(pname, data);
        public static void GetInternalformatSampleivNV(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  samples, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters) => GetInternalformatSampleivNVPtr?.Invoke(target, internalformat, samples, pname, count, parameters);
        public static void GetInternalformati64v(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, long[]  parameters) => GetInternalformati64vPtr?.Invoke(target, internalformat, pname, count, parameters);
        public static void GetInternalformativ(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters) => GetInternalformativPtr?.Invoke(target, internalformat, pname, count, parameters);
        public static void GetInvariantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => GetInvariantBooleanvEXTPtr?.Invoke(id, value, data);
        public static void GetInvariantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => GetInvariantFloatvEXTPtr?.Invoke(id, value, data);
        public static void GetInvariantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => GetInvariantIntegervEXTPtr?.Invoke(id, value, data);
        public static void GetLightfv(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[]  parameters) => GetLightfvPtr?.Invoke(light, pname, parameters);
        public static void GetLightiv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => GetLightivPtr?.Invoke(light, pname, parameters);
        public static void GetLightxOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => GetLightxOESPtr?.Invoke(light, pname, parameters);
        public static void GetLightxv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => GetLightxvPtr?.Invoke(light, pname, parameters);
        public static void GetLightxvOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => GetLightxvOESPtr?.Invoke(light, pname, parameters);
        public static void GetListParameterfvSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => GetListParameterfvSGIXPtr?.Invoke(list, pname, parameters);
        public static void GetListParameterivSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => GetListParameterivSGIXPtr?.Invoke(list, pname, parameters);
        public static void GetLocalConstantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => GetLocalConstantBooleanvEXTPtr?.Invoke(id, value, data);
        public static void GetLocalConstantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => GetLocalConstantFloatvEXTPtr?.Invoke(id, value, data);
        public static void GetLocalConstantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => GetLocalConstantIntegervEXTPtr?.Invoke(id, value, data);
        public static void GetMapAttribParameterfvNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, float[]  parameters) => GetMapAttribParameterfvNVPtr?.Invoke(target, index, pname, parameters);
        public static void GetMapAttribParameterivNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, int[]  parameters) => GetMapAttribParameterivNVPtr?.Invoke(target, index, pname, parameters);
        public static void GetMapControlPointsNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, bool /*Boolean*/  packed, IntPtr  points) => GetMapControlPointsNVPtr?.Invoke(target, index, type, ustride, vstride, packed, points);
        public static void GetMapParameterfvNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[]  parameters) => GetMapParameterfvNVPtr?.Invoke(target, pname, parameters);
        public static void GetMapParameterivNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[]  parameters) => GetMapParameterivNVPtr?.Invoke(target, pname, parameters);
        public static void GetMapdv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, double[]  v) => GetMapdvPtr?.Invoke(target, query, v);
        public static void GetMapfv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, float[]  v) => GetMapfvPtr?.Invoke(target, query, v);
        public static void GetMapiv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v) => GetMapivPtr?.Invoke(target, query, v);
        public static void GetMapxvOES(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v) => GetMapxvOESPtr?.Invoke(target, query, v);
        public static void GetMaterialfv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters) => GetMaterialfvPtr?.Invoke(face, pname, parameters);
        public static void GetMaterialiv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => GetMaterialivPtr?.Invoke(face, pname, parameters);
        public static void GetMaterialxOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => GetMaterialxOESPtr?.Invoke(face, pname, param);
        public static void GetMaterialxv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => GetMaterialxvPtr?.Invoke(face, pname, parameters);
        public static void GetMaterialxvOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => GetMaterialxvOESPtr?.Invoke(face, pname, parameters);
        public static void GetMemoryObjectDetachedResourcesuivNV(uint  memory, uint  pname, int  first, uint  count, uint[]  parameters) => GetMemoryObjectDetachedResourcesuivNVPtr?.Invoke(memory, pname, first, count, parameters);
        public static void GetMemoryObjectParameterivEXT(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters) => GetMemoryObjectParameterivEXTPtr?.Invoke(memoryObject, pname, parameters);
        public static void GetMinmax(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => GetMinmaxPtr?.Invoke(target, reset, format, type, values);
        public static void GetMinmaxEXT(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => GetMinmaxEXTPtr?.Invoke(target, reset, format, type, values);
        public static void GetMinmaxParameterfv(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters) => GetMinmaxParameterfvPtr?.Invoke(target, pname, parameters);
        public static void GetMinmaxParameterfvEXT(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters) => GetMinmaxParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void GetMinmaxParameteriv(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters) => GetMinmaxParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetMinmaxParameterivEXT(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters) => GetMinmaxParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetMultiTexEnvfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters) => GetMultiTexEnvfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultiTexEnvivEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => GetMultiTexEnvivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultiTexGendvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => GetMultiTexGendvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void GetMultiTexGenfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => GetMultiTexGenfvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void GetMultiTexGenivEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => GetMultiTexGenivEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void GetMultiTexImageEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => GetMultiTexImageEXTPtr?.Invoke(texunit, target, level, format, type, pixels);
        public static void GetMultiTexLevelParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetMultiTexLevelParameterfvEXTPtr?.Invoke(texunit, target, level, pname, parameters);
        public static void GetMultiTexLevelParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetMultiTexLevelParameterivEXTPtr?.Invoke(texunit, target, level, pname, parameters);
        public static void GetMultiTexParameterIivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetMultiTexParameterIivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultiTexParameterIuivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetMultiTexParameterIuivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultiTexParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetMultiTexParameterfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultiTexParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetMultiTexParameterivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void GetMultisamplefv(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val) => GetMultisamplefvPtr?.Invoke(pname, index, val);
        public static void GetMultisamplefvNV(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val) => GetMultisamplefvNVPtr?.Invoke(pname, index, val);
        public static void GetNamedBufferParameteri64v(uint  buffer, uint /*BufferPNameARB*/  pname, long[]  parameters) => GetNamedBufferParameteri64vPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferParameteriv(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters) => GetNamedBufferParameterivPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferParameterivEXT(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters) => GetNamedBufferParameterivEXTPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferParameterui64vNV(uint  buffer, uint /*BufferPNameARB*/  pname, ulong[]  parameters) => GetNamedBufferParameterui64vNVPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferPointerv(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => GetNamedBufferPointervPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferPointervEXT(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => GetNamedBufferPointervEXTPtr?.Invoke(buffer, pname, parameters);
        public static void GetNamedBufferSubData(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => GetNamedBufferSubDataPtr?.Invoke(buffer, offset, size, data);
        public static void GetNamedBufferSubDataEXT(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => GetNamedBufferSubDataEXTPtr?.Invoke(buffer, offset, size, data);
        public static void GetNamedFramebufferParameterfvAMD(uint  framebuffer, uint  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values) => GetNamedFramebufferParameterfvAMDPtr?.Invoke(framebuffer, pname, numsamples, pixelindex, size, values);
        public static void GetNamedFramebufferAttachmentParameteriv(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetNamedFramebufferAttachmentParameterivPtr?.Invoke(framebuffer, attachment, pname, parameters);
        public static void GetNamedFramebufferAttachmentParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetNamedFramebufferAttachmentParameterivEXTPtr?.Invoke(framebuffer, attachment, pname, parameters);
        public static void GetNamedFramebufferParameteriv(uint  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  param) => GetNamedFramebufferParameterivPtr?.Invoke(framebuffer, pname, param);
        public static void GetNamedFramebufferParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters) => GetNamedFramebufferParameterivEXTPtr?.Invoke(framebuffer, pname, parameters);
        public static void GetNamedProgramLocalParameterIivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => GetNamedProgramLocalParameterIivEXTPtr?.Invoke(program, target, index, parameters);
        public static void GetNamedProgramLocalParameterIuivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => GetNamedProgramLocalParameterIuivEXTPtr?.Invoke(program, target, index, parameters);
        public static void GetNamedProgramLocalParameterdvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => GetNamedProgramLocalParameterdvEXTPtr?.Invoke(program, target, index, parameters);
        public static void GetNamedProgramLocalParameterfvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => GetNamedProgramLocalParameterfvEXTPtr?.Invoke(program, target, index, parameters);
        public static void GetNamedProgramStringEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str) => GetNamedProgramStringEXTPtr?.Invoke(program, target, pname, str);
        public static void GetNamedProgramivEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => GetNamedProgramivEXTPtr?.Invoke(program, target, pname, parameters);
        public static void GetNamedRenderbufferParameteriv(uint  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => GetNamedRenderbufferParameterivPtr?.Invoke(renderbuffer, pname, parameters);
        public static void GetNamedRenderbufferParameterivEXT(uint /*Renderbuffer*/  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => GetNamedRenderbufferParameterivEXTPtr?.Invoke(renderbuffer, pname, parameters);
        public static void GetNamedStringARB(int  namelen, string  name, uint  bufSize, int[]  stringlen, string  str) => GetNamedStringARBPtr?.Invoke(namelen, name, bufSize, stringlen, str);
        public static void GetNamedStringivARB(int  namelen, string  name, uint  pname, int[]  parameters) => GetNamedStringivARBPtr?.Invoke(namelen, name, pname, parameters);
        public static void GetNextPerfQueryIdINTEL(uint  queryId, uint[]  nextQueryId) => GetNextPerfQueryIdINTELPtr?.Invoke(queryId, nextQueryId);
        public static void GetObjectBufferfvATI(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => GetObjectBufferfvATIPtr?.Invoke(buffer, pname, parameters);
        public static void GetObjectBufferivATI(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => GetObjectBufferivATIPtr?.Invoke(buffer, pname, parameters);
        public static void GetObjectLabel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  bufSize, uint[]  length, string  label) => GetObjectLabelPtr?.Invoke(identifier, name, bufSize, length, label);
        public static void GetObjectLabelEXT(uint  type, uint  obj, uint  bufSize, uint[]  length, string  label) => GetObjectLabelEXTPtr?.Invoke(type, obj, bufSize, length, label);
        public static void GetObjectLabelKHR(uint  identifier, uint  name, uint  bufSize, uint[]  length, string  label) => GetObjectLabelKHRPtr?.Invoke(identifier, name, bufSize, length, label);
        public static void GetObjectParameterfvARB(IntPtr /*handleARB*/  obj, uint  pname, float[]  parameters) => GetObjectParameterfvARBPtr?.Invoke(obj, pname, parameters);
        public static void GetObjectParameterivAPPLE(uint  objectType, uint  name, uint  pname, int[]  parameters) => GetObjectParameterivAPPLEPtr?.Invoke(objectType, name, pname, parameters);
        public static void GetObjectParameterivARB(IntPtr /*handleARB*/  obj, uint  pname, int[]  parameters) => GetObjectParameterivARBPtr?.Invoke(obj, pname, parameters);
        public static void GetObjectPtrLabel(IntPtr  ptr, uint  bufSize, uint[]  length, string  label) => GetObjectPtrLabelPtr?.Invoke(ptr, bufSize, length, label);
        public static void GetObjectPtrLabelKHR(IntPtr  ptr, uint  bufSize, uint[]  length, string  label) => GetObjectPtrLabelKHRPtr?.Invoke(ptr, bufSize, length, label);
        public static void GetOcclusionQueryivNV(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, int[]  parameters) => GetOcclusionQueryivNVPtr?.Invoke(id, pname, parameters);
        public static void GetOcclusionQueryuivNV(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, uint[]  parameters) => GetOcclusionQueryuivNVPtr?.Invoke(id, pname, parameters);
        public static void GetPathColorGenfvNV(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, float[]  value) => GetPathColorGenfvNVPtr?.Invoke(color, pname, value);
        public static void GetPathColorGenivNV(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, int[]  value) => GetPathColorGenivNVPtr?.Invoke(color, pname, value);
        public static void GetPathCommandsNV(uint /*Path*/  path, byte[] /*PathCommand*/  commands) => GetPathCommandsNVPtr?.Invoke(path, commands);
        public static void GetPathCoordsNV(uint /*Path*/  path, float[]  coords) => GetPathCoordsNVPtr?.Invoke(path, coords);
        public static void GetPathDashArrayNV(uint /*Path*/  path, float[]  dashArray) => GetPathDashArrayNVPtr?.Invoke(path, dashArray);
        public static float GetPathLengthNV(uint /*Path*/  path, uint  startSegment, uint  numSegments) => GetPathLengthNVPtr?.Invoke(path, startSegment, numSegments) ?? default;
        public static void GetPathMetricRangeNV(uint /*PathMetricMask*/  metricQueryMask, uint /*Path*/  firstPathName, uint  numPaths, uint  stride, float[]  metrics) => GetPathMetricRangeNVPtr?.Invoke(metricQueryMask, firstPathName, numPaths, stride, metrics);
        public static void GetPathMetricsNV(uint /*PathMetricMask*/  metricQueryMask, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint  stride, float[]  metrics) => GetPathMetricsNVPtr?.Invoke(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        public static void GetPathParameterfvNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value) => GetPathParameterfvNVPtr?.Invoke(path, pname, value);
        public static void GetPathParameterivNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value) => GetPathParameterivNVPtr?.Invoke(path, pname, value);
        public static void GetPathSpacingNV(uint /*PathListMode*/  pathListMode, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, float  advanceScale, float  kerningScale, uint /*PathTransformType*/  transformType, float[]  returnedSpacing) => GetPathSpacingNVPtr?.Invoke(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        public static void GetPathTexGenfvNV(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, float[]  value) => GetPathTexGenfvNVPtr?.Invoke(texCoordSet, pname, value);
        public static void GetPathTexGenivNV(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, int[]  value) => GetPathTexGenivNVPtr?.Invoke(texCoordSet, pname, value);
        public static void GetPerfCounterInfoINTEL(uint  queryId, uint  counterId, uint  counterNameLength, string  counterName, uint  counterDescLength, string  counterDesc, uint[]  counterOffset, uint[]  counterDataSize, uint[]  counterTypeEnum, uint[]  counterDataTypeEnum, ulong[]  rawCounterMaxValue) => GetPerfCounterInfoINTELPtr?.Invoke(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        public static void GetPerfMonitorCounterDataAMD(uint  monitor, uint  pname, uint  dataSize, uint[]  data, int[]  bytesWritten) => GetPerfMonitorCounterDataAMDPtr?.Invoke(monitor, pname, dataSize, data, bytesWritten);
        public static void GetPerfMonitorCounterInfoAMD(uint  group, uint  counter, uint  pname, IntPtr  data) => GetPerfMonitorCounterInfoAMDPtr?.Invoke(group, counter, pname, data);
        public static void GetPerfMonitorCounterStringAMD(uint  group, uint  counter, uint  bufSize, uint[]  length, string  counterString) => GetPerfMonitorCounterStringAMDPtr?.Invoke(group, counter, bufSize, length, counterString);
        public static void GetPerfMonitorCountersAMD(uint  group, int[]  numCounters, int[]  maxActiveCounters, uint  counterSize, uint[]  counters) => GetPerfMonitorCountersAMDPtr?.Invoke(group, numCounters, maxActiveCounters, counterSize, counters);
        public static void GetPerfMonitorGroupStringAMD(uint  group, uint  bufSize, uint[]  length, string  groupString) => GetPerfMonitorGroupStringAMDPtr?.Invoke(group, bufSize, length, groupString);
        public static void GetPerfMonitorGroupsAMD(int[]  numGroups, uint  groupsSize, uint[]  groups) => GetPerfMonitorGroupsAMDPtr?.Invoke(numGroups, groupsSize, groups);
        public static void GetPerfQueryDataINTEL(uint  queryHandle, uint  flags, uint  dataSize, IntPtr  data, uint[]  bytesWritten) => GetPerfQueryDataINTELPtr?.Invoke(queryHandle, flags, dataSize, data, bytesWritten);
        public static void GetPerfQueryIdByNameINTEL(string  queryName, uint[]  queryId) => GetPerfQueryIdByNameINTELPtr?.Invoke(queryName, queryId);
        public static void GetPerfQueryInfoINTEL(uint  queryId, uint  queryNameLength, string  queryName, uint[]  dataSize, uint[]  noCounters, uint[]  noInstances, uint[]  capsMask) => GetPerfQueryInfoINTELPtr?.Invoke(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        public static void GetPixelMapfv(uint /*PixelMap*/  map, float[]  values) => GetPixelMapfvPtr?.Invoke(map, values);
        public static void GetPixelMapuiv(uint /*PixelMap*/  map, uint[]  values) => GetPixelMapuivPtr?.Invoke(map, values);
        public static void GetPixelMapusv(uint /*PixelMap*/  map, ushort[]  values) => GetPixelMapusvPtr?.Invoke(map, values);
        public static void GetPixelMapxv(uint /*PixelMap*/  map, int  size, int[]  values) => GetPixelMapxvPtr?.Invoke(map, size, values);
        public static void GetPixelTexGenParameterfvSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters) => GetPixelTexGenParameterfvSGISPtr?.Invoke(pname, parameters);
        public static void GetPixelTexGenParameterivSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters) => GetPixelTexGenParameterivSGISPtr?.Invoke(pname, parameters);
        public static void GetPixelTransformParameterfvEXT(uint  target, uint  pname, float[]  parameters) => GetPixelTransformParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void GetPixelTransformParameterivEXT(uint  target, uint  pname, int[]  parameters) => GetPixelTransformParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetPointerIndexedvEXT(uint  target, uint  index, IntPtr  data) => GetPointerIndexedvEXTPtr?.Invoke(target, index, data);
        public static void GetPointeri_vEXT(uint  pname, uint  index, IntPtr  parameters) => GetPointeri_vEXTPtr?.Invoke(pname, index, parameters);
        public static void GetPointerv(uint /*GetPointervPName*/  pname, IntPtr  parameters) => GetPointervPtr?.Invoke(pname, parameters);
        public static void GetPointervEXT(uint /*GetPointervPName*/  pname, IntPtr  parameters) => GetPointervEXTPtr?.Invoke(pname, parameters);
        public static void GetPointervKHR(uint  pname, IntPtr  parameters) => GetPointervKHRPtr?.Invoke(pname, parameters);
        public static void GetPolygonStipple(byte[]  mask) => GetPolygonStipplePtr?.Invoke(mask);
        public static void GetProgramBinary(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary) => GetProgramBinaryPtr?.Invoke(program, bufSize, length, binaryFormat, binary);
        public static void GetProgramBinaryOES(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary) => GetProgramBinaryOESPtr?.Invoke(program, bufSize, length, binaryFormat, binary);
        public static void GetProgramEnvParameterIivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => GetProgramEnvParameterIivNVPtr?.Invoke(target, index, parameters);
        public static void GetProgramEnvParameterIuivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => GetProgramEnvParameterIuivNVPtr?.Invoke(target, index, parameters);
        public static void GetProgramEnvParameterdvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => GetProgramEnvParameterdvARBPtr?.Invoke(target, index, parameters);
        public static void GetProgramEnvParameterfvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => GetProgramEnvParameterfvARBPtr?.Invoke(target, index, parameters);
        public static void GetProgramInfoLog(uint  program, uint  bufSize, uint[]  length, string  infoLog) => GetProgramInfoLogPtr?.Invoke(program, bufSize, length, infoLog);
        public static void GetProgramInterfaceiv(uint  program, uint /*ProgramInterface*/  programInterface, uint /*ProgramInterfacePName*/  pname, int[]  parameters) => GetProgramInterfaceivPtr?.Invoke(program, programInterface, pname, parameters);
        public static void GetProgramLocalParameterIivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => GetProgramLocalParameterIivNVPtr?.Invoke(target, index, parameters);
        public static void GetProgramLocalParameterIuivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => GetProgramLocalParameterIuivNVPtr?.Invoke(target, index, parameters);
        public static void GetProgramLocalParameterdvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => GetProgramLocalParameterdvARBPtr?.Invoke(target, index, parameters);
        public static void GetProgramLocalParameterfvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => GetProgramLocalParameterfvARBPtr?.Invoke(target, index, parameters);
        public static void GetProgramNamedParameterdvNV(uint  id, uint  len, byte[]  name, double[]  parameters) => GetProgramNamedParameterdvNVPtr?.Invoke(id, len, name, parameters);
        public static void GetProgramNamedParameterfvNV(uint  id, uint  len, byte[]  name, float[]  parameters) => GetProgramNamedParameterfvNVPtr?.Invoke(id, len, name, parameters);
        public static void GetProgramParameterdvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters) => GetProgramParameterdvNVPtr?.Invoke(target, index, pname, parameters);
        public static void GetProgramParameterfvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters) => GetProgramParameterfvNVPtr?.Invoke(target, index, pname, parameters);
        public static void GetProgramPipelineInfoLog(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog) => GetProgramPipelineInfoLogPtr?.Invoke(pipeline, bufSize, length, infoLog);
        public static void GetProgramPipelineInfoLogEXT(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog) => GetProgramPipelineInfoLogEXTPtr?.Invoke(pipeline, bufSize, length, infoLog);
        public static void GetProgramPipelineiv(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters) => GetProgramPipelineivPtr?.Invoke(pipeline, pname, parameters);
        public static void GetProgramPipelineivEXT(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters) => GetProgramPipelineivEXTPtr?.Invoke(pipeline, pname, parameters);
        public static uint GetProgramResourceIndex(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => GetProgramResourceIndexPtr?.Invoke(program, programInterface, name) ?? default;
        public static int GetProgramResourceLocation(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => GetProgramResourceLocationPtr?.Invoke(program, programInterface, name) ?? default;
        public static int GetProgramResourceLocationIndex(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => GetProgramResourceLocationIndexPtr?.Invoke(program, programInterface, name) ?? default;
        public static int GetProgramResourceLocationIndexEXT(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => GetProgramResourceLocationIndexEXTPtr?.Invoke(program, programInterface, name) ?? default;
        public static void GetProgramResourceName(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  bufSize, uint[]  length, string  name) => GetProgramResourceNamePtr?.Invoke(program, programInterface, index, bufSize, length, name);
        public static void GetProgramResourcefvNV(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[]  props, uint  count, uint[]  length, float[]  parameters) => GetProgramResourcefvNVPtr?.Invoke(program, programInterface, index, propCount, props, count, length, parameters);
        public static void GetProgramResourceiv(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[] /*ProgramResourceProperty*/  props, uint  count, uint[]  length, int[]  parameters) => GetProgramResourceivPtr?.Invoke(program, programInterface, index, propCount, props, count, length, parameters);
        public static void GetProgramStageiv(uint  program, uint /*ShaderType*/  shadertype, uint /*ProgramStagePName*/  pname, int[]  values) => GetProgramStageivPtr?.Invoke(program, shadertype, pname, values);
        public static void GetProgramStringARB(uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str) => GetProgramStringARBPtr?.Invoke(target, pname, str);
        public static void GetProgramStringNV(uint  id, uint /*VertexAttribEnumNV*/  pname, byte[] /*ProgramCharacterNV*/  program) => GetProgramStringNVPtr?.Invoke(id, pname, program);
        public static void GetProgramSubroutineParameteruivNV(uint  target, uint  index, uint[]  param) => GetProgramSubroutineParameteruivNVPtr?.Invoke(target, index, param);
        public static void GetProgramiv(uint  program, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => GetProgramivPtr?.Invoke(program, pname, parameters);
        public static void GetProgramivARB(uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => GetProgramivARBPtr?.Invoke(target, pname, parameters);
        public static void GetProgramivNV(uint  id, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => GetProgramivNVPtr?.Invoke(id, pname, parameters);
        public static void GetQueryBufferObjecti64v(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => GetQueryBufferObjecti64vPtr?.Invoke(id, buffer, pname, offset);
        public static void GetQueryBufferObjectiv(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => GetQueryBufferObjectivPtr?.Invoke(id, buffer, pname, offset);
        public static void GetQueryBufferObjectui64v(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => GetQueryBufferObjectui64vPtr?.Invoke(id, buffer, pname, offset);
        public static void GetQueryBufferObjectuiv(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => GetQueryBufferObjectuivPtr?.Invoke(id, buffer, pname, offset);
        public static void GetQueryIndexediv(uint /*QueryTarget*/  target, uint  index, uint /*QueryParameterName*/  pname, int[]  parameters) => GetQueryIndexedivPtr?.Invoke(target, index, pname, parameters);
        public static void GetQueryObjecti64v(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters) => GetQueryObjecti64vPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjecti64vEXT(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters) => GetQueryObjecti64vEXTPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectiv(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => GetQueryObjectivPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectivARB(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => GetQueryObjectivARBPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectivEXT(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => GetQueryObjectivEXTPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectui64v(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters) => GetQueryObjectui64vPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectui64vEXT(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters) => GetQueryObjectui64vEXTPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectuiv(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => GetQueryObjectuivPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectuivARB(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => GetQueryObjectuivARBPtr?.Invoke(id, pname, parameters);
        public static void GetQueryObjectuivEXT(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => GetQueryObjectuivEXTPtr?.Invoke(id, pname, parameters);
        public static void GetQueryiv(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => GetQueryivPtr?.Invoke(target, pname, parameters);
        public static void GetQueryivARB(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => GetQueryivARBPtr?.Invoke(target, pname, parameters);
        public static void GetQueryivEXT(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => GetQueryivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetRenderbufferParameteriv(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => GetRenderbufferParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetRenderbufferParameterivEXT(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => GetRenderbufferParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetRenderbufferParameterivOES(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => GetRenderbufferParameterivOESPtr?.Invoke(target, pname, parameters);
        public static void GetSamplerParameterIiv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => GetSamplerParameterIivPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterIivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => GetSamplerParameterIivEXTPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterIivOES(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => GetSamplerParameterIivOESPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterIuiv(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => GetSamplerParameterIuivPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterIuivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => GetSamplerParameterIuivEXTPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterIuivOES(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => GetSamplerParameterIuivOESPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameterfv(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  parameters) => GetSamplerParameterfvPtr?.Invoke(sampler, pname, parameters);
        public static void GetSamplerParameteriv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => GetSamplerParameterivPtr?.Invoke(sampler, pname, parameters);
        public static void GetSemaphoreParameterui64vEXT(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters) => GetSemaphoreParameterui64vEXTPtr?.Invoke(semaphore, pname, parameters);
        public static void GetSeparableFilter(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span) => GetSeparableFilterPtr?.Invoke(target, format, type, row, column, span);
        public static void GetSeparableFilterEXT(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span) => GetSeparableFilterEXTPtr?.Invoke(target, format, type, row, column, span);
        public static void GetShaderInfoLog(uint  shader, uint  bufSize, uint[]  length, string  infoLog) => GetShaderInfoLogPtr?.Invoke(shader, bufSize, length, infoLog);
        public static void GetShaderPrecisionFormat(uint /*ShaderType*/  shadertype, uint /*PrecisionType*/  precisiontype, int[]  range, int[]  precision) => GetShaderPrecisionFormatPtr?.Invoke(shadertype, precisiontype, range, precision);
        public static void GetShaderSource(uint  shader, uint  bufSize, uint[]  length, string  source) => GetShaderSourcePtr?.Invoke(shader, bufSize, length, source);
        public static void GetShaderSourceARB(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  source) => GetShaderSourceARBPtr?.Invoke(obj, maxLength, length, source);
        public static void GetShaderiv(uint  shader, uint /*ShaderParameterName*/  pname, int[]  parameters) => GetShaderivPtr?.Invoke(shader, pname, parameters);
        public static void GetShadingRateImagePaletteNV(uint  viewport, uint  entry, uint[]  rate) => GetShadingRateImagePaletteNVPtr?.Invoke(viewport, entry, rate);
        public static void GetShadingRateSampleLocationivNV(uint  rate, uint  samples, uint  index, int[]  location) => GetShadingRateSampleLocationivNVPtr?.Invoke(rate, samples, index, location);
        public static void GetSharpenTexFuncSGIS(uint /*TextureTarget*/  target, float[]  points) => GetSharpenTexFuncSGISPtr?.Invoke(target, points);
        public static ushort GetStageIndexNV(uint /*ShaderType*/  shadertype) => GetStageIndexNVPtr?.Invoke(shadertype) ?? default;
        public static byte /*String*/ GetString(uint /*StringName*/  name) => GetStringPtr?.Invoke(name) ?? default;
        public static byte /*String*/ GetStringi(uint /*StringName*/  name, uint  index) => GetStringiPtr?.Invoke(name, index) ?? default;
        public static uint GetSubroutineIndex(uint  program, uint /*ShaderType*/  shadertype, string  name) => GetSubroutineIndexPtr?.Invoke(program, shadertype, name) ?? default;
        public static int GetSubroutineUniformLocation(uint  program, uint /*ShaderType*/  shadertype, string  name) => GetSubroutineUniformLocationPtr?.Invoke(program, shadertype, name) ?? default;
        public static void GetSynciv(IntPtr /*sync*/  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values) => GetSyncivPtr?.Invoke(sync, pname, count, length, values);
        public static void GetSyncivAPPLE(IntPtr  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values) => GetSyncivAPPLEPtr?.Invoke(sync, pname, count, length, values);
        public static void GetTexBumpParameterfvATI(uint /*GetTexBumpParameterATI*/  pname, float[]  param) => GetTexBumpParameterfvATIPtr?.Invoke(pname, param);
        public static void GetTexBumpParameterivATI(uint /*GetTexBumpParameterATI*/  pname, int[]  param) => GetTexBumpParameterivATIPtr?.Invoke(pname, param);
        public static void GetTexEnvfv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters) => GetTexEnvfvPtr?.Invoke(target, pname, parameters);
        public static void GetTexEnviv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => GetTexEnvivPtr?.Invoke(target, pname, parameters);
        public static void GetTexEnvxv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => GetTexEnvxvPtr?.Invoke(target, pname, parameters);
        public static void GetTexEnvxvOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => GetTexEnvxvOESPtr?.Invoke(target, pname, parameters);
        public static void GetTexFilterFuncSGIS(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, float[]  weights) => GetTexFilterFuncSGISPtr?.Invoke(target, filter, weights);
        public static void GetTexGendv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => GetTexGendvPtr?.Invoke(coord, pname, parameters);
        public static void GetTexGenfv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => GetTexGenfvPtr?.Invoke(coord, pname, parameters);
        public static void GetTexGenfvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => GetTexGenfvOESPtr?.Invoke(coord, pname, parameters);
        public static void GetTexGeniv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => GetTexGenivPtr?.Invoke(coord, pname, parameters);
        public static void GetTexGenivOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => GetTexGenivOESPtr?.Invoke(coord, pname, parameters);
        public static void GetTexGenxvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => GetTexGenxvOESPtr?.Invoke(coord, pname, parameters);
        public static void GetTexImage(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => GetTexImagePtr?.Invoke(target, level, format, type, pixels);
        public static void GetTexLevelParameterfv(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTexLevelParameterfvPtr?.Invoke(target, level, pname, parameters);
        public static void GetTexLevelParameteriv(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexLevelParameterivPtr?.Invoke(target, level, pname, parameters);
        public static void GetTexLevelParameterxvOES(uint /*TextureTarget*/  target, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexLevelParameterxvOESPtr?.Invoke(target, level, pname, parameters);
        public static void GetTexParameterIiv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterIivPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterIivEXT(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterIivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterIivOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterIivOESPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterIuiv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetTexParameterIuivPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterIuivEXT(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetTexParameterIuivEXTPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterIuivOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetTexParameterIuivOESPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterPointervAPPLE(uint  target, uint  pname, IntPtr  parameters) => GetTexParameterPointervAPPLEPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterfv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTexParameterfvPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameteriv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterivPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterxv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterxvPtr?.Invoke(target, pname, parameters);
        public static void GetTexParameterxvOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTexParameterxvOESPtr?.Invoke(target, pname, parameters);
        public static ulong GetTextureHandleARB(uint  texture) => GetTextureHandleARBPtr?.Invoke(texture) ?? default;
        public static ulong GetTextureHandleIMG(uint  texture) => GetTextureHandleIMGPtr?.Invoke(texture) ?? default;
        public static ulong GetTextureHandleNV(uint  texture) => GetTextureHandleNVPtr?.Invoke(texture) ?? default;
        public static void GetTextureImage(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => GetTextureImagePtr?.Invoke(texture, level, format, type, bufSize, pixels);
        public static void GetTextureImageEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => GetTextureImageEXTPtr?.Invoke(texture, target, level, format, type, pixels);
        public static void GetTextureLevelParameterfv(uint  texture, int  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTextureLevelParameterfvPtr?.Invoke(texture, level, pname, parameters);
        public static void GetTextureLevelParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTextureLevelParameterfvEXTPtr?.Invoke(texture, target, level, pname, parameters);
        public static void GetTextureLevelParameteriv(uint  texture, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureLevelParameterivPtr?.Invoke(texture, level, pname, parameters);
        public static void GetTextureLevelParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureLevelParameterivEXTPtr?.Invoke(texture, target, level, pname, parameters);
        public static void GetTextureParameterIiv(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureParameterIivPtr?.Invoke(texture, pname, parameters);
        public static void GetTextureParameterIivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureParameterIivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void GetTextureParameterIuiv(uint  texture, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetTextureParameterIuivPtr?.Invoke(texture, pname, parameters);
        public static void GetTextureParameterIuivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => GetTextureParameterIuivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void GetTextureParameterfv(uint  texture, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTextureParameterfvPtr?.Invoke(texture, pname, parameters);
        public static void GetTextureParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => GetTextureParameterfvEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void GetTextureParameteriv(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureParameterivPtr?.Invoke(texture, pname, parameters);
        public static void GetTextureParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => GetTextureParameterivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static ulong GetTextureSamplerHandleARB(uint  texture, uint  sampler) => GetTextureSamplerHandleARBPtr?.Invoke(texture, sampler) ?? default;
        public static ulong GetTextureSamplerHandleIMG(uint  texture, uint  sampler) => GetTextureSamplerHandleIMGPtr?.Invoke(texture, sampler) ?? default;
        public static ulong GetTextureSamplerHandleNV(uint  texture, uint  sampler) => GetTextureSamplerHandleNVPtr?.Invoke(texture, sampler) ?? default;
        public static void GetTextureSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => GetTextureSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        public static void GetTrackMatrixivNV(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => GetTrackMatrixivNVPtr?.Invoke(target, address, pname, parameters);
        public static void GetTransformFeedbackVarying(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name) => GetTransformFeedbackVaryingPtr?.Invoke(program, index, bufSize, length, size, type, name);
        public static void GetTransformFeedbackVaryingEXT(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name) => GetTransformFeedbackVaryingEXTPtr?.Invoke(program, index, bufSize, length, size, type, name);
        public static void GetTransformFeedbackVaryingNV(uint  program, uint  index, int[]  location) => GetTransformFeedbackVaryingNVPtr?.Invoke(program, index, location);
        public static void GetTransformFeedbacki64_v(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, long[]  param) => GetTransformFeedbacki64_vPtr?.Invoke(xfb, pname, index, param);
        public static void GetTransformFeedbacki_v(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, int[]  param) => GetTransformFeedbacki_vPtr?.Invoke(xfb, pname, index, param);
        public static void GetTransformFeedbackiv(uint  xfb, uint /*TransformFeedbackPName*/  pname, int[]  param) => GetTransformFeedbackivPtr?.Invoke(xfb, pname, param);
        public static void GetTranslatedShaderSourceANGLE(uint  shader, uint  bufSize, uint[]  length, string  source) => GetTranslatedShaderSourceANGLEPtr?.Invoke(shader, bufSize, length, source);
        public static uint GetUniformBlockIndex(uint  program, string  uniformBlockName) => GetUniformBlockIndexPtr?.Invoke(program, uniformBlockName) ?? default;
        public static int GetUniformBufferSizeEXT(uint  program, int  location) => GetUniformBufferSizeEXTPtr?.Invoke(program, location) ?? default;
        public static void GetUniformIndices(uint  program, uint  uniformCount, string  uniformNames, uint[]  uniformIndices) => GetUniformIndicesPtr?.Invoke(program, uniformCount, uniformNames, uniformIndices);
        public static int GetUniformLocation(uint  program, string  name) => GetUniformLocationPtr?.Invoke(program, name) ?? default;
        public static int GetUniformLocationARB(IntPtr /*handleARB*/  programObj, string  name) => GetUniformLocationARBPtr?.Invoke(programObj, name) ?? default;
        public static IntPtr /*BufferOffset*/ GetUniformOffsetEXT(uint  program, int  location) => GetUniformOffsetEXTPtr?.Invoke(program, location) ?? default;
        public static void GetUniformSubroutineuiv(uint /*ShaderType*/  shadertype, int  location, uint[]  parameters) => GetUniformSubroutineuivPtr?.Invoke(shadertype, location, parameters);
        public static void GetUniformdv(uint  program, int  location, double[]  parameters) => GetUniformdvPtr?.Invoke(program, location, parameters);
        public static void GetUniformfv(uint  program, int  location, float[]  parameters) => GetUniformfvPtr?.Invoke(program, location, parameters);
        public static void GetUniformfvARB(IntPtr /*handleARB*/  programObj, int  location, float[]  parameters) => GetUniformfvARBPtr?.Invoke(programObj, location, parameters);
        public static void GetUniformi64vARB(uint  program, int  location, long[]  parameters) => GetUniformi64vARBPtr?.Invoke(program, location, parameters);
        public static void GetUniformi64vNV(uint  program, int  location, long[]  parameters) => GetUniformi64vNVPtr?.Invoke(program, location, parameters);
        public static void GetUniformiv(uint  program, int  location, int[]  parameters) => GetUniformivPtr?.Invoke(program, location, parameters);
        public static void GetUniformivARB(IntPtr /*handleARB*/  programObj, int  location, int[]  parameters) => GetUniformivARBPtr?.Invoke(programObj, location, parameters);
        public static void GetUniformui64vARB(uint  program, int  location, ulong[]  parameters) => GetUniformui64vARBPtr?.Invoke(program, location, parameters);
        public static void GetUniformui64vNV(uint  program, int  location, ulong[]  parameters) => GetUniformui64vNVPtr?.Invoke(program, location, parameters);
        public static void GetUniformuiv(uint  program, int  location, uint[]  parameters) => GetUniformuivPtr?.Invoke(program, location, parameters);
        public static void GetUniformuivEXT(uint  program, int  location, uint[]  parameters) => GetUniformuivEXTPtr?.Invoke(program, location, parameters);
        public static void GetUnsignedBytevEXT(uint /*GetPName*/  pname, byte[]  data) => GetUnsignedBytevEXTPtr?.Invoke(pname, data);
        public static void GetUnsignedBytei_vEXT(uint  target, uint  index, byte[]  data) => GetUnsignedBytei_vEXTPtr?.Invoke(target, index, data);
        public static void GetVariantArrayObjectfvATI(uint  id, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => GetVariantArrayObjectfvATIPtr?.Invoke(id, pname, parameters);
        public static void GetVariantArrayObjectivATI(uint  id, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => GetVariantArrayObjectivATIPtr?.Invoke(id, pname, parameters);
        public static void GetVariantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => GetVariantBooleanvEXTPtr?.Invoke(id, value, data);
        public static void GetVariantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => GetVariantFloatvEXTPtr?.Invoke(id, value, data);
        public static void GetVariantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => GetVariantIntegervEXTPtr?.Invoke(id, value, data);
        public static void GetVariantPointervEXT(uint  id, uint /*GetVariantValueEXT*/  value, IntPtr  data) => GetVariantPointervEXTPtr?.Invoke(id, value, data);
        public static int GetVaryingLocationNV(uint  program, string  name) => GetVaryingLocationNVPtr?.Invoke(program, name) ?? default;
        public static void GetVertexArrayIndexed64iv(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, long[]  param) => GetVertexArrayIndexed64ivPtr?.Invoke(vaobj, index, pname, param);
        public static void GetVertexArrayIndexediv(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param) => GetVertexArrayIndexedivPtr?.Invoke(vaobj, index, pname, param);
        public static void GetVertexArrayIntegeri_vEXT(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param) => GetVertexArrayIntegeri_vEXTPtr?.Invoke(vaobj, index, pname, param);
        public static void GetVertexArrayIntegervEXT(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param) => GetVertexArrayIntegervEXTPtr?.Invoke(vaobj, pname, param);
        public static void GetVertexArrayPointeri_vEXT(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, IntPtr  param) => GetVertexArrayPointeri_vEXTPtr?.Invoke(vaobj, index, pname, param);
        public static void GetVertexArrayPointervEXT(uint  vaobj, uint /*VertexArrayPName*/  pname, IntPtr  param) => GetVertexArrayPointervEXTPtr?.Invoke(vaobj, pname, param);
        public static void GetVertexArrayiv(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param) => GetVertexArrayivPtr?.Invoke(vaobj, pname, param);
        public static void GetVertexAttribArrayObjectfvATI(uint  index, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => GetVertexAttribArrayObjectfvATIPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribArrayObjectivATI(uint  index, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => GetVertexAttribArrayObjectivATIPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribIiv(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters) => GetVertexAttribIivPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribIivEXT(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters) => GetVertexAttribIivEXTPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribIuiv(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters) => GetVertexAttribIuivPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribIuivEXT(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters) => GetVertexAttribIuivEXTPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribLdv(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters) => GetVertexAttribLdvPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribLdvEXT(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters) => GetVertexAttribLdvEXTPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribLi64vNV(uint  index, uint /*VertexAttribEnum*/  pname, long[]  parameters) => GetVertexAttribLi64vNVPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribLui64vARB(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters) => GetVertexAttribLui64vARBPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribLui64vNV(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters) => GetVertexAttribLui64vNVPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribPointerv(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer) => GetVertexAttribPointervPtr?.Invoke(index, pname, pointer);
        public static void GetVertexAttribPointervARB(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer) => GetVertexAttribPointervARBPtr?.Invoke(index, pname, pointer);
        public static void GetVertexAttribPointervNV(uint  index, uint /*VertexAttribEnumNV*/  pname, IntPtr  pointer) => GetVertexAttribPointervNVPtr?.Invoke(index, pname, pointer);
        public static void GetVertexAttribdv(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters) => GetVertexAttribdvPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribdvARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters) => GetVertexAttribdvARBPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribdvNV(uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters) => GetVertexAttribdvNVPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribfv(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters) => GetVertexAttribfvPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribfvARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters) => GetVertexAttribfvARBPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribfvNV(uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters) => GetVertexAttribfvNVPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribiv(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters) => GetVertexAttribivPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribivARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters) => GetVertexAttribivARBPtr?.Invoke(index, pname, parameters);
        public static void GetVertexAttribivNV(uint  index, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => GetVertexAttribivNVPtr?.Invoke(index, pname, parameters);
        public static void GetVideoCaptureStreamdvNV(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters) => GetVideoCaptureStreamdvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void GetVideoCaptureStreamfvNV(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters) => GetVideoCaptureStreamfvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void GetVideoCaptureStreamivNV(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters) => GetVideoCaptureStreamivNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void GetVideoCaptureivNV(uint  video_capture_slot, uint  pname, int[]  parameters) => GetVideoCaptureivNVPtr?.Invoke(video_capture_slot, pname, parameters);
        public static void GetVideoi64vNV(uint  video_slot, uint  pname, long[]  parameters) => GetVideoi64vNVPtr?.Invoke(video_slot, pname, parameters);
        public static void GetVideoivNV(uint  video_slot, uint  pname, int[]  parameters) => GetVideoivNVPtr?.Invoke(video_slot, pname, parameters);
        public static void GetVideoui64vNV(uint  video_slot, uint  pname, ulong[]  parameters) => GetVideoui64vNVPtr?.Invoke(video_slot, pname, parameters);
        public static void GetVideouivNV(uint  video_slot, uint  pname, uint[]  parameters) => GetVideouivNVPtr?.Invoke(video_slot, pname, parameters);
        public static void GetnColorTable(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table) => GetnColorTablePtr?.Invoke(target, format, type, bufSize, table);
        public static void GetnColorTableARB(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table) => GetnColorTableARBPtr?.Invoke(target, format, type, bufSize, table);
        public static void GetnCompressedTexImage(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  pixels) => GetnCompressedTexImagePtr?.Invoke(target, lod, bufSize, pixels);
        public static void GetnCompressedTexImageARB(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  img) => GetnCompressedTexImageARBPtr?.Invoke(target, lod, bufSize, img);
        public static void GetnConvolutionFilter(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image) => GetnConvolutionFilterPtr?.Invoke(target, format, type, bufSize, image);
        public static void GetnConvolutionFilterARB(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image) => GetnConvolutionFilterARBPtr?.Invoke(target, format, type, bufSize, image);
        public static void GetnHistogram(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => GetnHistogramPtr?.Invoke(target, reset, format, type, bufSize, values);
        public static void GetnHistogramARB(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => GetnHistogramARBPtr?.Invoke(target, reset, format, type, bufSize, values);
        public static void GetnMapdv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v) => GetnMapdvPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMapdvARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v) => GetnMapdvARBPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMapfv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v) => GetnMapfvPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMapfvARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v) => GetnMapfvARBPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMapiv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v) => GetnMapivPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMapivARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v) => GetnMapivARBPtr?.Invoke(target, query, bufSize, v);
        public static void GetnMinmax(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => GetnMinmaxPtr?.Invoke(target, reset, format, type, bufSize, values);
        public static void GetnMinmaxARB(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => GetnMinmaxARBPtr?.Invoke(target, reset, format, type, bufSize, values);
        public static void GetnPixelMapfv(uint /*PixelMap*/  map, uint  bufSize, float[]  values) => GetnPixelMapfvPtr?.Invoke(map, bufSize, values);
        public static void GetnPixelMapfvARB(uint /*PixelMap*/  map, uint  bufSize, float[]  values) => GetnPixelMapfvARBPtr?.Invoke(map, bufSize, values);
        public static void GetnPixelMapuiv(uint /*PixelMap*/  map, uint  bufSize, uint[]  values) => GetnPixelMapuivPtr?.Invoke(map, bufSize, values);
        public static void GetnPixelMapuivARB(uint /*PixelMap*/  map, uint  bufSize, uint[]  values) => GetnPixelMapuivARBPtr?.Invoke(map, bufSize, values);
        public static void GetnPixelMapusv(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values) => GetnPixelMapusvPtr?.Invoke(map, bufSize, values);
        public static void GetnPixelMapusvARB(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values) => GetnPixelMapusvARBPtr?.Invoke(map, bufSize, values);
        public static void GetnPolygonStipple(uint  bufSize, byte[]  pattern) => GetnPolygonStipplePtr?.Invoke(bufSize, pattern);
        public static void GetnPolygonStippleARB(uint  bufSize, byte[]  pattern) => GetnPolygonStippleARBPtr?.Invoke(bufSize, pattern);
        public static void GetnSeparableFilter(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span) => GetnSeparableFilterPtr?.Invoke(target, format, type, rowBufSize, row, columnBufSize, column, span);
        public static void GetnSeparableFilterARB(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span) => GetnSeparableFilterARBPtr?.Invoke(target, format, type, rowBufSize, row, columnBufSize, column, span);
        public static void GetnTexImage(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => GetnTexImagePtr?.Invoke(target, level, format, type, bufSize, pixels);
        public static void GetnTexImageARB(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  img) => GetnTexImageARBPtr?.Invoke(target, level, format, type, bufSize, img);
        public static void GetnUniformdv(uint  program, int  location, uint  bufSize, double[]  parameters) => GetnUniformdvPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformdvARB(uint  program, int  location, uint  bufSize, double[]  parameters) => GetnUniformdvARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformfv(uint  program, int  location, uint  bufSize, float[]  parameters) => GetnUniformfvPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformfvARB(uint  program, int  location, uint  bufSize, float[]  parameters) => GetnUniformfvARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformfvEXT(uint  program, int  location, uint  bufSize, float[]  parameters) => GetnUniformfvEXTPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformfvKHR(uint  program, int  location, uint  bufSize, float[]  parameters) => GetnUniformfvKHRPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformi64vARB(uint  program, int  location, uint  bufSize, long[]  parameters) => GetnUniformi64vARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformiv(uint  program, int  location, uint  bufSize, int[]  parameters) => GetnUniformivPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformivARB(uint  program, int  location, uint  bufSize, int[]  parameters) => GetnUniformivARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformivEXT(uint  program, int  location, uint  bufSize, int[]  parameters) => GetnUniformivEXTPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformivKHR(uint  program, int  location, uint  bufSize, int[]  parameters) => GetnUniformivKHRPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformui64vARB(uint  program, int  location, uint  bufSize, ulong[]  parameters) => GetnUniformui64vARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformuiv(uint  program, int  location, uint  bufSize, uint[]  parameters) => GetnUniformuivPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformuivARB(uint  program, int  location, uint  bufSize, uint[]  parameters) => GetnUniformuivARBPtr?.Invoke(program, location, bufSize, parameters);
        public static void GetnUniformuivKHR(uint  program, int  location, uint  bufSize, uint[]  parameters) => GetnUniformuivKHRPtr?.Invoke(program, location, bufSize, parameters);
        public static void GlobalAlphaFactorbSUN(sbyte  factor) => GlobalAlphaFactorbSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactordSUN(double  factor) => GlobalAlphaFactordSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactorfSUN(float  factor) => GlobalAlphaFactorfSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactoriSUN(int  factor) => GlobalAlphaFactoriSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactorsSUN(short  factor) => GlobalAlphaFactorsSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactorubSUN(byte  factor) => GlobalAlphaFactorubSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactoruiSUN(uint  factor) => GlobalAlphaFactoruiSUNPtr?.Invoke(factor);
        public static void GlobalAlphaFactorusSUN(ushort  factor) => GlobalAlphaFactorusSUNPtr?.Invoke(factor);
        public static void Hint(uint /*HintTarget*/  target, uint /*HintMode*/  mode) => HintPtr?.Invoke(target, mode);
        public static void HintPGI(uint /*HintTargetPGI*/  target, int  mode) => HintPGIPtr?.Invoke(target, mode);
        public static void Histogram(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => HistogramPtr?.Invoke(target, width, internalformat, sink);
        public static void HistogramEXT(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => HistogramEXTPtr?.Invoke(target, width, internalformat, sink);
        public static void IglooInterfaceSGIX(uint  pname, IntPtr  parameters) => IglooInterfaceSGIXPtr?.Invoke(pname, parameters);
        public static void ImageTransformParameterfHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float  param) => ImageTransformParameterfHPPtr?.Invoke(target, pname, param);
        public static void ImageTransformParameterfvHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters) => ImageTransformParameterfvHPPtr?.Invoke(target, pname, parameters);
        public static void ImageTransformParameteriHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int  param) => ImageTransformParameteriHPPtr?.Invoke(target, pname, param);
        public static void ImageTransformParameterivHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters) => ImageTransformParameterivHPPtr?.Invoke(target, pname, parameters);
        public static void ImportMemoryFdEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, int  fd) => ImportMemoryFdEXTPtr?.Invoke(memory, size, handleType, fd);
        public static void ImportMemoryWin32HandleEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  handle) => ImportMemoryWin32HandleEXTPtr?.Invoke(memory, size, handleType, handle);
        public static void ImportMemoryWin32NameEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  name) => ImportMemoryWin32NameEXTPtr?.Invoke(memory, size, handleType, name);
        public static void ImportSemaphoreFdEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, int  fd) => ImportSemaphoreFdEXTPtr?.Invoke(semaphore, handleType, fd);
        public static void ImportSemaphoreWin32HandleEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  handle) => ImportSemaphoreWin32HandleEXTPtr?.Invoke(semaphore, handleType, handle);
        public static void ImportSemaphoreWin32NameEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  name) => ImportSemaphoreWin32NameEXTPtr?.Invoke(semaphore, handleType, name);
        public static IntPtr /*sync*/ ImportSyncEXT(uint  external_sync_type, IntPtr  external_sync, uint  flags) => ImportSyncEXTPtr?.Invoke(external_sync_type, external_sync, flags) ?? default;
        public static void IndexFormatNV(uint  type, uint  stride) => IndexFormatNVPtr?.Invoke(type, stride);
        public static void IndexFuncEXT(uint /*IndexFunctionEXT*/  func, float /*ClampedFloat32*/  refVal) => IndexFuncEXTPtr?.Invoke(func, refVal);
        public static void IndexMask(uint /*MaskedColorIndexValueI*/  mask) => IndexMaskPtr?.Invoke(mask);
        public static void IndexMaterialEXT(uint /*MaterialFace*/  face, uint /*IndexMaterialParameterEXT*/  mode) => IndexMaterialEXTPtr?.Invoke(face, mode);
        public static void IndexPointer(uint /*IndexPointerType*/  type, uint  stride, IntPtr  pointer) => IndexPointerPtr?.Invoke(type, stride, pointer);
        public static void IndexPointerEXT(uint /*IndexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => IndexPointerEXTPtr?.Invoke(type, stride, count, pointer);
        public static void IndexPointerListIBM(uint /*IndexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => IndexPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        public static void Indexd(double /*ColorIndexValueD*/  c) => IndexdPtr?.Invoke(c);
        public static void Indexdv(double[] /*ColorIndexValueD*/  c) => IndexdvPtr?.Invoke(c);
        public static void Indexf(float /*ColorIndexValueF*/  c) => IndexfPtr?.Invoke(c);
        public static void Indexfv(float[] /*ColorIndexValueF*/  c) => IndexfvPtr?.Invoke(c);
        public static void Indexi(int /*ColorIndexValueI*/  c) => IndexiPtr?.Invoke(c);
        public static void Indexiv(int[] /*ColorIndexValueI*/  c) => IndexivPtr?.Invoke(c);
        public static void Indexs(short /*ColorIndexValueS*/  c) => IndexsPtr?.Invoke(c);
        public static void Indexsv(short[] /*ColorIndexValueS*/  c) => IndexsvPtr?.Invoke(c);
        public static void Indexub(byte /*ColorIndexValueUB*/  c) => IndexubPtr?.Invoke(c);
        public static void Indexubv(byte[] /*ColorIndexValueUB*/  c) => IndexubvPtr?.Invoke(c);
        public static void IndexxOES(int  component) => IndexxOESPtr?.Invoke(component);
        public static void IndexxvOES(int[]  component) => IndexxvOESPtr?.Invoke(component);
        public static void InitNames() => InitNamesPtr?.Invoke();
        public static void InsertComponentEXT(uint  res, uint  src, uint  num) => InsertComponentEXTPtr?.Invoke(res, src, num);
        public static void InsertEventMarkerEXT(uint  length, string  marker) => InsertEventMarkerEXTPtr?.Invoke(length, marker);
        public static void InstrumentsBufferSGIX(uint  size, int[]  buffer) => InstrumentsBufferSGIXPtr?.Invoke(size, buffer);
        public static void InterleavedArrays(uint /*InterleavedArrayFormat*/  format, uint  stride, IntPtr  pointer) => InterleavedArraysPtr?.Invoke(format, stride, pointer);
        public static void InterpolatePathsNV(uint /*Path*/  resultPath, uint /*Path*/  pathA, uint /*Path*/  pathB, float  weight) => InterpolatePathsNVPtr?.Invoke(resultPath, pathA, pathB, weight);
        public static void InvalidateBufferData(uint  buffer) => InvalidateBufferDataPtr?.Invoke(buffer);
        public static void InvalidateBufferSubData(uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length) => InvalidateBufferSubDataPtr?.Invoke(buffer, offset, length);
        public static void InvalidateFramebuffer(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments) => InvalidateFramebufferPtr?.Invoke(target, numAttachments, attachments);
        public static void InvalidateNamedFramebufferData(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments) => InvalidateNamedFramebufferDataPtr?.Invoke(framebuffer, numAttachments, attachments);
        public static void InvalidateNamedFramebufferSubData(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height) => InvalidateNamedFramebufferSubDataPtr?.Invoke(framebuffer, numAttachments, attachments, x, y, width, height);
        public static void InvalidateSubFramebuffer(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height) => InvalidateSubFramebufferPtr?.Invoke(target, numAttachments, attachments, x, y, width, height);
        public static void InvalidateTexImage(uint  texture, int  level) => InvalidateTexImagePtr?.Invoke(texture, level);
        public static void InvalidateTexSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth) => InvalidateTexSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        public static bool /*Boolean*/ IsAsyncMarkerSGIX(uint  marker) => IsAsyncMarkerSGIXPtr?.Invoke(marker) ?? default;
        public static bool /*Boolean*/ IsBuffer(uint  buffer) => IsBufferPtr?.Invoke(buffer) ?? default;
        public static bool /*Boolean*/ IsBufferARB(uint  buffer) => IsBufferARBPtr?.Invoke(buffer) ?? default;
        public static bool /*Boolean*/ IsBufferResidentNV(uint  target) => IsBufferResidentNVPtr?.Invoke(target) ?? default;
        public static bool /*Boolean*/ IsCommandListNV(uint  list) => IsCommandListNVPtr?.Invoke(list) ?? default;
        public static bool /*Boolean*/ IsEnabled(uint /*EnableCap*/  cap) => IsEnabledPtr?.Invoke(cap) ?? default;
        public static bool /*Boolean*/ IsEnabledIndexedEXT(uint /*EnableCap*/  target, uint  index) => IsEnabledIndexedEXTPtr?.Invoke(target, index) ?? default;
        public static bool /*Boolean*/ IsEnabledi(uint /*EnableCap*/  target, uint  index) => IsEnablediPtr?.Invoke(target, index) ?? default;
        public static bool /*Boolean*/ IsEnablediEXT(uint /*EnableCap*/  target, uint  index) => IsEnablediEXTPtr?.Invoke(target, index) ?? default;
        public static bool /*Boolean*/ IsEnablediNV(uint /*EnableCap*/  target, uint  index) => IsEnablediNVPtr?.Invoke(target, index) ?? default;
        public static bool /*Boolean*/ IsEnablediOES(uint /*EnableCap*/  target, uint  index) => IsEnablediOESPtr?.Invoke(target, index) ?? default;
        public static bool /*Boolean*/ IsFenceAPPLE(uint /*FenceNV*/  fence) => IsFenceAPPLEPtr?.Invoke(fence) ?? default;
        public static bool /*Boolean*/ IsFenceNV(uint /*FenceNV*/  fence) => IsFenceNVPtr?.Invoke(fence) ?? default;
        public static bool /*Boolean*/ IsFramebuffer(uint  framebuffer) => IsFramebufferPtr?.Invoke(framebuffer) ?? default;
        public static bool /*Boolean*/ IsFramebufferEXT(uint  framebuffer) => IsFramebufferEXTPtr?.Invoke(framebuffer) ?? default;
        public static bool /*Boolean*/ IsFramebufferOES(uint  framebuffer) => IsFramebufferOESPtr?.Invoke(framebuffer) ?? default;
        public static bool /*Boolean*/ IsImageHandleResidentARB(ulong  handle) => IsImageHandleResidentARBPtr?.Invoke(handle) ?? default;
        public static bool /*Boolean*/ IsImageHandleResidentNV(ulong  handle) => IsImageHandleResidentNVPtr?.Invoke(handle) ?? default;
        public static bool /*Boolean*/ IsList(uint /*List*/  list) => IsListPtr?.Invoke(list) ?? default;
        public static bool /*Boolean*/ IsMemoryObjectEXT(uint  memoryObject) => IsMemoryObjectEXTPtr?.Invoke(memoryObject) ?? default;
        public static bool /*Boolean*/ IsNameAMD(uint  identifier, uint  name) => IsNameAMDPtr?.Invoke(identifier, name) ?? default;
        public static bool /*Boolean*/ IsNamedBufferResidentNV(uint  buffer) => IsNamedBufferResidentNVPtr?.Invoke(buffer) ?? default;
        public static bool /*Boolean*/ IsNamedStringARB(int  namelen, string  name) => IsNamedStringARBPtr?.Invoke(namelen, name) ?? default;
        public static bool /*Boolean*/ IsObjectBufferATI(uint  buffer) => IsObjectBufferATIPtr?.Invoke(buffer) ?? default;
        public static bool /*Boolean*/ IsOcclusionQueryNV(uint  id) => IsOcclusionQueryNVPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsPathNV(uint /*Path*/  path) => IsPathNVPtr?.Invoke(path) ?? default;
        public static bool /*Boolean*/ IsPointInFillPathNV(uint /*Path*/  path, uint /*MaskedStencilValue*/  mask, float  x, float  y) => IsPointInFillPathNVPtr?.Invoke(path, mask, x, y) ?? default;
        public static bool /*Boolean*/ IsPointInStrokePathNV(uint /*Path*/  path, float  x, float  y) => IsPointInStrokePathNVPtr?.Invoke(path, x, y) ?? default;
        public static bool /*Boolean*/ IsProgram(uint  program) => IsProgramPtr?.Invoke(program) ?? default;
        public static bool /*Boolean*/ IsProgramARB(uint  program) => IsProgramARBPtr?.Invoke(program) ?? default;
        public static bool /*Boolean*/ IsProgramNV(uint  id) => IsProgramNVPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsProgramPipeline(uint  pipeline) => IsProgramPipelinePtr?.Invoke(pipeline) ?? default;
        public static bool /*Boolean*/ IsProgramPipelineEXT(uint  pipeline) => IsProgramPipelineEXTPtr?.Invoke(pipeline) ?? default;
        public static bool /*Boolean*/ IsQuery(uint  id) => IsQueryPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsQueryARB(uint  id) => IsQueryARBPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsQueryEXT(uint  id) => IsQueryEXTPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsRenderbuffer(uint  renderbuffer) => IsRenderbufferPtr?.Invoke(renderbuffer) ?? default;
        public static bool /*Boolean*/ IsRenderbufferEXT(uint  renderbuffer) => IsRenderbufferEXTPtr?.Invoke(renderbuffer) ?? default;
        public static bool /*Boolean*/ IsRenderbufferOES(uint  renderbuffer) => IsRenderbufferOESPtr?.Invoke(renderbuffer) ?? default;
        public static bool /*Boolean*/ IsSemaphoreEXT(uint  semaphore) => IsSemaphoreEXTPtr?.Invoke(semaphore) ?? default;
        public static bool /*Boolean*/ IsSampler(uint  sampler) => IsSamplerPtr?.Invoke(sampler) ?? default;
        public static bool /*Boolean*/ IsShader(uint  shader) => IsShaderPtr?.Invoke(shader) ?? default;
        public static bool /*Boolean*/ IsStateNV(uint  state) => IsStateNVPtr?.Invoke(state) ?? default;
        public static bool /*Boolean*/ IsSync(IntPtr /*sync*/  sync) => IsSyncPtr?.Invoke(sync) ?? default;
        public static bool /*Boolean*/ IsSyncAPPLE(IntPtr  sync) => IsSyncAPPLEPtr?.Invoke(sync) ?? default;
        public static bool /*Boolean*/ IsTexture(uint /*Texture*/  texture) => IsTexturePtr?.Invoke(texture) ?? default;
        public static bool /*Boolean*/ IsTextureEXT(uint /*Texture*/  texture) => IsTextureEXTPtr?.Invoke(texture) ?? default;
        public static bool /*Boolean*/ IsTextureHandleResidentARB(ulong  handle) => IsTextureHandleResidentARBPtr?.Invoke(handle) ?? default;
        public static bool /*Boolean*/ IsTextureHandleResidentNV(ulong  handle) => IsTextureHandleResidentNVPtr?.Invoke(handle) ?? default;
        public static bool /*Boolean*/ IsTransformFeedback(uint  id) => IsTransformFeedbackPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsTransformFeedbackNV(uint  id) => IsTransformFeedbackNVPtr?.Invoke(id) ?? default;
        public static bool /*Boolean*/ IsVariantEnabledEXT(uint  id, uint /*VariantCapEXT*/  cap) => IsVariantEnabledEXTPtr?.Invoke(id, cap) ?? default;
        public static bool /*Boolean*/ IsVertexArray(uint  array) => IsVertexArrayPtr?.Invoke(array) ?? default;
        public static bool /*Boolean*/ IsVertexArrayAPPLE(uint  array) => IsVertexArrayAPPLEPtr?.Invoke(array) ?? default;
        public static bool /*Boolean*/ IsVertexArrayOES(uint  array) => IsVertexArrayOESPtr?.Invoke(array) ?? default;
        public static bool /*Boolean*/ IsVertexAttribEnabledAPPLE(uint  index, uint  pname) => IsVertexAttribEnabledAPPLEPtr?.Invoke(index, pname) ?? default;
        public static void LGPUCopyImageSubDataNVX(uint  sourceGpu, uint  destinationGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srxY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth) => LGPUCopyImageSubDataNVXPtr?.Invoke(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        public static void LGPUInterlockNVX() => LGPUInterlockNVXPtr?.Invoke();
        public static void LGPUNamedBufferSubDataNVX(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => LGPUNamedBufferSubDataNVXPtr?.Invoke(gpuMask, buffer, offset, size, data);
        public static void LabelObjectEXT(uint  type, uint  obj, uint  length, string  label) => LabelObjectEXTPtr?.Invoke(type, obj, length, label);
        public static void LightEnviSGIX(uint /*LightEnvParameterSGIX*/  pname, int /*CheckedInt32*/  param) => LightEnviSGIXPtr?.Invoke(pname, param);
        public static void LightModelf(uint /*LightModelParameter*/  pname, float  param) => LightModelfPtr?.Invoke(pname, param);
        public static void LightModelfv(uint /*LightModelParameter*/  pname, float[]  parameters) => LightModelfvPtr?.Invoke(pname, parameters);
        public static void LightModeli(uint /*LightModelParameter*/  pname, int  param) => LightModeliPtr?.Invoke(pname, param);
        public static void LightModeliv(uint /*LightModelParameter*/  pname, int[]  parameters) => LightModelivPtr?.Invoke(pname, parameters);
        public static void LightModelx(uint /*LightModelParameter*/  pname, int  param) => LightModelxPtr?.Invoke(pname, param);
        public static void LightModelxOES(uint /*LightModelParameter*/  pname, int  param) => LightModelxOESPtr?.Invoke(pname, param);
        public static void LightModelxv(uint /*LightModelParameter*/  pname, int[]  param) => LightModelxvPtr?.Invoke(pname, param);
        public static void LightModelxvOES(uint /*LightModelParameter*/  pname, int[]  param) => LightModelxvOESPtr?.Invoke(pname, param);
        public static void Lightf(uint /*LightName*/  light, uint /*LightParameter*/  pname, float /*CheckedFloat32*/  param) => LightfPtr?.Invoke(light, pname, param);
        public static void Lightfv(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => LightfvPtr?.Invoke(light, pname, parameters);
        public static void Lighti(uint /*LightName*/  light, uint /*LightParameter*/  pname, int /*CheckedInt32*/  param) => LightiPtr?.Invoke(light, pname, param);
        public static void Lightiv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[] /*CheckedInt32*/  parameters) => LightivPtr?.Invoke(light, pname, parameters);
        public static void Lightx(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param) => LightxPtr?.Invoke(light, pname, param);
        public static void LightxOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param) => LightxOESPtr?.Invoke(light, pname, param);
        public static void Lightxv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => LightxvPtr?.Invoke(light, pname, parameters);
        public static void LightxvOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => LightxvOESPtr?.Invoke(light, pname, parameters);
        public static void LineStipple(int /*CheckedInt32*/  factor, ushort /*LineStipple*/  pattern) => LineStipplePtr?.Invoke(factor, pattern);
        public static void LineWidth(float /*CheckedFloat32*/  width) => LineWidthPtr?.Invoke(width);
        public static void LineWidthx(int  width) => LineWidthxPtr?.Invoke(width);
        public static void LineWidthxOES(int  width) => LineWidthxOESPtr?.Invoke(width);
        public static void LinkProgram(uint  program) => LinkProgramPtr?.Invoke(program);
        public static void LinkProgramARB(IntPtr /*handleARB*/  programObj) => LinkProgramARBPtr?.Invoke(programObj);
        public static void ListBase(uint /*List*/  basis) => ListBasePtr?.Invoke(basis);
        public static void ListDrawCommandsStatesClientNV(uint  list, uint  segment, IntPtr  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => ListDrawCommandsStatesClientNVPtr?.Invoke(list, segment, indirects, sizes, states, fbos, count);
        public static void ListParameterfSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float /*CheckedFloat32*/  param) => ListParameterfSGIXPtr?.Invoke(list, pname, param);
        public static void ListParameterfvSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => ListParameterfvSGIXPtr?.Invoke(list, pname, parameters);
        public static void ListParameteriSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int /*CheckedInt32*/  param) => ListParameteriSGIXPtr?.Invoke(list, pname, param);
        public static void ListParameterivSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => ListParameterivSGIXPtr?.Invoke(list, pname, parameters);
        public static void LoadIdentity() => LoadIdentityPtr?.Invoke();
        public static void LoadIdentityDeformationMapSGIX(uint /*FfdMaskSGIX*/  mask) => LoadIdentityDeformationMapSGIXPtr?.Invoke(mask);
        public static void LoadMatrixd(double[]  m) => LoadMatrixdPtr?.Invoke(m);
        public static void LoadMatrixf(float[]  m) => LoadMatrixfPtr?.Invoke(m);
        public static void LoadMatrixx(int[]  m) => LoadMatrixxPtr?.Invoke(m);
        public static void LoadMatrixxOES(int[]  m) => LoadMatrixxOESPtr?.Invoke(m);
        public static void LoadName(uint /*SelectName*/  name) => LoadNamePtr?.Invoke(name);
        public static void LoadPaletteFromModelViewMatrixOES() => LoadPaletteFromModelViewMatrixOESPtr?.Invoke();
        public static void LoadProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id, uint  len, byte[]  program) => LoadProgramNVPtr?.Invoke(target, id, len, program);
        public static void LoadTransposeMatrixd(double[]  m) => LoadTransposeMatrixdPtr?.Invoke(m);
        public static void LoadTransposeMatrixdARB(double[]  m) => LoadTransposeMatrixdARBPtr?.Invoke(m);
        public static void LoadTransposeMatrixf(float[]  m) => LoadTransposeMatrixfPtr?.Invoke(m);
        public static void LoadTransposeMatrixfARB(float[]  m) => LoadTransposeMatrixfARBPtr?.Invoke(m);
        public static void LoadTransposeMatrixxOES(int[]  m) => LoadTransposeMatrixxOESPtr?.Invoke(m);
        public static void LockArraysEXT(int  first, uint  count) => LockArraysEXTPtr?.Invoke(first, count);
        public static void LogicOp(uint /*LogicOp*/  opcode) => LogicOpPtr?.Invoke(opcode);
        public static void MakeBufferNonResidentNV(uint  target) => MakeBufferNonResidentNVPtr?.Invoke(target);
        public static void MakeBufferResidentNV(uint  target, uint  access) => MakeBufferResidentNVPtr?.Invoke(target, access);
        public static void MakeImageHandleNonResidentARB(ulong  handle) => MakeImageHandleNonResidentARBPtr?.Invoke(handle);
        public static void MakeImageHandleNonResidentNV(ulong  handle) => MakeImageHandleNonResidentNVPtr?.Invoke(handle);
        public static void MakeImageHandleResidentARB(ulong  handle, uint  access) => MakeImageHandleResidentARBPtr?.Invoke(handle, access);
        public static void MakeImageHandleResidentNV(ulong  handle, uint  access) => MakeImageHandleResidentNVPtr?.Invoke(handle, access);
        public static void MakeNamedBufferNonResidentNV(uint  buffer) => MakeNamedBufferNonResidentNVPtr?.Invoke(buffer);
        public static void MakeNamedBufferResidentNV(uint  buffer, uint  access) => MakeNamedBufferResidentNVPtr?.Invoke(buffer, access);
        public static void MakeTextureHandleNonResidentARB(ulong  handle) => MakeTextureHandleNonResidentARBPtr?.Invoke(handle);
        public static void MakeTextureHandleNonResidentNV(ulong  handle) => MakeTextureHandleNonResidentNVPtr?.Invoke(handle);
        public static void MakeTextureHandleResidentARB(ulong  handle) => MakeTextureHandleResidentARBPtr?.Invoke(handle);
        public static void MakeTextureHandleResidentNV(ulong  handle) => MakeTextureHandleResidentNVPtr?.Invoke(handle);
        public static void Map1d(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points) => Map1dPtr?.Invoke(target, u1, u2, stride, order, points);
        public static void Map1f(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points) => Map1fPtr?.Invoke(target, u1, u2, stride, order, points);
        public static void Map1xOES(uint /*MapTarget*/  target, int  u1, int  u2, int  stride, int  order, int  points) => Map1xOESPtr?.Invoke(target, u1, u2, stride, order, points);
        public static void Map2d(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points) => Map2dPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public static void Map2f(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points) => Map2fPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public static void Map2xOES(uint /*MapTarget*/  target, int  u1, int  u2, int  ustride, int  uorder, int  v1, int  v2, int  vstride, int  vorder, int  points) => Map2xOESPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public static void MapBuffer(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => MapBufferPtr?.Invoke(target, access);
        public static void MapBufferARB(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => MapBufferARBPtr?.Invoke(target, access);
        public static void MapBufferOES(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => MapBufferOESPtr?.Invoke(target, access);
        public static void MapBufferRange(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access) => MapBufferRangePtr?.Invoke(target, offset, length, access);
        public static void MapBufferRangeEXT(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access) => MapBufferRangeEXTPtr?.Invoke(target, offset, length, access);
        public static void MapControlPointsNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, int /*CheckedInt32*/  uorder, int /*CheckedInt32*/  vorder, bool /*Boolean*/  packed, IntPtr  points) => MapControlPointsNVPtr?.Invoke(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        public static void MapGrid1d(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2) => MapGrid1dPtr?.Invoke(un, u1, u2);
        public static void MapGrid1f(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2) => MapGrid1fPtr?.Invoke(un, u1, u2);
        public static void MapGrid1xOES(int  n, int  u1, int  u2) => MapGrid1xOESPtr?.Invoke(n, u1, u2);
        public static void MapGrid2d(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2, int  vn, double /*CoordD*/  v1, double /*CoordD*/  v2) => MapGrid2dPtr?.Invoke(un, u1, u2, vn, v1, v2);
        public static void MapGrid2f(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2, int  vn, float /*CoordF*/  v1, float /*CoordF*/  v2) => MapGrid2fPtr?.Invoke(un, u1, u2, vn, v1, v2);
        public static void MapGrid2xOES(int  n, int  u1, int  u2, int  v1, int  v2) => MapGrid2xOESPtr?.Invoke(n, u1, u2, v1, v2);
        public static void MapNamedBuffer(uint  buffer, uint /*BufferAccessARB*/  access) => MapNamedBufferPtr?.Invoke(buffer, access);
        public static void MapNamedBufferEXT(uint  buffer, uint /*BufferAccessARB*/  access) => MapNamedBufferEXTPtr?.Invoke(buffer, access);
        public static void MapNamedBufferRange(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access) => MapNamedBufferRangePtr?.Invoke(buffer, offset, length, access);
        public static void MapNamedBufferRangeEXT(uint  buffer, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access) => MapNamedBufferRangeEXTPtr?.Invoke(buffer, offset, length, access);
        public static void MapObjectBufferATI(uint  buffer) => MapObjectBufferATIPtr?.Invoke(buffer);
        public static void MapParameterfvNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => MapParameterfvNVPtr?.Invoke(target, pname, parameters);
        public static void MapParameterivNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[] /*CheckedInt32*/  parameters) => MapParameterivNVPtr?.Invoke(target, pname, parameters);
        public static void MapTexture2DINTEL(uint  texture, int  level, uint  access, int[]  stride, uint[]  layout) => MapTexture2DINTELPtr?.Invoke(texture, level, access, stride, layout);
        public static void MapVertexAttrib1dAPPLE(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points) => MapVertexAttrib1dAPPLEPtr?.Invoke(index, size, u1, u2, stride, order, points);
        public static void MapVertexAttrib1fAPPLE(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points) => MapVertexAttrib1fAPPLEPtr?.Invoke(index, size, u1, u2, stride, order, points);
        public static void MapVertexAttrib2dAPPLE(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points) => MapVertexAttrib2dAPPLEPtr?.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public static void MapVertexAttrib2fAPPLE(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points) => MapVertexAttrib2fAPPLEPtr?.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        public static void Materialf(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param) => MaterialfPtr?.Invoke(face, pname, param);
        public static void Materialfv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => MaterialfvPtr?.Invoke(face, pname, parameters);
        public static void Materiali(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param) => MaterialiPtr?.Invoke(face, pname, param);
        public static void Materialiv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters) => MaterialivPtr?.Invoke(face, pname, parameters);
        public static void Materialx(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => MaterialxPtr?.Invoke(face, pname, param);
        public static void MaterialxOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => MaterialxOESPtr?.Invoke(face, pname, param);
        public static void Materialxv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param) => MaterialxvPtr?.Invoke(face, pname, param);
        public static void MaterialxvOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param) => MaterialxvOESPtr?.Invoke(face, pname, param);
        public static void MatrixFrustumEXT(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => MatrixFrustumEXTPtr?.Invoke(mode, left, right, bottom, top, zNear, zFar);
        public static void MatrixIndexPointerARB(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => MatrixIndexPointerARBPtr?.Invoke(size, type, stride, pointer);
        public static void MatrixIndexPointerOES(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => MatrixIndexPointerOESPtr?.Invoke(size, type, stride, pointer);
        public static void MatrixIndexubvARB(int  size, byte[]  indices) => MatrixIndexubvARBPtr?.Invoke(size, indices);
        public static void MatrixIndexuivARB(int  size, uint[]  indices) => MatrixIndexuivARBPtr?.Invoke(size, indices);
        public static void MatrixIndexusvARB(int  size, ushort[]  indices) => MatrixIndexusvARBPtr?.Invoke(size, indices);
        public static void MatrixLoad3x2fNV(uint  matrixMode, float[]  m) => MatrixLoad3x2fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixLoad3x3fNV(uint  matrixMode, float[]  m) => MatrixLoad3x3fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixLoadIdentityEXT(uint /*MatrixMode*/  mode) => MatrixLoadIdentityEXTPtr?.Invoke(mode);
        public static void MatrixLoadTranspose3x3fNV(uint  matrixMode, float[]  m) => MatrixLoadTranspose3x3fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixLoadTransposedEXT(uint /*MatrixMode*/  mode, double[]  m) => MatrixLoadTransposedEXTPtr?.Invoke(mode, m);
        public static void MatrixLoadTransposefEXT(uint /*MatrixMode*/  mode, float[]  m) => MatrixLoadTransposefEXTPtr?.Invoke(mode, m);
        public static void MatrixLoaddEXT(uint /*MatrixMode*/  mode, double[]  m) => MatrixLoaddEXTPtr?.Invoke(mode, m);
        public static void MatrixLoadfEXT(uint /*MatrixMode*/  mode, float[]  m) => MatrixLoadfEXTPtr?.Invoke(mode, m);
        public static void MatrixMode(uint /*MatrixMode*/  mode) => MatrixModePtr?.Invoke(mode);
        public static void MatrixMult3x2fNV(uint  matrixMode, float[]  m) => MatrixMult3x2fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixMult3x3fNV(uint  matrixMode, float[]  m) => MatrixMult3x3fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixMultTranspose3x3fNV(uint  matrixMode, float[]  m) => MatrixMultTranspose3x3fNVPtr?.Invoke(matrixMode, m);
        public static void MatrixMultTransposedEXT(uint /*MatrixMode*/  mode, double[]  m) => MatrixMultTransposedEXTPtr?.Invoke(mode, m);
        public static void MatrixMultTransposefEXT(uint /*MatrixMode*/  mode, float[]  m) => MatrixMultTransposefEXTPtr?.Invoke(mode, m);
        public static void MatrixMultdEXT(uint /*MatrixMode*/  mode, double[]  m) => MatrixMultdEXTPtr?.Invoke(mode, m);
        public static void MatrixMultfEXT(uint /*MatrixMode*/  mode, float[]  m) => MatrixMultfEXTPtr?.Invoke(mode, m);
        public static void MatrixOrthoEXT(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => MatrixOrthoEXTPtr?.Invoke(mode, left, right, bottom, top, zNear, zFar);
        public static void MatrixPopEXT(uint /*MatrixMode*/  mode) => MatrixPopEXTPtr?.Invoke(mode);
        public static void MatrixPushEXT(uint /*MatrixMode*/  mode) => MatrixPushEXTPtr?.Invoke(mode);
        public static void MatrixRotatedEXT(uint /*MatrixMode*/  mode, double  angle, double  x, double  y, double  z) => MatrixRotatedEXTPtr?.Invoke(mode, angle, x, y, z);
        public static void MatrixRotatefEXT(uint /*MatrixMode*/  mode, float  angle, float  x, float  y, float  z) => MatrixRotatefEXTPtr?.Invoke(mode, angle, x, y, z);
        public static void MatrixScaledEXT(uint /*MatrixMode*/  mode, double  x, double  y, double  z) => MatrixScaledEXTPtr?.Invoke(mode, x, y, z);
        public static void MatrixScalefEXT(uint /*MatrixMode*/  mode, float  x, float  y, float  z) => MatrixScalefEXTPtr?.Invoke(mode, x, y, z);
        public static void MatrixTranslatedEXT(uint /*MatrixMode*/  mode, double  x, double  y, double  z) => MatrixTranslatedEXTPtr?.Invoke(mode, x, y, z);
        public static void MatrixTranslatefEXT(uint /*MatrixMode*/  mode, float  x, float  y, float  z) => MatrixTranslatefEXTPtr?.Invoke(mode, x, y, z);
        public static void MaxShaderCompilerThreadsKHR(uint  count) => MaxShaderCompilerThreadsKHRPtr?.Invoke(count);
        public static void MaxShaderCompilerThreadsARB(uint  count) => MaxShaderCompilerThreadsARBPtr?.Invoke(count);
        public static void MemoryBarrier(uint /*MemoryBarrierMask*/  barriers) => MemoryBarrierPtr?.Invoke(barriers);
        public static void MemoryBarrierByRegion(uint /*MemoryBarrierMask*/  barriers) => MemoryBarrierByRegionPtr?.Invoke(barriers);
        public static void MemoryBarrierEXT(uint /*MemoryBarrierMask*/  barriers) => MemoryBarrierEXTPtr?.Invoke(barriers);
        public static void MemoryObjectParameterivEXT(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters) => MemoryObjectParameterivEXTPtr?.Invoke(memoryObject, pname, parameters);
        public static void MinSampleShading(float /*ColorF*/  value) => MinSampleShadingPtr?.Invoke(value);
        public static void MinSampleShadingARB(float /*ColorF*/  value) => MinSampleShadingARBPtr?.Invoke(value);
        public static void MinSampleShadingOES(float /*ColorF*/  value) => MinSampleShadingOESPtr?.Invoke(value);
        public static void Minmax(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => MinmaxPtr?.Invoke(target, internalformat, sink);
        public static void MinmaxEXT(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => MinmaxEXTPtr?.Invoke(target, internalformat, sink);
        public static void MultMatrixd(double[]  m) => MultMatrixdPtr?.Invoke(m);
        public static void MultMatrixf(float[]  m) => MultMatrixfPtr?.Invoke(m);
        public static void MultMatrixx(int[]  m) => MultMatrixxPtr?.Invoke(m);
        public static void MultMatrixxOES(int[]  m) => MultMatrixxOESPtr?.Invoke(m);
        public static void MultTransposeMatrixd(double[]  m) => MultTransposeMatrixdPtr?.Invoke(m);
        public static void MultTransposeMatrixdARB(double[]  m) => MultTransposeMatrixdARBPtr?.Invoke(m);
        public static void MultTransposeMatrixf(float[]  m) => MultTransposeMatrixfPtr?.Invoke(m);
        public static void MultTransposeMatrixfARB(float[]  m) => MultTransposeMatrixfARBPtr?.Invoke(m);
        public static void MultTransposeMatrixxOES(int[]  m) => MultTransposeMatrixxOESPtr?.Invoke(m);
        public static void MultiDrawArrays(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  drawcount) => MultiDrawArraysPtr?.Invoke(mode, first, count, drawcount);
        public static void MultiDrawArraysEXT(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount) => MultiDrawArraysEXTPtr?.Invoke(mode, first, count, primcount);
        public static void MultiDrawArraysIndirect(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride) => MultiDrawArraysIndirectPtr?.Invoke(mode, indirect, drawcount, stride);
        public static void MultiDrawArraysIndirectAMD(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  primcount, uint  stride) => MultiDrawArraysIndirectAMDPtr?.Invoke(mode, indirect, primcount, stride);
        public static void MultiDrawArraysIndirectBindlessCountNV(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount) => MultiDrawArraysIndirectBindlessCountNVPtr?.Invoke(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        public static void MultiDrawArraysIndirectBindlessNV(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount) => MultiDrawArraysIndirectBindlessNVPtr?.Invoke(mode, indirect, drawCount, stride, vertexBufferCount);
        public static void MultiDrawArraysIndirectCount(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => MultiDrawArraysIndirectCountPtr?.Invoke(mode, indirect, drawcount, maxdrawcount, stride);
        public static void MultiDrawArraysIndirectCountARB(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => MultiDrawArraysIndirectCountARBPtr?.Invoke(mode, indirect, drawcount, maxdrawcount, stride);
        public static void MultiDrawArraysIndirectEXT(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride) => MultiDrawArraysIndirectEXTPtr?.Invoke(mode, indirect, drawcount, stride);
        public static void MultiDrawElementArrayAPPLE(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount) => MultiDrawElementArrayAPPLEPtr?.Invoke(mode, first, count, primcount);
        public static void MultiDrawElements(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount) => MultiDrawElementsPtr?.Invoke(mode, count, type, indices, drawcount);
        public static void MultiDrawElementsBaseVertex(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount, int[]  basevertex) => MultiDrawElementsBaseVertexPtr?.Invoke(mode, count, type, indices, drawcount, basevertex);
        public static void MultiDrawElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int[]  basevertex) => MultiDrawElementsBaseVertexEXTPtr?.Invoke(mode, count, type, indices, primcount, basevertex);
        public static void MultiDrawElementsEXT(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => MultiDrawElementsEXTPtr?.Invoke(mode, count, type, indices, primcount);
        public static void MultiDrawElementsIndirect(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride) => MultiDrawElementsIndirectPtr?.Invoke(mode, type, indirect, drawcount, stride);
        public static void MultiDrawElementsIndirectAMD(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  primcount, uint  stride) => MultiDrawElementsIndirectAMDPtr?.Invoke(mode, type, indirect, primcount, stride);
        public static void MultiDrawElementsIndirectBindlessCountNV(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount) => MultiDrawElementsIndirectBindlessCountNVPtr?.Invoke(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        public static void MultiDrawElementsIndirectBindlessNV(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount) => MultiDrawElementsIndirectBindlessNVPtr?.Invoke(mode, type, indirect, drawCount, stride, vertexBufferCount);
        public static void MultiDrawElementsIndirectCount(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => MultiDrawElementsIndirectCountPtr?.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);
        public static void MultiDrawElementsIndirectCountARB(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => MultiDrawElementsIndirectCountARBPtr?.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);
        public static void MultiDrawElementsIndirectEXT(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride) => MultiDrawElementsIndirectEXTPtr?.Invoke(mode, type, indirect, drawcount, stride);
        public static void MultiDrawMeshTasksIndirectNV(IntPtr  indirect, uint  drawcount, uint  stride) => MultiDrawMeshTasksIndirectNVPtr?.Invoke(indirect, drawcount, stride);
        public static void MultiDrawMeshTasksIndirectCountNV(IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => MultiDrawMeshTasksIndirectCountNVPtr?.Invoke(indirect, drawcount, maxdrawcount, stride);
        public static void MultiDrawRangeElementArrayAPPLE(uint /*PrimitiveType*/  mode, uint  start, uint  end, int[]  first, uint[]  count, uint  primcount) => MultiDrawRangeElementArrayAPPLEPtr?.Invoke(mode, start, end, first, count, primcount);
        public static void MultiModeDrawArraysIBM(uint[] /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount, int  modestride) => MultiModeDrawArraysIBMPtr?.Invoke(mode, first, count, primcount, modestride);
        public static void MultiModeDrawElementsIBM(uint[] /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int  modestride) => MultiModeDrawElementsIBMPtr?.Invoke(mode, count, type, indices, primcount, modestride);
        public static void MultiTexBufferEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  internalformat, uint  buffer) => MultiTexBufferEXTPtr?.Invoke(texunit, target, internalformat, buffer);
        public static void MultiTexCoord1bOES(uint /*TextureUnit*/  texture, sbyte  s) => MultiTexCoord1bOESPtr?.Invoke(texture, s);
        public static void MultiTexCoord1bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => MultiTexCoord1bvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord1d(uint /*TextureUnit*/  target, double /*CoordD*/  s) => MultiTexCoord1dPtr?.Invoke(target, s);
        public static void MultiTexCoord1dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s) => MultiTexCoord1dARBPtr?.Invoke(target, s);
        public static void MultiTexCoord1dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord1dvPtr?.Invoke(target, v);
        public static void MultiTexCoord1dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord1dvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord1f(uint /*TextureUnit*/  target, float /*CoordF*/  s) => MultiTexCoord1fPtr?.Invoke(target, s);
        public static void MultiTexCoord1fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s) => MultiTexCoord1fARBPtr?.Invoke(target, s);
        public static void MultiTexCoord1fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord1fvPtr?.Invoke(target, v);
        public static void MultiTexCoord1fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord1fvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord1hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s) => MultiTexCoord1hNVPtr?.Invoke(target, s);
        public static void MultiTexCoord1hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => MultiTexCoord1hvNVPtr?.Invoke(target, v);
        public static void MultiTexCoord1i(uint /*TextureUnit*/  target, int /*CoordI*/  s) => MultiTexCoord1iPtr?.Invoke(target, s);
        public static void MultiTexCoord1iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s) => MultiTexCoord1iARBPtr?.Invoke(target, s);
        public static void MultiTexCoord1iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord1ivPtr?.Invoke(target, v);
        public static void MultiTexCoord1ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord1ivARBPtr?.Invoke(target, v);
        public static void MultiTexCoord1s(uint /*TextureUnit*/  target, short /*CoordS*/  s) => MultiTexCoord1sPtr?.Invoke(target, s);
        public static void MultiTexCoord1sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s) => MultiTexCoord1sARBPtr?.Invoke(target, s);
        public static void MultiTexCoord1sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord1svPtr?.Invoke(target, v);
        public static void MultiTexCoord1svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord1svARBPtr?.Invoke(target, v);
        public static void MultiTexCoord1xOES(uint /*TextureUnit*/  texture, int  s) => MultiTexCoord1xOESPtr?.Invoke(texture, s);
        public static void MultiTexCoord1xvOES(uint /*TextureUnit*/  texture, int[]  coords) => MultiTexCoord1xvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord2bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t) => MultiTexCoord2bOESPtr?.Invoke(texture, s, t);
        public static void MultiTexCoord2bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => MultiTexCoord2bvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord2d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t) => MultiTexCoord2dPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t) => MultiTexCoord2dARBPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord2dvPtr?.Invoke(target, v);
        public static void MultiTexCoord2dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord2dvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord2f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t) => MultiTexCoord2fPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t) => MultiTexCoord2fARBPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord2fvPtr?.Invoke(target, v);
        public static void MultiTexCoord2fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord2fvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord2hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t) => MultiTexCoord2hNVPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => MultiTexCoord2hvNVPtr?.Invoke(target, v);
        public static void MultiTexCoord2i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t) => MultiTexCoord2iPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t) => MultiTexCoord2iARBPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord2ivPtr?.Invoke(target, v);
        public static void MultiTexCoord2ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord2ivARBPtr?.Invoke(target, v);
        public static void MultiTexCoord2s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t) => MultiTexCoord2sPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t) => MultiTexCoord2sARBPtr?.Invoke(target, s, t);
        public static void MultiTexCoord2sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord2svPtr?.Invoke(target, v);
        public static void MultiTexCoord2svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord2svARBPtr?.Invoke(target, v);
        public static void MultiTexCoord2xOES(uint /*TextureUnit*/  texture, int  s, int  t) => MultiTexCoord2xOESPtr?.Invoke(texture, s, t);
        public static void MultiTexCoord2xvOES(uint /*TextureUnit*/  texture, int[]  coords) => MultiTexCoord2xvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord3bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r) => MultiTexCoord3bOESPtr?.Invoke(texture, s, t, r);
        public static void MultiTexCoord3bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => MultiTexCoord3bvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord3d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => MultiTexCoord3dPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => MultiTexCoord3dARBPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord3dvPtr?.Invoke(target, v);
        public static void MultiTexCoord3dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord3dvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord3f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => MultiTexCoord3fPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => MultiTexCoord3fARBPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord3fvPtr?.Invoke(target, v);
        public static void MultiTexCoord3fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord3fvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord3hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r) => MultiTexCoord3hNVPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => MultiTexCoord3hvNVPtr?.Invoke(target, v);
        public static void MultiTexCoord3i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => MultiTexCoord3iPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => MultiTexCoord3iARBPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord3ivPtr?.Invoke(target, v);
        public static void MultiTexCoord3ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord3ivARBPtr?.Invoke(target, v);
        public static void MultiTexCoord3s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => MultiTexCoord3sPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => MultiTexCoord3sARBPtr?.Invoke(target, s, t, r);
        public static void MultiTexCoord3sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord3svPtr?.Invoke(target, v);
        public static void MultiTexCoord3svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord3svARBPtr?.Invoke(target, v);
        public static void MultiTexCoord3xOES(uint /*TextureUnit*/  texture, int  s, int  t, int  r) => MultiTexCoord3xOESPtr?.Invoke(texture, s, t, r);
        public static void MultiTexCoord3xvOES(uint /*TextureUnit*/  texture, int[]  coords) => MultiTexCoord3xvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord4bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r, sbyte  q) => MultiTexCoord4bOESPtr?.Invoke(texture, s, t, r, q);
        public static void MultiTexCoord4bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => MultiTexCoord4bvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoord4d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => MultiTexCoord4dPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => MultiTexCoord4dARBPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord4dvPtr?.Invoke(target, v);
        public static void MultiTexCoord4dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => MultiTexCoord4dvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord4f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => MultiTexCoord4fPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => MultiTexCoord4fARBPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord4fvPtr?.Invoke(target, v);
        public static void MultiTexCoord4fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => MultiTexCoord4fvARBPtr?.Invoke(target, v);
        public static void MultiTexCoord4hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q) => MultiTexCoord4hNVPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => MultiTexCoord4hvNVPtr?.Invoke(target, v);
        public static void MultiTexCoord4i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => MultiTexCoord4iPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => MultiTexCoord4iARBPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord4ivPtr?.Invoke(target, v);
        public static void MultiTexCoord4ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => MultiTexCoord4ivARBPtr?.Invoke(target, v);
        public static void MultiTexCoord4s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => MultiTexCoord4sPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => MultiTexCoord4sARBPtr?.Invoke(target, s, t, r, q);
        public static void MultiTexCoord4sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord4svPtr?.Invoke(target, v);
        public static void MultiTexCoord4svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => MultiTexCoord4svARBPtr?.Invoke(target, v);
        public static void MultiTexCoord4x(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q) => MultiTexCoord4xPtr?.Invoke(texture, s, t, r, q);
        public static void MultiTexCoord4xOES(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q) => MultiTexCoord4xOESPtr?.Invoke(texture, s, t, r, q);
        public static void MultiTexCoord4xvOES(uint /*TextureUnit*/  texture, int[]  coords) => MultiTexCoord4xvOESPtr?.Invoke(texture, coords);
        public static void MultiTexCoordP1ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => MultiTexCoordP1uiPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP1uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => MultiTexCoordP1uivPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP2ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => MultiTexCoordP2uiPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP2uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => MultiTexCoordP2uivPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP3ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => MultiTexCoordP3uiPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP3uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => MultiTexCoordP3uivPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP4ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => MultiTexCoordP4uiPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordP4uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => MultiTexCoordP4uivPtr?.Invoke(texture, type, coords);
        public static void MultiTexCoordPointerEXT(uint /*TextureUnit*/  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer) => MultiTexCoordPointerEXTPtr?.Invoke(texunit, size, type, stride, pointer);
        public static void MultiTexEnvfEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param) => MultiTexEnvfEXTPtr?.Invoke(texunit, target, pname, param);
        public static void MultiTexEnvfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => MultiTexEnvfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexEnviEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param) => MultiTexEnviEXTPtr?.Invoke(texunit, target, pname, param);
        public static void MultiTexEnvivEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters) => MultiTexEnvivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexGendEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param) => MultiTexGendEXTPtr?.Invoke(texunit, coord, pname, param);
        public static void MultiTexGendvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => MultiTexGendvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void MultiTexGenfEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param) => MultiTexGenfEXTPtr?.Invoke(texunit, coord, pname, param);
        public static void MultiTexGenfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => MultiTexGenfvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void MultiTexGeniEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param) => MultiTexGeniEXTPtr?.Invoke(texunit, coord, pname, param);
        public static void MultiTexGenivEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters) => MultiTexGenivEXTPtr?.Invoke(texunit, coord, pname, parameters);
        public static void MultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, width, border, format, type, pixels);
        public static void MultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        public static void MultiTexImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexImage3DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        public static void MultiTexParameterIivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => MultiTexParameterIivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexParameterIuivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => MultiTexParameterIuivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexParameterfEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => MultiTexParameterfEXTPtr?.Invoke(texunit, target, pname, param);
        public static void MultiTexParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => MultiTexParameterfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexParameteriEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => MultiTexParameteriEXTPtr?.Invoke(texunit, target, pname, param);
        public static void MultiTexParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => MultiTexParameterivEXTPtr?.Invoke(texunit, target, pname, parameters);
        public static void MultiTexRenderbufferEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  renderbuffer) => MultiTexRenderbufferEXTPtr?.Invoke(texunit, target, renderbuffer);
        public static void MultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, width, format, type, pixels);
        public static void MultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        public static void MultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => MultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void MulticastBarrierNV() => MulticastBarrierNVPtr?.Invoke();
        public static void MulticastBlitFramebufferNV(uint  srcGpu, uint  dstGpu, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint  filter) => MulticastBlitFramebufferNVPtr?.Invoke(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        public static void MulticastBufferSubDataNV(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => MulticastBufferSubDataNVPtr?.Invoke(gpuMask, buffer, offset, size, data);
        public static void MulticastCopyBufferSubDataNV(uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size) => MulticastCopyBufferSubDataNVPtr?.Invoke(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        public static void MulticastCopyImageSubDataNV(uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => MulticastCopyImageSubDataNVPtr?.Invoke(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        public static void MulticastFramebufferSampleLocationsfvNV(uint  gpu, uint  framebuffer, uint  start, uint  count, float[]  v) => MulticastFramebufferSampleLocationsfvNVPtr?.Invoke(gpu, framebuffer, start, count, v);
        public static void MulticastGetQueryObjecti64vNV(uint  gpu, uint  id, uint  pname, long[]  parameters) => MulticastGetQueryObjecti64vNVPtr?.Invoke(gpu, id, pname, parameters);
        public static void MulticastGetQueryObjectivNV(uint  gpu, uint  id, uint  pname, int[]  parameters) => MulticastGetQueryObjectivNVPtr?.Invoke(gpu, id, pname, parameters);
        public static void MulticastGetQueryObjectui64vNV(uint  gpu, uint  id, uint  pname, ulong[]  parameters) => MulticastGetQueryObjectui64vNVPtr?.Invoke(gpu, id, pname, parameters);
        public static void MulticastGetQueryObjectuivNV(uint  gpu, uint  id, uint  pname, uint[]  parameters) => MulticastGetQueryObjectuivNVPtr?.Invoke(gpu, id, pname, parameters);
        public static void MulticastScissorArrayvNVX(uint  gpu, uint  first, uint  count, int[]  v) => MulticastScissorArrayvNVXPtr?.Invoke(gpu, first, count, v);
        public static void MulticastViewportArrayvNVX(uint  gpu, uint  first, uint  count, float[]  v) => MulticastViewportArrayvNVXPtr?.Invoke(gpu, first, count, v);
        public static void MulticastViewportPositionWScaleNVX(uint  gpu, uint  index, float  xcoeff, float  ycoeff) => MulticastViewportPositionWScaleNVXPtr?.Invoke(gpu, index, xcoeff, ycoeff);
        public static void MulticastWaitSyncNV(uint  signalGpu, uint  waitGpuMask) => MulticastWaitSyncNVPtr?.Invoke(signalGpu, waitGpuMask);
        public static void NamedBufferAttachMemoryNV(uint  buffer, uint  memory, ulong  offset) => NamedBufferAttachMemoryNVPtr?.Invoke(buffer, memory, offset);
        public static void NamedBufferData(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage) => NamedBufferDataPtr?.Invoke(buffer, size, data, usage);
        public static void NamedBufferDataEXT(uint  buffer, IntPtr  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage) => NamedBufferDataEXTPtr?.Invoke(buffer, size, data, usage);
        public static void NamedBufferPageCommitmentARB(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => NamedBufferPageCommitmentARBPtr?.Invoke(buffer, offset, size, commit);
        public static void NamedBufferPageCommitmentEXT(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => NamedBufferPageCommitmentEXTPtr?.Invoke(buffer, offset, size, commit);
        public static void NamedBufferStorage(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => NamedBufferStoragePtr?.Invoke(buffer, size, data, flags);
        public static void NamedBufferStorageExternalEXT(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags) => NamedBufferStorageExternalEXTPtr?.Invoke(buffer, offset, size, clientBuffer, flags);
        public static void NamedBufferStorageEXT(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => NamedBufferStorageEXTPtr?.Invoke(buffer, size, data, flags);
        public static void NamedBufferStorageMemEXT(uint  buffer, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset) => NamedBufferStorageMemEXTPtr?.Invoke(buffer, size, memory, offset);
        public static void NamedBufferSubData(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => NamedBufferSubDataPtr?.Invoke(buffer, offset, size, data);
        public static void NamedBufferSubDataEXT(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => NamedBufferSubDataEXTPtr?.Invoke(buffer, offset, size, data);
        public static void NamedCopyBufferSubDataEXT(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size) => NamedCopyBufferSubDataEXTPtr?.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);
        public static void NamedFramebufferDrawBuffer(uint  framebuffer, uint /*ColorBuffer*/  buf) => NamedFramebufferDrawBufferPtr?.Invoke(framebuffer, buf);
        public static void NamedFramebufferDrawBuffers(uint  framebuffer, uint  n, uint[] /*ColorBuffer*/  bufs) => NamedFramebufferDrawBuffersPtr?.Invoke(framebuffer, n, bufs);
        public static void NamedFramebufferParameteri(uint  framebuffer, uint /*FramebufferParameterName*/  pname, int  param) => NamedFramebufferParameteriPtr?.Invoke(framebuffer, pname, param);
        public static void NamedFramebufferParameteriEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferParameterName*/  pname, int  param) => NamedFramebufferParameteriEXTPtr?.Invoke(framebuffer, pname, param);
        public static void NamedFramebufferReadBuffer(uint  framebuffer, uint /*ColorBuffer*/  src) => NamedFramebufferReadBufferPtr?.Invoke(framebuffer, src);
        public static void NamedFramebufferRenderbuffer(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => NamedFramebufferRenderbufferPtr?.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);
        public static void NamedFramebufferRenderbufferEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint /*Renderbuffer*/  renderbuffer) => NamedFramebufferRenderbufferEXTPtr?.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);
        public static void NamedFramebufferSampleLocationsfvARB(uint  framebuffer, uint  start, uint  count, float[]  v) => NamedFramebufferSampleLocationsfvARBPtr?.Invoke(framebuffer, start, count, v);
        public static void NamedFramebufferSampleLocationsfvNV(uint  framebuffer, uint  start, uint  count, float[]  v) => NamedFramebufferSampleLocationsfvNVPtr?.Invoke(framebuffer, start, count, v);
        public static void NamedFramebufferTexture(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level) => NamedFramebufferTexturePtr?.Invoke(framebuffer, attachment, texture, level);
        public static void NamedFramebufferSamplePositionsfvAMD(uint  framebuffer, uint  numsamples, uint  pixelindex, float[]  values) => NamedFramebufferSamplePositionsfvAMDPtr?.Invoke(framebuffer, numsamples, pixelindex, values);
        public static void NamedFramebufferTexture1DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => NamedFramebufferTexture1DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level);
        public static void NamedFramebufferTexture2DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => NamedFramebufferTexture2DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level);
        public static void NamedFramebufferTexture3DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  zoffset) => NamedFramebufferTexture3DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level, zoffset);
        public static void NamedFramebufferTextureEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => NamedFramebufferTextureEXTPtr?.Invoke(framebuffer, attachment, texture, level);
        public static void NamedFramebufferTextureFaceEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => NamedFramebufferTextureFaceEXTPtr?.Invoke(framebuffer, attachment, texture, level, face);
        public static void NamedFramebufferTextureLayer(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level, int  layer) => NamedFramebufferTextureLayerPtr?.Invoke(framebuffer, attachment, texture, level, layer);
        public static void NamedFramebufferTextureLayerEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => NamedFramebufferTextureLayerEXTPtr?.Invoke(framebuffer, attachment, texture, level, layer);
        public static void NamedProgramLocalParameter4dEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => NamedProgramLocalParameter4dEXTPtr?.Invoke(program, target, index, x, y, z, w);
        public static void NamedProgramLocalParameter4dvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => NamedProgramLocalParameter4dvEXTPtr?.Invoke(program, target, index, parameters);
        public static void NamedProgramLocalParameter4fEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => NamedProgramLocalParameter4fEXTPtr?.Invoke(program, target, index, x, y, z, w);
        public static void NamedProgramLocalParameter4fvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => NamedProgramLocalParameter4fvEXTPtr?.Invoke(program, target, index, parameters);
        public static void NamedProgramLocalParameterI4iEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => NamedProgramLocalParameterI4iEXTPtr?.Invoke(program, target, index, x, y, z, w);
        public static void NamedProgramLocalParameterI4ivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => NamedProgramLocalParameterI4ivEXTPtr?.Invoke(program, target, index, parameters);
        public static void NamedProgramLocalParameterI4uiEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => NamedProgramLocalParameterI4uiEXTPtr?.Invoke(program, target, index, x, y, z, w);
        public static void NamedProgramLocalParameterI4uivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => NamedProgramLocalParameterI4uivEXTPtr?.Invoke(program, target, index, parameters);
        public static void NamedProgramLocalParameters4fvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => NamedProgramLocalParameters4fvEXTPtr?.Invoke(program, target, index, count, parameters);
        public static void NamedProgramLocalParametersI4ivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => NamedProgramLocalParametersI4ivEXTPtr?.Invoke(program, target, index, count, parameters);
        public static void NamedProgramLocalParametersI4uivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => NamedProgramLocalParametersI4uivEXTPtr?.Invoke(program, target, index, count, parameters);
        public static void NamedProgramStringEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str) => NamedProgramStringEXTPtr?.Invoke(program, target, format, len, str);
        public static void NamedRenderbufferStorage(uint  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStoragePtr?.Invoke(renderbuffer, internalformat, width, height);
        public static void NamedRenderbufferStorageEXT(uint /*Renderbuffer*/  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStorageEXTPtr?.Invoke(renderbuffer, internalformat, width, height);
        public static void NamedRenderbufferStorageMultisample(uint  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStorageMultisamplePtr?.Invoke(renderbuffer, samples, internalformat, width, height);
        public static void NamedRenderbufferStorageMultisampleAdvancedAMD(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStorageMultisampleAdvancedAMDPtr?.Invoke(renderbuffer, samples, storageSamples, internalformat, width, height);
        public static void NamedRenderbufferStorageMultisampleCoverageEXT(uint /*Renderbuffer*/  renderbuffer, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStorageMultisampleCoverageEXTPtr?.Invoke(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        public static void NamedRenderbufferStorageMultisampleEXT(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => NamedRenderbufferStorageMultisampleEXTPtr?.Invoke(renderbuffer, samples, internalformat, width, height);
        public static void NamedStringARB(uint  type, int  namelen, string  name, int  stringlen, string  str) => NamedStringARBPtr?.Invoke(type, namelen, name, stringlen, str);
        public static void NewList(uint /*List*/  list, uint /*ListMode*/  mode) => NewListPtr?.Invoke(list, mode);
        public static uint NewObjectBufferATI(uint  size, IntPtr  pointer, uint /*ArrayObjectUsageATI*/  usage) => NewObjectBufferATIPtr?.Invoke(size, pointer, usage) ?? default;
        public static void Normal3b(sbyte  nx, sbyte  ny, sbyte  nz) => Normal3bPtr?.Invoke(nx, ny, nz);
        public static void Normal3bv(sbyte[]  v) => Normal3bvPtr?.Invoke(v);
        public static void Normal3d(double /*CoordD*/  nx, double /*CoordD*/  ny, double /*CoordD*/  nz) => Normal3dPtr?.Invoke(nx, ny, nz);
        public static void Normal3dv(double[] /*CoordD*/  v) => Normal3dvPtr?.Invoke(v);
        public static void Normal3f(float /*CoordF*/  nx, float /*CoordF*/  ny, float /*CoordF*/  nz) => Normal3fPtr?.Invoke(nx, ny, nz);
        public static void Normal3fVertex3fSUN(float  nx, float  ny, float  nz, float  x, float  y, float  z) => Normal3fVertex3fSUNPtr?.Invoke(nx, ny, nz, x, y, z);
        public static void Normal3fVertex3fvSUN(float[]  n, float[]  v) => Normal3fVertex3fvSUNPtr?.Invoke(n, v);
        public static void Normal3fv(float[] /*CoordF*/  v) => Normal3fvPtr?.Invoke(v);
        public static void Normal3hNV(ushort /*Half16NV*/  nx, ushort /*Half16NV*/  ny, ushort /*Half16NV*/  nz) => Normal3hNVPtr?.Invoke(nx, ny, nz);
        public static void Normal3hvNV(ushort[] /*Half16NV*/  v) => Normal3hvNVPtr?.Invoke(v);
        public static void Normal3i(int  nx, int  ny, int  nz) => Normal3iPtr?.Invoke(nx, ny, nz);
        public static void Normal3iv(int[]  v) => Normal3ivPtr?.Invoke(v);
        public static void Normal3s(short  nx, short  ny, short  nz) => Normal3sPtr?.Invoke(nx, ny, nz);
        public static void Normal3sv(short[]  v) => Normal3svPtr?.Invoke(v);
        public static void Normal3x(int  nx, int  ny, int  nz) => Normal3xPtr?.Invoke(nx, ny, nz);
        public static void Normal3xOES(int  nx, int  ny, int  nz) => Normal3xOESPtr?.Invoke(nx, ny, nz);
        public static void Normal3xvOES(int[]  coords) => Normal3xvOESPtr?.Invoke(coords);
        public static void NormalFormatNV(uint  type, uint  stride) => NormalFormatNVPtr?.Invoke(type, stride);
        public static void NormalP3ui(uint /*NormalPointerType*/  type, uint  coords) => NormalP3uiPtr?.Invoke(type, coords);
        public static void NormalP3uiv(uint /*NormalPointerType*/  type, uint[]  coords) => NormalP3uivPtr?.Invoke(type, coords);
        public static void NormalPointer(uint /*NormalPointerType*/  type, uint  stride, IntPtr  pointer) => NormalPointerPtr?.Invoke(type, stride, pointer);
        public static void NormalPointerEXT(uint /*NormalPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => NormalPointerEXTPtr?.Invoke(type, stride, count, pointer);
        public static void NormalPointerListIBM(uint /*NormalPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => NormalPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        public static void NormalPointervINTEL(uint /*NormalPointerType*/  type, IntPtr  pointer) => NormalPointervINTELPtr?.Invoke(type, pointer);
        public static void NormalStream3bATI(uint /*VertexStreamATI*/  stream, sbyte  nx, sbyte  ny, sbyte  nz) => NormalStream3bATIPtr?.Invoke(stream, nx, ny, nz);
        public static void NormalStream3bvATI(uint /*VertexStreamATI*/  stream, sbyte[]  coords) => NormalStream3bvATIPtr?.Invoke(stream, coords);
        public static void NormalStream3dATI(uint /*VertexStreamATI*/  stream, double  nx, double  ny, double  nz) => NormalStream3dATIPtr?.Invoke(stream, nx, ny, nz);
        public static void NormalStream3dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => NormalStream3dvATIPtr?.Invoke(stream, coords);
        public static void NormalStream3fATI(uint /*VertexStreamATI*/  stream, float  nx, float  ny, float  nz) => NormalStream3fATIPtr?.Invoke(stream, nx, ny, nz);
        public static void NormalStream3fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => NormalStream3fvATIPtr?.Invoke(stream, coords);
        public static void NormalStream3iATI(uint /*VertexStreamATI*/  stream, int  nx, int  ny, int  nz) => NormalStream3iATIPtr?.Invoke(stream, nx, ny, nz);
        public static void NormalStream3ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => NormalStream3ivATIPtr?.Invoke(stream, coords);
        public static void NormalStream3sATI(uint /*VertexStreamATI*/  stream, short  nx, short  ny, short  nz) => NormalStream3sATIPtr?.Invoke(stream, nx, ny, nz);
        public static void NormalStream3svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => NormalStream3svATIPtr?.Invoke(stream, coords);
        public static void ObjectLabel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label) => ObjectLabelPtr?.Invoke(identifier, name, length, label);
        public static void ObjectLabelKHR(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label) => ObjectLabelKHRPtr?.Invoke(identifier, name, length, label);
        public static void ObjectPtrLabel(IntPtr  ptr, uint  length, string  label) => ObjectPtrLabelPtr?.Invoke(ptr, length, label);
        public static void ObjectPtrLabelKHR(IntPtr  ptr, uint  length, string  label) => ObjectPtrLabelKHRPtr?.Invoke(ptr, length, label);
        public static uint ObjectPurgeableAPPLE(uint  objectType, uint  name, uint  option) => ObjectPurgeableAPPLEPtr?.Invoke(objectType, name, option) ?? default;
        public static uint ObjectUnpurgeableAPPLE(uint  objectType, uint  name, uint  option) => ObjectUnpurgeableAPPLEPtr?.Invoke(objectType, name, option) ?? default;
        public static void Ortho(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => OrthoPtr?.Invoke(left, right, bottom, top, zNear, zFar);
        public static void Orthof(float  l, float  r, float  b, float  t, float  n, float  f) => OrthofPtr?.Invoke(l, r, b, t, n, f);
        public static void OrthofOES(float  l, float  r, float  b, float  t, float  n, float  f) => OrthofOESPtr?.Invoke(l, r, b, t, n, f);
        public static void Orthox(int  l, int  r, int  b, int  t, int  n, int  f) => OrthoxPtr?.Invoke(l, r, b, t, n, f);
        public static void OrthoxOES(int  l, int  r, int  b, int  t, int  n, int  f) => OrthoxOESPtr?.Invoke(l, r, b, t, n, f);
        public static void PNTrianglesfATI(uint /*PNTrianglesPNameATI*/  pname, float  param) => PNTrianglesfATIPtr?.Invoke(pname, param);
        public static void PNTrianglesiATI(uint /*PNTrianglesPNameATI*/  pname, int  param) => PNTrianglesiATIPtr?.Invoke(pname, param);
        public static void PassTexCoordATI(uint  dst, uint  coord, uint /*SwizzleOpATI*/  swizzle) => PassTexCoordATIPtr?.Invoke(dst, coord, swizzle);
        public static void PassThrough(float /*FeedbackElement*/  token) => PassThroughPtr?.Invoke(token);
        public static void PassThroughxOES(int  token) => PassThroughxOESPtr?.Invoke(token);
        public static void PatchParameterfv(uint /*PatchParameterName*/  pname, float[]  values) => PatchParameterfvPtr?.Invoke(pname, values);
        public static void PatchParameteri(uint /*PatchParameterName*/  pname, int  value) => PatchParameteriPtr?.Invoke(pname, value);
        public static void PatchParameteriEXT(uint /*PatchParameterName*/  pname, int  value) => PatchParameteriEXTPtr?.Invoke(pname, value);
        public static void PatchParameteriOES(uint /*PatchParameterName*/  pname, int  value) => PatchParameteriOESPtr?.Invoke(pname, value);
        public static void PathColorGenNV(uint /*PathColor*/  color, uint /*PathGenMode*/  genMode, uint /*PathColorFormat*/  colorFormat, float[]  coeffs) => PathColorGenNVPtr?.Invoke(color, genMode, colorFormat, coeffs);
        public static void PathCommandsNV(uint /*Path*/  path, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => PathCommandsNVPtr?.Invoke(path, numCommands, commands, numCoords, coordType, coords);
        public static void PathCoordsNV(uint /*Path*/  path, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => PathCoordsNVPtr?.Invoke(path, numCoords, coordType, coords);
        public static void PathCoverDepthFuncNV(uint /*DepthFunction*/  func) => PathCoverDepthFuncNVPtr?.Invoke(func);
        public static void PathDashArrayNV(uint /*Path*/  path, uint  dashCount, float[]  dashArray) => PathDashArrayNVPtr?.Invoke(path, dashCount, dashArray);
        public static void PathFogGenNV(uint /*PathGenMode*/  genMode) => PathFogGenNVPtr?.Invoke(genMode);
        public static uint PathGlyphIndexArrayNV(uint  firstPathName, uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale) => PathGlyphIndexArrayNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) ?? default;
        public static uint PathGlyphIndexRangeNV(uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  pathParameterTemplate, float  emScale, uint  baseAndCount) => PathGlyphIndexRangeNVPtr?.Invoke(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) ?? default;
        public static void PathGlyphRangeNV(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyph, uint  numGlyphs, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale) => PathGlyphRangeNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        public static void PathGlyphsNV(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  numGlyphs, uint /*PathElementType*/  type, IntPtr  charcodes, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale) => PathGlyphsNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        public static uint PathMemoryGlyphIndexArrayNV(uint  firstPathName, uint  fontTarget, IntPtr  fontSize, IntPtr  fontData, uint  faceIndex, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale) => PathMemoryGlyphIndexArrayNVPtr?.Invoke(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) ?? default;
        public static void PathParameterfNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float  value) => PathParameterfNVPtr?.Invoke(path, pname, value);
        public static void PathParameterfvNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value) => PathParameterfvNVPtr?.Invoke(path, pname, value);
        public static void PathParameteriNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int  value) => PathParameteriNVPtr?.Invoke(path, pname, value);
        public static void PathParameterivNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value) => PathParameterivNVPtr?.Invoke(path, pname, value);
        public static void PathStencilDepthOffsetNV(float  factor, float  units) => PathStencilDepthOffsetNVPtr?.Invoke(factor, units);
        public static void PathStencilFuncNV(uint /*StencilFunction*/  func, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => PathStencilFuncNVPtr?.Invoke(func, refVal, mask);
        public static void PathStringNV(uint /*Path*/  path, uint /*PathStringFormat*/  format, uint  length, IntPtr  pathString) => PathStringNVPtr?.Invoke(path, format, length, pathString);
        public static void PathSubCommandsNV(uint /*Path*/  path, uint  commandStart, uint  commandsToDelete, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => PathSubCommandsNVPtr?.Invoke(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        public static void PathSubCoordsNV(uint /*Path*/  path, uint  coordStart, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => PathSubCoordsNVPtr?.Invoke(path, coordStart, numCoords, coordType, coords);
        public static void PathTexGenNV(uint /*PathColor*/  texCoordSet, uint /*PathGenMode*/  genMode, int  components, float[]  coeffs) => PathTexGenNVPtr?.Invoke(texCoordSet, genMode, components, coeffs);
        public static void PauseTransformFeedback() => PauseTransformFeedbackPtr?.Invoke();
        public static void PauseTransformFeedbackNV() => PauseTransformFeedbackNVPtr?.Invoke();
        public static void PixelDataRangeNV(uint /*PixelDataRangeTargetNV*/  target, uint  length, IntPtr  pointer) => PixelDataRangeNVPtr?.Invoke(target, length, pointer);
        public static void PixelMapfv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, float[]  values) => PixelMapfvPtr?.Invoke(map, mapsize, values);
        public static void PixelMapuiv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, uint[]  values) => PixelMapuivPtr?.Invoke(map, mapsize, values);
        public static void PixelMapusv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, ushort[]  values) => PixelMapusvPtr?.Invoke(map, mapsize, values);
        public static void PixelMapx(uint /*PixelMap*/  map, int  size, int[]  values) => PixelMapxPtr?.Invoke(map, size, values);
        public static void PixelStoref(uint /*PixelStoreParameter*/  pname, float /*CheckedFloat32*/  param) => PixelStorefPtr?.Invoke(pname, param);
        public static void PixelStorei(uint /*PixelStoreParameter*/  pname, int /*CheckedInt32*/  param) => PixelStoreiPtr?.Invoke(pname, param);
        public static void PixelStorex(uint /*PixelStoreParameter*/  pname, int  param) => PixelStorexPtr?.Invoke(pname, param);
        public static void PixelTexGenParameterfSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float /*CheckedFloat32*/  param) => PixelTexGenParameterfSGISPtr?.Invoke(pname, param);
        public static void PixelTexGenParameterfvSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters) => PixelTexGenParameterfvSGISPtr?.Invoke(pname, parameters);
        public static void PixelTexGenParameteriSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int /*CheckedInt32*/  param) => PixelTexGenParameteriSGISPtr?.Invoke(pname, param);
        public static void PixelTexGenParameterivSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters) => PixelTexGenParameterivSGISPtr?.Invoke(pname, parameters);
        public static void PixelTexGenSGIX(uint /*PixelTexGenModeSGIX*/  mode) => PixelTexGenSGIXPtr?.Invoke(mode);
        public static void PixelTransferf(uint /*PixelTransferParameter*/  pname, float /*CheckedFloat32*/  param) => PixelTransferfPtr?.Invoke(pname, param);
        public static void PixelTransferi(uint /*PixelTransferParameter*/  pname, int /*CheckedInt32*/  param) => PixelTransferiPtr?.Invoke(pname, param);
        public static void PixelTransferxOES(uint /*PixelTransferParameter*/  pname, int  param) => PixelTransferxOESPtr?.Invoke(pname, param);
        public static void PixelTransformParameterfEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float  param) => PixelTransformParameterfEXTPtr?.Invoke(target, pname, param);
        public static void PixelTransformParameterfvEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float[]  parameters) => PixelTransformParameterfvEXTPtr?.Invoke(target, pname, parameters);
        public static void PixelTransformParameteriEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int  param) => PixelTransformParameteriEXTPtr?.Invoke(target, pname, param);
        public static void PixelTransformParameterivEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int[]  parameters) => PixelTransformParameterivEXTPtr?.Invoke(target, pname, parameters);
        public static void PixelZoom(float  xfactor, float  yfactor) => PixelZoomPtr?.Invoke(xfactor, yfactor);
        public static void PixelZoomxOES(int  xfactor, int  yfactor) => PixelZoomxOESPtr?.Invoke(xfactor, yfactor);
        public static bool /*Boolean*/ PointAlongPathNV(uint /*Path*/  path, uint  startSegment, uint  numSegments, float  distance, float[]  x, float[]  y, float[]  tangentX, float[]  tangentY) => PointAlongPathNVPtr?.Invoke(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) ?? default;
        public static void PointParameterf(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => PointParameterfPtr?.Invoke(pname, param);
        public static void PointParameterfARB(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => PointParameterfARBPtr?.Invoke(pname, param);
        public static void PointParameterfEXT(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => PointParameterfEXTPtr?.Invoke(pname, param);
        public static void PointParameterfSGIS(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => PointParameterfSGISPtr?.Invoke(pname, param);
        public static void PointParameterfv(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => PointParameterfvPtr?.Invoke(pname, parameters);
        public static void PointParameterfvARB(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => PointParameterfvARBPtr?.Invoke(pname, parameters);
        public static void PointParameterfvEXT(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => PointParameterfvEXTPtr?.Invoke(pname, parameters);
        public static void PointParameterfvSGIS(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => PointParameterfvSGISPtr?.Invoke(pname, parameters);
        public static void PointParameteri(uint /*PointParameterNameARB*/  pname, int  param) => PointParameteriPtr?.Invoke(pname, param);
        public static void PointParameteriNV(uint /*PointParameterNameARB*/  pname, int  param) => PointParameteriNVPtr?.Invoke(pname, param);
        public static void PointParameteriv(uint /*PointParameterNameARB*/  pname, int[]  parameters) => PointParameterivPtr?.Invoke(pname, parameters);
        public static void PointParameterivNV(uint /*PointParameterNameARB*/  pname, int[]  parameters) => PointParameterivNVPtr?.Invoke(pname, parameters);
        public static void PointParameterx(uint /*PointParameterNameARB*/  pname, int  param) => PointParameterxPtr?.Invoke(pname, param);
        public static void PointParameterxOES(uint /*PointParameterNameARB*/  pname, int  param) => PointParameterxOESPtr?.Invoke(pname, param);
        public static void PointParameterxv(uint /*PointParameterNameARB*/  pname, int[]  parameters) => PointParameterxvPtr?.Invoke(pname, parameters);
        public static void PointParameterxvOES(uint /*PointParameterNameARB*/  pname, int[]  parameters) => PointParameterxvOESPtr?.Invoke(pname, parameters);
        public static void PointSize(float /*CheckedFloat32*/  size) => PointSizePtr?.Invoke(size);
        public static void PointSizePointerOES(uint  type, uint  stride, IntPtr  pointer) => PointSizePointerOESPtr?.Invoke(type, stride, pointer);
        public static void PointSizex(int  size) => PointSizexPtr?.Invoke(size);
        public static void PointSizexOES(int  size) => PointSizexOESPtr?.Invoke(size);
        public static int PollAsyncSGIX(uint[]  markerp) => PollAsyncSGIXPtr?.Invoke(markerp) ?? default;
        public static int PollInstrumentsSGIX(int[]  marker_p) => PollInstrumentsSGIXPtr?.Invoke(marker_p) ?? default;
        public static void PolygonMode(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode) => PolygonModePtr?.Invoke(face, mode);
        public static void PolygonModeNV(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode) => PolygonModeNVPtr?.Invoke(face, mode);
        public static void PolygonOffset(float  factor, float  units) => PolygonOffsetPtr?.Invoke(factor, units);
        public static void PolygonOffsetClamp(float  factor, float  units, float  clamp) => PolygonOffsetClampPtr?.Invoke(factor, units, clamp);
        public static void PolygonOffsetClampEXT(float  factor, float  units, float  clamp) => PolygonOffsetClampEXTPtr?.Invoke(factor, units, clamp);
        public static void PolygonOffsetEXT(float  factor, float  bias) => PolygonOffsetEXTPtr?.Invoke(factor, bias);
        public static void PolygonOffsetx(int  factor, int  units) => PolygonOffsetxPtr?.Invoke(factor, units);
        public static void PolygonOffsetxOES(int  factor, int  units) => PolygonOffsetxOESPtr?.Invoke(factor, units);
        public static void PolygonStipple(byte[]  mask) => PolygonStipplePtr?.Invoke(mask);
        public static void PopAttrib() => PopAttribPtr?.Invoke();
        public static void PopClientAttrib() => PopClientAttribPtr?.Invoke();
        public static void PopDebugGroup() => PopDebugGroupPtr?.Invoke();
        public static void PopDebugGroupKHR() => PopDebugGroupKHRPtr?.Invoke();
        public static void PopGroupMarkerEXT() => PopGroupMarkerEXTPtr?.Invoke();
        public static void PopMatrix() => PopMatrixPtr?.Invoke();
        public static void PopName() => PopNamePtr?.Invoke();
        public static void PresentFrameDualFillNV(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  target1, uint  fill1, uint  target2, uint  fill2, uint  target3, uint  fill3) => PresentFrameDualFillNVPtr?.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        public static void PresentFrameKeyedNV(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  key0, uint  target1, uint  fill1, uint  key1) => PresentFrameKeyedNVPtr?.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        public static void PrimitiveBoundingBox(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => PrimitiveBoundingBoxPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public static void PrimitiveBoundingBoxARB(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => PrimitiveBoundingBoxARBPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public static void PrimitiveBoundingBoxEXT(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => PrimitiveBoundingBoxEXTPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public static void PrimitiveBoundingBoxOES(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => PrimitiveBoundingBoxOESPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        public static void PrimitiveRestartIndex(uint  index) => PrimitiveRestartIndexPtr?.Invoke(index);
        public static void PrimitiveRestartIndexNV(uint  index) => PrimitiveRestartIndexNVPtr?.Invoke(index);
        public static void PrimitiveRestartNV() => PrimitiveRestartNVPtr?.Invoke();
        public static void PrioritizeTextures(uint  n, uint[] /*Texture*/  textures, float[]  priorities) => PrioritizeTexturesPtr?.Invoke(n, textures, priorities);
        public static void PrioritizeTexturesEXT(uint  n, uint[] /*Texture*/  textures, float[] /*ClampedFloat32*/  priorities) => PrioritizeTexturesEXTPtr?.Invoke(n, textures, priorities);
        public static void PrioritizeTexturesxOES(uint  n, uint[]  textures, int[] /*ClampedFixed*/  priorities) => PrioritizeTexturesxOESPtr?.Invoke(n, textures, priorities);
        public static void ProgramBinary(uint  program, uint  binaryFormat, IntPtr  binary, uint  length) => ProgramBinaryPtr?.Invoke(program, binaryFormat, binary, length);
        public static void ProgramBinaryOES(uint  program, uint  binaryFormat, IntPtr  binary, int  length) => ProgramBinaryOESPtr?.Invoke(program, binaryFormat, binary, length);
        public static void ProgramBufferParametersIivNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, int[]  parameters) => ProgramBufferParametersIivNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        public static void ProgramBufferParametersIuivNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, uint[]  parameters) => ProgramBufferParametersIuivNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        public static void ProgramBufferParametersfvNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, float[]  parameters) => ProgramBufferParametersfvNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        public static void ProgramEnvParameter4dARB(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => ProgramEnvParameter4dARBPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramEnvParameter4dvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => ProgramEnvParameter4dvARBPtr?.Invoke(target, index, parameters);
        public static void ProgramEnvParameter4fARB(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => ProgramEnvParameter4fARBPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramEnvParameter4fvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => ProgramEnvParameter4fvARBPtr?.Invoke(target, index, parameters);
        public static void ProgramEnvParameterI4iNV(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => ProgramEnvParameterI4iNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramEnvParameterI4ivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => ProgramEnvParameterI4ivNVPtr?.Invoke(target, index, parameters);
        public static void ProgramEnvParameterI4uiNV(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => ProgramEnvParameterI4uiNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramEnvParameterI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => ProgramEnvParameterI4uivNVPtr?.Invoke(target, index, parameters);
        public static void ProgramEnvParameters4fvEXT(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => ProgramEnvParameters4fvEXTPtr?.Invoke(target, index, count, parameters);
        public static void ProgramEnvParametersI4ivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => ProgramEnvParametersI4ivNVPtr?.Invoke(target, index, count, parameters);
        public static void ProgramEnvParametersI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => ProgramEnvParametersI4uivNVPtr?.Invoke(target, index, count, parameters);
        public static void ProgramLocalParameter4dARB(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => ProgramLocalParameter4dARBPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramLocalParameter4dvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => ProgramLocalParameter4dvARBPtr?.Invoke(target, index, parameters);
        public static void ProgramLocalParameter4fARB(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => ProgramLocalParameter4fARBPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramLocalParameter4fvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => ProgramLocalParameter4fvARBPtr?.Invoke(target, index, parameters);
        public static void ProgramLocalParameterI4iNV(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => ProgramLocalParameterI4iNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramLocalParameterI4ivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => ProgramLocalParameterI4ivNVPtr?.Invoke(target, index, parameters);
        public static void ProgramLocalParameterI4uiNV(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => ProgramLocalParameterI4uiNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramLocalParameterI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => ProgramLocalParameterI4uivNVPtr?.Invoke(target, index, parameters);
        public static void ProgramLocalParameters4fvEXT(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => ProgramLocalParameters4fvEXTPtr?.Invoke(target, index, count, parameters);
        public static void ProgramLocalParametersI4ivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => ProgramLocalParametersI4ivNVPtr?.Invoke(target, index, count, parameters);
        public static void ProgramLocalParametersI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => ProgramLocalParametersI4uivNVPtr?.Invoke(target, index, count, parameters);
        public static void ProgramNamedParameter4dNV(uint  id, uint  len, byte[]  name, double  x, double  y, double  z, double  w) => ProgramNamedParameter4dNVPtr?.Invoke(id, len, name, x, y, z, w);
        public static void ProgramNamedParameter4dvNV(uint  id, uint  len, byte[]  name, double[]  v) => ProgramNamedParameter4dvNVPtr?.Invoke(id, len, name, v);
        public static void ProgramNamedParameter4fNV(uint  id, uint  len, byte[]  name, float  x, float  y, float  z, float  w) => ProgramNamedParameter4fNVPtr?.Invoke(id, len, name, x, y, z, w);
        public static void ProgramNamedParameter4fvNV(uint  id, uint  len, byte[]  name, float[]  v) => ProgramNamedParameter4fvNVPtr?.Invoke(id, len, name, v);
        public static void ProgramParameter4dNV(uint /*VertexAttribEnumNV*/  target, uint  index, double  x, double  y, double  z, double  w) => ProgramParameter4dNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramParameter4dvNV(uint /*VertexAttribEnumNV*/  target, uint  index, double[]  v) => ProgramParameter4dvNVPtr?.Invoke(target, index, v);
        public static void ProgramParameter4fNV(uint /*VertexAttribEnumNV*/  target, uint  index, float  x, float  y, float  z, float  w) => ProgramParameter4fNVPtr?.Invoke(target, index, x, y, z, w);
        public static void ProgramParameter4fvNV(uint /*VertexAttribEnumNV*/  target, uint  index, float[]  v) => ProgramParameter4fvNVPtr?.Invoke(target, index, v);
        public static void ProgramParameteri(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => ProgramParameteriPtr?.Invoke(program, pname, value);
        public static void ProgramParameteriARB(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => ProgramParameteriARBPtr?.Invoke(program, pname, value);
        public static void ProgramParameteriEXT(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => ProgramParameteriEXTPtr?.Invoke(program, pname, value);
        public static void ProgramParameters4dvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, double[]  v) => ProgramParameters4dvNVPtr?.Invoke(target, index, count, v);
        public static void ProgramParameters4fvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, float[]  v) => ProgramParameters4fvNVPtr?.Invoke(target, index, count, v);
        public static void ProgramPathFragmentInputGenNV(uint  program, int  location, uint  genMode, int  components, float[]  coeffs) => ProgramPathFragmentInputGenNVPtr?.Invoke(program, location, genMode, components, coeffs);
        public static void ProgramStringARB(uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str) => ProgramStringARBPtr?.Invoke(target, format, len, str);
        public static void ProgramSubroutineParametersuivNV(uint  target, uint  count, uint[]  parameters) => ProgramSubroutineParametersuivNVPtr?.Invoke(target, count, parameters);
        public static void ProgramUniform1d(uint  program, int  location, double  v0) => ProgramUniform1dPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1dEXT(uint  program, int  location, double  x) => ProgramUniform1dEXTPtr?.Invoke(program, location, x);
        public static void ProgramUniform1dv(uint  program, int  location, uint  count, double[]  value) => ProgramUniform1dvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1dvEXT(uint  program, int  location, uint  count, double[]  value) => ProgramUniform1dvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1f(uint  program, int  location, float  v0) => ProgramUniform1fPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1fEXT(uint  program, int  location, float  v0) => ProgramUniform1fEXTPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1fv(uint  program, int  location, uint  count, float[]  value) => ProgramUniform1fvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1fvEXT(uint  program, int  location, uint  count, float[]  value) => ProgramUniform1fvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1i(uint  program, int  location, int  v0) => ProgramUniform1iPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1i64ARB(uint  program, int  location, long  x) => ProgramUniform1i64ARBPtr?.Invoke(program, location, x);
        public static void ProgramUniform1i64NV(uint  program, int  location, long  x) => ProgramUniform1i64NVPtr?.Invoke(program, location, x);
        public static void ProgramUniform1i64vARB(uint  program, int  location, uint  count, long[]  value) => ProgramUniform1i64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1i64vNV(uint  program, int  location, uint  count, long[]  value) => ProgramUniform1i64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1iEXT(uint  program, int  location, int  v0) => ProgramUniform1iEXTPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1iv(uint  program, int  location, uint  count, int[]  value) => ProgramUniform1ivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1ivEXT(uint  program, int  location, uint  count, int[]  value) => ProgramUniform1ivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1ui(uint  program, int  location, uint  v0) => ProgramUniform1uiPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1ui64ARB(uint  program, int  location, ulong  x) => ProgramUniform1ui64ARBPtr?.Invoke(program, location, x);
        public static void ProgramUniform1ui64NV(uint  program, int  location, ulong  x) => ProgramUniform1ui64NVPtr?.Invoke(program, location, x);
        public static void ProgramUniform1ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform1ui64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform1ui64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1uiEXT(uint  program, int  location, uint  v0) => ProgramUniform1uiEXTPtr?.Invoke(program, location, v0);
        public static void ProgramUniform1uiv(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform1uivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform1uivEXT(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform1uivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2d(uint  program, int  location, double  v0, double  v1) => ProgramUniform2dPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2dEXT(uint  program, int  location, double  x, double  y) => ProgramUniform2dEXTPtr?.Invoke(program, location, x, y);
        public static void ProgramUniform2dv(uint  program, int  location, uint  count, double[]  value) => ProgramUniform2dvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2dvEXT(uint  program, int  location, uint  count, double[]  value) => ProgramUniform2dvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2f(uint  program, int  location, float  v0, float  v1) => ProgramUniform2fPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2fEXT(uint  program, int  location, float  v0, float  v1) => ProgramUniform2fEXTPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2fv(uint  program, int  location, uint  count, float[]  value) => ProgramUniform2fvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2fvEXT(uint  program, int  location, uint  count, float[]  value) => ProgramUniform2fvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2i(uint  program, int  location, int  v0, int  v1) => ProgramUniform2iPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2i64ARB(uint  program, int  location, long  x, long  y) => ProgramUniform2i64ARBPtr?.Invoke(program, location, x, y);
        public static void ProgramUniform2i64NV(uint  program, int  location, long  x, long  y) => ProgramUniform2i64NVPtr?.Invoke(program, location, x, y);
        public static void ProgramUniform2i64vARB(uint  program, int  location, uint  count, long[]  value) => ProgramUniform2i64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2i64vNV(uint  program, int  location, uint  count, long[]  value) => ProgramUniform2i64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2iEXT(uint  program, int  location, int  v0, int  v1) => ProgramUniform2iEXTPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2iv(uint  program, int  location, uint  count, int[]  value) => ProgramUniform2ivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2ivEXT(uint  program, int  location, uint  count, int[]  value) => ProgramUniform2ivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2ui(uint  program, int  location, uint  v0, uint  v1) => ProgramUniform2uiPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2ui64ARB(uint  program, int  location, ulong  x, ulong  y) => ProgramUniform2ui64ARBPtr?.Invoke(program, location, x, y);
        public static void ProgramUniform2ui64NV(uint  program, int  location, ulong  x, ulong  y) => ProgramUniform2ui64NVPtr?.Invoke(program, location, x, y);
        public static void ProgramUniform2ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform2ui64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform2ui64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2uiEXT(uint  program, int  location, uint  v0, uint  v1) => ProgramUniform2uiEXTPtr?.Invoke(program, location, v0, v1);
        public static void ProgramUniform2uiv(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform2uivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform2uivEXT(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform2uivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3d(uint  program, int  location, double  v0, double  v1, double  v2) => ProgramUniform3dPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3dEXT(uint  program, int  location, double  x, double  y, double  z) => ProgramUniform3dEXTPtr?.Invoke(program, location, x, y, z);
        public static void ProgramUniform3dv(uint  program, int  location, uint  count, double[]  value) => ProgramUniform3dvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3dvEXT(uint  program, int  location, uint  count, double[]  value) => ProgramUniform3dvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3f(uint  program, int  location, float  v0, float  v1, float  v2) => ProgramUniform3fPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3fEXT(uint  program, int  location, float  v0, float  v1, float  v2) => ProgramUniform3fEXTPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3fv(uint  program, int  location, uint  count, float[]  value) => ProgramUniform3fvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3fvEXT(uint  program, int  location, uint  count, float[]  value) => ProgramUniform3fvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3i(uint  program, int  location, int  v0, int  v1, int  v2) => ProgramUniform3iPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3i64ARB(uint  program, int  location, long  x, long  y, long  z) => ProgramUniform3i64ARBPtr?.Invoke(program, location, x, y, z);
        public static void ProgramUniform3i64NV(uint  program, int  location, long  x, long  y, long  z) => ProgramUniform3i64NVPtr?.Invoke(program, location, x, y, z);
        public static void ProgramUniform3i64vARB(uint  program, int  location, uint  count, long[]  value) => ProgramUniform3i64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3i64vNV(uint  program, int  location, uint  count, long[]  value) => ProgramUniform3i64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3iEXT(uint  program, int  location, int  v0, int  v1, int  v2) => ProgramUniform3iEXTPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3iv(uint  program, int  location, uint  count, int[]  value) => ProgramUniform3ivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3ivEXT(uint  program, int  location, uint  count, int[]  value) => ProgramUniform3ivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3ui(uint  program, int  location, uint  v0, uint  v1, uint  v2) => ProgramUniform3uiPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3ui64ARB(uint  program, int  location, ulong  x, ulong  y, ulong  z) => ProgramUniform3ui64ARBPtr?.Invoke(program, location, x, y, z);
        public static void ProgramUniform3ui64NV(uint  program, int  location, ulong  x, ulong  y, ulong  z) => ProgramUniform3ui64NVPtr?.Invoke(program, location, x, y, z);
        public static void ProgramUniform3ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform3ui64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform3ui64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3uiEXT(uint  program, int  location, uint  v0, uint  v1, uint  v2) => ProgramUniform3uiEXTPtr?.Invoke(program, location, v0, v1, v2);
        public static void ProgramUniform3uiv(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform3uivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform3uivEXT(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform3uivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4d(uint  program, int  location, double  v0, double  v1, double  v2, double  v3) => ProgramUniform4dPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4dEXT(uint  program, int  location, double  x, double  y, double  z, double  w) => ProgramUniform4dEXTPtr?.Invoke(program, location, x, y, z, w);
        public static void ProgramUniform4dv(uint  program, int  location, uint  count, double[]  value) => ProgramUniform4dvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4dvEXT(uint  program, int  location, uint  count, double[]  value) => ProgramUniform4dvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4f(uint  program, int  location, float  v0, float  v1, float  v2, float  v3) => ProgramUniform4fPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4fEXT(uint  program, int  location, float  v0, float  v1, float  v2, float  v3) => ProgramUniform4fEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4fv(uint  program, int  location, uint  count, float[]  value) => ProgramUniform4fvPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4fvEXT(uint  program, int  location, uint  count, float[]  value) => ProgramUniform4fvEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4i(uint  program, int  location, int  v0, int  v1, int  v2, int  v3) => ProgramUniform4iPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4i64ARB(uint  program, int  location, long  x, long  y, long  z, long  w) => ProgramUniform4i64ARBPtr?.Invoke(program, location, x, y, z, w);
        public static void ProgramUniform4i64NV(uint  program, int  location, long  x, long  y, long  z, long  w) => ProgramUniform4i64NVPtr?.Invoke(program, location, x, y, z, w);
        public static void ProgramUniform4i64vARB(uint  program, int  location, uint  count, long[]  value) => ProgramUniform4i64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4i64vNV(uint  program, int  location, uint  count, long[]  value) => ProgramUniform4i64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4iEXT(uint  program, int  location, int  v0, int  v1, int  v2, int  v3) => ProgramUniform4iEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4iv(uint  program, int  location, uint  count, int[]  value) => ProgramUniform4ivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4ivEXT(uint  program, int  location, uint  count, int[]  value) => ProgramUniform4ivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4ui(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3) => ProgramUniform4uiPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4ui64ARB(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w) => ProgramUniform4ui64ARBPtr?.Invoke(program, location, x, y, z, w);
        public static void ProgramUniform4ui64NV(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w) => ProgramUniform4ui64NVPtr?.Invoke(program, location, x, y, z, w);
        public static void ProgramUniform4ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform4ui64vARBPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniform4ui64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4uiEXT(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3) => ProgramUniform4uiEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        public static void ProgramUniform4uiv(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform4uivPtr?.Invoke(program, location, count, value);
        public static void ProgramUniform4uivEXT(uint  program, int  location, uint  count, uint[]  value) => ProgramUniform4uivEXTPtr?.Invoke(program, location, count, value);
        public static void ProgramUniformHandleui64ARB(uint  program, int  location, ulong  value) => ProgramUniformHandleui64ARBPtr?.Invoke(program, location, value);
        public static void ProgramUniformHandleui64IMG(uint  program, int  location, ulong  value) => ProgramUniformHandleui64IMGPtr?.Invoke(program, location, value);
        public static void ProgramUniformHandleui64NV(uint  program, int  location, ulong  value) => ProgramUniformHandleui64NVPtr?.Invoke(program, location, value);
        public static void ProgramUniformHandleui64vARB(uint  program, int  location, uint  count, ulong[]  values) => ProgramUniformHandleui64vARBPtr?.Invoke(program, location, count, values);
        public static void ProgramUniformHandleui64vIMG(uint  program, int  location, uint  count, ulong[]  values) => ProgramUniformHandleui64vIMGPtr?.Invoke(program, location, count, values);
        public static void ProgramUniformHandleui64vNV(uint  program, int  location, uint  count, ulong[]  values) => ProgramUniformHandleui64vNVPtr?.Invoke(program, location, count, values);
        public static void ProgramUniformMatrix2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2x3dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2x3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2x3fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2x3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2x4dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix2x4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2x4fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix2x4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix2x4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3x2dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3x2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3x2fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3x2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3x4dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix3x4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3x4fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix3x4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix3x4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4x2dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4x2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4x2fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4x2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4x3dvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => ProgramUniformMatrix4x3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4x3fvPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformMatrix4x3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => ProgramUniformMatrix4x3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        public static void ProgramUniformui64NV(uint  program, int  location, ulong  value) => ProgramUniformui64NVPtr?.Invoke(program, location, value);
        public static void ProgramUniformui64vNV(uint  program, int  location, uint  count, ulong[]  value) => ProgramUniformui64vNVPtr?.Invoke(program, location, count, value);
        public static void ProgramVertexLimitNV(uint /*ProgramTarget*/  target, int  limit) => ProgramVertexLimitNVPtr?.Invoke(target, limit);
        public static void ProvokingVertex(uint /*VertexProvokingMode*/  mode) => ProvokingVertexPtr?.Invoke(mode);
        public static void ProvokingVertexEXT(uint /*VertexProvokingMode*/  mode) => ProvokingVertexEXTPtr?.Invoke(mode);
        public static void PushAttrib(uint /*AttribMask*/  mask) => PushAttribPtr?.Invoke(mask);
        public static void PushClientAttrib(uint /*ClientAttribMask*/  mask) => PushClientAttribPtr?.Invoke(mask);
        public static void PushClientAttribDefaultEXT(uint /*ClientAttribMask*/  mask) => PushClientAttribDefaultEXTPtr?.Invoke(mask);
        public static void PushDebugGroup(uint /*DebugSource*/  source, uint  id, uint  length, string  message) => PushDebugGroupPtr?.Invoke(source, id, length, message);
        public static void PushDebugGroupKHR(uint /*DebugSource*/  source, uint  id, uint  length, string  message) => PushDebugGroupKHRPtr?.Invoke(source, id, length, message);
        public static void PushGroupMarkerEXT(uint  length, string  marker) => PushGroupMarkerEXTPtr?.Invoke(length, marker);
        public static void PushMatrix() => PushMatrixPtr?.Invoke();
        public static void PushName(uint /*SelectName*/  name) => PushNamePtr?.Invoke(name);
        public static void QueryCounter(uint  id, uint /*QueryCounterTarget*/  target) => QueryCounterPtr?.Invoke(id, target);
        public static void QueryCounterEXT(uint  id, uint /*QueryCounterTarget*/  target) => QueryCounterEXTPtr?.Invoke(id, target);
        public static uint QueryMatrixxOES(int[]  mantissa, int[]  exponent) => QueryMatrixxOESPtr?.Invoke(mantissa, exponent) ?? default;
        public static void QueryObjectParameteruiAMD(uint /*QueryTarget*/  target, uint  id, uint  pname, uint /*OcclusionQueryEventMaskAMD*/  param) => QueryObjectParameteruiAMDPtr?.Invoke(target, id, pname, param);
        public static int QueryResourceNV(uint  queryType, int  tagId, uint  count, int[]  buffer) => QueryResourceNVPtr?.Invoke(queryType, tagId, count, buffer) ?? default;
        public static void QueryResourceTagNV(int  tagId, string  tagString) => QueryResourceTagNVPtr?.Invoke(tagId, tagString);
        public static void RasterPos2d(double /*CoordD*/  x, double /*CoordD*/  y) => RasterPos2dPtr?.Invoke(x, y);
        public static void RasterPos2dv(double[] /*CoordD*/  v) => RasterPos2dvPtr?.Invoke(v);
        public static void RasterPos2f(float /*CoordF*/  x, float /*CoordF*/  y) => RasterPos2fPtr?.Invoke(x, y);
        public static void RasterPos2fv(float[] /*CoordF*/  v) => RasterPos2fvPtr?.Invoke(v);
        public static void RasterPos2i(int /*CoordI*/  x, int /*CoordI*/  y) => RasterPos2iPtr?.Invoke(x, y);
        public static void RasterPos2iv(int[] /*CoordI*/  v) => RasterPos2ivPtr?.Invoke(v);
        public static void RasterPos2s(short /*CoordS*/  x, short /*CoordS*/  y) => RasterPos2sPtr?.Invoke(x, y);
        public static void RasterPos2sv(short[] /*CoordS*/  v) => RasterPos2svPtr?.Invoke(v);
        public static void RasterPos2xOES(int  x, int  y) => RasterPos2xOESPtr?.Invoke(x, y);
        public static void RasterPos2xvOES(int[]  coords) => RasterPos2xvOESPtr?.Invoke(coords);
        public static void RasterPos3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => RasterPos3dPtr?.Invoke(x, y, z);
        public static void RasterPos3dv(double[] /*CoordD*/  v) => RasterPos3dvPtr?.Invoke(v);
        public static void RasterPos3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => RasterPos3fPtr?.Invoke(x, y, z);
        public static void RasterPos3fv(float[] /*CoordF*/  v) => RasterPos3fvPtr?.Invoke(v);
        public static void RasterPos3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => RasterPos3iPtr?.Invoke(x, y, z);
        public static void RasterPos3iv(int[] /*CoordI*/  v) => RasterPos3ivPtr?.Invoke(v);
        public static void RasterPos3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => RasterPos3sPtr?.Invoke(x, y, z);
        public static void RasterPos3sv(short[] /*CoordS*/  v) => RasterPos3svPtr?.Invoke(v);
        public static void RasterPos3xOES(int  x, int  y, int  z) => RasterPos3xOESPtr?.Invoke(x, y, z);
        public static void RasterPos3xvOES(int[]  coords) => RasterPos3xvOESPtr?.Invoke(coords);
        public static void RasterPos4d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => RasterPos4dPtr?.Invoke(x, y, z, w);
        public static void RasterPos4dv(double[] /*CoordD*/  v) => RasterPos4dvPtr?.Invoke(v);
        public static void RasterPos4f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => RasterPos4fPtr?.Invoke(x, y, z, w);
        public static void RasterPos4fv(float[] /*CoordF*/  v) => RasterPos4fvPtr?.Invoke(v);
        public static void RasterPos4i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => RasterPos4iPtr?.Invoke(x, y, z, w);
        public static void RasterPos4iv(int[] /*CoordI*/  v) => RasterPos4ivPtr?.Invoke(v);
        public static void RasterPos4s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => RasterPos4sPtr?.Invoke(x, y, z, w);
        public static void RasterPos4sv(short[] /*CoordS*/  v) => RasterPos4svPtr?.Invoke(v);
        public static void RasterPos4xOES(int  x, int  y, int  z, int  w) => RasterPos4xOESPtr?.Invoke(x, y, z, w);
        public static void RasterPos4xvOES(int[]  coords) => RasterPos4xvOESPtr?.Invoke(coords);
        public static void RasterSamplesEXT(uint  samples, bool /*Boolean*/  fixedsamplelocations) => RasterSamplesEXTPtr?.Invoke(samples, fixedsamplelocations);
        public static void ReadBuffer(uint /*ReadBufferMode*/  src) => ReadBufferPtr?.Invoke(src);
        public static void ReadBufferIndexedEXT(uint /*ReadBufferMode*/  src, int  index) => ReadBufferIndexedEXTPtr?.Invoke(src, index);
        public static void ReadBufferNV(uint  mode) => ReadBufferNVPtr?.Invoke(mode);
        public static void ReadInstrumentsSGIX(int  marker) => ReadInstrumentsSGIXPtr?.Invoke(marker);
        public static void ReadPixels(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => ReadPixelsPtr?.Invoke(x, y, width, height, format, type, pixels);
        public static void ReadnPixels(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => ReadnPixelsPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        public static void ReadnPixelsARB(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => ReadnPixelsARBPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        public static void ReadnPixelsEXT(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => ReadnPixelsEXTPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        public static void ReadnPixelsKHR(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => ReadnPixelsKHRPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        public static bool /*Boolean*/ ReleaseKeyedMutexWin32EXT(uint  memory, ulong  key) => ReleaseKeyedMutexWin32EXTPtr?.Invoke(memory, key) ?? default;
        public static void Rectd(double /*CoordD*/  x1, double /*CoordD*/  y1, double /*CoordD*/  x2, double /*CoordD*/  y2) => RectdPtr?.Invoke(x1, y1, x2, y2);
        public static void Rectdv(double[] /*CoordD*/  v1, double[] /*CoordD*/  v2) => RectdvPtr?.Invoke(v1, v2);
        public static void Rectf(float /*CoordF*/  x1, float /*CoordF*/  y1, float /*CoordF*/  x2, float /*CoordF*/  y2) => RectfPtr?.Invoke(x1, y1, x2, y2);
        public static void Rectfv(float[] /*CoordF*/  v1, float[] /*CoordF*/  v2) => RectfvPtr?.Invoke(v1, v2);
        public static void Recti(int /*CoordI*/  x1, int /*CoordI*/  y1, int /*CoordI*/  x2, int /*CoordI*/  y2) => RectiPtr?.Invoke(x1, y1, x2, y2);
        public static void Rectiv(int[] /*CoordI*/  v1, int[] /*CoordI*/  v2) => RectivPtr?.Invoke(v1, v2);
        public static void Rects(short /*CoordS*/  x1, short /*CoordS*/  y1, short /*CoordS*/  x2, short /*CoordS*/  y2) => RectsPtr?.Invoke(x1, y1, x2, y2);
        public static void Rectsv(short[] /*CoordS*/  v1, short[] /*CoordS*/  v2) => RectsvPtr?.Invoke(v1, v2);
        public static void RectxOES(int  x1, int  y1, int  x2, int  y2) => RectxOESPtr?.Invoke(x1, y1, x2, y2);
        public static void RectxvOES(int[]  v1, int[]  v2) => RectxvOESPtr?.Invoke(v1, v2);
        public static void ReferencePlaneSGIX(double[]  equation) => ReferencePlaneSGIXPtr?.Invoke(equation);
        public static void ReleaseShaderCompiler() => ReleaseShaderCompilerPtr?.Invoke();
        public static void RenderGpuMaskNV(uint  mask) => RenderGpuMaskNVPtr?.Invoke(mask);
        public static int RenderMode(uint /*RenderingMode*/  mode) => RenderModePtr?.Invoke(mode) ?? default;
        public static void RenderbufferStorage(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStoragePtr?.Invoke(target, internalformat, width, height);
        public static void RenderbufferStorageEXT(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageEXTPtr?.Invoke(target, internalformat, width, height);
        public static void RenderbufferStorageMultisample(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisamplePtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleANGLE(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleANGLEPtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleAPPLE(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleAPPLEPtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleAdvancedAMD(uint /*RenderbufferTarget*/  target, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleAdvancedAMDPtr?.Invoke(target, samples, storageSamples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleCoverageNV(uint /*RenderbufferTarget*/  target, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleEXT(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleEXTPtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleIMG(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleIMGPtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageMultisampleNV(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageMultisampleNVPtr?.Invoke(target, samples, internalformat, width, height);
        public static void RenderbufferStorageOES(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => RenderbufferStorageOESPtr?.Invoke(target, internalformat, width, height);
        public static void ReplacementCodePointerSUN(uint /*ReplacementCodeTypeSUN*/  type, uint  stride, IntPtr  pointer) => ReplacementCodePointerSUNPtr?.Invoke(type, stride, pointer);
        public static void ReplacementCodeubSUN(byte  code) => ReplacementCodeubSUNPtr?.Invoke(code);
        public static void ReplacementCodeubvSUN(byte[]  code) => ReplacementCodeubvSUNPtr?.Invoke(code);
        public static void ReplacementCodeuiColor3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  x, float  y, float  z) => ReplacementCodeuiColor3fVertex3fSUNPtr?.Invoke(rc, r, g, b, x, y, z);
        public static void ReplacementCodeuiColor3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  v) => ReplacementCodeuiColor3fVertex3fvSUNPtr?.Invoke(rc, c, v);
        public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => ReplacementCodeuiColor4fNormal3fVertex3fSUNPtr?.Invoke(rc, r, g, b, a, nx, ny, nz, x, y, z);
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  n, float[]  v) => ReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr?.Invoke(rc, c, n, v);
        public static void ReplacementCodeuiColor4ubVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => ReplacementCodeuiColor4ubVertex3fSUNPtr?.Invoke(rc, r, g, b, a, x, y, z);
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, byte[]  c, float[]  v) => ReplacementCodeuiColor4ubVertex3fvSUNPtr?.Invoke(rc, c, v);
        public static void ReplacementCodeuiNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  nx, float  ny, float  nz, float  x, float  y, float  z) => ReplacementCodeuiNormal3fVertex3fSUNPtr?.Invoke(rc, nx, ny, nz, x, y, z);
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  n, float[]  v) => ReplacementCodeuiNormal3fVertex3fvSUNPtr?.Invoke(rc, n, v);
        public static void ReplacementCodeuiSUN(uint  code) => ReplacementCodeuiSUNPtr?.Invoke(code);
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr?.Invoke(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  c, float[]  n, float[]  v) => ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr?.Invoke(rc, tc, c, n, v);
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z) => ReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr?.Invoke(rc, s, t, nx, ny, nz, x, y, z);
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  n, float[]  v) => ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr?.Invoke(rc, tc, n, v);
        public static void ReplacementCodeuiTexCoord2fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  x, float  y, float  z) => ReplacementCodeuiTexCoord2fVertex3fSUNPtr?.Invoke(rc, s, t, x, y, z);
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  v) => ReplacementCodeuiTexCoord2fVertex3fvSUNPtr?.Invoke(rc, tc, v);
        public static void ReplacementCodeuiVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  x, float  y, float  z) => ReplacementCodeuiVertex3fSUNPtr?.Invoke(rc, x, y, z);
        public static void ReplacementCodeuiVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  v) => ReplacementCodeuiVertex3fvSUNPtr?.Invoke(rc, v);
        public static void ReplacementCodeuivSUN(uint[]  code) => ReplacementCodeuivSUNPtr?.Invoke(code);
        public static void ReplacementCodeusSUN(ushort  code) => ReplacementCodeusSUNPtr?.Invoke(code);
        public static void ReplacementCodeusvSUN(ushort[]  code) => ReplacementCodeusvSUNPtr?.Invoke(code);
        public static void RequestResidentProgramsNV(uint  n, uint[]  programs) => RequestResidentProgramsNVPtr?.Invoke(n, programs);
        public static void ResetHistogram(uint /*HistogramTargetEXT*/  target) => ResetHistogramPtr?.Invoke(target);
        public static void ResetHistogramEXT(uint /*HistogramTargetEXT*/  target) => ResetHistogramEXTPtr?.Invoke(target);
        public static void ResetMemoryObjectParameterNV(uint  memory, uint  pname) => ResetMemoryObjectParameterNVPtr?.Invoke(memory, pname);
        public static void ResetMinmax(uint /*MinmaxTargetEXT*/  target) => ResetMinmaxPtr?.Invoke(target);
        public static void ResetMinmaxEXT(uint /*MinmaxTargetEXT*/  target) => ResetMinmaxEXTPtr?.Invoke(target);
        public static void ResizeBuffersMESA() => ResizeBuffersMESAPtr?.Invoke();
        public static void ResolveDepthValuesNV() => ResolveDepthValuesNVPtr?.Invoke();
        public static void ResolveMultisampleFramebufferAPPLE() => ResolveMultisampleFramebufferAPPLEPtr?.Invoke();
        public static void ResumeTransformFeedback() => ResumeTransformFeedbackPtr?.Invoke();
        public static void ResumeTransformFeedbackNV() => ResumeTransformFeedbackNVPtr?.Invoke();
        public static void Rotated(double  angle, double  x, double  y, double  z) => RotatedPtr?.Invoke(angle, x, y, z);
        public static void Rotatef(float  angle, float  x, float  y, float  z) => RotatefPtr?.Invoke(angle, x, y, z);
        public static void Rotatex(int  angle, int  x, int  y, int  z) => RotatexPtr?.Invoke(angle, x, y, z);
        public static void RotatexOES(int  angle, int  x, int  y, int  z) => RotatexOESPtr?.Invoke(angle, x, y, z);
        public static void SampleCoverage(float  value, bool /*Boolean*/  invert) => SampleCoveragePtr?.Invoke(value, invert);
        public static void SampleCoverageARB(float  value, bool /*Boolean*/  invert) => SampleCoverageARBPtr?.Invoke(value, invert);
        public static void SampleCoveragex(int /*GLclampx*/  value, bool /*Boolean*/  invert) => SampleCoveragexPtr?.Invoke(value, invert);
        public static void SampleCoveragexOES(int /*GLclampx*/  value, bool /*Boolean*/  invert) => SampleCoveragexOESPtr?.Invoke(value, invert);
        public static void SampleMapATI(uint  dst, uint  interp, uint /*SwizzleOpATI*/  swizzle) => SampleMapATIPtr?.Invoke(dst, interp, swizzle);
        public static void SampleMaskEXT(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert) => SampleMaskEXTPtr?.Invoke(value, invert);
        public static void SampleMaskIndexedNV(uint  index, uint /*SampleMaskNV*/  mask) => SampleMaskIndexedNVPtr?.Invoke(index, mask);
        public static void SampleMaskSGIS(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert) => SampleMaskSGISPtr?.Invoke(value, invert);
        public static void SampleMaski(uint  maskNumber, uint  mask) => SampleMaskiPtr?.Invoke(maskNumber, mask);
        public static void SamplePatternEXT(uint /*SamplePatternEXT*/  pattern) => SamplePatternEXTPtr?.Invoke(pattern);
        public static void SamplePatternSGIS(uint /*SamplePatternSGIS*/  pattern) => SamplePatternSGISPtr?.Invoke(pattern);
        public static void SamplerParameterIiv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => SamplerParameterIivPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterIivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => SamplerParameterIivEXTPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterIivOES(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => SamplerParameterIivOESPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterIuiv(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => SamplerParameterIuivPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterIuivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => SamplerParameterIuivEXTPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterIuivOES(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => SamplerParameterIuivOESPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterf(uint  sampler, uint /*SamplerParameterF*/  pname, float  param) => SamplerParameterfPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameterfv(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  param) => SamplerParameterfvPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameteri(uint  sampler, uint /*SamplerParameterI*/  pname, int  param) => SamplerParameteriPtr?.Invoke(sampler, pname, param);
        public static void SamplerParameteriv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => SamplerParameterivPtr?.Invoke(sampler, pname, param);
        public static void Scaled(double  x, double  y, double  z) => ScaledPtr?.Invoke(x, y, z);
        public static void Scalef(float  x, float  y, float  z) => ScalefPtr?.Invoke(x, y, z);
        public static void Scalex(int  x, int  y, int  z) => ScalexPtr?.Invoke(x, y, z);
        public static void ScalexOES(int  x, int  y, int  z) => ScalexOESPtr?.Invoke(x, y, z);
        public static void Scissor(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => ScissorPtr?.Invoke(x, y, width, height);
        public static void ScissorArrayv(uint  first, uint  count, int[]  v) => ScissorArrayvPtr?.Invoke(first, count, v);
        public static void ScissorArrayvNV(uint  first, uint  count, int[]  v) => ScissorArrayvNVPtr?.Invoke(first, count, v);
        public static void ScissorArrayvOES(uint  first, uint  count, int[]  v) => ScissorArrayvOESPtr?.Invoke(first, count, v);
        public static void ScissorExclusiveArrayvNV(uint  first, uint  count, int[]  v) => ScissorExclusiveArrayvNVPtr?.Invoke(first, count, v);
        public static void ScissorExclusiveNV(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => ScissorExclusiveNVPtr?.Invoke(x, y, width, height);
        public static void ScissorIndexed(uint  index, int  left, int  bottom, uint  width, uint  height) => ScissorIndexedPtr?.Invoke(index, left, bottom, width, height);
        public static void ScissorIndexedNV(uint  index, int  left, int  bottom, uint  width, uint  height) => ScissorIndexedNVPtr?.Invoke(index, left, bottom, width, height);
        public static void ScissorIndexedOES(uint  index, int  left, int  bottom, uint  width, uint  height) => ScissorIndexedOESPtr?.Invoke(index, left, bottom, width, height);
        public static void ScissorIndexedv(uint  index, int[]  v) => ScissorIndexedvPtr?.Invoke(index, v);
        public static void ScissorIndexedvNV(uint  index, int[]  v) => ScissorIndexedvNVPtr?.Invoke(index, v);
        public static void ScissorIndexedvOES(uint  index, int[]  v) => ScissorIndexedvOESPtr?.Invoke(index, v);
        public static void SecondaryColor3b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => SecondaryColor3bPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3bEXT(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => SecondaryColor3bEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3bv(sbyte[] /*ColorB*/  v) => SecondaryColor3bvPtr?.Invoke(v);
        public static void SecondaryColor3bvEXT(sbyte[] /*ColorB*/  v) => SecondaryColor3bvEXTPtr?.Invoke(v);
        public static void SecondaryColor3d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => SecondaryColor3dPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3dEXT(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => SecondaryColor3dEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3dv(double[] /*ColorD*/  v) => SecondaryColor3dvPtr?.Invoke(v);
        public static void SecondaryColor3dvEXT(double[] /*ColorD*/  v) => SecondaryColor3dvEXTPtr?.Invoke(v);
        public static void SecondaryColor3f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => SecondaryColor3fPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3fEXT(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => SecondaryColor3fEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3fv(float[] /*ColorF*/  v) => SecondaryColor3fvPtr?.Invoke(v);
        public static void SecondaryColor3fvEXT(float[] /*ColorF*/  v) => SecondaryColor3fvEXTPtr?.Invoke(v);
        public static void SecondaryColor3hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue) => SecondaryColor3hNVPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3hvNV(ushort[] /*Half16NV*/  v) => SecondaryColor3hvNVPtr?.Invoke(v);
        public static void SecondaryColor3i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => SecondaryColor3iPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3iEXT(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => SecondaryColor3iEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3iv(int[] /*ColorI*/  v) => SecondaryColor3ivPtr?.Invoke(v);
        public static void SecondaryColor3ivEXT(int[] /*ColorI*/  v) => SecondaryColor3ivEXTPtr?.Invoke(v);
        public static void SecondaryColor3s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => SecondaryColor3sPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3sEXT(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => SecondaryColor3sEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3sv(short[] /*ColorS*/  v) => SecondaryColor3svPtr?.Invoke(v);
        public static void SecondaryColor3svEXT(short[] /*ColorS*/  v) => SecondaryColor3svEXTPtr?.Invoke(v);
        public static void SecondaryColor3ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => SecondaryColor3ubPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3ubEXT(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => SecondaryColor3ubEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3ubv(byte[] /*ColorUB*/  v) => SecondaryColor3ubvPtr?.Invoke(v);
        public static void SecondaryColor3ubvEXT(byte[] /*ColorUB*/  v) => SecondaryColor3ubvEXTPtr?.Invoke(v);
        public static void SecondaryColor3ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => SecondaryColor3uiPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3uiEXT(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => SecondaryColor3uiEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3uiv(uint[] /*ColorUI*/  v) => SecondaryColor3uivPtr?.Invoke(v);
        public static void SecondaryColor3uivEXT(uint[] /*ColorUI*/  v) => SecondaryColor3uivEXTPtr?.Invoke(v);
        public static void SecondaryColor3us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => SecondaryColor3usPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3usEXT(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => SecondaryColor3usEXTPtr?.Invoke(red, green, blue);
        public static void SecondaryColor3usv(ushort[] /*ColorUS*/  v) => SecondaryColor3usvPtr?.Invoke(v);
        public static void SecondaryColor3usvEXT(ushort[] /*ColorUS*/  v) => SecondaryColor3usvEXTPtr?.Invoke(v);
        public static void SecondaryColorFormatNV(int  size, uint /*ColorPointerType*/  type, uint  stride) => SecondaryColorFormatNVPtr?.Invoke(size, type, stride);
        public static void SecondaryColorP3ui(uint /*ColorPointerType*/  type, uint  color) => SecondaryColorP3uiPtr?.Invoke(type, color);
        public static void SecondaryColorP3uiv(uint /*ColorPointerType*/  type, uint[]  color) => SecondaryColorP3uivPtr?.Invoke(type, color);
        public static void SecondaryColorPointer(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => SecondaryColorPointerPtr?.Invoke(size, type, stride, pointer);
        public static void SecondaryColorPointerEXT(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => SecondaryColorPointerEXTPtr?.Invoke(size, type, stride, pointer);
        public static void SecondaryColorPointerListIBM(int  size, uint /*SecondaryColorPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride) => SecondaryColorPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        public static void SelectBuffer(uint  size, uint[] /*SelectName*/  buffer) => SelectBufferPtr?.Invoke(size, buffer);
        public static void SelectPerfMonitorCountersAMD(uint  monitor, bool /*Boolean*/  enable, uint  group, int  numCounters, uint[]  counterList) => SelectPerfMonitorCountersAMDPtr?.Invoke(monitor, enable, group, numCounters, counterList);
        public static void SemaphoreParameterui64vEXT(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters) => SemaphoreParameterui64vEXTPtr?.Invoke(semaphore, pname, parameters);
        public static void SeparableFilter2D(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column) => SeparableFilter2DPtr?.Invoke(target, internalformat, width, height, format, type, row, column);
        public static void SeparableFilter2DEXT(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column) => SeparableFilter2DEXTPtr?.Invoke(target, internalformat, width, height, format, type, row, column);
        public static void SetFenceAPPLE(uint /*FenceNV*/  fence) => SetFenceAPPLEPtr?.Invoke(fence);
        public static void SetFenceNV(uint /*FenceNV*/  fence, uint /*FenceConditionNV*/  condition) => SetFenceNVPtr?.Invoke(fence, condition);
        public static void SetFragmentShaderConstantATI(uint  dst, float[]  value) => SetFragmentShaderConstantATIPtr?.Invoke(dst, value);
        public static void SetInvariantEXT(uint  id, uint /*ScalarType*/  type, IntPtr  addr) => SetInvariantEXTPtr?.Invoke(id, type, addr);
        public static void SetLocalConstantEXT(uint  id, uint /*ScalarType*/  type, IntPtr  addr) => SetLocalConstantEXTPtr?.Invoke(id, type, addr);
        public static void SetMultisamplefvAMD(uint  pname, uint  index, float[]  val) => SetMultisamplefvAMDPtr?.Invoke(pname, index, val);
        public static void ShadeModel(uint /*ShadingModel*/  mode) => ShadeModelPtr?.Invoke(mode);
        public static void ShaderBinary(uint  count, uint[]  shaders, uint  binaryformat, IntPtr  binary, uint  length) => ShaderBinaryPtr?.Invoke(count, shaders, binaryformat, binary, length);
        public static void ShaderOp1EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1) => ShaderOp1EXTPtr?.Invoke(op, res, arg1);
        public static void ShaderOp2EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2) => ShaderOp2EXTPtr?.Invoke(op, res, arg1, arg2);
        public static void ShaderOp3EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2, uint  arg3) => ShaderOp3EXTPtr?.Invoke(op, res, arg1, arg2, arg3);
        public static void ShaderSource(uint  shader, uint  count, string  str, int[]  length) => ShaderSourcePtr?.Invoke(shader, count, str, length);
        public static void ShaderSourceARB(IntPtr /*handleARB*/  shaderObj, uint  count, string  str, int[]  length) => ShaderSourceARBPtr?.Invoke(shaderObj, count, str, length);
        public static void ShaderStorageBlockBinding(uint  program, uint  storageBlockIndex, uint  storageBlockBinding) => ShaderStorageBlockBindingPtr?.Invoke(program, storageBlockIndex, storageBlockBinding);
        public static void ShadingRateImageBarrierNV(bool /*Boolean*/  synchronize) => ShadingRateImageBarrierNVPtr?.Invoke(synchronize);
        public static void ShadingRateQCOM(uint /*ShadingRateQCOM*/  rate) => ShadingRateQCOMPtr?.Invoke(rate);
        public static void ShadingRateImagePaletteNV(uint  viewport, uint  first, uint  count, uint[]  rates) => ShadingRateImagePaletteNVPtr?.Invoke(viewport, first, count, rates);
        public static void ShadingRateSampleOrderNV(uint  order) => ShadingRateSampleOrderNVPtr?.Invoke(order);
        public static void ShadingRateSampleOrderCustomNV(uint  rate, uint  samples, int[]  locations) => ShadingRateSampleOrderCustomNVPtr?.Invoke(rate, samples, locations);
        public static void SharpenTexFuncSGIS(uint /*TextureTarget*/  target, uint  n, float[]  points) => SharpenTexFuncSGISPtr?.Invoke(target, n, points);
        public static void SignalSemaphoreEXT(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  dstLayouts) => SignalSemaphoreEXTPtr?.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        public static void SignalSemaphoreui64NVX(uint  signalGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => SignalSemaphoreui64NVXPtr?.Invoke(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        public static void SpecializeShader(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue) => SpecializeShaderPtr?.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        public static void SpecializeShaderARB(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue) => SpecializeShaderARBPtr?.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        public static void SpriteParameterfSGIX(uint /*SpriteParameterNameSGIX*/  pname, float /*CheckedFloat32*/  param) => SpriteParameterfSGIXPtr?.Invoke(pname, param);
        public static void SpriteParameterfvSGIX(uint /*SpriteParameterNameSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => SpriteParameterfvSGIXPtr?.Invoke(pname, parameters);
        public static void SpriteParameteriSGIX(uint /*SpriteParameterNameSGIX*/  pname, int /*CheckedInt32*/  param) => SpriteParameteriSGIXPtr?.Invoke(pname, param);
        public static void SpriteParameterivSGIX(uint /*SpriteParameterNameSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => SpriteParameterivSGIXPtr?.Invoke(pname, parameters);
        public static void StartInstrumentsSGIX() => StartInstrumentsSGIXPtr?.Invoke();
        public static void StartTilingQCOM(uint  x, uint  y, uint  width, uint  height, uint /*BufferBitQCOM*/  preserveMask) => StartTilingQCOMPtr?.Invoke(x, y, width, height, preserveMask);
        public static void StateCaptureNV(uint  state, uint  mode) => StateCaptureNVPtr?.Invoke(state, mode);
        public static void StencilClearTagEXT(uint  stencilTagBits, uint  stencilClearTag) => StencilClearTagEXTPtr?.Invoke(stencilTagBits, stencilClearTag);
        public static void StencilFillPathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues) => StencilFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        public static void StencilFillPathNV(uint /*Path*/  path, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask) => StencilFillPathNVPtr?.Invoke(path, fillMode, mask);
        public static void StencilFunc(uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => StencilFuncPtr?.Invoke(func, refVal, mask);
        public static void StencilFuncSeparate(uint /*StencilFaceDirection*/  face, uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => StencilFuncSeparatePtr?.Invoke(face, func, refVal, mask);
        public static void StencilFuncSeparateATI(uint /*StencilFunction*/  frontfunc, uint /*StencilFunction*/  backfunc, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => StencilFuncSeparateATIPtr?.Invoke(frontfunc, backfunc, refVal, mask);
        public static void StencilMask(uint /*MaskedStencilValue*/  mask) => StencilMaskPtr?.Invoke(mask);
        public static void StencilMaskSeparate(uint /*StencilFaceDirection*/  face, uint /*MaskedStencilValue*/  mask) => StencilMaskSeparatePtr?.Invoke(face, mask);
        public static void StencilOp(uint /*StencilOp*/  fail, uint /*StencilOp*/  zfail, uint /*StencilOp*/  zpass) => StencilOpPtr?.Invoke(fail, zfail, zpass);
        public static void StencilOpSeparate(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass) => StencilOpSeparatePtr?.Invoke(face, sfail, dpfail, dppass);
        public static void StencilOpSeparateATI(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass) => StencilOpSeparateATIPtr?.Invoke(face, sfail, dpfail, dppass);
        public static void StencilOpValueAMD(uint /*StencilFaceDirection*/  face, uint  value) => StencilOpValueAMDPtr?.Invoke(face, value);
        public static void StencilStrokePathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues) => StencilStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        public static void StencilStrokePathNV(uint /*Path*/  path, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask) => StencilStrokePathNVPtr?.Invoke(path, reference, mask);
        public static void StencilThenCoverFillPathInstancedNV(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, uint  fillMode, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues) => StencilThenCoverFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        public static void StencilThenCoverFillPathNV(uint  path, uint  fillMode, uint  mask, uint  coverMode) => StencilThenCoverFillPathNVPtr?.Invoke(path, fillMode, mask, coverMode);
        public static void StencilThenCoverStrokePathInstancedNV(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, int  reference, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues) => StencilThenCoverStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        public static void StencilThenCoverStrokePathNV(uint  path, int  reference, uint  mask, uint  coverMode) => StencilThenCoverStrokePathNVPtr?.Invoke(path, reference, mask, coverMode);
        public static void StopInstrumentsSGIX(int  marker) => StopInstrumentsSGIXPtr?.Invoke(marker);
        public static void StringMarkerGREMEDY(uint  len, IntPtr  str) => StringMarkerGREMEDYPtr?.Invoke(len, str);
        public static void SubpixelPrecisionBiasNV(uint  xbits, uint  ybits) => SubpixelPrecisionBiasNVPtr?.Invoke(xbits, ybits);
        public static void SwizzleEXT(uint  res, uint  inp, uint /*VertexShaderCoordOutEXT*/  outX, uint /*VertexShaderCoordOutEXT*/  outY, uint /*VertexShaderCoordOutEXT*/  outZ, uint /*VertexShaderCoordOutEXT*/  outW) => SwizzleEXTPtr?.Invoke(res, inp, outX, outY, outZ, outW);
        public static void SyncTextureINTEL(uint  texture) => SyncTextureINTELPtr?.Invoke(texture);
        public static void TagSampleBufferSGIX() => TagSampleBufferSGIXPtr?.Invoke();
        public static void Tangent3bEXT(sbyte  tx, sbyte  ty, sbyte  tz) => Tangent3bEXTPtr?.Invoke(tx, ty, tz);
        public static void Tangent3bvEXT(sbyte[]  v) => Tangent3bvEXTPtr?.Invoke(v);
        public static void Tangent3dEXT(double /*CoordD*/  tx, double /*CoordD*/  ty, double /*CoordD*/  tz) => Tangent3dEXTPtr?.Invoke(tx, ty, tz);
        public static void Tangent3dvEXT(double[] /*CoordD*/  v) => Tangent3dvEXTPtr?.Invoke(v);
        public static void Tangent3fEXT(float /*CoordF*/  tx, float /*CoordF*/  ty, float /*CoordF*/  tz) => Tangent3fEXTPtr?.Invoke(tx, ty, tz);
        public static void Tangent3fvEXT(float[] /*CoordF*/  v) => Tangent3fvEXTPtr?.Invoke(v);
        public static void Tangent3iEXT(int  tx, int  ty, int  tz) => Tangent3iEXTPtr?.Invoke(tx, ty, tz);
        public static void Tangent3ivEXT(int[]  v) => Tangent3ivEXTPtr?.Invoke(v);
        public static void Tangent3sEXT(short  tx, short  ty, short  tz) => Tangent3sEXTPtr?.Invoke(tx, ty, tz);
        public static void Tangent3svEXT(short[]  v) => Tangent3svEXTPtr?.Invoke(v);
        public static void TangentPointerEXT(uint /*TangentPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => TangentPointerEXTPtr?.Invoke(type, stride, pointer);
        public static void TbufferMask3DFX(uint  mask) => TbufferMask3DFXPtr?.Invoke(mask);
        public static void TessellationFactorAMD(float  factor) => TessellationFactorAMDPtr?.Invoke(factor);
        public static void TessellationModeAMD(uint  mode) => TessellationModeAMDPtr?.Invoke(mode);
        public static bool /*Boolean*/ TestFenceAPPLE(uint /*FenceNV*/  fence) => TestFenceAPPLEPtr?.Invoke(fence) ?? default;
        public static bool /*Boolean*/ TestFenceNV(uint /*FenceNV*/  fence) => TestFenceNVPtr?.Invoke(fence) ?? default;
        public static bool /*Boolean*/ TestObjectAPPLE(uint /*ObjectTypeAPPLE*/  obj, uint  name) => TestObjectAPPLEPtr?.Invoke(obj, name) ?? default;
        public static void TexAttachMemoryNV(uint /*TextureTarget*/  target, uint  memory, ulong  offset) => TexAttachMemoryNVPtr?.Invoke(target, memory, offset);
        public static void TexBuffer(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => TexBufferPtr?.Invoke(target, internalformat, buffer);
        public static void TexBufferARB(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => TexBufferARBPtr?.Invoke(target, internalformat, buffer);
        public static void TexBufferEXT(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => TexBufferEXTPtr?.Invoke(target, internalformat, buffer);
        public static void TexBufferOES(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => TexBufferOESPtr?.Invoke(target, internalformat, buffer);
        public static void TexBufferRange(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => TexBufferRangePtr?.Invoke(target, internalformat, buffer, offset, size);
        public static void TexBufferRangeEXT(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => TexBufferRangeEXTPtr?.Invoke(target, internalformat, buffer, offset, size);
        public static void TexBufferRangeOES(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => TexBufferRangeOESPtr?.Invoke(target, internalformat, buffer, offset, size);
        public static void TexBumpParameterfvATI(uint /*TexBumpParameterATI*/  pname, float[]  param) => TexBumpParameterfvATIPtr?.Invoke(pname, param);
        public static void TexBumpParameterivATI(uint /*TexBumpParameterATI*/  pname, int[]  param) => TexBumpParameterivATIPtr?.Invoke(pname, param);
        public static void TexCoord1bOES(sbyte  s) => TexCoord1bOESPtr?.Invoke(s);
        public static void TexCoord1bvOES(sbyte[]  coords) => TexCoord1bvOESPtr?.Invoke(coords);
        public static void TexCoord1d(double /*CoordD*/  s) => TexCoord1dPtr?.Invoke(s);
        public static void TexCoord1dv(double[] /*CoordD*/  v) => TexCoord1dvPtr?.Invoke(v);
        public static void TexCoord1f(float /*CoordF*/  s) => TexCoord1fPtr?.Invoke(s);
        public static void TexCoord1fv(float[] /*CoordF*/  v) => TexCoord1fvPtr?.Invoke(v);
        public static void TexCoord1hNV(ushort /*Half16NV*/  s) => TexCoord1hNVPtr?.Invoke(s);
        public static void TexCoord1hvNV(ushort[] /*Half16NV*/  v) => TexCoord1hvNVPtr?.Invoke(v);
        public static void TexCoord1i(int /*CoordI*/  s) => TexCoord1iPtr?.Invoke(s);
        public static void TexCoord1iv(int[] /*CoordI*/  v) => TexCoord1ivPtr?.Invoke(v);
        public static void TexCoord1s(short /*CoordS*/  s) => TexCoord1sPtr?.Invoke(s);
        public static void TexCoord1sv(short[] /*CoordS*/  v) => TexCoord1svPtr?.Invoke(v);
        public static void TexCoord1xOES(int  s) => TexCoord1xOESPtr?.Invoke(s);
        public static void TexCoord1xvOES(int[]  coords) => TexCoord1xvOESPtr?.Invoke(coords);
        public static void TexCoord2bOES(sbyte  s, sbyte  t) => TexCoord2bOESPtr?.Invoke(s, t);
        public static void TexCoord2bvOES(sbyte[]  coords) => TexCoord2bvOESPtr?.Invoke(coords);
        public static void TexCoord2d(double /*CoordD*/  s, double /*CoordD*/  t) => TexCoord2dPtr?.Invoke(s, t);
        public static void TexCoord2dv(double[] /*CoordD*/  v) => TexCoord2dvPtr?.Invoke(v);
        public static void TexCoord2f(float /*CoordF*/  s, float /*CoordF*/  t) => TexCoord2fPtr?.Invoke(s, t);
        public static void TexCoord2fColor3fVertex3fSUN(float  s, float  t, float  r, float  g, float  b, float  x, float  y, float  z) => TexCoord2fColor3fVertex3fSUNPtr?.Invoke(s, t, r, g, b, x, y, z);
        public static void TexCoord2fColor3fVertex3fvSUN(float[]  tc, float[]  c, float[]  v) => TexCoord2fColor3fVertex3fvSUNPtr?.Invoke(tc, c, v);
        public static void TexCoord2fColor4fNormal3fVertex3fSUN(float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => TexCoord2fColor4fNormal3fVertex3fSUNPtr?.Invoke(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(float[]  tc, float[]  c, float[]  n, float[]  v) => TexCoord2fColor4fNormal3fVertex3fvSUNPtr?.Invoke(tc, c, n, v);
        public static void TexCoord2fColor4ubVertex3fSUN(float  s, float  t, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => TexCoord2fColor4ubVertex3fSUNPtr?.Invoke(s, t, r, g, b, a, x, y, z);
        public static void TexCoord2fColor4ubVertex3fvSUN(float[]  tc, byte[]  c, float[]  v) => TexCoord2fColor4ubVertex3fvSUNPtr?.Invoke(tc, c, v);
        public static void TexCoord2fNormal3fVertex3fSUN(float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z) => TexCoord2fNormal3fVertex3fSUNPtr?.Invoke(s, t, nx, ny, nz, x, y, z);
        public static void TexCoord2fNormal3fVertex3fvSUN(float[]  tc, float[]  n, float[]  v) => TexCoord2fNormal3fVertex3fvSUNPtr?.Invoke(tc, n, v);
        public static void TexCoord2fVertex3fSUN(float  s, float  t, float  x, float  y, float  z) => TexCoord2fVertex3fSUNPtr?.Invoke(s, t, x, y, z);
        public static void TexCoord2fVertex3fvSUN(float[]  tc, float[]  v) => TexCoord2fVertex3fvSUNPtr?.Invoke(tc, v);
        public static void TexCoord2fv(float[] /*CoordF*/  v) => TexCoord2fvPtr?.Invoke(v);
        public static void TexCoord2hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t) => TexCoord2hNVPtr?.Invoke(s, t);
        public static void TexCoord2hvNV(ushort[] /*Half16NV*/  v) => TexCoord2hvNVPtr?.Invoke(v);
        public static void TexCoord2i(int /*CoordI*/  s, int /*CoordI*/  t) => TexCoord2iPtr?.Invoke(s, t);
        public static void TexCoord2iv(int[] /*CoordI*/  v) => TexCoord2ivPtr?.Invoke(v);
        public static void TexCoord2s(short /*CoordS*/  s, short /*CoordS*/  t) => TexCoord2sPtr?.Invoke(s, t);
        public static void TexCoord2sv(short[] /*CoordS*/  v) => TexCoord2svPtr?.Invoke(v);
        public static void TexCoord2xOES(int  s, int  t) => TexCoord2xOESPtr?.Invoke(s, t);
        public static void TexCoord2xvOES(int[]  coords) => TexCoord2xvOESPtr?.Invoke(coords);
        public static void TexCoord3bOES(sbyte  s, sbyte  t, sbyte  r) => TexCoord3bOESPtr?.Invoke(s, t, r);
        public static void TexCoord3bvOES(sbyte[]  coords) => TexCoord3bvOESPtr?.Invoke(coords);
        public static void TexCoord3d(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => TexCoord3dPtr?.Invoke(s, t, r);
        public static void TexCoord3dv(double[] /*CoordD*/  v) => TexCoord3dvPtr?.Invoke(v);
        public static void TexCoord3f(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => TexCoord3fPtr?.Invoke(s, t, r);
        public static void TexCoord3fv(float[] /*CoordF*/  v) => TexCoord3fvPtr?.Invoke(v);
        public static void TexCoord3hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r) => TexCoord3hNVPtr?.Invoke(s, t, r);
        public static void TexCoord3hvNV(ushort[] /*Half16NV*/  v) => TexCoord3hvNVPtr?.Invoke(v);
        public static void TexCoord3i(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => TexCoord3iPtr?.Invoke(s, t, r);
        public static void TexCoord3iv(int[] /*CoordI*/  v) => TexCoord3ivPtr?.Invoke(v);
        public static void TexCoord3s(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => TexCoord3sPtr?.Invoke(s, t, r);
        public static void TexCoord3sv(short[] /*CoordS*/  v) => TexCoord3svPtr?.Invoke(v);
        public static void TexCoord3xOES(int  s, int  t, int  r) => TexCoord3xOESPtr?.Invoke(s, t, r);
        public static void TexCoord3xvOES(int[]  coords) => TexCoord3xvOESPtr?.Invoke(coords);
        public static void TexCoord4bOES(sbyte  s, sbyte  t, sbyte  r, sbyte  q) => TexCoord4bOESPtr?.Invoke(s, t, r, q);
        public static void TexCoord4bvOES(sbyte[]  coords) => TexCoord4bvOESPtr?.Invoke(coords);
        public static void TexCoord4d(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => TexCoord4dPtr?.Invoke(s, t, r, q);
        public static void TexCoord4dv(double[] /*CoordD*/  v) => TexCoord4dvPtr?.Invoke(v);
        public static void TexCoord4f(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => TexCoord4fPtr?.Invoke(s, t, r, q);
        public static void TexCoord4fColor4fNormal3fVertex4fSUN(float  s, float  t, float  p, float  q, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z, float  w) => TexCoord4fColor4fNormal3fVertex4fSUNPtr?.Invoke(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(float[]  tc, float[]  c, float[]  n, float[]  v) => TexCoord4fColor4fNormal3fVertex4fvSUNPtr?.Invoke(tc, c, n, v);
        public static void TexCoord4fVertex4fSUN(float  s, float  t, float  p, float  q, float  x, float  y, float  z, float  w) => TexCoord4fVertex4fSUNPtr?.Invoke(s, t, p, q, x, y, z, w);
        public static void TexCoord4fVertex4fvSUN(float[]  tc, float[]  v) => TexCoord4fVertex4fvSUNPtr?.Invoke(tc, v);
        public static void TexCoord4fv(float[] /*CoordF*/  v) => TexCoord4fvPtr?.Invoke(v);
        public static void TexCoord4hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q) => TexCoord4hNVPtr?.Invoke(s, t, r, q);
        public static void TexCoord4hvNV(ushort[] /*Half16NV*/  v) => TexCoord4hvNVPtr?.Invoke(v);
        public static void TexCoord4i(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => TexCoord4iPtr?.Invoke(s, t, r, q);
        public static void TexCoord4iv(int[] /*CoordI*/  v) => TexCoord4ivPtr?.Invoke(v);
        public static void TexCoord4s(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => TexCoord4sPtr?.Invoke(s, t, r, q);
        public static void TexCoord4sv(short[] /*CoordS*/  v) => TexCoord4svPtr?.Invoke(v);
        public static void TexCoord4xOES(int  s, int  t, int  r, int  q) => TexCoord4xOESPtr?.Invoke(s, t, r, q);
        public static void TexCoord4xvOES(int[]  coords) => TexCoord4xvOESPtr?.Invoke(coords);
        public static void TexCoordFormatNV(int  size, uint  type, uint  stride) => TexCoordFormatNVPtr?.Invoke(size, type, stride);
        public static void TexCoordP1ui(uint /*TexCoordPointerType*/  type, uint  coords) => TexCoordP1uiPtr?.Invoke(type, coords);
        public static void TexCoordP1uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => TexCoordP1uivPtr?.Invoke(type, coords);
        public static void TexCoordP2ui(uint /*TexCoordPointerType*/  type, uint  coords) => TexCoordP2uiPtr?.Invoke(type, coords);
        public static void TexCoordP2uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => TexCoordP2uivPtr?.Invoke(type, coords);
        public static void TexCoordP3ui(uint /*TexCoordPointerType*/  type, uint  coords) => TexCoordP3uiPtr?.Invoke(type, coords);
        public static void TexCoordP3uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => TexCoordP3uivPtr?.Invoke(type, coords);
        public static void TexCoordP4ui(uint /*TexCoordPointerType*/  type, uint  coords) => TexCoordP4uiPtr?.Invoke(type, coords);
        public static void TexCoordP4uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => TexCoordP4uivPtr?.Invoke(type, coords);
        public static void TexCoordPointer(int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer) => TexCoordPointerPtr?.Invoke(size, type, stride, pointer);
        public static void TexCoordPointerEXT(int  size, uint /*TexCoordPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => TexCoordPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        public static void TexCoordPointerListIBM(int  size, uint /*TexCoordPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => TexCoordPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        public static void TexCoordPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => TexCoordPointervINTELPtr?.Invoke(size, type, pointer);
        public static void TexEnvf(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param) => TexEnvfPtr?.Invoke(target, pname, param);
        public static void TexEnvfv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => TexEnvfvPtr?.Invoke(target, pname, parameters);
        public static void TexEnvi(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param) => TexEnviPtr?.Invoke(target, pname, param);
        public static void TexEnviv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters) => TexEnvivPtr?.Invoke(target, pname, parameters);
        public static void TexEnvx(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param) => TexEnvxPtr?.Invoke(target, pname, param);
        public static void TexEnvxOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param) => TexEnvxOESPtr?.Invoke(target, pname, param);
        public static void TexEnvxv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => TexEnvxvPtr?.Invoke(target, pname, parameters);
        public static void TexEnvxvOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => TexEnvxvOESPtr?.Invoke(target, pname, parameters);
        public static void TexEstimateMotionQCOM(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output) => TexEstimateMotionQCOMPtr?.Invoke(refVal, target, output);
        public static void TexEstimateMotionRegionsQCOM(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output, uint /*Texture*/  mask) => TexEstimateMotionRegionsQCOMPtr?.Invoke(refVal, target, output, mask);
        public static void TexFilterFuncSGIS(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, uint  n, float[]  weights) => TexFilterFuncSGISPtr?.Invoke(target, filter, n, weights);
        public static void TexGend(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param) => TexGendPtr?.Invoke(coord, pname, param);
        public static void TexGendv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => TexGendvPtr?.Invoke(coord, pname, parameters);
        public static void TexGenf(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param) => TexGenfPtr?.Invoke(coord, pname, param);
        public static void TexGenfOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float  param) => TexGenfOESPtr?.Invoke(coord, pname, param);
        public static void TexGenfv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => TexGenfvPtr?.Invoke(coord, pname, parameters);
        public static void TexGenfvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => TexGenfvOESPtr?.Invoke(coord, pname, parameters);
        public static void TexGeni(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param) => TexGeniPtr?.Invoke(coord, pname, param);
        public static void TexGeniOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param) => TexGeniOESPtr?.Invoke(coord, pname, param);
        public static void TexGeniv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters) => TexGenivPtr?.Invoke(coord, pname, parameters);
        public static void TexGenivOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => TexGenivOESPtr?.Invoke(coord, pname, parameters);
        public static void TexGenxOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param) => TexGenxOESPtr?.Invoke(coord, pname, param);
        public static void TexGenxvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => TexGenxvOESPtr?.Invoke(coord, pname, parameters);
        public static void TexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage1DPtr?.Invoke(target, level, internalformat, width, border, format, type, pixels);
        public static void TexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage2DPtr?.Invoke(target, level, internalformat, width, height, border, format, type, pixels);
        public static void TexImage2DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => TexImage2DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);
        public static void TexImage2DMultisampleCoverageNV(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => TexImage2DMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        public static void TexImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage3DPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public static void TexImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage3DEXTPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public static void TexImage3DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => TexImage3DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public static void TexImage3DMultisampleCoverageNV(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => TexImage3DMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        public static void TexImage3DOES(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage3DOESPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        public static void TexImage4DSGIS(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, uint  size4d, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexImage4DSGISPtr?.Invoke(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        public static void TexPageCommitmentARB(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => TexPageCommitmentARBPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public static void TexPageCommitmentEXT(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => TexPageCommitmentEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public static void TexParameterIiv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => TexParameterIivPtr?.Invoke(target, pname, parameters);
        public static void TexParameterIivEXT(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => TexParameterIivEXTPtr?.Invoke(target, pname, parameters);
        public static void TexParameterIivOES(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => TexParameterIivOESPtr?.Invoke(target, pname, parameters);
        public static void TexParameterIuiv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => TexParameterIuivPtr?.Invoke(target, pname, parameters);
        public static void TexParameterIuivEXT(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => TexParameterIuivEXTPtr?.Invoke(target, pname, parameters);
        public static void TexParameterIuivOES(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => TexParameterIuivOESPtr?.Invoke(target, pname, parameters);
        public static void TexParameterf(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => TexParameterfPtr?.Invoke(target, pname, param);
        public static void TexParameterfv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => TexParameterfvPtr?.Invoke(target, pname, parameters);
        public static void TexParameteri(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => TexParameteriPtr?.Invoke(target, pname, param);
        public static void TexParameteriv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => TexParameterivPtr?.Invoke(target, pname, parameters);
        public static void TexParameterx(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param) => TexParameterxPtr?.Invoke(target, pname, param);
        public static void TexParameterxOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param) => TexParameterxOESPtr?.Invoke(target, pname, param);
        public static void TexParameterxv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => TexParameterxvPtr?.Invoke(target, pname, parameters);
        public static void TexParameterxvOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => TexParameterxvOESPtr?.Invoke(target, pname, parameters);
        public static void TexRenderbufferNV(uint /*TextureTarget*/  target, uint  renderbuffer) => TexRenderbufferNVPtr?.Invoke(target, renderbuffer);
        public static void TexStorage1D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => TexStorage1DPtr?.Invoke(target, levels, internalformat, width);
        public static void TexStorage1DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => TexStorage1DEXTPtr?.Invoke(target, levels, internalformat, width);
        public static void TexStorage2D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => TexStorage2DPtr?.Invoke(target, levels, internalformat, width, height);
        public static void TexStorage2DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => TexStorage2DEXTPtr?.Invoke(target, levels, internalformat, width, height);
        public static void TexStorage2DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => TexStorage2DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);
        public static void TexStorage3D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => TexStorage3DPtr?.Invoke(target, levels, internalformat, width, height, depth);
        public static void TexStorage3DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => TexStorage3DEXTPtr?.Invoke(target, levels, internalformat, width, height, depth);
        public static void TexStorage3DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => TexStorage3DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public static void TexStorage3DMultisampleOES(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => TexStorage3DMultisampleOESPtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public static void TexStorageMem1DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset) => TexStorageMem1DEXTPtr?.Invoke(target, levels, internalFormat, width, memory, offset);
        public static void TexStorageMem2DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset) => TexStorageMem2DEXTPtr?.Invoke(target, levels, internalFormat, width, height, memory, offset);
        public static void TexStorageMem2DMultisampleEXT(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => TexStorageMem2DMultisampleEXTPtr?.Invoke(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        public static void TexStorageMem3DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset) => TexStorageMem3DEXTPtr?.Invoke(target, levels, internalFormat, width, height, depth, memory, offset);
        public static void TexStorageMem3DMultisampleEXT(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => TexStorageMem3DMultisampleEXTPtr?.Invoke(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        public static void TexStorageSparseAMD(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags) => TexStorageSparseAMDPtr?.Invoke(target, internalFormat, width, height, depth, layers, flags);
        public static void TexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage1DPtr?.Invoke(target, level, xoffset, width, format, type, pixels);
        public static void TexSubImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage1DEXTPtr?.Invoke(target, level, xoffset, width, format, type, pixels);
        public static void TexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);
        public static void TexSubImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage2DEXTPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);
        public static void TexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void TexSubImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage3DEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void TexSubImage3DOES(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void TexSubImage4DSGIS(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*CheckedInt32*/  woffset, uint  width, uint  height, uint  depth, uint  size4d, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TexSubImage4DSGISPtr?.Invoke(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        public static void TextureAttachMemoryNV(uint  texture, uint  memory, ulong  offset) => TextureAttachMemoryNVPtr?.Invoke(texture, memory, offset);
        public static void TextureBarrier() => TextureBarrierPtr?.Invoke();
        public static void TextureBarrierNV() => TextureBarrierNVPtr?.Invoke();
        public static void TextureBuffer(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer) => TextureBufferPtr?.Invoke(texture, internalformat, buffer);
        public static void TextureBufferEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => TextureBufferEXTPtr?.Invoke(texture, target, internalformat, buffer);
        public static void TextureBufferRange(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size) => TextureBufferRangePtr?.Invoke(texture, internalformat, buffer, offset, size);
        public static void TextureBufferRangeEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => TextureBufferRangeEXTPtr?.Invoke(texture, target, internalformat, buffer, offset, size);
        public static void TextureColorMaskSGIS(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha) => TextureColorMaskSGISPtr?.Invoke(red, green, blue, alpha);
        public static void TextureFoveationParametersQCOM(uint /*Texture*/  texture, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea) => TextureFoveationParametersQCOMPtr?.Invoke(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        public static void TextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, width, border, format, type, pixels);
        public static void TextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, border, format, type, pixels);
        public static void TextureImage2DMultisampleCoverageNV(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => TextureImage2DMultisampleCoverageNVPtr?.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        public static void TextureImage2DMultisampleNV(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => TextureImage2DMultisampleNVPtr?.Invoke(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        public static void TextureImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureImage3DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        public static void TextureImage3DMultisampleCoverageNV(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => TextureImage3DMultisampleCoverageNVPtr?.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        public static void TextureImage3DMultisampleNV(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => TextureImage3DMultisampleNVPtr?.Invoke(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        public static void TextureLightEXT(uint /*LightTexturePNameEXT*/  pname) => TextureLightEXTPtr?.Invoke(pname);
        public static void TextureMaterialEXT(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode) => TextureMaterialEXTPtr?.Invoke(face, mode);
        public static void TextureNormalEXT(uint /*TextureNormalModeEXT*/  mode) => TextureNormalEXTPtr?.Invoke(mode);
        public static void TexturePageCommitmentEXT(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => TexturePageCommitmentEXTPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        public static void TextureParameterIiv(uint  texture, uint /*TextureParameterName*/  pname, int[]  parameters) => TextureParameterIivPtr?.Invoke(texture, pname, parameters);
        public static void TextureParameterIivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => TextureParameterIivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void TextureParameterIuiv(uint  texture, uint /*TextureParameterName*/  pname, uint[]  parameters) => TextureParameterIuivPtr?.Invoke(texture, pname, parameters);
        public static void TextureParameterIuivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => TextureParameterIuivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void TextureParameterf(uint  texture, uint /*TextureParameterName*/  pname, float  param) => TextureParameterfPtr?.Invoke(texture, pname, param);
        public static void TextureParameterfEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => TextureParameterfEXTPtr?.Invoke(texture, target, pname, param);
        public static void TextureParameterfv(uint  texture, uint /*TextureParameterName*/  pname, float[]  param) => TextureParameterfvPtr?.Invoke(texture, pname, param);
        public static void TextureParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => TextureParameterfvEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void TextureParameteri(uint  texture, uint /*TextureParameterName*/  pname, int  param) => TextureParameteriPtr?.Invoke(texture, pname, param);
        public static void TextureParameteriEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => TextureParameteriEXTPtr?.Invoke(texture, target, pname, param);
        public static void TextureParameteriv(uint  texture, uint /*TextureParameterName*/  pname, int[]  param) => TextureParameterivPtr?.Invoke(texture, pname, param);
        public static void TextureParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => TextureParameterivEXTPtr?.Invoke(texture, target, pname, parameters);
        public static void TextureRangeAPPLE(uint  target, uint  length, IntPtr  pointer) => TextureRangeAPPLEPtr?.Invoke(target, length, pointer);
        public static void TextureRenderbufferEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  renderbuffer) => TextureRenderbufferEXTPtr?.Invoke(texture, target, renderbuffer);
        public static void TextureStorage1D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => TextureStorage1DPtr?.Invoke(texture, levels, internalformat, width);
        public static void TextureStorage1DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => TextureStorage1DEXTPtr?.Invoke(texture, target, levels, internalformat, width);
        public static void TextureStorage2D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => TextureStorage2DPtr?.Invoke(texture, levels, internalformat, width, height);
        public static void TextureStorage2DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => TextureStorage2DEXTPtr?.Invoke(texture, target, levels, internalformat, width, height);
        public static void TextureStorage2DMultisample(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => TextureStorage2DMultisamplePtr?.Invoke(texture, samples, internalformat, width, height, fixedsamplelocations);
        public static void TextureStorage2DMultisampleEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => TextureStorage2DMultisampleEXTPtr?.Invoke(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        public static void TextureStorage3D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => TextureStorage3DPtr?.Invoke(texture, levels, internalformat, width, height, depth);
        public static void TextureStorage3DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => TextureStorage3DEXTPtr?.Invoke(texture, target, levels, internalformat, width, height, depth);
        public static void TextureStorage3DMultisample(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => TextureStorage3DMultisamplePtr?.Invoke(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        public static void TextureStorage3DMultisampleEXT(uint  texture, uint  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => TextureStorage3DMultisampleEXTPtr?.Invoke(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        public static void TextureStorageMem1DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset) => TextureStorageMem1DEXTPtr?.Invoke(texture, levels, internalFormat, width, memory, offset);
        public static void TextureStorageMem2DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset) => TextureStorageMem2DEXTPtr?.Invoke(texture, levels, internalFormat, width, height, memory, offset);
        public static void TextureStorageMem2DMultisampleEXT(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => TextureStorageMem2DMultisampleEXTPtr?.Invoke(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        public static void TextureStorageMem3DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset) => TextureStorageMem3DEXTPtr?.Invoke(texture, levels, internalFormat, width, height, depth, memory, offset);
        public static void TextureStorageMem3DMultisampleEXT(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => TextureStorageMem3DMultisampleEXTPtr?.Invoke(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        public static void TextureStorageSparseAMD(uint  texture, uint  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags) => TextureStorageSparseAMDPtr?.Invoke(texture, target, internalFormat, width, height, depth, layers, flags);
        public static void TextureSubImage1D(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage1DPtr?.Invoke(texture, level, xoffset, width, format, type, pixels);
        public static void TextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, width, format, type, pixels);
        public static void TextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        public static void TextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        public static void TextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void TextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => TextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        public static void TextureView(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => TextureViewPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public static void TextureViewEXT(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => TextureViewEXTPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public static void TextureViewOES(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => TextureViewOESPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        public static void TrackMatrixNV(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  matrix, uint /*VertexAttribEnumNV*/  transform) => TrackMatrixNVPtr?.Invoke(target, address, matrix, transform);
        public static void TransformFeedbackAttribsNV(uint  count, int[]  attribs, uint  bufferMode) => TransformFeedbackAttribsNVPtr?.Invoke(count, attribs, bufferMode);
        public static void TransformFeedbackBufferBase(uint  xfb, uint  index, uint  buffer) => TransformFeedbackBufferBasePtr?.Invoke(xfb, index, buffer);
        public static void TransformFeedbackBufferRange(uint  xfb, uint  index, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size) => TransformFeedbackBufferRangePtr?.Invoke(xfb, index, buffer, offset, size);
        public static void TransformFeedbackStreamAttribsNV(uint  count, int[]  attribs, uint  nbuffers, int[]  bufstreams, uint  bufferMode) => TransformFeedbackStreamAttribsNVPtr?.Invoke(count, attribs, nbuffers, bufstreams, bufferMode);
        public static void TransformFeedbackVaryings(uint  program, uint  count, string  varyings, uint /*TransformFeedbackBufferMode*/  bufferMode) => TransformFeedbackVaryingsPtr?.Invoke(program, count, varyings, bufferMode);
        public static void TransformFeedbackVaryingsEXT(uint  program, uint  count, string  varyings, uint  bufferMode) => TransformFeedbackVaryingsEXTPtr?.Invoke(program, count, varyings, bufferMode);
        public static void TransformFeedbackVaryingsNV(uint  program, uint  count, int[]  locations, uint  bufferMode) => TransformFeedbackVaryingsNVPtr?.Invoke(program, count, locations, bufferMode);
        public static void TransformPathNV(uint /*Path*/  resultPath, uint /*Path*/  srcPath, uint /*PathTransformType*/  transformType, float[]  transformValues) => TransformPathNVPtr?.Invoke(resultPath, srcPath, transformType, transformValues);
        public static void Translated(double  x, double  y, double  z) => TranslatedPtr?.Invoke(x, y, z);
        public static void Translatef(float  x, float  y, float  z) => TranslatefPtr?.Invoke(x, y, z);
        public static void Translatex(int  x, int  y, int  z) => TranslatexPtr?.Invoke(x, y, z);
        public static void TranslatexOES(int  x, int  y, int  z) => TranslatexOESPtr?.Invoke(x, y, z);
        public static void Uniform1d(int  location, double  x) => Uniform1dPtr?.Invoke(location, x);
        public static void Uniform1dv(int  location, uint  count, double[]  value) => Uniform1dvPtr?.Invoke(location, count, value);
        public static void Uniform1f(int  location, float  v0) => Uniform1fPtr?.Invoke(location, v0);
        public static void Uniform1fARB(int  location, float  v0) => Uniform1fARBPtr?.Invoke(location, v0);
        public static void Uniform1fv(int  location, uint  count, float[]  value) => Uniform1fvPtr?.Invoke(location, count, value);
        public static void Uniform1fvARB(int  location, uint  count, float[]  value) => Uniform1fvARBPtr?.Invoke(location, count, value);
        public static void Uniform1i(int  location, int  v0) => Uniform1iPtr?.Invoke(location, v0);
        public static void Uniform1i64ARB(int  location, long  x) => Uniform1i64ARBPtr?.Invoke(location, x);
        public static void Uniform1i64NV(int  location, long  x) => Uniform1i64NVPtr?.Invoke(location, x);
        public static void Uniform1i64vARB(int  location, uint  count, long[]  value) => Uniform1i64vARBPtr?.Invoke(location, count, value);
        public static void Uniform1i64vNV(int  location, uint  count, long[]  value) => Uniform1i64vNVPtr?.Invoke(location, count, value);
        public static void Uniform1iARB(int  location, int  v0) => Uniform1iARBPtr?.Invoke(location, v0);
        public static void Uniform1iv(int  location, uint  count, int[]  value) => Uniform1ivPtr?.Invoke(location, count, value);
        public static void Uniform1ivARB(int  location, uint  count, int[]  value) => Uniform1ivARBPtr?.Invoke(location, count, value);
        public static void Uniform1ui(int  location, uint  v0) => Uniform1uiPtr?.Invoke(location, v0);
        public static void Uniform1ui64ARB(int  location, ulong  x) => Uniform1ui64ARBPtr?.Invoke(location, x);
        public static void Uniform1ui64NV(int  location, ulong  x) => Uniform1ui64NVPtr?.Invoke(location, x);
        public static void Uniform1ui64vARB(int  location, uint  count, ulong[]  value) => Uniform1ui64vARBPtr?.Invoke(location, count, value);
        public static void Uniform1ui64vNV(int  location, uint  count, ulong[]  value) => Uniform1ui64vNVPtr?.Invoke(location, count, value);
        public static void Uniform1uiEXT(int  location, uint  v0) => Uniform1uiEXTPtr?.Invoke(location, v0);
        public static void Uniform1uiv(int  location, uint  count, uint[]  value) => Uniform1uivPtr?.Invoke(location, count, value);
        public static void Uniform1uivEXT(int  location, uint  count, uint[]  value) => Uniform1uivEXTPtr?.Invoke(location, count, value);
        public static void Uniform2d(int  location, double  x, double  y) => Uniform2dPtr?.Invoke(location, x, y);
        public static void Uniform2dv(int  location, uint  count, double[]  value) => Uniform2dvPtr?.Invoke(location, count, value);
        public static void Uniform2f(int  location, float  v0, float  v1) => Uniform2fPtr?.Invoke(location, v0, v1);
        public static void Uniform2fARB(int  location, float  v0, float  v1) => Uniform2fARBPtr?.Invoke(location, v0, v1);
        public static void Uniform2fv(int  location, uint  count, float[]  value) => Uniform2fvPtr?.Invoke(location, count, value);
        public static void Uniform2fvARB(int  location, uint  count, float[]  value) => Uniform2fvARBPtr?.Invoke(location, count, value);
        public static void Uniform2i(int  location, int  v0, int  v1) => Uniform2iPtr?.Invoke(location, v0, v1);
        public static void Uniform2i64ARB(int  location, long  x, long  y) => Uniform2i64ARBPtr?.Invoke(location, x, y);
        public static void Uniform2i64NV(int  location, long  x, long  y) => Uniform2i64NVPtr?.Invoke(location, x, y);
        public static void Uniform2i64vARB(int  location, uint  count, long[]  value) => Uniform2i64vARBPtr?.Invoke(location, count, value);
        public static void Uniform2i64vNV(int  location, uint  count, long[]  value) => Uniform2i64vNVPtr?.Invoke(location, count, value);
        public static void Uniform2iARB(int  location, int  v0, int  v1) => Uniform2iARBPtr?.Invoke(location, v0, v1);
        public static void Uniform2iv(int  location, uint  count, int[]  value) => Uniform2ivPtr?.Invoke(location, count, value);
        public static void Uniform2ivARB(int  location, uint  count, int[]  value) => Uniform2ivARBPtr?.Invoke(location, count, value);
        public static void Uniform2ui(int  location, uint  v0, uint  v1) => Uniform2uiPtr?.Invoke(location, v0, v1);
        public static void Uniform2ui64ARB(int  location, ulong  x, ulong  y) => Uniform2ui64ARBPtr?.Invoke(location, x, y);
        public static void Uniform2ui64NV(int  location, ulong  x, ulong  y) => Uniform2ui64NVPtr?.Invoke(location, x, y);
        public static void Uniform2ui64vARB(int  location, uint  count, ulong[]  value) => Uniform2ui64vARBPtr?.Invoke(location, count, value);
        public static void Uniform2ui64vNV(int  location, uint  count, ulong[]  value) => Uniform2ui64vNVPtr?.Invoke(location, count, value);
        public static void Uniform2uiEXT(int  location, uint  v0, uint  v1) => Uniform2uiEXTPtr?.Invoke(location, v0, v1);
        public static void Uniform2uiv(int  location, uint  count, uint[]  value) => Uniform2uivPtr?.Invoke(location, count, value);
        public static void Uniform2uivEXT(int  location, uint  count, uint[]  value) => Uniform2uivEXTPtr?.Invoke(location, count, value);
        public static void Uniform3d(int  location, double  x, double  y, double  z) => Uniform3dPtr?.Invoke(location, x, y, z);
        public static void Uniform3dv(int  location, uint  count, double[]  value) => Uniform3dvPtr?.Invoke(location, count, value);
        public static void Uniform3f(int  location, float  v0, float  v1, float  v2) => Uniform3fPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3fARB(int  location, float  v0, float  v1, float  v2) => Uniform3fARBPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3fv(int  location, uint  count, float[]  value) => Uniform3fvPtr?.Invoke(location, count, value);
        public static void Uniform3fvARB(int  location, uint  count, float[]  value) => Uniform3fvARBPtr?.Invoke(location, count, value);
        public static void Uniform3i(int  location, int  v0, int  v1, int  v2) => Uniform3iPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3i64ARB(int  location, long  x, long  y, long  z) => Uniform3i64ARBPtr?.Invoke(location, x, y, z);
        public static void Uniform3i64NV(int  location, long  x, long  y, long  z) => Uniform3i64NVPtr?.Invoke(location, x, y, z);
        public static void Uniform3i64vARB(int  location, uint  count, long[]  value) => Uniform3i64vARBPtr?.Invoke(location, count, value);
        public static void Uniform3i64vNV(int  location, uint  count, long[]  value) => Uniform3i64vNVPtr?.Invoke(location, count, value);
        public static void Uniform3iARB(int  location, int  v0, int  v1, int  v2) => Uniform3iARBPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3iv(int  location, uint  count, int[]  value) => Uniform3ivPtr?.Invoke(location, count, value);
        public static void Uniform3ivARB(int  location, uint  count, int[]  value) => Uniform3ivARBPtr?.Invoke(location, count, value);
        public static void Uniform3ui(int  location, uint  v0, uint  v1, uint  v2) => Uniform3uiPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3ui64ARB(int  location, ulong  x, ulong  y, ulong  z) => Uniform3ui64ARBPtr?.Invoke(location, x, y, z);
        public static void Uniform3ui64NV(int  location, ulong  x, ulong  y, ulong  z) => Uniform3ui64NVPtr?.Invoke(location, x, y, z);
        public static void Uniform3ui64vARB(int  location, uint  count, ulong[]  value) => Uniform3ui64vARBPtr?.Invoke(location, count, value);
        public static void Uniform3ui64vNV(int  location, uint  count, ulong[]  value) => Uniform3ui64vNVPtr?.Invoke(location, count, value);
        public static void Uniform3uiEXT(int  location, uint  v0, uint  v1, uint  v2) => Uniform3uiEXTPtr?.Invoke(location, v0, v1, v2);
        public static void Uniform3uiv(int  location, uint  count, uint[]  value) => Uniform3uivPtr?.Invoke(location, count, value);
        public static void Uniform3uivEXT(int  location, uint  count, uint[]  value) => Uniform3uivEXTPtr?.Invoke(location, count, value);
        public static void Uniform4d(int  location, double  x, double  y, double  z, double  w) => Uniform4dPtr?.Invoke(location, x, y, z, w);
        public static void Uniform4dv(int  location, uint  count, double[]  value) => Uniform4dvPtr?.Invoke(location, count, value);
        public static void Uniform4f(int  location, float  v0, float  v1, float  v2, float  v3) => Uniform4fPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4fARB(int  location, float  v0, float  v1, float  v2, float  v3) => Uniform4fARBPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4fv(int  location, uint  count, float[]  value) => Uniform4fvPtr?.Invoke(location, count, value);
        public static void Uniform4fvARB(int  location, uint  count, float[]  value) => Uniform4fvARBPtr?.Invoke(location, count, value);
        public static void Uniform4i(int  location, int  v0, int  v1, int  v2, int  v3) => Uniform4iPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4i64ARB(int  location, long  x, long  y, long  z, long  w) => Uniform4i64ARBPtr?.Invoke(location, x, y, z, w);
        public static void Uniform4i64NV(int  location, long  x, long  y, long  z, long  w) => Uniform4i64NVPtr?.Invoke(location, x, y, z, w);
        public static void Uniform4i64vARB(int  location, uint  count, long[]  value) => Uniform4i64vARBPtr?.Invoke(location, count, value);
        public static void Uniform4i64vNV(int  location, uint  count, long[]  value) => Uniform4i64vNVPtr?.Invoke(location, count, value);
        public static void Uniform4iARB(int  location, int  v0, int  v1, int  v2, int  v3) => Uniform4iARBPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4iv(int  location, uint  count, int[]  value) => Uniform4ivPtr?.Invoke(location, count, value);
        public static void Uniform4ivARB(int  location, uint  count, int[]  value) => Uniform4ivARBPtr?.Invoke(location, count, value);
        public static void Uniform4ui(int  location, uint  v0, uint  v1, uint  v2, uint  v3) => Uniform4uiPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4ui64ARB(int  location, ulong  x, ulong  y, ulong  z, ulong  w) => Uniform4ui64ARBPtr?.Invoke(location, x, y, z, w);
        public static void Uniform4ui64NV(int  location, ulong  x, ulong  y, ulong  z, ulong  w) => Uniform4ui64NVPtr?.Invoke(location, x, y, z, w);
        public static void Uniform4ui64vARB(int  location, uint  count, ulong[]  value) => Uniform4ui64vARBPtr?.Invoke(location, count, value);
        public static void Uniform4ui64vNV(int  location, uint  count, ulong[]  value) => Uniform4ui64vNVPtr?.Invoke(location, count, value);
        public static void Uniform4uiEXT(int  location, uint  v0, uint  v1, uint  v2, uint  v3) => Uniform4uiEXTPtr?.Invoke(location, v0, v1, v2, v3);
        public static void Uniform4uiv(int  location, uint  count, uint[]  value) => Uniform4uivPtr?.Invoke(location, count, value);
        public static void Uniform4uivEXT(int  location, uint  count, uint[]  value) => Uniform4uivEXTPtr?.Invoke(location, count, value);
        public static void UniformBlockBinding(uint  program, uint  uniformBlockIndex, uint  uniformBlockBinding) => UniformBlockBindingPtr?.Invoke(program, uniformBlockIndex, uniformBlockBinding);
        public static void UniformBufferEXT(uint  program, int  location, uint  buffer) => UniformBufferEXTPtr?.Invoke(program, location, buffer);
        public static void UniformHandleui64ARB(int  location, ulong  value) => UniformHandleui64ARBPtr?.Invoke(location, value);
        public static void UniformHandleui64IMG(int  location, ulong  value) => UniformHandleui64IMGPtr?.Invoke(location, value);
        public static void UniformHandleui64NV(int  location, ulong  value) => UniformHandleui64NVPtr?.Invoke(location, value);
        public static void UniformHandleui64vARB(int  location, uint  count, ulong[]  value) => UniformHandleui64vARBPtr?.Invoke(location, count, value);
        public static void UniformHandleui64vIMG(int  location, uint  count, ulong[]  value) => UniformHandleui64vIMGPtr?.Invoke(location, count, value);
        public static void UniformHandleui64vNV(int  location, uint  count, ulong[]  value) => UniformHandleui64vNVPtr?.Invoke(location, count, value);
        public static void UniformMatrix2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix2dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2fvARBPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix2x3dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2x3fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x3fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2x3fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix2x4dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2x4fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix2x4fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix2x4fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix3dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3fvARBPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix3x2dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3x2fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x2fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3x2fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix3x4dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3x4fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix3x4fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix3x4fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix4dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4fvARBPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix4x2dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4x2fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x2fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4x2fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => UniformMatrix4x3dvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4x3fvPtr?.Invoke(location, count, transpose, value);
        public static void UniformMatrix4x3fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => UniformMatrix4x3fvNVPtr?.Invoke(location, count, transpose, value);
        public static void UniformSubroutinesuiv(uint /*ShaderType*/  shadertype, uint  count, uint[]  indices) => UniformSubroutinesuivPtr?.Invoke(shadertype, count, indices);
        public static void Uniformui64NV(int  location, ulong  value) => Uniformui64NVPtr?.Invoke(location, value);
        public static void Uniformui64vNV(int  location, uint  count, ulong[]  value) => Uniformui64vNVPtr?.Invoke(location, count, value);
        public static void UnlockArraysEXT() => UnlockArraysEXTPtr?.Invoke();
        public static bool /*Boolean*/ UnmapBuffer(uint /*BufferTargetARB*/  target) => UnmapBufferPtr?.Invoke(target) ?? default;
        public static bool /*Boolean*/ UnmapBufferARB(uint /*BufferTargetARB*/  target) => UnmapBufferARBPtr?.Invoke(target) ?? default;
        public static bool /*Boolean*/ UnmapBufferOES(uint  target) => UnmapBufferOESPtr?.Invoke(target) ?? default;
        public static bool /*Boolean*/ UnmapNamedBuffer(uint  buffer) => UnmapNamedBufferPtr?.Invoke(buffer) ?? default;
        public static bool /*Boolean*/ UnmapNamedBufferEXT(uint  buffer) => UnmapNamedBufferEXTPtr?.Invoke(buffer) ?? default;
        public static void UnmapObjectBufferATI(uint  buffer) => UnmapObjectBufferATIPtr?.Invoke(buffer);
        public static void UnmapTexture2DINTEL(uint  texture, int  level) => UnmapTexture2DINTELPtr?.Invoke(texture, level);
        public static void UpdateObjectBufferATI(uint  buffer, uint  offset, uint  size, IntPtr  pointer, uint /*PreserveModeATI*/  preserve) => UpdateObjectBufferATIPtr?.Invoke(buffer, offset, size, pointer, preserve);
        public static void UploadGpuMaskNVX(uint  mask) => UploadGpuMaskNVXPtr?.Invoke(mask);
        public static void UseProgram(uint  program) => UseProgramPtr?.Invoke(program);
        public static void UseProgramObjectARB(IntPtr /*handleARB*/  programObj) => UseProgramObjectARBPtr?.Invoke(programObj);
        public static void UseProgramStages(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program) => UseProgramStagesPtr?.Invoke(pipeline, stages, program);
        public static void UseProgramStagesEXT(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program) => UseProgramStagesEXTPtr?.Invoke(pipeline, stages, program);
        public static void UseShaderProgramEXT(uint  type, uint  program) => UseShaderProgramEXTPtr?.Invoke(type, program);
        public static void VDPAUFiniNV() => VDPAUFiniNVPtr?.Invoke();
        public static void VDPAUGetSurfaceivNV(IntPtr /*vdpauSurfaceNV*/  surface, uint  pname, uint  count, uint[]  length, int[]  values) => VDPAUGetSurfaceivNVPtr?.Invoke(surface, pname, count, length, values);
        public static void VDPAUInitNV(IntPtr  vdpDevice, IntPtr  getProcAddress) => VDPAUInitNVPtr?.Invoke(vdpDevice, getProcAddress);
        public static bool /*Boolean*/ VDPAUIsSurfaceNV(IntPtr /*vdpauSurfaceNV*/  surface) => VDPAUIsSurfaceNVPtr?.Invoke(surface) ?? default;
        public static void VDPAUMapSurfacesNV(uint  numSurfaces, IntPtr[] /*vdpauSurfaceNV*/  surfaces) => VDPAUMapSurfacesNVPtr?.Invoke(numSurfaces, surfaces);
        public static IntPtr /*vdpauSurfaceNV*/ VDPAURegisterOutputSurfaceNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames) => VDPAURegisterOutputSurfaceNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames) ?? default;
        public static IntPtr /*vdpauSurfaceNV*/ VDPAURegisterVideoSurfaceNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames) => VDPAURegisterVideoSurfaceNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames) ?? default;
        public static IntPtr /*vdpauSurfaceNV*/ VDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames, bool /*Boolean*/  isFrameStructure) => VDPAURegisterVideoSurfaceWithPictureStructureNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames, isFrameStructure) ?? default;
        public static void VDPAUSurfaceAccessNV(IntPtr /*vdpauSurfaceNV*/  surface, uint  access) => VDPAUSurfaceAccessNVPtr?.Invoke(surface, access);
        public static void VDPAUUnmapSurfacesNV(uint  numSurface, IntPtr[] /*vdpauSurfaceNV*/  surfaces) => VDPAUUnmapSurfacesNVPtr?.Invoke(numSurface, surfaces);
        public static void VDPAUUnregisterSurfaceNV(IntPtr /*vdpauSurfaceNV*/  surface) => VDPAUUnregisterSurfaceNVPtr?.Invoke(surface);
        public static void ValidateProgram(uint  program) => ValidateProgramPtr?.Invoke(program);
        public static void ValidateProgramARB(IntPtr /*handleARB*/  programObj) => ValidateProgramARBPtr?.Invoke(programObj);
        public static void ValidateProgramPipeline(uint  pipeline) => ValidateProgramPipelinePtr?.Invoke(pipeline);
        public static void ValidateProgramPipelineEXT(uint  pipeline) => ValidateProgramPipelineEXTPtr?.Invoke(pipeline);
        public static void VariantArrayObjectATI(uint  id, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset) => VariantArrayObjectATIPtr?.Invoke(id, type, stride, buffer, offset);
        public static void VariantPointerEXT(uint  id, uint /*ScalarType*/  type, uint  stride, IntPtr  addr) => VariantPointerEXTPtr?.Invoke(id, type, stride, addr);
        public static void VariantbvEXT(uint  id, sbyte[]  addr) => VariantbvEXTPtr?.Invoke(id, addr);
        public static void VariantdvEXT(uint  id, double[]  addr) => VariantdvEXTPtr?.Invoke(id, addr);
        public static void VariantfvEXT(uint  id, float[]  addr) => VariantfvEXTPtr?.Invoke(id, addr);
        public static void VariantivEXT(uint  id, int[]  addr) => VariantivEXTPtr?.Invoke(id, addr);
        public static void VariantsvEXT(uint  id, short[]  addr) => VariantsvEXTPtr?.Invoke(id, addr);
        public static void VariantubvEXT(uint  id, byte[]  addr) => VariantubvEXTPtr?.Invoke(id, addr);
        public static void VariantuivEXT(uint  id, uint[]  addr) => VariantuivEXTPtr?.Invoke(id, addr);
        public static void VariantusvEXT(uint  id, ushort[]  addr) => VariantusvEXTPtr?.Invoke(id, addr);
        public static void Vertex2bOES(sbyte  x, sbyte  y) => Vertex2bOESPtr?.Invoke(x, y);
        public static void Vertex2bvOES(sbyte[]  coords) => Vertex2bvOESPtr?.Invoke(coords);
        public static void Vertex2d(double /*CoordD*/  x, double /*CoordD*/  y) => Vertex2dPtr?.Invoke(x, y);
        public static void Vertex2dv(double[] /*CoordD*/  v) => Vertex2dvPtr?.Invoke(v);
        public static void Vertex2f(float /*CoordF*/  x, float /*CoordF*/  y) => Vertex2fPtr?.Invoke(x, y);
        public static void Vertex2fv(float[] /*CoordF*/  v) => Vertex2fvPtr?.Invoke(v);
        public static void Vertex2hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y) => Vertex2hNVPtr?.Invoke(x, y);
        public static void Vertex2hvNV(ushort[] /*Half16NV*/  v) => Vertex2hvNVPtr?.Invoke(v);
        public static void Vertex2i(int /*CoordI*/  x, int /*CoordI*/  y) => Vertex2iPtr?.Invoke(x, y);
        public static void Vertex2iv(int[] /*CoordI*/  v) => Vertex2ivPtr?.Invoke(v);
        public static void Vertex2s(short /*CoordS*/  x, short /*CoordS*/  y) => Vertex2sPtr?.Invoke(x, y);
        public static void Vertex2sv(short[] /*CoordS*/  v) => Vertex2svPtr?.Invoke(v);
        public static void Vertex2xOES(int  x) => Vertex2xOESPtr?.Invoke(x);
        public static void Vertex2xvOES(int[]  coords) => Vertex2xvOESPtr?.Invoke(coords);
        public static void Vertex3bOES(sbyte  x, sbyte  y, sbyte  z) => Vertex3bOESPtr?.Invoke(x, y, z);
        public static void Vertex3bvOES(sbyte[]  coords) => Vertex3bvOESPtr?.Invoke(coords);
        public static void Vertex3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => Vertex3dPtr?.Invoke(x, y, z);
        public static void Vertex3dv(double[] /*CoordD*/  v) => Vertex3dvPtr?.Invoke(v);
        public static void Vertex3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => Vertex3fPtr?.Invoke(x, y, z);
        public static void Vertex3fv(float[] /*CoordF*/  v) => Vertex3fvPtr?.Invoke(v);
        public static void Vertex3hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z) => Vertex3hNVPtr?.Invoke(x, y, z);
        public static void Vertex3hvNV(ushort[] /*Half16NV*/  v) => Vertex3hvNVPtr?.Invoke(v);
        public static void Vertex3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => Vertex3iPtr?.Invoke(x, y, z);
        public static void Vertex3iv(int[] /*CoordI*/  v) => Vertex3ivPtr?.Invoke(v);
        public static void Vertex3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => Vertex3sPtr?.Invoke(x, y, z);
        public static void Vertex3sv(short[] /*CoordS*/  v) => Vertex3svPtr?.Invoke(v);
        public static void Vertex3xOES(int  x, int  y) => Vertex3xOESPtr?.Invoke(x, y);
        public static void Vertex3xvOES(int[]  coords) => Vertex3xvOESPtr?.Invoke(coords);
        public static void Vertex4bOES(sbyte  x, sbyte  y, sbyte  z, sbyte  w) => Vertex4bOESPtr?.Invoke(x, y, z, w);
        public static void Vertex4bvOES(sbyte[]  coords) => Vertex4bvOESPtr?.Invoke(coords);
        public static void Vertex4d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => Vertex4dPtr?.Invoke(x, y, z, w);
        public static void Vertex4dv(double[] /*CoordD*/  v) => Vertex4dvPtr?.Invoke(v);
        public static void Vertex4f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => Vertex4fPtr?.Invoke(x, y, z, w);
        public static void Vertex4fv(float[] /*CoordF*/  v) => Vertex4fvPtr?.Invoke(v);
        public static void Vertex4hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w) => Vertex4hNVPtr?.Invoke(x, y, z, w);
        public static void Vertex4hvNV(ushort[] /*Half16NV*/  v) => Vertex4hvNVPtr?.Invoke(v);
        public static void Vertex4i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => Vertex4iPtr?.Invoke(x, y, z, w);
        public static void Vertex4iv(int[] /*CoordI*/  v) => Vertex4ivPtr?.Invoke(v);
        public static void Vertex4s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => Vertex4sPtr?.Invoke(x, y, z, w);
        public static void Vertex4sv(short[] /*CoordS*/  v) => Vertex4svPtr?.Invoke(v);
        public static void Vertex4xOES(int  x, int  y, int  z) => Vertex4xOESPtr?.Invoke(x, y, z);
        public static void Vertex4xvOES(int[]  coords) => Vertex4xvOESPtr?.Invoke(coords);
        public static void VertexArrayAttribBinding(uint  vaobj, uint  attribindex, uint  bindingindex) => VertexArrayAttribBindingPtr?.Invoke(vaobj, attribindex, bindingindex);
        public static void VertexArrayAttribFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => VertexArrayAttribFormatPtr?.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);
        public static void VertexArrayAttribIFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => VertexArrayAttribIFormatPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        public static void VertexArrayAttribLFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => VertexArrayAttribLFormatPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        public static void VertexArrayBindVertexBufferEXT(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride) => VertexArrayBindVertexBufferEXTPtr?.Invoke(vaobj, bindingindex, buffer, offset, stride);
        public static void VertexArrayBindingDivisor(uint  vaobj, uint  bindingindex, uint  divisor) => VertexArrayBindingDivisorPtr?.Invoke(vaobj, bindingindex, divisor);
        public static void VertexArrayColorOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayColorOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        public static void VertexArrayEdgeFlagOffsetEXT(uint  vaobj, uint  buffer, uint  stride, IntPtr  offset) => VertexArrayEdgeFlagOffsetEXTPtr?.Invoke(vaobj, buffer, stride, offset);
        public static void VertexArrayElementBuffer(uint  vaobj, uint  buffer) => VertexArrayElementBufferPtr?.Invoke(vaobj, buffer);
        public static void VertexArrayFogCoordOffsetEXT(uint  vaobj, uint  buffer, uint /*FogCoordinatePointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayFogCoordOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        public static void VertexArrayIndexOffsetEXT(uint  vaobj, uint  buffer, uint /*IndexPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayIndexOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        public static void VertexArrayMultiTexCoordOffsetEXT(uint  vaobj, uint  buffer, uint  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayMultiTexCoordOffsetEXTPtr?.Invoke(vaobj, buffer, texunit, size, type, stride, offset);
        public static void VertexArrayNormalOffsetEXT(uint  vaobj, uint  buffer, uint /*NormalPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayNormalOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        public static void VertexArrayParameteriAPPLE(uint /*VertexArrayPNameAPPLE*/  pname, int  param) => VertexArrayParameteriAPPLEPtr?.Invoke(pname, param);
        public static void VertexArrayRangeAPPLE(uint  length, IntPtr  pointer) => VertexArrayRangeAPPLEPtr?.Invoke(length, pointer);
        public static void VertexArrayRangeNV(uint  length, IntPtr  pointer) => VertexArrayRangeNVPtr?.Invoke(length, pointer);
        public static void VertexArraySecondaryColorOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset) => VertexArraySecondaryColorOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        public static void VertexArrayTexCoordOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayTexCoordOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        public static void VertexArrayVertexAttribBindingEXT(uint  vaobj, uint  attribindex, uint  bindingindex) => VertexArrayVertexAttribBindingEXTPtr?.Invoke(vaobj, attribindex, bindingindex);
        public static void VertexArrayVertexAttribDivisorEXT(uint  vaobj, uint  index, uint  divisor) => VertexArrayVertexAttribDivisorEXTPtr?.Invoke(vaobj, index, divisor);
        public static void VertexArrayVertexAttribFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => VertexArrayVertexAttribFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);
        public static void VertexArrayVertexAttribIFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => VertexArrayVertexAttribIFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        public static void VertexArrayVertexAttribIOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribType*/  type, uint  stride, IntPtr  offset) => VertexArrayVertexAttribIOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, stride, offset);
        public static void VertexArrayVertexAttribLFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => VertexArrayVertexAttribLFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        public static void VertexArrayVertexAttribLOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr /*BufferOffset*/  offset) => VertexArrayVertexAttribLOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, stride, offset);
        public static void VertexArrayVertexAttribOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  offset) => VertexArrayVertexAttribOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, normalized, stride, offset);
        public static void VertexArrayVertexBindingDivisorEXT(uint  vaobj, uint  bindingindex, uint  divisor) => VertexArrayVertexBindingDivisorEXTPtr?.Invoke(vaobj, bindingindex, divisor);
        public static void VertexArrayVertexBuffer(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr  offset, uint  stride) => VertexArrayVertexBufferPtr?.Invoke(vaobj, bindingindex, buffer, offset, stride);
        public static void VertexArrayVertexBuffers(uint  vaobj, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides) => VertexArrayVertexBuffersPtr?.Invoke(vaobj, first, count, buffers, offsets, strides);
        public static void VertexArrayVertexOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  offset) => VertexArrayVertexOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        public static void VertexAttrib1d(uint  index, double  x) => VertexAttrib1dPtr?.Invoke(index, x);
        public static void VertexAttrib1dARB(uint  index, double  x) => VertexAttrib1dARBPtr?.Invoke(index, x);
        public static void VertexAttrib1dNV(uint  index, double  x) => VertexAttrib1dNVPtr?.Invoke(index, x);
        public static void VertexAttrib1dv(uint  index, double[]  v) => VertexAttrib1dvPtr?.Invoke(index, v);
        public static void VertexAttrib1dvARB(uint  index, double[]  v) => VertexAttrib1dvARBPtr?.Invoke(index, v);
        public static void VertexAttrib1dvNV(uint  index, double[]  v) => VertexAttrib1dvNVPtr?.Invoke(index, v);
        public static void VertexAttrib1f(uint  index, float  x) => VertexAttrib1fPtr?.Invoke(index, x);
        public static void VertexAttrib1fARB(uint  index, float  x) => VertexAttrib1fARBPtr?.Invoke(index, x);
        public static void VertexAttrib1fNV(uint  index, float  x) => VertexAttrib1fNVPtr?.Invoke(index, x);
        public static void VertexAttrib1fv(uint  index, float[]  v) => VertexAttrib1fvPtr?.Invoke(index, v);
        public static void VertexAttrib1fvARB(uint  index, float[]  v) => VertexAttrib1fvARBPtr?.Invoke(index, v);
        public static void VertexAttrib1fvNV(uint  index, float[]  v) => VertexAttrib1fvNVPtr?.Invoke(index, v);
        public static void VertexAttrib1hNV(uint  index, ushort /*Half16NV*/  x) => VertexAttrib1hNVPtr?.Invoke(index, x);
        public static void VertexAttrib1hvNV(uint  index, ushort[] /*Half16NV*/  v) => VertexAttrib1hvNVPtr?.Invoke(index, v);
        public static void VertexAttrib1s(uint  index, short  x) => VertexAttrib1sPtr?.Invoke(index, x);
        public static void VertexAttrib1sARB(uint  index, short  x) => VertexAttrib1sARBPtr?.Invoke(index, x);
        public static void VertexAttrib1sNV(uint  index, short  x) => VertexAttrib1sNVPtr?.Invoke(index, x);
        public static void VertexAttrib1sv(uint  index, short[]  v) => VertexAttrib1svPtr?.Invoke(index, v);
        public static void VertexAttrib1svARB(uint  index, short[]  v) => VertexAttrib1svARBPtr?.Invoke(index, v);
        public static void VertexAttrib1svNV(uint  index, short[]  v) => VertexAttrib1svNVPtr?.Invoke(index, v);
        public static void VertexAttrib2d(uint  index, double  x, double  y) => VertexAttrib2dPtr?.Invoke(index, x, y);
        public static void VertexAttrib2dARB(uint  index, double  x, double  y) => VertexAttrib2dARBPtr?.Invoke(index, x, y);
        public static void VertexAttrib2dNV(uint  index, double  x, double  y) => VertexAttrib2dNVPtr?.Invoke(index, x, y);
        public static void VertexAttrib2dv(uint  index, double[]  v) => VertexAttrib2dvPtr?.Invoke(index, v);
        public static void VertexAttrib2dvARB(uint  index, double[]  v) => VertexAttrib2dvARBPtr?.Invoke(index, v);
        public static void VertexAttrib2dvNV(uint  index, double[]  v) => VertexAttrib2dvNVPtr?.Invoke(index, v);
        public static void VertexAttrib2f(uint  index, float  x, float  y) => VertexAttrib2fPtr?.Invoke(index, x, y);
        public static void VertexAttrib2fARB(uint  index, float  x, float  y) => VertexAttrib2fARBPtr?.Invoke(index, x, y);
        public static void VertexAttrib2fNV(uint  index, float  x, float  y) => VertexAttrib2fNVPtr?.Invoke(index, x, y);
        public static void VertexAttrib2fv(uint  index, float[]  v) => VertexAttrib2fvPtr?.Invoke(index, v);
        public static void VertexAttrib2fvARB(uint  index, float[]  v) => VertexAttrib2fvARBPtr?.Invoke(index, v);
        public static void VertexAttrib2fvNV(uint  index, float[]  v) => VertexAttrib2fvNVPtr?.Invoke(index, v);
        public static void VertexAttrib2hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y) => VertexAttrib2hNVPtr?.Invoke(index, x, y);
        public static void VertexAttrib2hvNV(uint  index, ushort[] /*Half16NV*/  v) => VertexAttrib2hvNVPtr?.Invoke(index, v);
        public static void VertexAttrib2s(uint  index, short  x, short  y) => VertexAttrib2sPtr?.Invoke(index, x, y);
        public static void VertexAttrib2sARB(uint  index, short  x, short  y) => VertexAttrib2sARBPtr?.Invoke(index, x, y);
        public static void VertexAttrib2sNV(uint  index, short  x, short  y) => VertexAttrib2sNVPtr?.Invoke(index, x, y);
        public static void VertexAttrib2sv(uint  index, short[]  v) => VertexAttrib2svPtr?.Invoke(index, v);
        public static void VertexAttrib2svARB(uint  index, short[]  v) => VertexAttrib2svARBPtr?.Invoke(index, v);
        public static void VertexAttrib2svNV(uint  index, short[]  v) => VertexAttrib2svNVPtr?.Invoke(index, v);
        public static void VertexAttrib3d(uint  index, double  x, double  y, double  z) => VertexAttrib3dPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3dARB(uint  index, double  x, double  y, double  z) => VertexAttrib3dARBPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3dNV(uint  index, double  x, double  y, double  z) => VertexAttrib3dNVPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3dv(uint  index, double[]  v) => VertexAttrib3dvPtr?.Invoke(index, v);
        public static void VertexAttrib3dvARB(uint  index, double[]  v) => VertexAttrib3dvARBPtr?.Invoke(index, v);
        public static void VertexAttrib3dvNV(uint  index, double[]  v) => VertexAttrib3dvNVPtr?.Invoke(index, v);
        public static void VertexAttrib3f(uint  index, float  x, float  y, float  z) => VertexAttrib3fPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3fARB(uint  index, float  x, float  y, float  z) => VertexAttrib3fARBPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3fNV(uint  index, float  x, float  y, float  z) => VertexAttrib3fNVPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3fv(uint  index, float[]  v) => VertexAttrib3fvPtr?.Invoke(index, v);
        public static void VertexAttrib3fvARB(uint  index, float[]  v) => VertexAttrib3fvARBPtr?.Invoke(index, v);
        public static void VertexAttrib3fvNV(uint  index, float[]  v) => VertexAttrib3fvNVPtr?.Invoke(index, v);
        public static void VertexAttrib3hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z) => VertexAttrib3hNVPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3hvNV(uint  index, ushort[] /*Half16NV*/  v) => VertexAttrib3hvNVPtr?.Invoke(index, v);
        public static void VertexAttrib3s(uint  index, short  x, short  y, short  z) => VertexAttrib3sPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3sARB(uint  index, short  x, short  y, short  z) => VertexAttrib3sARBPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3sNV(uint  index, short  x, short  y, short  z) => VertexAttrib3sNVPtr?.Invoke(index, x, y, z);
        public static void VertexAttrib3sv(uint  index, short[]  v) => VertexAttrib3svPtr?.Invoke(index, v);
        public static void VertexAttrib3svARB(uint  index, short[]  v) => VertexAttrib3svARBPtr?.Invoke(index, v);
        public static void VertexAttrib3svNV(uint  index, short[]  v) => VertexAttrib3svNVPtr?.Invoke(index, v);
        public static void VertexAttrib4Nbv(uint  index, sbyte[]  v) => VertexAttrib4NbvPtr?.Invoke(index, v);
        public static void VertexAttrib4NbvARB(uint  index, sbyte[]  v) => VertexAttrib4NbvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4Niv(uint  index, int[]  v) => VertexAttrib4NivPtr?.Invoke(index, v);
        public static void VertexAttrib4NivARB(uint  index, int[]  v) => VertexAttrib4NivARBPtr?.Invoke(index, v);
        public static void VertexAttrib4Nsv(uint  index, short[]  v) => VertexAttrib4NsvPtr?.Invoke(index, v);
        public static void VertexAttrib4NsvARB(uint  index, short[]  v) => VertexAttrib4NsvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4Nub(uint  index, byte  x, byte  y, byte  z, byte  w) => VertexAttrib4NubPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4NubARB(uint  index, byte  x, byte  y, byte  z, byte  w) => VertexAttrib4NubARBPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4Nubv(uint  index, byte[]  v) => VertexAttrib4NubvPtr?.Invoke(index, v);
        public static void VertexAttrib4NubvARB(uint  index, byte[]  v) => VertexAttrib4NubvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4Nuiv(uint  index, uint[]  v) => VertexAttrib4NuivPtr?.Invoke(index, v);
        public static void VertexAttrib4NuivARB(uint  index, uint[]  v) => VertexAttrib4NuivARBPtr?.Invoke(index, v);
        public static void VertexAttrib4Nusv(uint  index, ushort[]  v) => VertexAttrib4NusvPtr?.Invoke(index, v);
        public static void VertexAttrib4NusvARB(uint  index, ushort[]  v) => VertexAttrib4NusvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4bv(uint  index, sbyte[]  v) => VertexAttrib4bvPtr?.Invoke(index, v);
        public static void VertexAttrib4bvARB(uint  index, sbyte[]  v) => VertexAttrib4bvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4d(uint  index, double  x, double  y, double  z, double  w) => VertexAttrib4dPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4dARB(uint  index, double  x, double  y, double  z, double  w) => VertexAttrib4dARBPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4dNV(uint  index, double  x, double  y, double  z, double  w) => VertexAttrib4dNVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4dv(uint  index, double[]  v) => VertexAttrib4dvPtr?.Invoke(index, v);
        public static void VertexAttrib4dvARB(uint  index, double[]  v) => VertexAttrib4dvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4dvNV(uint  index, double[]  v) => VertexAttrib4dvNVPtr?.Invoke(index, v);
        public static void VertexAttrib4f(uint  index, float  x, float  y, float  z, float  w) => VertexAttrib4fPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4fARB(uint  index, float  x, float  y, float  z, float  w) => VertexAttrib4fARBPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4fNV(uint  index, float  x, float  y, float  z, float  w) => VertexAttrib4fNVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4fv(uint  index, float[]  v) => VertexAttrib4fvPtr?.Invoke(index, v);
        public static void VertexAttrib4fvARB(uint  index, float[]  v) => VertexAttrib4fvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4fvNV(uint  index, float[]  v) => VertexAttrib4fvNVPtr?.Invoke(index, v);
        public static void VertexAttrib4hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w) => VertexAttrib4hNVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4hvNV(uint  index, ushort[] /*Half16NV*/  v) => VertexAttrib4hvNVPtr?.Invoke(index, v);
        public static void VertexAttrib4iv(uint  index, int[]  v) => VertexAttrib4ivPtr?.Invoke(index, v);
        public static void VertexAttrib4ivARB(uint  index, int[]  v) => VertexAttrib4ivARBPtr?.Invoke(index, v);
        public static void VertexAttrib4s(uint  index, short  x, short  y, short  z, short  w) => VertexAttrib4sPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4sARB(uint  index, short  x, short  y, short  z, short  w) => VertexAttrib4sARBPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4sNV(uint  index, short  x, short  y, short  z, short  w) => VertexAttrib4sNVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4sv(uint  index, short[]  v) => VertexAttrib4svPtr?.Invoke(index, v);
        public static void VertexAttrib4svARB(uint  index, short[]  v) => VertexAttrib4svARBPtr?.Invoke(index, v);
        public static void VertexAttrib4svNV(uint  index, short[]  v) => VertexAttrib4svNVPtr?.Invoke(index, v);
        public static void VertexAttrib4ubNV(uint  index, byte /*ColorUB*/  x, byte /*ColorUB*/  y, byte /*ColorUB*/  z, byte /*ColorUB*/  w) => VertexAttrib4ubNVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttrib4ubv(uint  index, byte[]  v) => VertexAttrib4ubvPtr?.Invoke(index, v);
        public static void VertexAttrib4ubvARB(uint  index, byte[]  v) => VertexAttrib4ubvARBPtr?.Invoke(index, v);
        public static void VertexAttrib4ubvNV(uint  index, byte[] /*ColorUB*/  v) => VertexAttrib4ubvNVPtr?.Invoke(index, v);
        public static void VertexAttrib4uiv(uint  index, uint[]  v) => VertexAttrib4uivPtr?.Invoke(index, v);
        public static void VertexAttrib4uivARB(uint  index, uint[]  v) => VertexAttrib4uivARBPtr?.Invoke(index, v);
        public static void VertexAttrib4usv(uint  index, ushort[]  v) => VertexAttrib4usvPtr?.Invoke(index, v);
        public static void VertexAttrib4usvARB(uint  index, ushort[]  v) => VertexAttrib4usvARBPtr?.Invoke(index, v);
        public static void VertexAttribArrayObjectATI(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, uint  buffer, uint  offset) => VertexAttribArrayObjectATIPtr?.Invoke(index, size, type, normalized, stride, buffer, offset);
        public static void VertexAttribBinding(uint  attribindex, uint  bindingindex) => VertexAttribBindingPtr?.Invoke(attribindex, bindingindex);
        public static void VertexAttribDivisor(uint  index, uint  divisor) => VertexAttribDivisorPtr?.Invoke(index, divisor);
        public static void VertexAttribDivisorANGLE(uint  index, uint  divisor) => VertexAttribDivisorANGLEPtr?.Invoke(index, divisor);
        public static void VertexAttribDivisorARB(uint  index, uint  divisor) => VertexAttribDivisorARBPtr?.Invoke(index, divisor);
        public static void VertexAttribDivisorEXT(uint  index, uint  divisor) => VertexAttribDivisorEXTPtr?.Invoke(index, divisor);
        public static void VertexAttribDivisorNV(uint  index, uint  divisor) => VertexAttribDivisorNVPtr?.Invoke(index, divisor);
        public static void VertexAttribFormat(uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => VertexAttribFormatPtr?.Invoke(attribindex, size, type, normalized, relativeoffset);
        public static void VertexAttribFormatNV(uint  index, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  stride) => VertexAttribFormatNVPtr?.Invoke(index, size, type, normalized, stride);
        public static void VertexAttribI1i(uint  index, int  x) => VertexAttribI1iPtr?.Invoke(index, x);
        public static void VertexAttribI1iEXT(uint  index, int  x) => VertexAttribI1iEXTPtr?.Invoke(index, x);
        public static void VertexAttribI1iv(uint  index, int[]  v) => VertexAttribI1ivPtr?.Invoke(index, v);
        public static void VertexAttribI1ivEXT(uint  index, int[]  v) => VertexAttribI1ivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI1ui(uint  index, uint  x) => VertexAttribI1uiPtr?.Invoke(index, x);
        public static void VertexAttribI1uiEXT(uint  index, uint  x) => VertexAttribI1uiEXTPtr?.Invoke(index, x);
        public static void VertexAttribI1uiv(uint  index, uint[]  v) => VertexAttribI1uivPtr?.Invoke(index, v);
        public static void VertexAttribI1uivEXT(uint  index, uint[]  v) => VertexAttribI1uivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI2i(uint  index, int  x, int  y) => VertexAttribI2iPtr?.Invoke(index, x, y);
        public static void VertexAttribI2iEXT(uint  index, int  x, int  y) => VertexAttribI2iEXTPtr?.Invoke(index, x, y);
        public static void VertexAttribI2iv(uint  index, int[]  v) => VertexAttribI2ivPtr?.Invoke(index, v);
        public static void VertexAttribI2ivEXT(uint  index, int[]  v) => VertexAttribI2ivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI2ui(uint  index, uint  x, uint  y) => VertexAttribI2uiPtr?.Invoke(index, x, y);
        public static void VertexAttribI2uiEXT(uint  index, uint  x, uint  y) => VertexAttribI2uiEXTPtr?.Invoke(index, x, y);
        public static void VertexAttribI2uiv(uint  index, uint[]  v) => VertexAttribI2uivPtr?.Invoke(index, v);
        public static void VertexAttribI2uivEXT(uint  index, uint[]  v) => VertexAttribI2uivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI3i(uint  index, int  x, int  y, int  z) => VertexAttribI3iPtr?.Invoke(index, x, y, z);
        public static void VertexAttribI3iEXT(uint  index, int  x, int  y, int  z) => VertexAttribI3iEXTPtr?.Invoke(index, x, y, z);
        public static void VertexAttribI3iv(uint  index, int[]  v) => VertexAttribI3ivPtr?.Invoke(index, v);
        public static void VertexAttribI3ivEXT(uint  index, int[]  v) => VertexAttribI3ivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI3ui(uint  index, uint  x, uint  y, uint  z) => VertexAttribI3uiPtr?.Invoke(index, x, y, z);
        public static void VertexAttribI3uiEXT(uint  index, uint  x, uint  y, uint  z) => VertexAttribI3uiEXTPtr?.Invoke(index, x, y, z);
        public static void VertexAttribI3uiv(uint  index, uint[]  v) => VertexAttribI3uivPtr?.Invoke(index, v);
        public static void VertexAttribI3uivEXT(uint  index, uint[]  v) => VertexAttribI3uivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4bv(uint  index, sbyte[]  v) => VertexAttribI4bvPtr?.Invoke(index, v);
        public static void VertexAttribI4bvEXT(uint  index, sbyte[]  v) => VertexAttribI4bvEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4i(uint  index, int  x, int  y, int  z, int  w) => VertexAttribI4iPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribI4iEXT(uint  index, int  x, int  y, int  z, int  w) => VertexAttribI4iEXTPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribI4iv(uint  index, int[]  v) => VertexAttribI4ivPtr?.Invoke(index, v);
        public static void VertexAttribI4ivEXT(uint  index, int[]  v) => VertexAttribI4ivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4sv(uint  index, short[]  v) => VertexAttribI4svPtr?.Invoke(index, v);
        public static void VertexAttribI4svEXT(uint  index, short[]  v) => VertexAttribI4svEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4ubv(uint  index, byte[]  v) => VertexAttribI4ubvPtr?.Invoke(index, v);
        public static void VertexAttribI4ubvEXT(uint  index, byte[]  v) => VertexAttribI4ubvEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4ui(uint  index, uint  x, uint  y, uint  z, uint  w) => VertexAttribI4uiPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribI4uiEXT(uint  index, uint  x, uint  y, uint  z, uint  w) => VertexAttribI4uiEXTPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribI4uiv(uint  index, uint[]  v) => VertexAttribI4uivPtr?.Invoke(index, v);
        public static void VertexAttribI4uivEXT(uint  index, uint[]  v) => VertexAttribI4uivEXTPtr?.Invoke(index, v);
        public static void VertexAttribI4usv(uint  index, ushort[]  v) => VertexAttribI4usvPtr?.Invoke(index, v);
        public static void VertexAttribI4usvEXT(uint  index, ushort[]  v) => VertexAttribI4usvEXTPtr?.Invoke(index, v);
        public static void VertexAttribIFormat(uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => VertexAttribIFormatPtr?.Invoke(attribindex, size, type, relativeoffset);
        public static void VertexAttribIFormatNV(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride) => VertexAttribIFormatNVPtr?.Invoke(index, size, type, stride);
        public static void VertexAttribIPointer(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer) => VertexAttribIPointerPtr?.Invoke(index, size, type, stride, pointer);
        public static void VertexAttribIPointerEXT(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer) => VertexAttribIPointerEXTPtr?.Invoke(index, size, type, stride, pointer);
        public static void VertexAttribL1d(uint  index, double  x) => VertexAttribL1dPtr?.Invoke(index, x);
        public static void VertexAttribL1dEXT(uint  index, double  x) => VertexAttribL1dEXTPtr?.Invoke(index, x);
        public static void VertexAttribL1dv(uint  index, double[]  v) => VertexAttribL1dvPtr?.Invoke(index, v);
        public static void VertexAttribL1dvEXT(uint  index, double[]  v) => VertexAttribL1dvEXTPtr?.Invoke(index, v);
        public static void VertexAttribL1i64NV(uint  index, long  x) => VertexAttribL1i64NVPtr?.Invoke(index, x);
        public static void VertexAttribL1i64vNV(uint  index, long[]  v) => VertexAttribL1i64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL1ui64ARB(uint  index, ulong  x) => VertexAttribL1ui64ARBPtr?.Invoke(index, x);
        public static void VertexAttribL1ui64NV(uint  index, ulong  x) => VertexAttribL1ui64NVPtr?.Invoke(index, x);
        public static void VertexAttribL1ui64vARB(uint  index, ulong[]  v) => VertexAttribL1ui64vARBPtr?.Invoke(index, v);
        public static void VertexAttribL1ui64vNV(uint  index, ulong[]  v) => VertexAttribL1ui64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL2d(uint  index, double  x, double  y) => VertexAttribL2dPtr?.Invoke(index, x, y);
        public static void VertexAttribL2dEXT(uint  index, double  x, double  y) => VertexAttribL2dEXTPtr?.Invoke(index, x, y);
        public static void VertexAttribL2dv(uint  index, double[]  v) => VertexAttribL2dvPtr?.Invoke(index, v);
        public static void VertexAttribL2dvEXT(uint  index, double[]  v) => VertexAttribL2dvEXTPtr?.Invoke(index, v);
        public static void VertexAttribL2i64NV(uint  index, long  x, long  y) => VertexAttribL2i64NVPtr?.Invoke(index, x, y);
        public static void VertexAttribL2i64vNV(uint  index, long[]  v) => VertexAttribL2i64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL2ui64NV(uint  index, ulong  x, ulong  y) => VertexAttribL2ui64NVPtr?.Invoke(index, x, y);
        public static void VertexAttribL2ui64vNV(uint  index, ulong[]  v) => VertexAttribL2ui64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL3d(uint  index, double  x, double  y, double  z) => VertexAttribL3dPtr?.Invoke(index, x, y, z);
        public static void VertexAttribL3dEXT(uint  index, double  x, double  y, double  z) => VertexAttribL3dEXTPtr?.Invoke(index, x, y, z);
        public static void VertexAttribL3dv(uint  index, double[]  v) => VertexAttribL3dvPtr?.Invoke(index, v);
        public static void VertexAttribL3dvEXT(uint  index, double[]  v) => VertexAttribL3dvEXTPtr?.Invoke(index, v);
        public static void VertexAttribL3i64NV(uint  index, long  x, long  y, long  z) => VertexAttribL3i64NVPtr?.Invoke(index, x, y, z);
        public static void VertexAttribL3i64vNV(uint  index, long[]  v) => VertexAttribL3i64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL3ui64NV(uint  index, ulong  x, ulong  y, ulong  z) => VertexAttribL3ui64NVPtr?.Invoke(index, x, y, z);
        public static void VertexAttribL3ui64vNV(uint  index, ulong[]  v) => VertexAttribL3ui64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL4d(uint  index, double  x, double  y, double  z, double  w) => VertexAttribL4dPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribL4dEXT(uint  index, double  x, double  y, double  z, double  w) => VertexAttribL4dEXTPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribL4dv(uint  index, double[]  v) => VertexAttribL4dvPtr?.Invoke(index, v);
        public static void VertexAttribL4dvEXT(uint  index, double[]  v) => VertexAttribL4dvEXTPtr?.Invoke(index, v);
        public static void VertexAttribL4i64NV(uint  index, long  x, long  y, long  z, long  w) => VertexAttribL4i64NVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribL4i64vNV(uint  index, long[]  v) => VertexAttribL4i64vNVPtr?.Invoke(index, v);
        public static void VertexAttribL4ui64NV(uint  index, ulong  x, ulong  y, ulong  z, ulong  w) => VertexAttribL4ui64NVPtr?.Invoke(index, x, y, z, w);
        public static void VertexAttribL4ui64vNV(uint  index, ulong[]  v) => VertexAttribL4ui64vNVPtr?.Invoke(index, v);
        public static void VertexAttribLFormat(uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => VertexAttribLFormatPtr?.Invoke(attribindex, size, type, relativeoffset);
        public static void VertexAttribLFormatNV(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride) => VertexAttribLFormatNVPtr?.Invoke(index, size, type, stride);
        public static void VertexAttribLPointer(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer) => VertexAttribLPointerPtr?.Invoke(index, size, type, stride, pointer);
        public static void VertexAttribLPointerEXT(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer) => VertexAttribLPointerEXTPtr?.Invoke(index, size, type, stride, pointer);
        public static void VertexAttribP1ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => VertexAttribP1uiPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP1uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => VertexAttribP1uivPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP2ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => VertexAttribP2uiPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP2uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => VertexAttribP2uivPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP3ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => VertexAttribP3uiPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP3uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => VertexAttribP3uivPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP4ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => VertexAttribP4uiPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribP4uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => VertexAttribP4uivPtr?.Invoke(index, type, normalized, value);
        public static void VertexAttribParameteriAMD(uint  index, uint  pname, int  param) => VertexAttribParameteriAMDPtr?.Invoke(index, pname, param);
        public static void VertexAttribPointer(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer) => VertexAttribPointerPtr?.Invoke(index, size, type, normalized, stride, pointer);
        public static void VertexAttribPointerARB(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer) => VertexAttribPointerARBPtr?.Invoke(index, size, type, normalized, stride, pointer);
        public static void VertexAttribPointerNV(uint  index, int  fsize, uint /*VertexAttribEnumNV*/  type, uint  stride, IntPtr  pointer) => VertexAttribPointerNVPtr?.Invoke(index, fsize, type, stride, pointer);
        public static void VertexAttribs1dvNV(uint  index, uint  count, double[]  v) => VertexAttribs1dvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs1fvNV(uint  index, uint  count, float[]  v) => VertexAttribs1fvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs1hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => VertexAttribs1hvNVPtr?.Invoke(index, n, v);
        public static void VertexAttribs1svNV(uint  index, uint  count, short[]  v) => VertexAttribs1svNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs2dvNV(uint  index, uint  count, double[]  v) => VertexAttribs2dvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs2fvNV(uint  index, uint  count, float[]  v) => VertexAttribs2fvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs2hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => VertexAttribs2hvNVPtr?.Invoke(index, n, v);
        public static void VertexAttribs2svNV(uint  index, uint  count, short[]  v) => VertexAttribs2svNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs3dvNV(uint  index, uint  count, double[]  v) => VertexAttribs3dvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs3fvNV(uint  index, uint  count, float[]  v) => VertexAttribs3fvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs3hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => VertexAttribs3hvNVPtr?.Invoke(index, n, v);
        public static void VertexAttribs3svNV(uint  index, uint  count, short[]  v) => VertexAttribs3svNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs4dvNV(uint  index, uint  count, double[]  v) => VertexAttribs4dvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs4fvNV(uint  index, uint  count, float[]  v) => VertexAttribs4fvNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs4hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => VertexAttribs4hvNVPtr?.Invoke(index, n, v);
        public static void VertexAttribs4svNV(uint  index, uint  count, short[]  v) => VertexAttribs4svNVPtr?.Invoke(index, count, v);
        public static void VertexAttribs4ubvNV(uint  index, uint  count, byte[] /*ColorUB*/  v) => VertexAttribs4ubvNVPtr?.Invoke(index, count, v);
        public static void VertexBindingDivisor(uint  bindingindex, uint  divisor) => VertexBindingDivisorPtr?.Invoke(bindingindex, divisor);
        public static void VertexBlendARB(int  count) => VertexBlendARBPtr?.Invoke(count);
        public static void VertexBlendEnvfATI(uint /*VertexStreamATI*/  pname, float  param) => VertexBlendEnvfATIPtr?.Invoke(pname, param);
        public static void VertexBlendEnviATI(uint /*VertexStreamATI*/  pname, int  param) => VertexBlendEnviATIPtr?.Invoke(pname, param);
        public static void VertexFormatNV(int  size, uint /*VertexPointerType*/  type, uint  stride) => VertexFormatNVPtr?.Invoke(size, type, stride);
        public static void VertexP2ui(uint /*VertexPointerType*/  type, uint  value) => VertexP2uiPtr?.Invoke(type, value);
        public static void VertexP2uiv(uint /*VertexPointerType*/  type, uint[]  value) => VertexP2uivPtr?.Invoke(type, value);
        public static void VertexP3ui(uint /*VertexPointerType*/  type, uint  value) => VertexP3uiPtr?.Invoke(type, value);
        public static void VertexP3uiv(uint /*VertexPointerType*/  type, uint[]  value) => VertexP3uivPtr?.Invoke(type, value);
        public static void VertexP4ui(uint /*VertexPointerType*/  type, uint  value) => VertexP4uiPtr?.Invoke(type, value);
        public static void VertexP4uiv(uint /*VertexPointerType*/  type, uint[]  value) => VertexP4uivPtr?.Invoke(type, value);
        public static void VertexPointer(int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  pointer) => VertexPointerPtr?.Invoke(size, type, stride, pointer);
        public static void VertexPointerEXT(int  size, uint /*VertexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => VertexPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        public static void VertexPointerListIBM(int  size, uint /*VertexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => VertexPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        public static void VertexPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => VertexPointervINTELPtr?.Invoke(size, type, pointer);
        public static void VertexStream1dATI(uint /*VertexStreamATI*/  stream, double  x) => VertexStream1dATIPtr?.Invoke(stream, x);
        public static void VertexStream1dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => VertexStream1dvATIPtr?.Invoke(stream, coords);
        public static void VertexStream1fATI(uint /*VertexStreamATI*/  stream, float  x) => VertexStream1fATIPtr?.Invoke(stream, x);
        public static void VertexStream1fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => VertexStream1fvATIPtr?.Invoke(stream, coords);
        public static void VertexStream1iATI(uint /*VertexStreamATI*/  stream, int  x) => VertexStream1iATIPtr?.Invoke(stream, x);
        public static void VertexStream1ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => VertexStream1ivATIPtr?.Invoke(stream, coords);
        public static void VertexStream1sATI(uint /*VertexStreamATI*/  stream, short  x) => VertexStream1sATIPtr?.Invoke(stream, x);
        public static void VertexStream1svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => VertexStream1svATIPtr?.Invoke(stream, coords);
        public static void VertexStream2dATI(uint /*VertexStreamATI*/  stream, double  x, double  y) => VertexStream2dATIPtr?.Invoke(stream, x, y);
        public static void VertexStream2dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => VertexStream2dvATIPtr?.Invoke(stream, coords);
        public static void VertexStream2fATI(uint /*VertexStreamATI*/  stream, float  x, float  y) => VertexStream2fATIPtr?.Invoke(stream, x, y);
        public static void VertexStream2fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => VertexStream2fvATIPtr?.Invoke(stream, coords);
        public static void VertexStream2iATI(uint /*VertexStreamATI*/  stream, int  x, int  y) => VertexStream2iATIPtr?.Invoke(stream, x, y);
        public static void VertexStream2ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => VertexStream2ivATIPtr?.Invoke(stream, coords);
        public static void VertexStream2sATI(uint /*VertexStreamATI*/  stream, short  x, short  y) => VertexStream2sATIPtr?.Invoke(stream, x, y);
        public static void VertexStream2svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => VertexStream2svATIPtr?.Invoke(stream, coords);
        public static void VertexStream3dATI(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z) => VertexStream3dATIPtr?.Invoke(stream, x, y, z);
        public static void VertexStream3dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => VertexStream3dvATIPtr?.Invoke(stream, coords);
        public static void VertexStream3fATI(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z) => VertexStream3fATIPtr?.Invoke(stream, x, y, z);
        public static void VertexStream3fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => VertexStream3fvATIPtr?.Invoke(stream, coords);
        public static void VertexStream3iATI(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z) => VertexStream3iATIPtr?.Invoke(stream, x, y, z);
        public static void VertexStream3ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => VertexStream3ivATIPtr?.Invoke(stream, coords);
        public static void VertexStream3sATI(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z) => VertexStream3sATIPtr?.Invoke(stream, x, y, z);
        public static void VertexStream3svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => VertexStream3svATIPtr?.Invoke(stream, coords);
        public static void VertexStream4dATI(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z, double  w) => VertexStream4dATIPtr?.Invoke(stream, x, y, z, w);
        public static void VertexStream4dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => VertexStream4dvATIPtr?.Invoke(stream, coords);
        public static void VertexStream4fATI(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z, float  w) => VertexStream4fATIPtr?.Invoke(stream, x, y, z, w);
        public static void VertexStream4fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => VertexStream4fvATIPtr?.Invoke(stream, coords);
        public static void VertexStream4iATI(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z, int  w) => VertexStream4iATIPtr?.Invoke(stream, x, y, z, w);
        public static void VertexStream4ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => VertexStream4ivATIPtr?.Invoke(stream, coords);
        public static void VertexStream4sATI(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z, short  w) => VertexStream4sATIPtr?.Invoke(stream, x, y, z, w);
        public static void VertexStream4svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => VertexStream4svATIPtr?.Invoke(stream, coords);
        public static void VertexWeightPointerEXT(int  size, uint /*VertexWeightPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => VertexWeightPointerEXTPtr?.Invoke(size, type, stride, pointer);
        public static void VertexWeightfEXT(float  weight) => VertexWeightfEXTPtr?.Invoke(weight);
        public static void VertexWeightfvEXT(float[]  weight) => VertexWeightfvEXTPtr?.Invoke(weight);
        public static void VertexWeighthNV(ushort /*Half16NV*/  weight) => VertexWeighthNVPtr?.Invoke(weight);
        public static void VertexWeighthvNV(ushort[] /*Half16NV*/  weight) => VertexWeighthvNVPtr?.Invoke(weight);
        public static uint VideoCaptureNV(uint  video_capture_slot, uint[]  sequence_num, ulong[]  capture_time) => VideoCaptureNVPtr?.Invoke(video_capture_slot, sequence_num, capture_time) ?? default;
        public static void VideoCaptureStreamParameterdvNV(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters) => VideoCaptureStreamParameterdvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void VideoCaptureStreamParameterfvNV(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters) => VideoCaptureStreamParameterfvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void VideoCaptureStreamParameterivNV(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters) => VideoCaptureStreamParameterivNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        public static void Viewport(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => ViewportPtr?.Invoke(x, y, width, height);
        public static void ViewportArrayv(uint  first, uint  count, float[]  v) => ViewportArrayvPtr?.Invoke(first, count, v);
        public static void ViewportArrayvNV(uint  first, uint  count, float[]  v) => ViewportArrayvNVPtr?.Invoke(first, count, v);
        public static void ViewportArrayvOES(uint  first, uint  count, float[]  v) => ViewportArrayvOESPtr?.Invoke(first, count, v);
        public static void ViewportIndexedf(uint  index, float  x, float  y, float  w, float  h) => ViewportIndexedfPtr?.Invoke(index, x, y, w, h);
        public static void ViewportIndexedfOES(uint  index, float  x, float  y, float  w, float  h) => ViewportIndexedfOESPtr?.Invoke(index, x, y, w, h);
        public static void ViewportIndexedfNV(uint  index, float  x, float  y, float  w, float  h) => ViewportIndexedfNVPtr?.Invoke(index, x, y, w, h);
        public static void ViewportIndexedfv(uint  index, float[]  v) => ViewportIndexedfvPtr?.Invoke(index, v);
        public static void ViewportIndexedfvOES(uint  index, float[]  v) => ViewportIndexedfvOESPtr?.Invoke(index, v);
        public static void ViewportIndexedfvNV(uint  index, float[]  v) => ViewportIndexedfvNVPtr?.Invoke(index, v);
        public static void ViewportPositionWScaleNV(uint  index, float  xcoeff, float  ycoeff) => ViewportPositionWScaleNVPtr?.Invoke(index, xcoeff, ycoeff);
        public static void ViewportSwizzleNV(uint  index, uint  swizzlex, uint  swizzley, uint  swizzlez, uint  swizzlew) => ViewportSwizzleNVPtr?.Invoke(index, swizzlex, swizzley, swizzlez, swizzlew);
        public static void WaitSemaphoreEXT(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  srcLayouts) => WaitSemaphoreEXTPtr?.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        public static void WaitSemaphoreui64NVX(uint  waitGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => WaitSemaphoreui64NVXPtr?.Invoke(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        public static void WaitSync(IntPtr /*sync*/  sync, uint  flags, ulong  timeout) => WaitSyncPtr?.Invoke(sync, flags, timeout);
        public static void WaitSyncAPPLE(IntPtr  sync, uint  flags, ulong  timeout) => WaitSyncAPPLEPtr?.Invoke(sync, flags, timeout);
        public static void WeightPathsNV(uint /*Path*/  resultPath, uint  numPaths, uint[] /*Path*/  paths, float[]  weights) => WeightPathsNVPtr?.Invoke(resultPath, numPaths, paths, weights);
        public static void WeightPointerARB(int  size, uint /*WeightPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => WeightPointerARBPtr?.Invoke(size, type, stride, pointer);
        public static void WeightPointerOES(int  size, uint  type, uint  stride, IntPtr  pointer) => WeightPointerOESPtr?.Invoke(size, type, stride, pointer);
        public static void WeightbvARB(int  size, sbyte[]  weights) => WeightbvARBPtr?.Invoke(size, weights);
        public static void WeightdvARB(int  size, double[]  weights) => WeightdvARBPtr?.Invoke(size, weights);
        public static void WeightfvARB(int  size, float[]  weights) => WeightfvARBPtr?.Invoke(size, weights);
        public static void WeightivARB(int  size, int[]  weights) => WeightivARBPtr?.Invoke(size, weights);
        public static void WeightsvARB(int  size, short[]  weights) => WeightsvARBPtr?.Invoke(size, weights);
        public static void WeightubvARB(int  size, byte[]  weights) => WeightubvARBPtr?.Invoke(size, weights);
        public static void WeightuivARB(int  size, uint[]  weights) => WeightuivARBPtr?.Invoke(size, weights);
        public static void WeightusvARB(int  size, ushort[]  weights) => WeightusvARBPtr?.Invoke(size, weights);
        public static void WindowPos2d(double /*CoordD*/  x, double /*CoordD*/  y) => WindowPos2dPtr?.Invoke(x, y);
        public static void WindowPos2dARB(double /*CoordD*/  x, double /*CoordD*/  y) => WindowPos2dARBPtr?.Invoke(x, y);
        public static void WindowPos2dMESA(double /*CoordD*/  x, double /*CoordD*/  y) => WindowPos2dMESAPtr?.Invoke(x, y);
        public static void WindowPos2dv(double[] /*CoordD*/  v) => WindowPos2dvPtr?.Invoke(v);
        public static void WindowPos2dvARB(double[] /*CoordD*/  v) => WindowPos2dvARBPtr?.Invoke(v);
        public static void WindowPos2dvMESA(double[] /*CoordD*/  v) => WindowPos2dvMESAPtr?.Invoke(v);
        public static void WindowPos2f(float /*CoordF*/  x, float /*CoordF*/  y) => WindowPos2fPtr?.Invoke(x, y);
        public static void WindowPos2fARB(float /*CoordF*/  x, float /*CoordF*/  y) => WindowPos2fARBPtr?.Invoke(x, y);
        public static void WindowPos2fMESA(float /*CoordF*/  x, float /*CoordF*/  y) => WindowPos2fMESAPtr?.Invoke(x, y);
        public static void WindowPos2fv(float[] /*CoordF*/  v) => WindowPos2fvPtr?.Invoke(v);
        public static void WindowPos2fvARB(float[] /*CoordF*/  v) => WindowPos2fvARBPtr?.Invoke(v);
        public static void WindowPos2fvMESA(float[] /*CoordF*/  v) => WindowPos2fvMESAPtr?.Invoke(v);
        public static void WindowPos2i(int /*CoordI*/  x, int /*CoordI*/  y) => WindowPos2iPtr?.Invoke(x, y);
        public static void WindowPos2iARB(int /*CoordI*/  x, int /*CoordI*/  y) => WindowPos2iARBPtr?.Invoke(x, y);
        public static void WindowPos2iMESA(int /*CoordI*/  x, int /*CoordI*/  y) => WindowPos2iMESAPtr?.Invoke(x, y);
        public static void WindowPos2iv(int[] /*CoordI*/  v) => WindowPos2ivPtr?.Invoke(v);
        public static void WindowPos2ivARB(int[] /*CoordI*/  v) => WindowPos2ivARBPtr?.Invoke(v);
        public static void WindowPos2ivMESA(int[] /*CoordI*/  v) => WindowPos2ivMESAPtr?.Invoke(v);
        public static void WindowPos2s(short /*CoordS*/  x, short /*CoordS*/  y) => WindowPos2sPtr?.Invoke(x, y);
        public static void WindowPos2sARB(short /*CoordS*/  x, short /*CoordS*/  y) => WindowPos2sARBPtr?.Invoke(x, y);
        public static void WindowPos2sMESA(short /*CoordS*/  x, short /*CoordS*/  y) => WindowPos2sMESAPtr?.Invoke(x, y);
        public static void WindowPos2sv(short[] /*CoordS*/  v) => WindowPos2svPtr?.Invoke(v);
        public static void WindowPos2svARB(short[] /*CoordS*/  v) => WindowPos2svARBPtr?.Invoke(v);
        public static void WindowPos2svMESA(short[] /*CoordS*/  v) => WindowPos2svMESAPtr?.Invoke(v);
        public static void WindowPos3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => WindowPos3dPtr?.Invoke(x, y, z);
        public static void WindowPos3dARB(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => WindowPos3dARBPtr?.Invoke(x, y, z);
        public static void WindowPos3dMESA(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => WindowPos3dMESAPtr?.Invoke(x, y, z);
        public static void WindowPos3dv(double[] /*CoordD*/  v) => WindowPos3dvPtr?.Invoke(v);
        public static void WindowPos3dvARB(double[] /*CoordD*/  v) => WindowPos3dvARBPtr?.Invoke(v);
        public static void WindowPos3dvMESA(double[] /*CoordD*/  v) => WindowPos3dvMESAPtr?.Invoke(v);
        public static void WindowPos3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => WindowPos3fPtr?.Invoke(x, y, z);
        public static void WindowPos3fARB(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => WindowPos3fARBPtr?.Invoke(x, y, z);
        public static void WindowPos3fMESA(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => WindowPos3fMESAPtr?.Invoke(x, y, z);
        public static void WindowPos3fv(float[] /*CoordF*/  v) => WindowPos3fvPtr?.Invoke(v);
        public static void WindowPos3fvARB(float[] /*CoordF*/  v) => WindowPos3fvARBPtr?.Invoke(v);
        public static void WindowPos3fvMESA(float[] /*CoordF*/  v) => WindowPos3fvMESAPtr?.Invoke(v);
        public static void WindowPos3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => WindowPos3iPtr?.Invoke(x, y, z);
        public static void WindowPos3iARB(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => WindowPos3iARBPtr?.Invoke(x, y, z);
        public static void WindowPos3iMESA(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => WindowPos3iMESAPtr?.Invoke(x, y, z);
        public static void WindowPos3iv(int[] /*CoordI*/  v) => WindowPos3ivPtr?.Invoke(v);
        public static void WindowPos3ivARB(int[] /*CoordI*/  v) => WindowPos3ivARBPtr?.Invoke(v);
        public static void WindowPos3ivMESA(int[] /*CoordI*/  v) => WindowPos3ivMESAPtr?.Invoke(v);
        public static void WindowPos3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => WindowPos3sPtr?.Invoke(x, y, z);
        public static void WindowPos3sARB(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => WindowPos3sARBPtr?.Invoke(x, y, z);
        public static void WindowPos3sMESA(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => WindowPos3sMESAPtr?.Invoke(x, y, z);
        public static void WindowPos3sv(short[] /*CoordS*/  v) => WindowPos3svPtr?.Invoke(v);
        public static void WindowPos3svARB(short[] /*CoordS*/  v) => WindowPos3svARBPtr?.Invoke(v);
        public static void WindowPos3svMESA(short[] /*CoordS*/  v) => WindowPos3svMESAPtr?.Invoke(v);
        public static void WindowPos4dMESA(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => WindowPos4dMESAPtr?.Invoke(x, y, z, w);
        public static void WindowPos4dvMESA(double[] /*CoordD*/  v) => WindowPos4dvMESAPtr?.Invoke(v);
        public static void WindowPos4fMESA(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => WindowPos4fMESAPtr?.Invoke(x, y, z, w);
        public static void WindowPos4fvMESA(float[] /*CoordF*/  v) => WindowPos4fvMESAPtr?.Invoke(v);
        public static void WindowPos4iMESA(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => WindowPos4iMESAPtr?.Invoke(x, y, z, w);
        public static void WindowPos4ivMESA(int[] /*CoordI*/  v) => WindowPos4ivMESAPtr?.Invoke(v);
        public static void WindowPos4sMESA(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => WindowPos4sMESAPtr?.Invoke(x, y, z, w);
        public static void WindowPos4svMESA(short[] /*CoordS*/  v) => WindowPos4svMESAPtr?.Invoke(v);
        public static void WindowRectanglesEXT(uint  mode, uint  count, int[]  box) => WindowRectanglesEXTPtr?.Invoke(mode, count, box);
        public static void WriteMaskEXT(uint  res, uint  inp, uint /*VertexShaderWriteMaskEXT*/  outX, uint /*VertexShaderWriteMaskEXT*/  outY, uint /*VertexShaderWriteMaskEXT*/  outZ, uint /*VertexShaderWriteMaskEXT*/  outW) => WriteMaskEXTPtr?.Invoke(res, inp, outX, outY, outZ, outW);
        public static void DrawVkImageNV(ulong  vkImage, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1) => DrawVkImageNVPtr?.Invoke(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        public static IntPtr /*GLVULKANPROCNV*/ GetVkProcAddrNV(string  name) => GetVkProcAddrNVPtr?.Invoke(name) ?? default;
        public static void WaitVkSemaphoreNV(ulong  vkSemaphore) => WaitVkSemaphoreNVPtr?.Invoke(vkSemaphore);
        public static void SignalVkSemaphoreNV(ulong  vkSemaphore) => SignalVkSemaphoreNVPtr?.Invoke(vkSemaphore);
        public static void SignalVkFenceNV(ulong  vkFence) => SignalVkFenceNVPtr?.Invoke(vkFence);
        public static void FramebufferParameteriMESA(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param) => FramebufferParameteriMESAPtr?.Invoke(target, pname, param);
        public static void GetFramebufferParameterivMESA(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => GetFramebufferParameterivMESAPtr?.Invoke(target, pname, parameters);

    }
}
