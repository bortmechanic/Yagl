/*
 This source file is a part of the project YAGL.
 Copyright (c) 2020 Pavel Melnikov.
 Distributed under the MIT License (http://opensource.org/licenses/MIT).
 See LICENSE.txt for the full license text.
*/

// ReSharper disable UnusedMember.Global
// ReSharper disable InconsistentNaming
// ReSharper disable IdentifierTypo
// ReSharper disable StringLiteralTypo
// ReSharper disable ArrangeTypeMemberModifiers
// ReSharper disable ConstantNullCoalescingCondition

using System;

namespace Yagl.Graphics
{
    public static partial class GL
    {

        // typedef void GLvoid;

        public const /*GLbitfield*/ uint DEPTH_BUFFER_BIT = 0x00000100;
        public const /*GLbitfield*/ uint STENCIL_BUFFER_BIT = 0x00000400;
        public const /*GLbitfield*/ uint COLOR_BUFFER_BIT = 0x00004000;
        public const /*GLubyte*/ byte FALSE = 0;
        public const /*GLubyte*/ byte TRUE = 1;
        public const /*GLenum*/ uint POINTS = 0x0000;
        public const /*GLenum*/ uint LINES = 0x0001;
        public const /*GLenum*/ uint LINE_LOOP = 0x0002;
        public const /*GLenum*/ uint LINE_STRIP = 0x0003;
        public const /*GLenum*/ uint TRIANGLES = 0x0004;
        public const /*GLenum*/ uint TRIANGLE_STRIP = 0x0005;
        public const /*GLenum*/ uint TRIANGLE_FAN = 0x0006;
        public const /*GLenum*/ uint QUADS = 0x0007;
        public const /*GLenum*/ uint NEVER = 0x0200;
        public const /*GLenum*/ uint LESS = 0x0201;
        public const /*GLenum*/ uint EQUAL = 0x0202;
        public const /*GLenum*/ uint LEQUAL = 0x0203;
        public const /*GLenum*/ uint GREATER = 0x0204;
        public const /*GLenum*/ uint NOTEQUAL = 0x0205;
        public const /*GLenum*/ uint GEQUAL = 0x0206;
        public const /*GLenum*/ uint ALWAYS = 0x0207;
        public const /*GLenum*/ uint ZERO = 0;
        public const /*GLenum*/ uint ONE = 1;
        public const /*GLenum*/ uint SRC_COLOR = 0x0300;
        public const /*GLenum*/ uint ONE_MINUS_SRC_COLOR = 0x0301;
        public const /*GLenum*/ uint SRC_ALPHA = 0x0302;
        public const /*GLenum*/ uint ONE_MINUS_SRC_ALPHA = 0x0303;
        public const /*GLenum*/ uint DST_ALPHA = 0x0304;
        public const /*GLenum*/ uint ONE_MINUS_DST_ALPHA = 0x0305;
        public const /*GLenum*/ uint DST_COLOR = 0x0306;
        public const /*GLenum*/ uint ONE_MINUS_DST_COLOR = 0x0307;
        public const /*GLenum*/ uint SRC_ALPHA_SATURATE = 0x0308;
        public const /*GLenum*/ uint NONE = 0;
        public const /*GLenum*/ uint FRONT_LEFT = 0x0400;
        public const /*GLenum*/ uint FRONT_RIGHT = 0x0401;
        public const /*GLenum*/ uint BACK_LEFT = 0x0402;
        public const /*GLenum*/ uint BACK_RIGHT = 0x0403;
        public const /*GLenum*/ uint FRONT = 0x0404;
        public const /*GLenum*/ uint BACK = 0x0405;
        public const /*GLenum*/ uint LEFT = 0x0406;
        public const /*GLenum*/ uint RIGHT = 0x0407;
        public const /*GLenum*/ uint FRONT_AND_BACK = 0x0408;
        public const /*GLenum*/ uint NO_ERROR = 0;
        public const /*GLenum*/ uint INVALID_ENUM = 0x0500;
        public const /*GLenum*/ uint INVALID_VALUE = 0x0501;
        public const /*GLenum*/ uint INVALID_OPERATION = 0x0502;
        public const /*GLenum*/ uint OUT_OF_MEMORY = 0x0505;
        public const /*GLenum*/ uint CW = 0x0900;
        public const /*GLenum*/ uint CCW = 0x0901;
        public const /*GLenum*/ uint POINT_SIZE = 0x0B11;
        public const /*GLenum*/ uint POINT_SIZE_RANGE = 0x0B12;
        public const /*GLenum*/ uint POINT_SIZE_GRANULARITY = 0x0B13;
        public const /*GLenum*/ uint LINE_SMOOTH = 0x0B20;
        public const /*GLenum*/ uint LINE_WIDTH = 0x0B21;
        public const /*GLenum*/ uint LINE_WIDTH_RANGE = 0x0B22;
        public const /*GLenum*/ uint LINE_WIDTH_GRANULARITY = 0x0B23;
        public const /*GLenum*/ uint POLYGON_MODE = 0x0B40;
        public const /*GLenum*/ uint POLYGON_SMOOTH = 0x0B41;
        public const /*GLenum*/ uint CULL_FACE = 0x0B44;
        public const /*GLenum*/ uint CULL_FACE_MODE = 0x0B45;
        public const /*GLenum*/ uint FRONT_FACE = 0x0B46;
        public const /*GLenum*/ uint DEPTH_RANGE = 0x0B70;
        public const /*GLenum*/ uint DEPTH_TEST = 0x0B71;
        public const /*GLenum*/ uint DEPTH_WRITEMASK = 0x0B72;
        public const /*GLenum*/ uint DEPTH_CLEAR_VALUE = 0x0B73;
        public const /*GLenum*/ uint DEPTH_FUNC = 0x0B74;
        public const /*GLenum*/ uint STENCIL_TEST = 0x0B90;
        public const /*GLenum*/ uint STENCIL_CLEAR_VALUE = 0x0B91;
        public const /*GLenum*/ uint STENCIL_FUNC = 0x0B92;
        public const /*GLenum*/ uint STENCIL_VALUE_MASK = 0x0B93;
        public const /*GLenum*/ uint STENCIL_FAIL = 0x0B94;
        public const /*GLenum*/ uint STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public const /*GLenum*/ uint STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public const /*GLenum*/ uint STENCIL_REF = 0x0B97;
        public const /*GLenum*/ uint STENCIL_WRITEMASK = 0x0B98;
        public const /*GLenum*/ uint VIEWPORT = 0x0BA2;
        public const /*GLenum*/ uint DITHER = 0x0BD0;
        public const /*GLenum*/ uint BLEND_DST = 0x0BE0;
        public const /*GLenum*/ uint BLEND_SRC = 0x0BE1;
        public const /*GLenum*/ uint BLEND = 0x0BE2;
        public const /*GLenum*/ uint LOGIC_OP_MODE = 0x0BF0;
        public const /*GLenum*/ uint DRAW_BUFFER = 0x0C01;
        public const /*GLenum*/ uint READ_BUFFER = 0x0C02;
        public const /*GLenum*/ uint SCISSOR_BOX = 0x0C10;
        public const /*GLenum*/ uint SCISSOR_TEST = 0x0C11;
        public const /*GLenum*/ uint COLOR_CLEAR_VALUE = 0x0C22;
        public const /*GLenum*/ uint COLOR_WRITEMASK = 0x0C23;
        public const /*GLenum*/ uint DOUBLEBUFFER = 0x0C32;
        public const /*GLenum*/ uint STEREO = 0x0C33;
        public const /*GLenum*/ uint LINE_SMOOTH_HINT = 0x0C52;
        public const /*GLenum*/ uint POLYGON_SMOOTH_HINT = 0x0C53;
        public const /*GLenum*/ uint UNPACK_SWAP_BYTES = 0x0CF0;
        public const /*GLenum*/ uint UNPACK_LSB_FIRST = 0x0CF1;
        public const /*GLenum*/ uint UNPACK_ROW_LENGTH = 0x0CF2;
        public const /*GLenum*/ uint UNPACK_SKIP_ROWS = 0x0CF3;
        public const /*GLenum*/ uint UNPACK_SKIP_PIXELS = 0x0CF4;
        public const /*GLenum*/ uint UNPACK_ALIGNMENT = 0x0CF5;
        public const /*GLenum*/ uint PACK_SWAP_BYTES = 0x0D00;
        public const /*GLenum*/ uint PACK_LSB_FIRST = 0x0D01;
        public const /*GLenum*/ uint PACK_ROW_LENGTH = 0x0D02;
        public const /*GLenum*/ uint PACK_SKIP_ROWS = 0x0D03;
        public const /*GLenum*/ uint PACK_SKIP_PIXELS = 0x0D04;
        public const /*GLenum*/ uint PACK_ALIGNMENT = 0x0D05;
        public const /*GLenum*/ uint MAX_TEXTURE_SIZE = 0x0D33;
        public const /*GLenum*/ uint MAX_VIEWPORT_DIMS = 0x0D3A;
        public const /*GLenum*/ uint SUBPIXEL_BITS = 0x0D50;
        public const /*GLenum*/ uint TEXTURE_1D = 0x0DE0;
        public const /*GLenum*/ uint TEXTURE_2D = 0x0DE1;
        public const /*GLenum*/ uint TEXTURE_WIDTH = 0x1000;
        public const /*GLenum*/ uint TEXTURE_HEIGHT = 0x1001;
        public const /*GLenum*/ uint TEXTURE_BORDER_COLOR = 0x1004;
        public const /*GLenum*/ uint DONT_CARE = 0x1100;
        public const /*GLenum*/ uint FASTEST = 0x1101;
        public const /*GLenum*/ uint NICEST = 0x1102;
        public const /*GLenum*/ uint BYTE = 0x1400;
        public const /*GLenum*/ uint UNSIGNED_BYTE = 0x1401;
        public const /*GLenum*/ uint SHORT = 0x1402;
        public const /*GLenum*/ uint UNSIGNED_SHORT = 0x1403;
        public const /*GLenum*/ uint INT = 0x1404;
        public const /*GLenum*/ uint UNSIGNED_INT = 0x1405;
        public const /*GLenum*/ uint FLOAT = 0x1406;
        public const /*GLenum*/ uint STACK_OVERFLOW = 0x0503;
        public const /*GLenum*/ uint STACK_UNDERFLOW = 0x0504;
        public const /*GLenum*/ uint CLEAR = 0x1500;
        public const /*GLenum*/ uint AND = 0x1501;
        public const /*GLenum*/ uint AND_REVERSE = 0x1502;
        public const /*GLenum*/ uint COPY = 0x1503;
        public const /*GLenum*/ uint AND_INVERTED = 0x1504;
        public const /*GLenum*/ uint NOOP = 0x1505;
        public const /*GLenum*/ uint XOR = 0x1506;
        public const /*GLenum*/ uint OR = 0x1507;
        public const /*GLenum*/ uint NOR = 0x1508;
        public const /*GLenum*/ uint EQUIV = 0x1509;
        public const /*GLenum*/ uint INVERT = 0x150A;
        public const /*GLenum*/ uint OR_REVERSE = 0x150B;
        public const /*GLenum*/ uint COPY_INVERTED = 0x150C;
        public const /*GLenum*/ uint OR_INVERTED = 0x150D;
        public const /*GLenum*/ uint NAND = 0x150E;
        public const /*GLenum*/ uint SET = 0x150F;
        public const /*GLenum*/ uint TEXTURE = 0x1702;
        public const /*GLenum*/ uint COLOR = 0x1800;
        public const /*GLenum*/ uint DEPTH = 0x1801;
        public const /*GLenum*/ uint STENCIL = 0x1802;
        public const /*GLenum*/ uint STENCIL_INDEX = 0x1901;
        public const /*GLenum*/ uint DEPTH_COMPONENT = 0x1902;
        public const /*GLenum*/ uint RED = 0x1903;
        public const /*GLenum*/ uint GREEN = 0x1904;
        public const /*GLenum*/ uint BLUE = 0x1905;
        public const /*GLenum*/ uint ALPHA = 0x1906;
        public const /*GLenum*/ uint RGB = 0x1907;
        public const /*GLenum*/ uint RGBA = 0x1908;
        public const /*GLenum*/ uint POINT = 0x1B00;
        public const /*GLenum*/ uint LINE = 0x1B01;
        public const /*GLenum*/ uint FILL = 0x1B02;
        public const /*GLenum*/ uint KEEP = 0x1E00;
        public const /*GLenum*/ uint REPLACE = 0x1E01;
        public const /*GLenum*/ uint INCR = 0x1E02;
        public const /*GLenum*/ uint DECR = 0x1E03;
        public const /*GLenum*/ uint VENDOR = 0x1F00;
        public const /*GLenum*/ uint RENDERER = 0x1F01;
        public const /*GLenum*/ uint VERSION = 0x1F02;
        public const /*GLenum*/ uint EXTENSIONS = 0x1F03;
        public const /*GLenum*/ uint NEAREST = 0x2600;
        public const /*GLenum*/ uint LINEAR = 0x2601;
        public const /*GLenum*/ uint NEAREST_MIPMAP_NEAREST = 0x2700;
        public const /*GLenum*/ uint LINEAR_MIPMAP_NEAREST = 0x2701;
        public const /*GLenum*/ uint NEAREST_MIPMAP_LINEAR = 0x2702;
        public const /*GLenum*/ uint LINEAR_MIPMAP_LINEAR = 0x2703;
        public const /*GLenum*/ uint TEXTURE_MAG_FILTER = 0x2800;
        public const /*GLenum*/ uint TEXTURE_MIN_FILTER = 0x2801;
        public const /*GLenum*/ uint TEXTURE_WRAP_S = 0x2802;
        public const /*GLenum*/ uint TEXTURE_WRAP_T = 0x2803;
        public const /*GLenum*/ uint REPEAT = 0x2901;
        public const /*GLbitfield*/ uint CURRENT_BIT = 0x00000001;
        public const /*GLbitfield*/ uint POINT_BIT = 0x00000002;
        public const /*GLbitfield*/ uint LINE_BIT = 0x00000004;
        public const /*GLbitfield*/ uint POLYGON_BIT = 0x00000008;
        public const /*GLbitfield*/ uint POLYGON_STIPPLE_BIT = 0x00000010;
        public const /*GLbitfield*/ uint PIXEL_MODE_BIT = 0x00000020;
        public const /*GLbitfield*/ uint LIGHTING_BIT = 0x00000040;
        public const /*GLbitfield*/ uint FOG_BIT = 0x00000080;
        public const /*GLbitfield*/ uint ACCUM_BUFFER_BIT = 0x00000200;
        public const /*GLbitfield*/ uint VIEWPORT_BIT = 0x00000800;
        public const /*GLbitfield*/ uint TRANSFORM_BIT = 0x00001000;
        public const /*GLbitfield*/ uint ENABLE_BIT = 0x00002000;
        public const /*GLbitfield*/ uint HINT_BIT = 0x00008000;
        public const /*GLbitfield*/ uint EVAL_BIT = 0x00010000;
        public const /*GLbitfield*/ uint LIST_BIT = 0x00020000;
        public const /*GLbitfield*/ uint TEXTURE_BIT = 0x00040000;
        public const /*GLbitfield*/ uint SCISSOR_BIT = 0x00080000;
        public const /*GLbitfield*/ uint ALL_ATTRIB_BITS = 0xFFFFFFFF;
        public const /*GLenum*/ uint QUAD_STRIP = 0x0008;
        public const /*GLenum*/ uint POLYGON = 0x0009;
        public const /*GLenum*/ uint ACCUM = 0x0100;
        public const /*GLenum*/ uint LOAD = 0x0101;
        public const /*GLenum*/ uint RETURN = 0x0102;
        public const /*GLenum*/ uint MULT = 0x0103;
        public const /*GLenum*/ uint ADD = 0x0104;
        public const /*GLenum*/ uint AUX0 = 0x0409;
        public const /*GLenum*/ uint AUX1 = 0x040A;
        public const /*GLenum*/ uint AUX2 = 0x040B;
        public const /*GLenum*/ uint AUX3 = 0x040C;
        public const /*GLenum*/ uint GL_2D = 0x0600;
        public const /*GLenum*/ uint GL_3D = 0x0601;
        public const /*GLenum*/ uint GL_3D_COLOR = 0x0602;
        public const /*GLenum*/ uint GL_3D_COLOR_TEXTURE = 0x0603;
        public const /*GLenum*/ uint GL_4D_COLOR_TEXTURE = 0x0604;
        public const /*GLenum*/ uint PASS_THROUGH_TOKEN = 0x0700;
        public const /*GLenum*/ uint POINT_TOKEN = 0x0701;
        public const /*GLenum*/ uint LINE_TOKEN = 0x0702;
        public const /*GLenum*/ uint POLYGON_TOKEN = 0x0703;
        public const /*GLenum*/ uint BITMAP_TOKEN = 0x0704;
        public const /*GLenum*/ uint DRAW_PIXEL_TOKEN = 0x0705;
        public const /*GLenum*/ uint COPY_PIXEL_TOKEN = 0x0706;
        public const /*GLenum*/ uint LINE_RESET_TOKEN = 0x0707;
        public const /*GLenum*/ uint EXP = 0x0800;
        public const /*GLenum*/ uint EXP2 = 0x0801;
        public const /*GLenum*/ uint COEFF = 0x0A00;
        public const /*GLenum*/ uint ORDER = 0x0A01;
        public const /*GLenum*/ uint DOMAIN = 0x0A02;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_I = 0x0C70;
        public const /*GLenum*/ uint PIXEL_MAP_S_TO_S = 0x0C71;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_R = 0x0C72;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_G = 0x0C73;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_B = 0x0C74;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_A = 0x0C75;
        public const /*GLenum*/ uint PIXEL_MAP_R_TO_R = 0x0C76;
        public const /*GLenum*/ uint PIXEL_MAP_G_TO_G = 0x0C77;
        public const /*GLenum*/ uint PIXEL_MAP_B_TO_B = 0x0C78;
        public const /*GLenum*/ uint PIXEL_MAP_A_TO_A = 0x0C79;
        public const /*GLenum*/ uint CURRENT_COLOR = 0x0B00;
        public const /*GLenum*/ uint CURRENT_INDEX = 0x0B01;
        public const /*GLenum*/ uint CURRENT_NORMAL = 0x0B02;
        public const /*GLenum*/ uint CURRENT_TEXTURE_COORDS = 0x0B03;
        public const /*GLenum*/ uint CURRENT_RASTER_COLOR = 0x0B04;
        public const /*GLenum*/ uint CURRENT_RASTER_INDEX = 0x0B05;
        public const /*GLenum*/ uint CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public const /*GLenum*/ uint CURRENT_RASTER_POSITION = 0x0B07;
        public const /*GLenum*/ uint CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public const /*GLenum*/ uint CURRENT_RASTER_DISTANCE = 0x0B09;
        public const /*GLenum*/ uint POINT_SMOOTH = 0x0B10;
        public const /*GLenum*/ uint LINE_STIPPLE = 0x0B24;
        public const /*GLenum*/ uint LINE_STIPPLE_PATTERN = 0x0B25;
        public const /*GLenum*/ uint LINE_STIPPLE_REPEAT = 0x0B26;
        public const /*GLenum*/ uint LIST_MODE = 0x0B30;
        public const /*GLenum*/ uint MAX_LIST_NESTING = 0x0B31;
        public const /*GLenum*/ uint LIST_BASE = 0x0B32;
        public const /*GLenum*/ uint LIST_INDEX = 0x0B33;
        public const /*GLenum*/ uint POLYGON_STIPPLE = 0x0B42;
        public const /*GLenum*/ uint EDGE_FLAG = 0x0B43;
        public const /*GLenum*/ uint LIGHTING = 0x0B50;
        public const /*GLenum*/ uint LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public const /*GLenum*/ uint LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public const /*GLenum*/ uint LIGHT_MODEL_AMBIENT = 0x0B53;
        public const /*GLenum*/ uint SHADE_MODEL = 0x0B54;
        public const /*GLenum*/ uint COLOR_MATERIAL_FACE = 0x0B55;
        public const /*GLenum*/ uint COLOR_MATERIAL_PARAMETER = 0x0B56;
        public const /*GLenum*/ uint COLOR_MATERIAL = 0x0B57;
        public const /*GLenum*/ uint FOG = 0x0B60;
        public const /*GLenum*/ uint FOG_INDEX = 0x0B61;
        public const /*GLenum*/ uint FOG_DENSITY = 0x0B62;
        public const /*GLenum*/ uint FOG_START = 0x0B63;
        public const /*GLenum*/ uint FOG_END = 0x0B64;
        public const /*GLenum*/ uint FOG_MODE = 0x0B65;
        public const /*GLenum*/ uint FOG_COLOR = 0x0B66;
        public const /*GLenum*/ uint ACCUM_CLEAR_VALUE = 0x0B80;
        public const /*GLenum*/ uint MATRIX_MODE = 0x0BA0;
        public const /*GLenum*/ uint NORMALIZE = 0x0BA1;
        public const /*GLenum*/ uint MODELVIEW_STACK_DEPTH = 0x0BA3;
        public const /*GLenum*/ uint PROJECTION_STACK_DEPTH = 0x0BA4;
        public const /*GLenum*/ uint TEXTURE_STACK_DEPTH = 0x0BA5;
        public const /*GLenum*/ uint MODELVIEW_MATRIX = 0x0BA6;
        public const /*GLenum*/ uint PROJECTION_MATRIX = 0x0BA7;
        public const /*GLenum*/ uint TEXTURE_MATRIX = 0x0BA8;
        public const /*GLenum*/ uint ATTRIB_STACK_DEPTH = 0x0BB0;
        public const /*GLenum*/ uint ALPHA_TEST = 0x0BC0;
        public const /*GLenum*/ uint ALPHA_TEST_FUNC = 0x0BC1;
        public const /*GLenum*/ uint ALPHA_TEST_REF = 0x0BC2;
        public const /*GLenum*/ uint LOGIC_OP = 0x0BF1;
        public const /*GLenum*/ uint AUX_BUFFERS = 0x0C00;
        public const /*GLenum*/ uint INDEX_CLEAR_VALUE = 0x0C20;
        public const /*GLenum*/ uint INDEX_WRITEMASK = 0x0C21;
        public const /*GLenum*/ uint INDEX_MODE = 0x0C30;
        public const /*GLenum*/ uint RGBA_MODE = 0x0C31;
        public const /*GLenum*/ uint RENDER_MODE = 0x0C40;
        public const /*GLenum*/ uint PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public const /*GLenum*/ uint POINT_SMOOTH_HINT = 0x0C51;
        public const /*GLenum*/ uint FOG_HINT = 0x0C54;
        public const /*GLenum*/ uint TEXTURE_GEN_S = 0x0C60;
        public const /*GLenum*/ uint TEXTURE_GEN_T = 0x0C61;
        public const /*GLenum*/ uint TEXTURE_GEN_R = 0x0C62;
        public const /*GLenum*/ uint TEXTURE_GEN_Q = 0x0C63;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public const /*GLenum*/ uint PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public const /*GLenum*/ uint PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public const /*GLenum*/ uint PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public const /*GLenum*/ uint PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public const /*GLenum*/ uint PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public const /*GLenum*/ uint PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public const /*GLenum*/ uint MAP_COLOR = 0x0D10;
        public const /*GLenum*/ uint MAP_STENCIL = 0x0D11;
        public const /*GLenum*/ uint INDEX_SHIFT = 0x0D12;
        public const /*GLenum*/ uint INDEX_OFFSET = 0x0D13;
        public const /*GLenum*/ uint RED_SCALE = 0x0D14;
        public const /*GLenum*/ uint RED_BIAS = 0x0D15;
        public const /*GLenum*/ uint ZOOM_X = 0x0D16;
        public const /*GLenum*/ uint ZOOM_Y = 0x0D17;
        public const /*GLenum*/ uint GREEN_SCALE = 0x0D18;
        public const /*GLenum*/ uint GREEN_BIAS = 0x0D19;
        public const /*GLenum*/ uint BLUE_SCALE = 0x0D1A;
        public const /*GLenum*/ uint BLUE_BIAS = 0x0D1B;
        public const /*GLenum*/ uint ALPHA_SCALE = 0x0D1C;
        public const /*GLenum*/ uint ALPHA_BIAS = 0x0D1D;
        public const /*GLenum*/ uint DEPTH_SCALE = 0x0D1E;
        public const /*GLenum*/ uint DEPTH_BIAS = 0x0D1F;
        public const /*GLenum*/ uint MAX_EVAL_ORDER = 0x0D30;
        public const /*GLenum*/ uint MAX_LIGHTS = 0x0D31;
        public const /*GLenum*/ uint MAX_CLIP_PLANES = 0x0D32;
        public const /*GLenum*/ uint MAX_PIXEL_MAP_TABLE = 0x0D34;
        public const /*GLenum*/ uint MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public const /*GLenum*/ uint MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public const /*GLenum*/ uint MAX_NAME_STACK_DEPTH = 0x0D37;
        public const /*GLenum*/ uint MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public const /*GLenum*/ uint MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public const /*GLenum*/ uint INDEX_BITS = 0x0D51;
        public const /*GLenum*/ uint RED_BITS = 0x0D52;
        public const /*GLenum*/ uint GREEN_BITS = 0x0D53;
        public const /*GLenum*/ uint BLUE_BITS = 0x0D54;
        public const /*GLenum*/ uint ALPHA_BITS = 0x0D55;
        public const /*GLenum*/ uint DEPTH_BITS = 0x0D56;
        public const /*GLenum*/ uint STENCIL_BITS = 0x0D57;
        public const /*GLenum*/ uint ACCUM_RED_BITS = 0x0D58;
        public const /*GLenum*/ uint ACCUM_GREEN_BITS = 0x0D59;
        public const /*GLenum*/ uint ACCUM_BLUE_BITS = 0x0D5A;
        public const /*GLenum*/ uint ACCUM_ALPHA_BITS = 0x0D5B;
        public const /*GLenum*/ uint NAME_STACK_DEPTH = 0x0D70;
        public const /*GLenum*/ uint AUTO_NORMAL = 0x0D80;
        public const /*GLenum*/ uint MAP1_COLOR_4 = 0x0D90;
        public const /*GLenum*/ uint MAP1_INDEX = 0x0D91;
        public const /*GLenum*/ uint MAP1_NORMAL = 0x0D92;
        public const /*GLenum*/ uint MAP1_TEXTURE_COORD_1 = 0x0D93;
        public const /*GLenum*/ uint MAP1_TEXTURE_COORD_2 = 0x0D94;
        public const /*GLenum*/ uint MAP1_TEXTURE_COORD_3 = 0x0D95;
        public const /*GLenum*/ uint MAP1_TEXTURE_COORD_4 = 0x0D96;
        public const /*GLenum*/ uint MAP1_VERTEX_3 = 0x0D97;
        public const /*GLenum*/ uint MAP1_VERTEX_4 = 0x0D98;
        public const /*GLenum*/ uint MAP2_COLOR_4 = 0x0DB0;
        public const /*GLenum*/ uint MAP2_INDEX = 0x0DB1;
        public const /*GLenum*/ uint MAP2_NORMAL = 0x0DB2;
        public const /*GLenum*/ uint MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public const /*GLenum*/ uint MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public const /*GLenum*/ uint MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public const /*GLenum*/ uint MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public const /*GLenum*/ uint MAP2_VERTEX_3 = 0x0DB7;
        public const /*GLenum*/ uint MAP2_VERTEX_4 = 0x0DB8;
        public const /*GLenum*/ uint MAP1_GRID_DOMAIN = 0x0DD0;
        public const /*GLenum*/ uint MAP1_GRID_SEGMENTS = 0x0DD1;
        public const /*GLenum*/ uint MAP2_GRID_DOMAIN = 0x0DD2;
        public const /*GLenum*/ uint MAP2_GRID_SEGMENTS = 0x0DD3;
        public const /*GLenum*/ uint TEXTURE_COMPONENTS = 0x1003;
        public const /*GLenum*/ uint TEXTURE_BORDER = 0x1005;
        public const /*GLenum*/ uint AMBIENT = 0x1200;
        public const /*GLenum*/ uint DIFFUSE = 0x1201;
        public const /*GLenum*/ uint SPECULAR = 0x1202;
        public const /*GLenum*/ uint POSITION = 0x1203;
        public const /*GLenum*/ uint SPOT_DIRECTION = 0x1204;
        public const /*GLenum*/ uint SPOT_EXPONENT = 0x1205;
        public const /*GLenum*/ uint SPOT_CUTOFF = 0x1206;
        public const /*GLenum*/ uint CONSTANT_ATTENUATION = 0x1207;
        public const /*GLenum*/ uint LINEAR_ATTENUATION = 0x1208;
        public const /*GLenum*/ uint QUADRATIC_ATTENUATION = 0x1209;
        public const /*GLenum*/ uint COMPILE = 0x1300;
        public const /*GLenum*/ uint COMPILE_AND_EXECUTE = 0x1301;
        public const /*GLenum*/ uint GL_2_BYTES = 0x1407;
        public const /*GLenum*/ uint GL_3_BYTES = 0x1408;
        public const /*GLenum*/ uint GL_4_BYTES = 0x1409;
        public const /*GLenum*/ uint EMISSION = 0x1600;
        public const /*GLenum*/ uint SHININESS = 0x1601;
        public const /*GLenum*/ uint AMBIENT_AND_DIFFUSE = 0x1602;
        public const /*GLenum*/ uint COLOR_INDEXES = 0x1603;
        public const /*GLenum*/ uint MODELVIEW = 0x1700;
        public const /*GLenum*/ uint PROJECTION = 0x1701;
        public const /*GLenum*/ uint COLOR_INDEX = 0x1900;
        public const /*GLenum*/ uint LUMINANCE = 0x1909;
        public const /*GLenum*/ uint LUMINANCE_ALPHA = 0x190A;
        public const /*GLenum*/ uint BITMAP = 0x1A00;
        public const /*GLenum*/ uint RENDER = 0x1C00;
        public const /*GLenum*/ uint FEEDBACK = 0x1C01;
        public const /*GLenum*/ uint SELECT = 0x1C02;
        public const /*GLenum*/ uint FLAT = 0x1D00;
        public const /*GLenum*/ uint SMOOTH = 0x1D01;
        public const /*GLenum*/ uint S = 0x2000;
        public const /*GLenum*/ uint T = 0x2001;
        public const /*GLenum*/ uint R = 0x2002;
        public const /*GLenum*/ uint Q = 0x2003;
        public const /*GLenum*/ uint MODULATE = 0x2100;
        public const /*GLenum*/ uint DECAL = 0x2101;
        public const /*GLenum*/ uint TEXTURE_ENV_MODE = 0x2200;
        public const /*GLenum*/ uint TEXTURE_ENV_COLOR = 0x2201;
        public const /*GLenum*/ uint TEXTURE_ENV = 0x2300;
        public const /*GLenum*/ uint EYE_LINEAR = 0x2400;
        public const /*GLenum*/ uint OBJECT_LINEAR = 0x2401;
        public const /*GLenum*/ uint SPHERE_MAP = 0x2402;
        public const /*GLenum*/ uint TEXTURE_GEN_MODE = 0x2500;
        public const /*GLenum*/ uint OBJECT_PLANE = 0x2501;
        public const /*GLenum*/ uint EYE_PLANE = 0x2502;
        public const /*GLenum*/ uint CLAMP = 0x2900;
        public const /*GLenum*/ uint CLIP_PLANE0 = 0x3000;
        public const /*GLenum*/ uint CLIP_PLANE1 = 0x3001;
        public const /*GLenum*/ uint CLIP_PLANE2 = 0x3002;
        public const /*GLenum*/ uint CLIP_PLANE3 = 0x3003;
        public const /*GLenum*/ uint CLIP_PLANE4 = 0x3004;
        public const /*GLenum*/ uint CLIP_PLANE5 = 0x3005;
        public const /*GLenum*/ uint LIGHT0 = 0x4000;
        public const /*GLenum*/ uint LIGHT1 = 0x4001;
        public const /*GLenum*/ uint LIGHT2 = 0x4002;
        public const /*GLenum*/ uint LIGHT3 = 0x4003;
        public const /*GLenum*/ uint LIGHT4 = 0x4004;
        public const /*GLenum*/ uint LIGHT5 = 0x4005;
        public const /*GLenum*/ uint LIGHT6 = 0x4006;
        public const /*GLenum*/ uint LIGHT7 = 0x4007;

        public static /*GLvoid*/ void CullFace(/*GLenum*/ uint mode) => CullFacePtr?.Invoke(mode); delegate /*GLvoid*/ void CullFaceDel(/*GLenum*/ uint mode); static CullFaceDel CullFacePtr;
        public static /*GLvoid*/ void FrontFace(/*GLenum*/ uint mode) => FrontFacePtr?.Invoke(mode); delegate /*GLvoid*/ void FrontFaceDel(/*GLenum*/ uint mode); static FrontFaceDel FrontFacePtr;
        public static /*GLvoid*/ void Hint(/*GLenum*/ uint target, /*GLenum*/ uint mode) => HintPtr?.Invoke(target, mode); delegate /*GLvoid*/ void HintDel(/*GLenum*/ uint target, /*GLenum*/ uint mode); static HintDel HintPtr;
        public static /*GLvoid*/ void LineWidth(/*GLfloat*/ float width) => LineWidthPtr?.Invoke(width); delegate /*GLvoid*/ void LineWidthDel(/*GLfloat*/ float width); static LineWidthDel LineWidthPtr;
        public static /*GLvoid*/ void PointSize(/*GLfloat*/ float size) => PointSizePtr?.Invoke(size); delegate /*GLvoid*/ void PointSizeDel(/*GLfloat*/ float size); static PointSizeDel PointSizePtr;
        public static /*GLvoid*/ void PolygonMode(/*GLenum*/ uint face, /*GLenum*/ uint mode) => PolygonModePtr?.Invoke(face, mode); delegate /*GLvoid*/ void PolygonModeDel(/*GLenum*/ uint face, /*GLenum*/ uint mode); static PolygonModeDel PolygonModePtr;
        public static /*GLvoid*/ void Scissor(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height) => ScissorPtr?.Invoke(x, y, width, height); delegate /*GLvoid*/ void ScissorDel(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height); static ScissorDel ScissorPtr;
        public static /*GLvoid*/ void TexParameterf(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat*/ float param) => TexParameterfPtr?.Invoke(target, pname, param); delegate /*GLvoid*/ void TexParameterfDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat*/ float param); static TexParameterfDel TexParameterfPtr;
        public static /*GLvoid*/ void TexParameterfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => TexParameterfvPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void TexParameterfvDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static TexParameterfvDel TexParameterfvPtr;
        public static unsafe /*GLvoid*/ void TexParameterfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => TexParameterfvUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void TexParameterfvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static TexParameterfvUnsafeDel TexParameterfvUnsafePtr;
        public static /*GLvoid*/ void TexParameteri(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint*/ int param) => TexParameteriPtr?.Invoke(target, pname, param); delegate /*GLvoid*/ void TexParameteriDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint*/ int param); static TexParameteriDel TexParameteriPtr;
        public static /*GLvoid*/ void TexParameteriv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => TexParameterivPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void TexParameterivDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static TexParameterivDel TexParameterivPtr;
        public static unsafe /*GLvoid*/ void TexParameteriv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int* parameters) => TexParameterivUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void TexParameterivUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int* parameters); static TexParameterivUnsafeDel TexParameterivUnsafePtr;
        public static /*GLvoid*/ void TexImage1D(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels) => TexImage1DPtr?.Invoke(target, level, internalformat, width, border, format, type, pixels); delegate /*GLvoid*/ void TexImage1DDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels); static TexImage1DDel TexImage1DPtr;
        public static unsafe /*GLvoid*/ void TexImage1D(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels) => TexImage1DUnsafePtr?.Invoke(target, level, internalformat, width, border, format, type, pixels); unsafe delegate /*GLvoid*/ void TexImage1DUnsafeDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels); static TexImage1DUnsafeDel TexImage1DUnsafePtr;
        public static /*GLvoid*/ void TexImage2D(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels) => TexImage2DPtr?.Invoke(target, level, internalformat, width, height, border, format, type, pixels); delegate /*GLvoid*/ void TexImage2DDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels); static TexImage2DDel TexImage2DPtr;
        public static unsafe /*GLvoid*/ void TexImage2D(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels) => TexImage2DUnsafePtr?.Invoke(target, level, internalformat, width, height, border, format, type, pixels); unsafe delegate /*GLvoid*/ void TexImage2DUnsafeDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLint*/ int internalformat, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLint*/ int border, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels); static TexImage2DUnsafeDel TexImage2DUnsafePtr;
        public static /*GLvoid*/ void DrawBuffer(/*GLenum*/ uint buf) => DrawBufferPtr?.Invoke(buf); delegate /*GLvoid*/ void DrawBufferDel(/*GLenum*/ uint buf); static DrawBufferDel DrawBufferPtr;
        public static /*GLvoid*/ void Clear(/*GLbitfield*/ uint mask) => ClearPtr?.Invoke(mask); delegate /*GLvoid*/ void ClearDel(/*GLbitfield*/ uint mask); static ClearDel ClearPtr;
        public static /*GLvoid*/ void ClearColor(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha) => ClearColorPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void ClearColorDel(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha); static ClearColorDel ClearColorPtr;
        public static /*GLvoid*/ void ClearStencil(/*GLint*/ int s) => ClearStencilPtr?.Invoke(s); delegate /*GLvoid*/ void ClearStencilDel(/*GLint*/ int s); static ClearStencilDel ClearStencilPtr;
        public static /*GLvoid*/ void ClearDepth(/*GLdouble*/ double depth) => ClearDepthPtr?.Invoke(depth); delegate /*GLvoid*/ void ClearDepthDel(/*GLdouble*/ double depth); static ClearDepthDel ClearDepthPtr;
        public static /*GLvoid*/ void StencilMask(/*GLuint*/ uint mask) => StencilMaskPtr?.Invoke(mask); delegate /*GLvoid*/ void StencilMaskDel(/*GLuint*/ uint mask); static StencilMaskDel StencilMaskPtr;
        public static /*GLvoid*/ void ColorMask(/*GLboolean*/ byte red, /*GLboolean*/ byte green, /*GLboolean*/ byte blue, /*GLboolean*/ byte alpha) => ColorMaskPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void ColorMaskDel(/*GLboolean*/ byte red, /*GLboolean*/ byte green, /*GLboolean*/ byte blue, /*GLboolean*/ byte alpha); static ColorMaskDel ColorMaskPtr;
        public static /*GLvoid*/ void DepthMask(/*GLboolean*/ byte flag) => DepthMaskPtr?.Invoke(flag); delegate /*GLvoid*/ void DepthMaskDel(/*GLboolean*/ byte flag); static DepthMaskDel DepthMaskPtr;
        public static /*GLvoid*/ void Disable(/*GLenum*/ uint cap) => DisablePtr?.Invoke(cap); delegate /*GLvoid*/ void DisableDel(/*GLenum*/ uint cap); static DisableDel DisablePtr;
        public static /*GLvoid*/ void Enable(/*GLenum*/ uint cap) => EnablePtr?.Invoke(cap); delegate /*GLvoid*/ void EnableDel(/*GLenum*/ uint cap); static EnableDel EnablePtr;
        public static /*GLvoid*/ void Finish() => FinishPtr?.Invoke(); delegate /*GLvoid*/ void FinishDel(); static FinishDel FinishPtr;
        public static /*GLvoid*/ void Flush() => FlushPtr?.Invoke(); delegate /*GLvoid*/ void FlushDel(); static FlushDel FlushPtr;
        public static /*GLvoid*/ void BlendFunc(/*GLenum*/ uint sfactor, /*GLenum*/ uint dfactor) => BlendFuncPtr?.Invoke(sfactor, dfactor); delegate /*GLvoid*/ void BlendFuncDel(/*GLenum*/ uint sfactor, /*GLenum*/ uint dfactor); static BlendFuncDel BlendFuncPtr;
        public static /*GLvoid*/ void LogicOp(/*GLenum*/ uint opcode) => LogicOpPtr?.Invoke(opcode); delegate /*GLvoid*/ void LogicOpDel(/*GLenum*/ uint opcode); static LogicOpDel LogicOpPtr;
        public static /*GLvoid*/ void StencilFunc(/*GLenum*/ uint func, /*GLint*/ int reference, /*GLuint*/ uint mask) => StencilFuncPtr?.Invoke(func, reference, mask); delegate /*GLvoid*/ void StencilFuncDel(/*GLenum*/ uint func, /*GLint*/ int reference, /*GLuint*/ uint mask); static StencilFuncDel StencilFuncPtr;
        public static /*GLvoid*/ void StencilOp(/*GLenum*/ uint fail, /*GLenum*/ uint zfail, /*GLenum*/ uint zpass) => StencilOpPtr?.Invoke(fail, zfail, zpass); delegate /*GLvoid*/ void StencilOpDel(/*GLenum*/ uint fail, /*GLenum*/ uint zfail, /*GLenum*/ uint zpass); static StencilOpDel StencilOpPtr;
        public static /*GLvoid*/ void DepthFunc(/*GLenum*/ uint func) => DepthFuncPtr?.Invoke(func); delegate /*GLvoid*/ void DepthFuncDel(/*GLenum*/ uint func); static DepthFuncDel DepthFuncPtr;
        public static /*GLvoid*/ void PixelStoref(/*GLenum*/ uint pname, /*GLfloat*/ float param) => PixelStorefPtr?.Invoke(pname, param); delegate /*GLvoid*/ void PixelStorefDel(/*GLenum*/ uint pname, /*GLfloat*/ float param); static PixelStorefDel PixelStorefPtr;
        public static /*GLvoid*/ void PixelStorei(/*GLenum*/ uint pname, /*GLint*/ int param) => PixelStoreiPtr?.Invoke(pname, param); delegate /*GLvoid*/ void PixelStoreiDel(/*GLenum*/ uint pname, /*GLint*/ int param); static PixelStoreiDel PixelStoreiPtr;
        public static /*GLvoid*/ void ReadBuffer(/*GLenum*/ uint src) => ReadBufferPtr?.Invoke(src); delegate /*GLvoid*/ void ReadBufferDel(/*GLenum*/ uint src); static ReadBufferDel ReadBufferPtr;
        public static /*GLvoid*/ void ReadPixels(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte[] pixels) => ReadPixelsPtr?.Invoke(x, y, width, height, format, type, pixels); delegate /*GLvoid*/ void ReadPixelsDel(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte[] pixels); static ReadPixelsDel ReadPixelsPtr;
        public static unsafe /*GLvoid*/ void ReadPixels(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte* pixels) => ReadPixelsUnsafePtr?.Invoke(x, y, width, height, format, type, pixels); unsafe delegate /*GLvoid*/ void ReadPixelsUnsafeDel(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte* pixels); static ReadPixelsUnsafeDel ReadPixelsUnsafePtr;
        public static /*GLvoid*/ void GetBooleanv(/*GLenum*/ uint pname, /*GLboolean **/ byte[] data) => GetBooleanvPtr?.Invoke(pname, data); delegate /*GLvoid*/ void GetBooleanvDel(/*GLenum*/ uint pname, /*GLboolean **/ byte[] data); static GetBooleanvDel GetBooleanvPtr;
        public static unsafe /*GLvoid*/ void GetBooleanv(/*GLenum*/ uint pname, /*GLboolean **/ byte* data) => GetBooleanvUnsafePtr?.Invoke(pname, data); unsafe delegate /*GLvoid*/ void GetBooleanvUnsafeDel(/*GLenum*/ uint pname, /*GLboolean **/ byte* data); static GetBooleanvUnsafeDel GetBooleanvUnsafePtr;
        public static /*GLvoid*/ void GetDoublev(/*GLenum*/ uint pname, /*GLdouble **/ double[] data) => GetDoublevPtr?.Invoke(pname, data); delegate /*GLvoid*/ void GetDoublevDel(/*GLenum*/ uint pname, /*GLdouble **/ double[] data); static GetDoublevDel GetDoublevPtr;
        public static unsafe /*GLvoid*/ void GetDoublev(/*GLenum*/ uint pname, /*GLdouble **/ double* data) => GetDoublevUnsafePtr?.Invoke(pname, data); unsafe delegate /*GLvoid*/ void GetDoublevUnsafeDel(/*GLenum*/ uint pname, /*GLdouble **/ double* data); static GetDoublevUnsafeDel GetDoublevUnsafePtr;
        public static /*GLenum*/ uint GetError() => GetErrorPtr?.Invoke() ?? default; delegate /*GLenum*/ uint GetErrorDel(); static GetErrorDel GetErrorPtr;
        public static /*GLvoid*/ void GetFloatv(/*GLenum*/ uint pname, /*GLfloat **/ float[] data) => GetFloatvPtr?.Invoke(pname, data); delegate /*GLvoid*/ void GetFloatvDel(/*GLenum*/ uint pname, /*GLfloat **/ float[] data); static GetFloatvDel GetFloatvPtr;
        public static unsafe /*GLvoid*/ void GetFloatv(/*GLenum*/ uint pname, /*GLfloat **/ float* data) => GetFloatvUnsafePtr?.Invoke(pname, data); unsafe delegate /*GLvoid*/ void GetFloatvUnsafeDel(/*GLenum*/ uint pname, /*GLfloat **/ float* data); static GetFloatvUnsafeDel GetFloatvUnsafePtr;
        public static /*GLvoid*/ void GetIntegerv(/*GLenum*/ uint pname, /*GLint **/ int[] data) => GetIntegervPtr?.Invoke(pname, data); delegate /*GLvoid*/ void GetIntegervDel(/*GLenum*/ uint pname, /*GLint **/ int[] data); static GetIntegervDel GetIntegervPtr;
        public static unsafe /*GLvoid*/ void GetIntegerv(/*GLenum*/ uint pname, /*GLint **/ int* data) => GetIntegervUnsafePtr?.Invoke(pname, data); unsafe delegate /*GLvoid*/ void GetIntegervUnsafeDel(/*GLenum*/ uint pname, /*GLint **/ int* data); static GetIntegervUnsafeDel GetIntegervUnsafePtr;
        public static /*const GLchar **/ string GetString(/*GLenum*/ uint name) => GetStringPtr?.Invoke(name) ?? default; delegate /*const GLchar **/ string GetStringDel(/*GLenum*/ uint name); static GetStringDel GetStringPtr;
        public static /*GLvoid*/ void GetTexImage(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte[] pixels) => GetTexImagePtr?.Invoke(target, level, format, type, pixels); delegate /*GLvoid*/ void GetTexImageDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte[] pixels); static GetTexImageDel GetTexImagePtr;
        public static unsafe /*GLvoid*/ void GetTexImage(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte* pixels) => GetTexImageUnsafePtr?.Invoke(target, level, format, type, pixels); unsafe delegate /*GLvoid*/ void GetTexImageUnsafeDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint format, /*GLenum*/ uint type, /*void **/ byte* pixels); static GetTexImageUnsafeDel GetTexImageUnsafePtr;
        public static /*GLvoid*/ void GetTexParameterfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetTexParameterfvPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void GetTexParameterfvDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetTexParameterfvDel GetTexParameterfvPtr;
        public static unsafe /*GLvoid*/ void GetTexParameterfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetTexParameterfvUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexParameterfvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetTexParameterfvUnsafeDel GetTexParameterfvUnsafePtr;
        public static /*GLvoid*/ void GetTexParameteriv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetTexParameterivPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void GetTexParameterivDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetTexParameterivDel GetTexParameterivPtr;
        public static unsafe /*GLvoid*/ void GetTexParameteriv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetTexParameterivUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexParameterivUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetTexParameterivUnsafeDel GetTexParameterivUnsafePtr;
        public static /*GLvoid*/ void GetTexLevelParameterfv(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetTexLevelParameterfvPtr?.Invoke(target, level, pname, parameters); delegate /*GLvoid*/ void GetTexLevelParameterfvDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetTexLevelParameterfvDel GetTexLevelParameterfvPtr;
        public static unsafe /*GLvoid*/ void GetTexLevelParameterfv(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetTexLevelParameterfvUnsafePtr?.Invoke(target, level, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexLevelParameterfvUnsafeDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetTexLevelParameterfvUnsafeDel GetTexLevelParameterfvUnsafePtr;
        public static /*GLvoid*/ void GetTexLevelParameteriv(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetTexLevelParameterivPtr?.Invoke(target, level, pname, parameters); delegate /*GLvoid*/ void GetTexLevelParameterivDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetTexLevelParameterivDel GetTexLevelParameterivPtr;
        public static unsafe /*GLvoid*/ void GetTexLevelParameteriv(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetTexLevelParameterivUnsafePtr?.Invoke(target, level, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexLevelParameterivUnsafeDel(/*GLenum*/ uint target, /*GLint*/ int level, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetTexLevelParameterivUnsafeDel GetTexLevelParameterivUnsafePtr;
        public static /*GLboolean*/ byte IsEnabled(/*GLenum*/ uint cap) => IsEnabledPtr?.Invoke(cap) ?? default; delegate /*GLboolean*/ byte IsEnabledDel(/*GLenum*/ uint cap); static IsEnabledDel IsEnabledPtr;
        public static /*GLvoid*/ void DepthRange(/*GLdouble*/ double n, /*GLdouble*/ double f) => DepthRangePtr?.Invoke(n, f); delegate /*GLvoid*/ void DepthRangeDel(/*GLdouble*/ double n, /*GLdouble*/ double f); static DepthRangeDel DepthRangePtr;
        public static /*GLvoid*/ void Viewport(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height) => ViewportPtr?.Invoke(x, y, width, height); delegate /*GLvoid*/ void ViewportDel(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height); static ViewportDel ViewportPtr;
        public static /*GLvoid*/ void NewList(/*GLuint*/ uint list, /*GLenum*/ uint mode) => NewListPtr?.Invoke(list, mode); delegate /*GLvoid*/ void NewListDel(/*GLuint*/ uint list, /*GLenum*/ uint mode); static NewListDel NewListPtr;
        public static /*GLvoid*/ void EndList() => EndListPtr?.Invoke(); delegate /*GLvoid*/ void EndListDel(); static EndListDel EndListPtr;
        public static /*GLvoid*/ void CallList(/*GLuint*/ uint list) => CallListPtr?.Invoke(list); delegate /*GLvoid*/ void CallListDel(/*GLuint*/ uint list); static CallListDel CallListPtr;
        public static /*GLvoid*/ void CallLists(/*GLsizei*/ uint n, /*GLenum*/ uint type, /*const void **/ byte[] lists) => CallListsPtr?.Invoke(n, type, lists); delegate /*GLvoid*/ void CallListsDel(/*GLsizei*/ uint n, /*GLenum*/ uint type, /*const void **/ byte[] lists); static CallListsDel CallListsPtr;
        public static unsafe /*GLvoid*/ void CallLists(/*GLsizei*/ uint n, /*GLenum*/ uint type, /*const void **/ byte* lists) => CallListsUnsafePtr?.Invoke(n, type, lists); unsafe delegate /*GLvoid*/ void CallListsUnsafeDel(/*GLsizei*/ uint n, /*GLenum*/ uint type, /*const void **/ byte* lists); static CallListsUnsafeDel CallListsUnsafePtr;
        public static /*GLvoid*/ void DeleteLists(/*GLuint*/ uint list, /*GLsizei*/ uint range) => DeleteListsPtr?.Invoke(list, range); delegate /*GLvoid*/ void DeleteListsDel(/*GLuint*/ uint list, /*GLsizei*/ uint range); static DeleteListsDel DeleteListsPtr;
        public static /*GLuint*/ uint GenLists(/*GLsizei*/ uint range) => GenListsPtr?.Invoke(range) ?? default; delegate /*GLuint*/ uint GenListsDel(/*GLsizei*/ uint range); static GenListsDel GenListsPtr;
        public static /*GLvoid*/ void ListBase(/*GLuint*/ uint basis) => ListBasePtr?.Invoke(basis); delegate /*GLvoid*/ void ListBaseDel(/*GLuint*/ uint basis); static ListBaseDel ListBasePtr;
        public static /*GLvoid*/ void Begin(/*GLenum*/ uint mode) => BeginPtr?.Invoke(mode); delegate /*GLvoid*/ void BeginDel(/*GLenum*/ uint mode); static BeginDel BeginPtr;
        public static /*GLvoid*/ void Bitmap(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLfloat*/ float xorig, /*GLfloat*/ float yorig, /*GLfloat*/ float xmove, /*GLfloat*/ float ymove, /*const GLubyte **/ byte[] bitmap) => BitmapPtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap); delegate /*GLvoid*/ void BitmapDel(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLfloat*/ float xorig, /*GLfloat*/ float yorig, /*GLfloat*/ float xmove, /*GLfloat*/ float ymove, /*const GLubyte **/ byte[] bitmap); static BitmapDel BitmapPtr;
        public static unsafe /*GLvoid*/ void Bitmap(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLfloat*/ float xorig, /*GLfloat*/ float yorig, /*GLfloat*/ float xmove, /*GLfloat*/ float ymove, /*const GLubyte **/ byte* bitmap) => BitmapUnsafePtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap); unsafe delegate /*GLvoid*/ void BitmapUnsafeDel(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLfloat*/ float xorig, /*GLfloat*/ float yorig, /*GLfloat*/ float xmove, /*GLfloat*/ float ymove, /*const GLubyte **/ byte* bitmap); static BitmapUnsafeDel BitmapUnsafePtr;
        public static /*GLvoid*/ void Color3b(/*GLbyte*/ sbyte red, /*GLbyte*/ sbyte green, /*GLbyte*/ sbyte blue) => Color3bPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3bDel(/*GLbyte*/ sbyte red, /*GLbyte*/ sbyte green, /*GLbyte*/ sbyte blue); static Color3bDel Color3bPtr;
        public static /*GLvoid*/ void Color3bv(/*const GLbyte **/ sbyte[] v) => Color3bvPtr?.Invoke(v); delegate /*GLvoid*/ void Color3bvDel(/*const GLbyte **/ sbyte[] v); static Color3bvDel Color3bvPtr;
        public static unsafe /*GLvoid*/ void Color3bv(/*const GLbyte **/ sbyte* v) => Color3bvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3bvUnsafeDel(/*const GLbyte **/ sbyte* v); static Color3bvUnsafeDel Color3bvUnsafePtr;
        public static /*GLvoid*/ void Color3d(/*GLdouble*/ double red, /*GLdouble*/ double green, /*GLdouble*/ double blue) => Color3dPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3dDel(/*GLdouble*/ double red, /*GLdouble*/ double green, /*GLdouble*/ double blue); static Color3dDel Color3dPtr;
        public static /*GLvoid*/ void Color3dv(/*const GLdouble **/ double[] v) => Color3dvPtr?.Invoke(v); delegate /*GLvoid*/ void Color3dvDel(/*const GLdouble **/ double[] v); static Color3dvDel Color3dvPtr;
        public static unsafe /*GLvoid*/ void Color3dv(/*const GLdouble **/ double* v) => Color3dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3dvUnsafeDel(/*const GLdouble **/ double* v); static Color3dvUnsafeDel Color3dvUnsafePtr;
        public static /*GLvoid*/ void Color3f(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue) => Color3fPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3fDel(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue); static Color3fDel Color3fPtr;
        public static /*GLvoid*/ void Color3fv(/*const GLfloat **/ float[] v) => Color3fvPtr?.Invoke(v); delegate /*GLvoid*/ void Color3fvDel(/*const GLfloat **/ float[] v); static Color3fvDel Color3fvPtr;
        public static unsafe /*GLvoid*/ void Color3fv(/*const GLfloat **/ float* v) => Color3fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3fvUnsafeDel(/*const GLfloat **/ float* v); static Color3fvUnsafeDel Color3fvUnsafePtr;
        public static /*GLvoid*/ void Color3i(/*GLint*/ int red, /*GLint*/ int green, /*GLint*/ int blue) => Color3iPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3iDel(/*GLint*/ int red, /*GLint*/ int green, /*GLint*/ int blue); static Color3iDel Color3iPtr;
        public static /*GLvoid*/ void Color3iv(/*const GLint **/ int[] v) => Color3ivPtr?.Invoke(v); delegate /*GLvoid*/ void Color3ivDel(/*const GLint **/ int[] v); static Color3ivDel Color3ivPtr;
        public static unsafe /*GLvoid*/ void Color3iv(/*const GLint **/ int* v) => Color3ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3ivUnsafeDel(/*const GLint **/ int* v); static Color3ivUnsafeDel Color3ivUnsafePtr;
        public static /*GLvoid*/ void Color3s(/*GLshort*/ short red, /*GLshort*/ short green, /*GLshort*/ short blue) => Color3sPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3sDel(/*GLshort*/ short red, /*GLshort*/ short green, /*GLshort*/ short blue); static Color3sDel Color3sPtr;
        public static /*GLvoid*/ void Color3sv(/*const GLshort **/ short[] v) => Color3svPtr?.Invoke(v); delegate /*GLvoid*/ void Color3svDel(/*const GLshort **/ short[] v); static Color3svDel Color3svPtr;
        public static unsafe /*GLvoid*/ void Color3sv(/*const GLshort **/ short* v) => Color3svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3svUnsafeDel(/*const GLshort **/ short* v); static Color3svUnsafeDel Color3svUnsafePtr;
        public static /*GLvoid*/ void Color3ub(/*GLubyte*/ byte red, /*GLubyte*/ byte green, /*GLubyte*/ byte blue) => Color3ubPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3ubDel(/*GLubyte*/ byte red, /*GLubyte*/ byte green, /*GLubyte*/ byte blue); static Color3ubDel Color3ubPtr;
        public static /*GLvoid*/ void Color3ubv(/*const GLubyte **/ byte[] v) => Color3ubvPtr?.Invoke(v); delegate /*GLvoid*/ void Color3ubvDel(/*const GLubyte **/ byte[] v); static Color3ubvDel Color3ubvPtr;
        public static unsafe /*GLvoid*/ void Color3ubv(/*const GLubyte **/ byte* v) => Color3ubvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3ubvUnsafeDel(/*const GLubyte **/ byte* v); static Color3ubvUnsafeDel Color3ubvUnsafePtr;
        public static /*GLvoid*/ void Color3ui(/*GLuint*/ uint red, /*GLuint*/ uint green, /*GLuint*/ uint blue) => Color3uiPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3uiDel(/*GLuint*/ uint red, /*GLuint*/ uint green, /*GLuint*/ uint blue); static Color3uiDel Color3uiPtr;
        public static /*GLvoid*/ void Color3uiv(/*const GLuint **/ uint[] v) => Color3uivPtr?.Invoke(v); delegate /*GLvoid*/ void Color3uivDel(/*const GLuint **/ uint[] v); static Color3uivDel Color3uivPtr;
        public static unsafe /*GLvoid*/ void Color3uiv(/*const GLuint **/ uint* v) => Color3uivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3uivUnsafeDel(/*const GLuint **/ uint* v); static Color3uivUnsafeDel Color3uivUnsafePtr;
        public static /*GLvoid*/ void Color3us(/*GLushort*/ ushort red, /*GLushort*/ ushort green, /*GLushort*/ ushort blue) => Color3usPtr?.Invoke(red, green, blue); delegate /*GLvoid*/ void Color3usDel(/*GLushort*/ ushort red, /*GLushort*/ ushort green, /*GLushort*/ ushort blue); static Color3usDel Color3usPtr;
        public static /*GLvoid*/ void Color3usv(/*const GLushort **/ ushort[] v) => Color3usvPtr?.Invoke(v); delegate /*GLvoid*/ void Color3usvDel(/*const GLushort **/ ushort[] v); static Color3usvDel Color3usvPtr;
        public static unsafe /*GLvoid*/ void Color3usv(/*const GLushort **/ ushort* v) => Color3usvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color3usvUnsafeDel(/*const GLushort **/ ushort* v); static Color3usvUnsafeDel Color3usvUnsafePtr;
        public static /*GLvoid*/ void Color4b(/*GLbyte*/ sbyte red, /*GLbyte*/ sbyte green, /*GLbyte*/ sbyte blue, /*GLbyte*/ sbyte alpha) => Color4bPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4bDel(/*GLbyte*/ sbyte red, /*GLbyte*/ sbyte green, /*GLbyte*/ sbyte blue, /*GLbyte*/ sbyte alpha); static Color4bDel Color4bPtr;
        public static /*GLvoid*/ void Color4bv(/*const GLbyte **/ sbyte[] v) => Color4bvPtr?.Invoke(v); delegate /*GLvoid*/ void Color4bvDel(/*const GLbyte **/ sbyte[] v); static Color4bvDel Color4bvPtr;
        public static unsafe /*GLvoid*/ void Color4bv(/*const GLbyte **/ sbyte* v) => Color4bvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4bvUnsafeDel(/*const GLbyte **/ sbyte* v); static Color4bvUnsafeDel Color4bvUnsafePtr;
        public static /*GLvoid*/ void Color4d(/*GLdouble*/ double red, /*GLdouble*/ double green, /*GLdouble*/ double blue, /*GLdouble*/ double alpha) => Color4dPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4dDel(/*GLdouble*/ double red, /*GLdouble*/ double green, /*GLdouble*/ double blue, /*GLdouble*/ double alpha); static Color4dDel Color4dPtr;
        public static /*GLvoid*/ void Color4dv(/*const GLdouble **/ double[] v) => Color4dvPtr?.Invoke(v); delegate /*GLvoid*/ void Color4dvDel(/*const GLdouble **/ double[] v); static Color4dvDel Color4dvPtr;
        public static unsafe /*GLvoid*/ void Color4dv(/*const GLdouble **/ double* v) => Color4dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4dvUnsafeDel(/*const GLdouble **/ double* v); static Color4dvUnsafeDel Color4dvUnsafePtr;
        public static /*GLvoid*/ void Color4f(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha) => Color4fPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4fDel(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha); static Color4fDel Color4fPtr;
        public static /*GLvoid*/ void Color4fv(/*const GLfloat **/ float[] v) => Color4fvPtr?.Invoke(v); delegate /*GLvoid*/ void Color4fvDel(/*const GLfloat **/ float[] v); static Color4fvDel Color4fvPtr;
        public static unsafe /*GLvoid*/ void Color4fv(/*const GLfloat **/ float* v) => Color4fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4fvUnsafeDel(/*const GLfloat **/ float* v); static Color4fvUnsafeDel Color4fvUnsafePtr;
        public static /*GLvoid*/ void Color4i(/*GLint*/ int red, /*GLint*/ int green, /*GLint*/ int blue, /*GLint*/ int alpha) => Color4iPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4iDel(/*GLint*/ int red, /*GLint*/ int green, /*GLint*/ int blue, /*GLint*/ int alpha); static Color4iDel Color4iPtr;
        public static /*GLvoid*/ void Color4iv(/*const GLint **/ int[] v) => Color4ivPtr?.Invoke(v); delegate /*GLvoid*/ void Color4ivDel(/*const GLint **/ int[] v); static Color4ivDel Color4ivPtr;
        public static unsafe /*GLvoid*/ void Color4iv(/*const GLint **/ int* v) => Color4ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4ivUnsafeDel(/*const GLint **/ int* v); static Color4ivUnsafeDel Color4ivUnsafePtr;
        public static /*GLvoid*/ void Color4s(/*GLshort*/ short red, /*GLshort*/ short green, /*GLshort*/ short blue, /*GLshort*/ short alpha) => Color4sPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4sDel(/*GLshort*/ short red, /*GLshort*/ short green, /*GLshort*/ short blue, /*GLshort*/ short alpha); static Color4sDel Color4sPtr;
        public static /*GLvoid*/ void Color4sv(/*const GLshort **/ short[] v) => Color4svPtr?.Invoke(v); delegate /*GLvoid*/ void Color4svDel(/*const GLshort **/ short[] v); static Color4svDel Color4svPtr;
        public static unsafe /*GLvoid*/ void Color4sv(/*const GLshort **/ short* v) => Color4svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4svUnsafeDel(/*const GLshort **/ short* v); static Color4svUnsafeDel Color4svUnsafePtr;
        public static /*GLvoid*/ void Color4ub(/*GLubyte*/ byte red, /*GLubyte*/ byte green, /*GLubyte*/ byte blue, /*GLubyte*/ byte alpha) => Color4ubPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4ubDel(/*GLubyte*/ byte red, /*GLubyte*/ byte green, /*GLubyte*/ byte blue, /*GLubyte*/ byte alpha); static Color4ubDel Color4ubPtr;
        public static /*GLvoid*/ void Color4ubv(/*const GLubyte **/ byte[] v) => Color4ubvPtr?.Invoke(v); delegate /*GLvoid*/ void Color4ubvDel(/*const GLubyte **/ byte[] v); static Color4ubvDel Color4ubvPtr;
        public static unsafe /*GLvoid*/ void Color4ubv(/*const GLubyte **/ byte* v) => Color4ubvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4ubvUnsafeDel(/*const GLubyte **/ byte* v); static Color4ubvUnsafeDel Color4ubvUnsafePtr;
        public static /*GLvoid*/ void Color4ui(/*GLuint*/ uint red, /*GLuint*/ uint green, /*GLuint*/ uint blue, /*GLuint*/ uint alpha) => Color4uiPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4uiDel(/*GLuint*/ uint red, /*GLuint*/ uint green, /*GLuint*/ uint blue, /*GLuint*/ uint alpha); static Color4uiDel Color4uiPtr;
        public static /*GLvoid*/ void Color4uiv(/*const GLuint **/ uint[] v) => Color4uivPtr?.Invoke(v); delegate /*GLvoid*/ void Color4uivDel(/*const GLuint **/ uint[] v); static Color4uivDel Color4uivPtr;
        public static unsafe /*GLvoid*/ void Color4uiv(/*const GLuint **/ uint* v) => Color4uivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4uivUnsafeDel(/*const GLuint **/ uint* v); static Color4uivUnsafeDel Color4uivUnsafePtr;
        public static /*GLvoid*/ void Color4us(/*GLushort*/ ushort red, /*GLushort*/ ushort green, /*GLushort*/ ushort blue, /*GLushort*/ ushort alpha) => Color4usPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void Color4usDel(/*GLushort*/ ushort red, /*GLushort*/ ushort green, /*GLushort*/ ushort blue, /*GLushort*/ ushort alpha); static Color4usDel Color4usPtr;
        public static /*GLvoid*/ void Color4usv(/*const GLushort **/ ushort[] v) => Color4usvPtr?.Invoke(v); delegate /*GLvoid*/ void Color4usvDel(/*const GLushort **/ ushort[] v); static Color4usvDel Color4usvPtr;
        public static unsafe /*GLvoid*/ void Color4usv(/*const GLushort **/ ushort* v) => Color4usvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Color4usvUnsafeDel(/*const GLushort **/ ushort* v); static Color4usvUnsafeDel Color4usvUnsafePtr;
        public static /*GLvoid*/ void EdgeFlag(/*GLboolean*/ byte flag) => EdgeFlagPtr?.Invoke(flag); delegate /*GLvoid*/ void EdgeFlagDel(/*GLboolean*/ byte flag); static EdgeFlagDel EdgeFlagPtr;
        public static /*GLvoid*/ void EdgeFlagv(/*const GLboolean **/ byte[] flag) => EdgeFlagvPtr?.Invoke(flag); delegate /*GLvoid*/ void EdgeFlagvDel(/*const GLboolean **/ byte[] flag); static EdgeFlagvDel EdgeFlagvPtr;
        public static unsafe /*GLvoid*/ void EdgeFlagv(/*const GLboolean **/ byte* flag) => EdgeFlagvUnsafePtr?.Invoke(flag); unsafe delegate /*GLvoid*/ void EdgeFlagvUnsafeDel(/*const GLboolean **/ byte* flag); static EdgeFlagvUnsafeDel EdgeFlagvUnsafePtr;
        public static /*GLvoid*/ void End() => EndPtr?.Invoke(); delegate /*GLvoid*/ void EndDel(); static EndDel EndPtr;
        public static /*GLvoid*/ void Indexd(/*GLdouble*/ double c) => IndexdPtr?.Invoke(c); delegate /*GLvoid*/ void IndexdDel(/*GLdouble*/ double c); static IndexdDel IndexdPtr;
        public static /*GLvoid*/ void Indexdv(/*const GLdouble **/ double[] c) => IndexdvPtr?.Invoke(c); delegate /*GLvoid*/ void IndexdvDel(/*const GLdouble **/ double[] c); static IndexdvDel IndexdvPtr;
        public static unsafe /*GLvoid*/ void Indexdv(/*const GLdouble **/ double* c) => IndexdvUnsafePtr?.Invoke(c); unsafe delegate /*GLvoid*/ void IndexdvUnsafeDel(/*const GLdouble **/ double* c); static IndexdvUnsafeDel IndexdvUnsafePtr;
        public static /*GLvoid*/ void Indexf(/*GLfloat*/ float c) => IndexfPtr?.Invoke(c); delegate /*GLvoid*/ void IndexfDel(/*GLfloat*/ float c); static IndexfDel IndexfPtr;
        public static /*GLvoid*/ void Indexfv(/*const GLfloat **/ float[] c) => IndexfvPtr?.Invoke(c); delegate /*GLvoid*/ void IndexfvDel(/*const GLfloat **/ float[] c); static IndexfvDel IndexfvPtr;
        public static unsafe /*GLvoid*/ void Indexfv(/*const GLfloat **/ float* c) => IndexfvUnsafePtr?.Invoke(c); unsafe delegate /*GLvoid*/ void IndexfvUnsafeDel(/*const GLfloat **/ float* c); static IndexfvUnsafeDel IndexfvUnsafePtr;
        public static /*GLvoid*/ void Indexi(/*GLint*/ int c) => IndexiPtr?.Invoke(c); delegate /*GLvoid*/ void IndexiDel(/*GLint*/ int c); static IndexiDel IndexiPtr;
        public static /*GLvoid*/ void Indexiv(/*const GLint **/ int[] c) => IndexivPtr?.Invoke(c); delegate /*GLvoid*/ void IndexivDel(/*const GLint **/ int[] c); static IndexivDel IndexivPtr;
        public static unsafe /*GLvoid*/ void Indexiv(/*const GLint **/ int* c) => IndexivUnsafePtr?.Invoke(c); unsafe delegate /*GLvoid*/ void IndexivUnsafeDel(/*const GLint **/ int* c); static IndexivUnsafeDel IndexivUnsafePtr;
        public static /*GLvoid*/ void Indexs(/*GLshort*/ short c) => IndexsPtr?.Invoke(c); delegate /*GLvoid*/ void IndexsDel(/*GLshort*/ short c); static IndexsDel IndexsPtr;
        public static /*GLvoid*/ void Indexsv(/*const GLshort **/ short[] c) => IndexsvPtr?.Invoke(c); delegate /*GLvoid*/ void IndexsvDel(/*const GLshort **/ short[] c); static IndexsvDel IndexsvPtr;
        public static unsafe /*GLvoid*/ void Indexsv(/*const GLshort **/ short* c) => IndexsvUnsafePtr?.Invoke(c); unsafe delegate /*GLvoid*/ void IndexsvUnsafeDel(/*const GLshort **/ short* c); static IndexsvUnsafeDel IndexsvUnsafePtr;
        public static /*GLvoid*/ void Normal3b(/*GLbyte*/ sbyte nx, /*GLbyte*/ sbyte ny, /*GLbyte*/ sbyte nz) => Normal3bPtr?.Invoke(nx, ny, nz); delegate /*GLvoid*/ void Normal3bDel(/*GLbyte*/ sbyte nx, /*GLbyte*/ sbyte ny, /*GLbyte*/ sbyte nz); static Normal3bDel Normal3bPtr;
        public static /*GLvoid*/ void Normal3bv(/*const GLbyte **/ sbyte[] v) => Normal3bvPtr?.Invoke(v); delegate /*GLvoid*/ void Normal3bvDel(/*const GLbyte **/ sbyte[] v); static Normal3bvDel Normal3bvPtr;
        public static unsafe /*GLvoid*/ void Normal3bv(/*const GLbyte **/ sbyte* v) => Normal3bvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Normal3bvUnsafeDel(/*const GLbyte **/ sbyte* v); static Normal3bvUnsafeDel Normal3bvUnsafePtr;
        public static /*GLvoid*/ void Normal3d(/*GLdouble*/ double nx, /*GLdouble*/ double ny, /*GLdouble*/ double nz) => Normal3dPtr?.Invoke(nx, ny, nz); delegate /*GLvoid*/ void Normal3dDel(/*GLdouble*/ double nx, /*GLdouble*/ double ny, /*GLdouble*/ double nz); static Normal3dDel Normal3dPtr;
        public static /*GLvoid*/ void Normal3dv(/*const GLdouble **/ double[] v) => Normal3dvPtr?.Invoke(v); delegate /*GLvoid*/ void Normal3dvDel(/*const GLdouble **/ double[] v); static Normal3dvDel Normal3dvPtr;
        public static unsafe /*GLvoid*/ void Normal3dv(/*const GLdouble **/ double* v) => Normal3dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Normal3dvUnsafeDel(/*const GLdouble **/ double* v); static Normal3dvUnsafeDel Normal3dvUnsafePtr;
        public static /*GLvoid*/ void Normal3f(/*GLfloat*/ float nx, /*GLfloat*/ float ny, /*GLfloat*/ float nz) => Normal3fPtr?.Invoke(nx, ny, nz); delegate /*GLvoid*/ void Normal3fDel(/*GLfloat*/ float nx, /*GLfloat*/ float ny, /*GLfloat*/ float nz); static Normal3fDel Normal3fPtr;
        public static /*GLvoid*/ void Normal3fv(/*const GLfloat **/ float[] v) => Normal3fvPtr?.Invoke(v); delegate /*GLvoid*/ void Normal3fvDel(/*const GLfloat **/ float[] v); static Normal3fvDel Normal3fvPtr;
        public static unsafe /*GLvoid*/ void Normal3fv(/*const GLfloat **/ float* v) => Normal3fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Normal3fvUnsafeDel(/*const GLfloat **/ float* v); static Normal3fvUnsafeDel Normal3fvUnsafePtr;
        public static /*GLvoid*/ void Normal3i(/*GLint*/ int nx, /*GLint*/ int ny, /*GLint*/ int nz) => Normal3iPtr?.Invoke(nx, ny, nz); delegate /*GLvoid*/ void Normal3iDel(/*GLint*/ int nx, /*GLint*/ int ny, /*GLint*/ int nz); static Normal3iDel Normal3iPtr;
        public static /*GLvoid*/ void Normal3iv(/*const GLint **/ int[] v) => Normal3ivPtr?.Invoke(v); delegate /*GLvoid*/ void Normal3ivDel(/*const GLint **/ int[] v); static Normal3ivDel Normal3ivPtr;
        public static unsafe /*GLvoid*/ void Normal3iv(/*const GLint **/ int* v) => Normal3ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Normal3ivUnsafeDel(/*const GLint **/ int* v); static Normal3ivUnsafeDel Normal3ivUnsafePtr;
        public static /*GLvoid*/ void Normal3s(/*GLshort*/ short nx, /*GLshort*/ short ny, /*GLshort*/ short nz) => Normal3sPtr?.Invoke(nx, ny, nz); delegate /*GLvoid*/ void Normal3sDel(/*GLshort*/ short nx, /*GLshort*/ short ny, /*GLshort*/ short nz); static Normal3sDel Normal3sPtr;
        public static /*GLvoid*/ void Normal3sv(/*const GLshort **/ short[] v) => Normal3svPtr?.Invoke(v); delegate /*GLvoid*/ void Normal3svDel(/*const GLshort **/ short[] v); static Normal3svDel Normal3svPtr;
        public static unsafe /*GLvoid*/ void Normal3sv(/*const GLshort **/ short* v) => Normal3svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Normal3svUnsafeDel(/*const GLshort **/ short* v); static Normal3svUnsafeDel Normal3svUnsafePtr;
        public static /*GLvoid*/ void RasterPos2d(/*GLdouble*/ double x, /*GLdouble*/ double y) => RasterPos2dPtr?.Invoke(x, y); delegate /*GLvoid*/ void RasterPos2dDel(/*GLdouble*/ double x, /*GLdouble*/ double y); static RasterPos2dDel RasterPos2dPtr;
        public static /*GLvoid*/ void RasterPos2dv(/*const GLdouble **/ double[] v) => RasterPos2dvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos2dvDel(/*const GLdouble **/ double[] v); static RasterPos2dvDel RasterPos2dvPtr;
        public static unsafe /*GLvoid*/ void RasterPos2dv(/*const GLdouble **/ double* v) => RasterPos2dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos2dvUnsafeDel(/*const GLdouble **/ double* v); static RasterPos2dvUnsafeDel RasterPos2dvUnsafePtr;
        public static /*GLvoid*/ void RasterPos2f(/*GLfloat*/ float x, /*GLfloat*/ float y) => RasterPos2fPtr?.Invoke(x, y); delegate /*GLvoid*/ void RasterPos2fDel(/*GLfloat*/ float x, /*GLfloat*/ float y); static RasterPos2fDel RasterPos2fPtr;
        public static /*GLvoid*/ void RasterPos2fv(/*const GLfloat **/ float[] v) => RasterPos2fvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos2fvDel(/*const GLfloat **/ float[] v); static RasterPos2fvDel RasterPos2fvPtr;
        public static unsafe /*GLvoid*/ void RasterPos2fv(/*const GLfloat **/ float* v) => RasterPos2fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos2fvUnsafeDel(/*const GLfloat **/ float* v); static RasterPos2fvUnsafeDel RasterPos2fvUnsafePtr;
        public static /*GLvoid*/ void RasterPos2i(/*GLint*/ int x, /*GLint*/ int y) => RasterPos2iPtr?.Invoke(x, y); delegate /*GLvoid*/ void RasterPos2iDel(/*GLint*/ int x, /*GLint*/ int y); static RasterPos2iDel RasterPos2iPtr;
        public static /*GLvoid*/ void RasterPos2iv(/*const GLint **/ int[] v) => RasterPos2ivPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos2ivDel(/*const GLint **/ int[] v); static RasterPos2ivDel RasterPos2ivPtr;
        public static unsafe /*GLvoid*/ void RasterPos2iv(/*const GLint **/ int* v) => RasterPos2ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos2ivUnsafeDel(/*const GLint **/ int* v); static RasterPos2ivUnsafeDel RasterPos2ivUnsafePtr;
        public static /*GLvoid*/ void RasterPos2s(/*GLshort*/ short x, /*GLshort*/ short y) => RasterPos2sPtr?.Invoke(x, y); delegate /*GLvoid*/ void RasterPos2sDel(/*GLshort*/ short x, /*GLshort*/ short y); static RasterPos2sDel RasterPos2sPtr;
        public static /*GLvoid*/ void RasterPos2sv(/*const GLshort **/ short[] v) => RasterPos2svPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos2svDel(/*const GLshort **/ short[] v); static RasterPos2svDel RasterPos2svPtr;
        public static unsafe /*GLvoid*/ void RasterPos2sv(/*const GLshort **/ short* v) => RasterPos2svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos2svUnsafeDel(/*const GLshort **/ short* v); static RasterPos2svUnsafeDel RasterPos2svUnsafePtr;
        public static /*GLvoid*/ void RasterPos3d(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z) => RasterPos3dPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void RasterPos3dDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z); static RasterPos3dDel RasterPos3dPtr;
        public static /*GLvoid*/ void RasterPos3dv(/*const GLdouble **/ double[] v) => RasterPos3dvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos3dvDel(/*const GLdouble **/ double[] v); static RasterPos3dvDel RasterPos3dvPtr;
        public static unsafe /*GLvoid*/ void RasterPos3dv(/*const GLdouble **/ double* v) => RasterPos3dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos3dvUnsafeDel(/*const GLdouble **/ double* v); static RasterPos3dvUnsafeDel RasterPos3dvUnsafePtr;
        public static /*GLvoid*/ void RasterPos3f(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z) => RasterPos3fPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void RasterPos3fDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z); static RasterPos3fDel RasterPos3fPtr;
        public static /*GLvoid*/ void RasterPos3fv(/*const GLfloat **/ float[] v) => RasterPos3fvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos3fvDel(/*const GLfloat **/ float[] v); static RasterPos3fvDel RasterPos3fvPtr;
        public static unsafe /*GLvoid*/ void RasterPos3fv(/*const GLfloat **/ float* v) => RasterPos3fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos3fvUnsafeDel(/*const GLfloat **/ float* v); static RasterPos3fvUnsafeDel RasterPos3fvUnsafePtr;
        public static /*GLvoid*/ void RasterPos3i(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z) => RasterPos3iPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void RasterPos3iDel(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z); static RasterPos3iDel RasterPos3iPtr;
        public static /*GLvoid*/ void RasterPos3iv(/*const GLint **/ int[] v) => RasterPos3ivPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos3ivDel(/*const GLint **/ int[] v); static RasterPos3ivDel RasterPos3ivPtr;
        public static unsafe /*GLvoid*/ void RasterPos3iv(/*const GLint **/ int* v) => RasterPos3ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos3ivUnsafeDel(/*const GLint **/ int* v); static RasterPos3ivUnsafeDel RasterPos3ivUnsafePtr;
        public static /*GLvoid*/ void RasterPos3s(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z) => RasterPos3sPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void RasterPos3sDel(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z); static RasterPos3sDel RasterPos3sPtr;
        public static /*GLvoid*/ void RasterPos3sv(/*const GLshort **/ short[] v) => RasterPos3svPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos3svDel(/*const GLshort **/ short[] v); static RasterPos3svDel RasterPos3svPtr;
        public static unsafe /*GLvoid*/ void RasterPos3sv(/*const GLshort **/ short* v) => RasterPos3svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos3svUnsafeDel(/*const GLshort **/ short* v); static RasterPos3svUnsafeDel RasterPos3svUnsafePtr;
        public static /*GLvoid*/ void RasterPos4d(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z, /*GLdouble*/ double w) => RasterPos4dPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void RasterPos4dDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z, /*GLdouble*/ double w); static RasterPos4dDel RasterPos4dPtr;
        public static /*GLvoid*/ void RasterPos4dv(/*const GLdouble **/ double[] v) => RasterPos4dvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos4dvDel(/*const GLdouble **/ double[] v); static RasterPos4dvDel RasterPos4dvPtr;
        public static unsafe /*GLvoid*/ void RasterPos4dv(/*const GLdouble **/ double* v) => RasterPos4dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos4dvUnsafeDel(/*const GLdouble **/ double* v); static RasterPos4dvUnsafeDel RasterPos4dvUnsafePtr;
        public static /*GLvoid*/ void RasterPos4f(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z, /*GLfloat*/ float w) => RasterPos4fPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void RasterPos4fDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z, /*GLfloat*/ float w); static RasterPos4fDel RasterPos4fPtr;
        public static /*GLvoid*/ void RasterPos4fv(/*const GLfloat **/ float[] v) => RasterPos4fvPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos4fvDel(/*const GLfloat **/ float[] v); static RasterPos4fvDel RasterPos4fvPtr;
        public static unsafe /*GLvoid*/ void RasterPos4fv(/*const GLfloat **/ float* v) => RasterPos4fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos4fvUnsafeDel(/*const GLfloat **/ float* v); static RasterPos4fvUnsafeDel RasterPos4fvUnsafePtr;
        public static /*GLvoid*/ void RasterPos4i(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z, /*GLint*/ int w) => RasterPos4iPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void RasterPos4iDel(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z, /*GLint*/ int w); static RasterPos4iDel RasterPos4iPtr;
        public static /*GLvoid*/ void RasterPos4iv(/*const GLint **/ int[] v) => RasterPos4ivPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos4ivDel(/*const GLint **/ int[] v); static RasterPos4ivDel RasterPos4ivPtr;
        public static unsafe /*GLvoid*/ void RasterPos4iv(/*const GLint **/ int* v) => RasterPos4ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos4ivUnsafeDel(/*const GLint **/ int* v); static RasterPos4ivUnsafeDel RasterPos4ivUnsafePtr;
        public static /*GLvoid*/ void RasterPos4s(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z, /*GLshort*/ short w) => RasterPos4sPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void RasterPos4sDel(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z, /*GLshort*/ short w); static RasterPos4sDel RasterPos4sPtr;
        public static /*GLvoid*/ void RasterPos4sv(/*const GLshort **/ short[] v) => RasterPos4svPtr?.Invoke(v); delegate /*GLvoid*/ void RasterPos4svDel(/*const GLshort **/ short[] v); static RasterPos4svDel RasterPos4svPtr;
        public static unsafe /*GLvoid*/ void RasterPos4sv(/*const GLshort **/ short* v) => RasterPos4svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void RasterPos4svUnsafeDel(/*const GLshort **/ short* v); static RasterPos4svUnsafeDel RasterPos4svUnsafePtr;
        public static /*GLvoid*/ void Rectd(/*GLdouble*/ double x1, /*GLdouble*/ double y1, /*GLdouble*/ double x2, /*GLdouble*/ double y2) => RectdPtr?.Invoke(x1, y1, x2, y2); delegate /*GLvoid*/ void RectdDel(/*GLdouble*/ double x1, /*GLdouble*/ double y1, /*GLdouble*/ double x2, /*GLdouble*/ double y2); static RectdDel RectdPtr;
        public static /*GLvoid*/ void Rectdv(/*const GLdouble **/ double[] v1, /*const GLdouble **/ double[] v2) => RectdvPtr?.Invoke(v1, v2); delegate /*GLvoid*/ void RectdvDel(/*const GLdouble **/ double[] v1, /*const GLdouble **/ double[] v2); static RectdvDel RectdvPtr;
        public static unsafe /*GLvoid*/ void Rectdv(/*const GLdouble **/ double* v1, /*const GLdouble **/ double* v2) => RectdvUnsafePtr?.Invoke(v1, v2); unsafe delegate /*GLvoid*/ void RectdvUnsafeDel(/*const GLdouble **/ double* v1, /*const GLdouble **/ double* v2); static RectdvUnsafeDel RectdvUnsafePtr;
        public static /*GLvoid*/ void Rectf(/*GLfloat*/ float x1, /*GLfloat*/ float y1, /*GLfloat*/ float x2, /*GLfloat*/ float y2) => RectfPtr?.Invoke(x1, y1, x2, y2); delegate /*GLvoid*/ void RectfDel(/*GLfloat*/ float x1, /*GLfloat*/ float y1, /*GLfloat*/ float x2, /*GLfloat*/ float y2); static RectfDel RectfPtr;
        public static /*GLvoid*/ void Rectfv(/*const GLfloat **/ float[] v1, /*const GLfloat **/ float[] v2) => RectfvPtr?.Invoke(v1, v2); delegate /*GLvoid*/ void RectfvDel(/*const GLfloat **/ float[] v1, /*const GLfloat **/ float[] v2); static RectfvDel RectfvPtr;
        public static unsafe /*GLvoid*/ void Rectfv(/*const GLfloat **/ float* v1, /*const GLfloat **/ float* v2) => RectfvUnsafePtr?.Invoke(v1, v2); unsafe delegate /*GLvoid*/ void RectfvUnsafeDel(/*const GLfloat **/ float* v1, /*const GLfloat **/ float* v2); static RectfvUnsafeDel RectfvUnsafePtr;
        public static /*GLvoid*/ void Recti(/*GLint*/ int x1, /*GLint*/ int y1, /*GLint*/ int x2, /*GLint*/ int y2) => RectiPtr?.Invoke(x1, y1, x2, y2); delegate /*GLvoid*/ void RectiDel(/*GLint*/ int x1, /*GLint*/ int y1, /*GLint*/ int x2, /*GLint*/ int y2); static RectiDel RectiPtr;
        public static /*GLvoid*/ void Rectiv(/*const GLint **/ int[] v1, /*const GLint **/ int[] v2) => RectivPtr?.Invoke(v1, v2); delegate /*GLvoid*/ void RectivDel(/*const GLint **/ int[] v1, /*const GLint **/ int[] v2); static RectivDel RectivPtr;
        public static unsafe /*GLvoid*/ void Rectiv(/*const GLint **/ int* v1, /*const GLint **/ int* v2) => RectivUnsafePtr?.Invoke(v1, v2); unsafe delegate /*GLvoid*/ void RectivUnsafeDel(/*const GLint **/ int* v1, /*const GLint **/ int* v2); static RectivUnsafeDel RectivUnsafePtr;
        public static /*GLvoid*/ void Rects(/*GLshort*/ short x1, /*GLshort*/ short y1, /*GLshort*/ short x2, /*GLshort*/ short y2) => RectsPtr?.Invoke(x1, y1, x2, y2); delegate /*GLvoid*/ void RectsDel(/*GLshort*/ short x1, /*GLshort*/ short y1, /*GLshort*/ short x2, /*GLshort*/ short y2); static RectsDel RectsPtr;
        public static /*GLvoid*/ void Rectsv(/*const GLshort **/ short[] v1, /*const GLshort **/ short[] v2) => RectsvPtr?.Invoke(v1, v2); delegate /*GLvoid*/ void RectsvDel(/*const GLshort **/ short[] v1, /*const GLshort **/ short[] v2); static RectsvDel RectsvPtr;
        public static unsafe /*GLvoid*/ void Rectsv(/*const GLshort **/ short* v1, /*const GLshort **/ short* v2) => RectsvUnsafePtr?.Invoke(v1, v2); unsafe delegate /*GLvoid*/ void RectsvUnsafeDel(/*const GLshort **/ short* v1, /*const GLshort **/ short* v2); static RectsvUnsafeDel RectsvUnsafePtr;
        public static /*GLvoid*/ void TexCoord1d(/*GLdouble*/ double s) => TexCoord1dPtr?.Invoke(s); delegate /*GLvoid*/ void TexCoord1dDel(/*GLdouble*/ double s); static TexCoord1dDel TexCoord1dPtr;
        public static /*GLvoid*/ void TexCoord1dv(/*const GLdouble **/ double[] v) => TexCoord1dvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord1dvDel(/*const GLdouble **/ double[] v); static TexCoord1dvDel TexCoord1dvPtr;
        public static unsafe /*GLvoid*/ void TexCoord1dv(/*const GLdouble **/ double* v) => TexCoord1dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord1dvUnsafeDel(/*const GLdouble **/ double* v); static TexCoord1dvUnsafeDel TexCoord1dvUnsafePtr;
        public static /*GLvoid*/ void TexCoord1f(/*GLfloat*/ float s) => TexCoord1fPtr?.Invoke(s); delegate /*GLvoid*/ void TexCoord1fDel(/*GLfloat*/ float s); static TexCoord1fDel TexCoord1fPtr;
        public static /*GLvoid*/ void TexCoord1fv(/*const GLfloat **/ float[] v) => TexCoord1fvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord1fvDel(/*const GLfloat **/ float[] v); static TexCoord1fvDel TexCoord1fvPtr;
        public static unsafe /*GLvoid*/ void TexCoord1fv(/*const GLfloat **/ float* v) => TexCoord1fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord1fvUnsafeDel(/*const GLfloat **/ float* v); static TexCoord1fvUnsafeDel TexCoord1fvUnsafePtr;
        public static /*GLvoid*/ void TexCoord1i(/*GLint*/ int s) => TexCoord1iPtr?.Invoke(s); delegate /*GLvoid*/ void TexCoord1iDel(/*GLint*/ int s); static TexCoord1iDel TexCoord1iPtr;
        public static /*GLvoid*/ void TexCoord1iv(/*const GLint **/ int[] v) => TexCoord1ivPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord1ivDel(/*const GLint **/ int[] v); static TexCoord1ivDel TexCoord1ivPtr;
        public static unsafe /*GLvoid*/ void TexCoord1iv(/*const GLint **/ int* v) => TexCoord1ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord1ivUnsafeDel(/*const GLint **/ int* v); static TexCoord1ivUnsafeDel TexCoord1ivUnsafePtr;
        public static /*GLvoid*/ void TexCoord1s(/*GLshort*/ short s) => TexCoord1sPtr?.Invoke(s); delegate /*GLvoid*/ void TexCoord1sDel(/*GLshort*/ short s); static TexCoord1sDel TexCoord1sPtr;
        public static /*GLvoid*/ void TexCoord1sv(/*const GLshort **/ short[] v) => TexCoord1svPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord1svDel(/*const GLshort **/ short[] v); static TexCoord1svDel TexCoord1svPtr;
        public static unsafe /*GLvoid*/ void TexCoord1sv(/*const GLshort **/ short* v) => TexCoord1svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord1svUnsafeDel(/*const GLshort **/ short* v); static TexCoord1svUnsafeDel TexCoord1svUnsafePtr;
        public static /*GLvoid*/ void TexCoord2d(/*GLdouble*/ double s, /*GLdouble*/ double t) => TexCoord2dPtr?.Invoke(s, t); delegate /*GLvoid*/ void TexCoord2dDel(/*GLdouble*/ double s, /*GLdouble*/ double t); static TexCoord2dDel TexCoord2dPtr;
        public static /*GLvoid*/ void TexCoord2dv(/*const GLdouble **/ double[] v) => TexCoord2dvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord2dvDel(/*const GLdouble **/ double[] v); static TexCoord2dvDel TexCoord2dvPtr;
        public static unsafe /*GLvoid*/ void TexCoord2dv(/*const GLdouble **/ double* v) => TexCoord2dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord2dvUnsafeDel(/*const GLdouble **/ double* v); static TexCoord2dvUnsafeDel TexCoord2dvUnsafePtr;
        public static /*GLvoid*/ void TexCoord2f(/*GLfloat*/ float s, /*GLfloat*/ float t) => TexCoord2fPtr?.Invoke(s, t); delegate /*GLvoid*/ void TexCoord2fDel(/*GLfloat*/ float s, /*GLfloat*/ float t); static TexCoord2fDel TexCoord2fPtr;
        public static /*GLvoid*/ void TexCoord2fv(/*const GLfloat **/ float[] v) => TexCoord2fvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord2fvDel(/*const GLfloat **/ float[] v); static TexCoord2fvDel TexCoord2fvPtr;
        public static unsafe /*GLvoid*/ void TexCoord2fv(/*const GLfloat **/ float* v) => TexCoord2fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord2fvUnsafeDel(/*const GLfloat **/ float* v); static TexCoord2fvUnsafeDel TexCoord2fvUnsafePtr;
        public static /*GLvoid*/ void TexCoord2i(/*GLint*/ int s, /*GLint*/ int t) => TexCoord2iPtr?.Invoke(s, t); delegate /*GLvoid*/ void TexCoord2iDel(/*GLint*/ int s, /*GLint*/ int t); static TexCoord2iDel TexCoord2iPtr;
        public static /*GLvoid*/ void TexCoord2iv(/*const GLint **/ int[] v) => TexCoord2ivPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord2ivDel(/*const GLint **/ int[] v); static TexCoord2ivDel TexCoord2ivPtr;
        public static unsafe /*GLvoid*/ void TexCoord2iv(/*const GLint **/ int* v) => TexCoord2ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord2ivUnsafeDel(/*const GLint **/ int* v); static TexCoord2ivUnsafeDel TexCoord2ivUnsafePtr;
        public static /*GLvoid*/ void TexCoord2s(/*GLshort*/ short s, /*GLshort*/ short t) => TexCoord2sPtr?.Invoke(s, t); delegate /*GLvoid*/ void TexCoord2sDel(/*GLshort*/ short s, /*GLshort*/ short t); static TexCoord2sDel TexCoord2sPtr;
        public static /*GLvoid*/ void TexCoord2sv(/*const GLshort **/ short[] v) => TexCoord2svPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord2svDel(/*const GLshort **/ short[] v); static TexCoord2svDel TexCoord2svPtr;
        public static unsafe /*GLvoid*/ void TexCoord2sv(/*const GLshort **/ short* v) => TexCoord2svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord2svUnsafeDel(/*const GLshort **/ short* v); static TexCoord2svUnsafeDel TexCoord2svUnsafePtr;
        public static /*GLvoid*/ void TexCoord3d(/*GLdouble*/ double s, /*GLdouble*/ double t, /*GLdouble*/ double r) => TexCoord3dPtr?.Invoke(s, t, r); delegate /*GLvoid*/ void TexCoord3dDel(/*GLdouble*/ double s, /*GLdouble*/ double t, /*GLdouble*/ double r); static TexCoord3dDel TexCoord3dPtr;
        public static /*GLvoid*/ void TexCoord3dv(/*const GLdouble **/ double[] v) => TexCoord3dvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord3dvDel(/*const GLdouble **/ double[] v); static TexCoord3dvDel TexCoord3dvPtr;
        public static unsafe /*GLvoid*/ void TexCoord3dv(/*const GLdouble **/ double* v) => TexCoord3dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord3dvUnsafeDel(/*const GLdouble **/ double* v); static TexCoord3dvUnsafeDel TexCoord3dvUnsafePtr;
        public static /*GLvoid*/ void TexCoord3f(/*GLfloat*/ float s, /*GLfloat*/ float t, /*GLfloat*/ float r) => TexCoord3fPtr?.Invoke(s, t, r); delegate /*GLvoid*/ void TexCoord3fDel(/*GLfloat*/ float s, /*GLfloat*/ float t, /*GLfloat*/ float r); static TexCoord3fDel TexCoord3fPtr;
        public static /*GLvoid*/ void TexCoord3fv(/*const GLfloat **/ float[] v) => TexCoord3fvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord3fvDel(/*const GLfloat **/ float[] v); static TexCoord3fvDel TexCoord3fvPtr;
        public static unsafe /*GLvoid*/ void TexCoord3fv(/*const GLfloat **/ float* v) => TexCoord3fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord3fvUnsafeDel(/*const GLfloat **/ float* v); static TexCoord3fvUnsafeDel TexCoord3fvUnsafePtr;
        public static /*GLvoid*/ void TexCoord3i(/*GLint*/ int s, /*GLint*/ int t, /*GLint*/ int r) => TexCoord3iPtr?.Invoke(s, t, r); delegate /*GLvoid*/ void TexCoord3iDel(/*GLint*/ int s, /*GLint*/ int t, /*GLint*/ int r); static TexCoord3iDel TexCoord3iPtr;
        public static /*GLvoid*/ void TexCoord3iv(/*const GLint **/ int[] v) => TexCoord3ivPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord3ivDel(/*const GLint **/ int[] v); static TexCoord3ivDel TexCoord3ivPtr;
        public static unsafe /*GLvoid*/ void TexCoord3iv(/*const GLint **/ int* v) => TexCoord3ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord3ivUnsafeDel(/*const GLint **/ int* v); static TexCoord3ivUnsafeDel TexCoord3ivUnsafePtr;
        public static /*GLvoid*/ void TexCoord3s(/*GLshort*/ short s, /*GLshort*/ short t, /*GLshort*/ short r) => TexCoord3sPtr?.Invoke(s, t, r); delegate /*GLvoid*/ void TexCoord3sDel(/*GLshort*/ short s, /*GLshort*/ short t, /*GLshort*/ short r); static TexCoord3sDel TexCoord3sPtr;
        public static /*GLvoid*/ void TexCoord3sv(/*const GLshort **/ short[] v) => TexCoord3svPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord3svDel(/*const GLshort **/ short[] v); static TexCoord3svDel TexCoord3svPtr;
        public static unsafe /*GLvoid*/ void TexCoord3sv(/*const GLshort **/ short* v) => TexCoord3svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord3svUnsafeDel(/*const GLshort **/ short* v); static TexCoord3svUnsafeDel TexCoord3svUnsafePtr;
        public static /*GLvoid*/ void TexCoord4d(/*GLdouble*/ double s, /*GLdouble*/ double t, /*GLdouble*/ double r, /*GLdouble*/ double q) => TexCoord4dPtr?.Invoke(s, t, r, q); delegate /*GLvoid*/ void TexCoord4dDel(/*GLdouble*/ double s, /*GLdouble*/ double t, /*GLdouble*/ double r, /*GLdouble*/ double q); static TexCoord4dDel TexCoord4dPtr;
        public static /*GLvoid*/ void TexCoord4dv(/*const GLdouble **/ double[] v) => TexCoord4dvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord4dvDel(/*const GLdouble **/ double[] v); static TexCoord4dvDel TexCoord4dvPtr;
        public static unsafe /*GLvoid*/ void TexCoord4dv(/*const GLdouble **/ double* v) => TexCoord4dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord4dvUnsafeDel(/*const GLdouble **/ double* v); static TexCoord4dvUnsafeDel TexCoord4dvUnsafePtr;
        public static /*GLvoid*/ void TexCoord4f(/*GLfloat*/ float s, /*GLfloat*/ float t, /*GLfloat*/ float r, /*GLfloat*/ float q) => TexCoord4fPtr?.Invoke(s, t, r, q); delegate /*GLvoid*/ void TexCoord4fDel(/*GLfloat*/ float s, /*GLfloat*/ float t, /*GLfloat*/ float r, /*GLfloat*/ float q); static TexCoord4fDel TexCoord4fPtr;
        public static /*GLvoid*/ void TexCoord4fv(/*const GLfloat **/ float[] v) => TexCoord4fvPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord4fvDel(/*const GLfloat **/ float[] v); static TexCoord4fvDel TexCoord4fvPtr;
        public static unsafe /*GLvoid*/ void TexCoord4fv(/*const GLfloat **/ float* v) => TexCoord4fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord4fvUnsafeDel(/*const GLfloat **/ float* v); static TexCoord4fvUnsafeDel TexCoord4fvUnsafePtr;
        public static /*GLvoid*/ void TexCoord4i(/*GLint*/ int s, /*GLint*/ int t, /*GLint*/ int r, /*GLint*/ int q) => TexCoord4iPtr?.Invoke(s, t, r, q); delegate /*GLvoid*/ void TexCoord4iDel(/*GLint*/ int s, /*GLint*/ int t, /*GLint*/ int r, /*GLint*/ int q); static TexCoord4iDel TexCoord4iPtr;
        public static /*GLvoid*/ void TexCoord4iv(/*const GLint **/ int[] v) => TexCoord4ivPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord4ivDel(/*const GLint **/ int[] v); static TexCoord4ivDel TexCoord4ivPtr;
        public static unsafe /*GLvoid*/ void TexCoord4iv(/*const GLint **/ int* v) => TexCoord4ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord4ivUnsafeDel(/*const GLint **/ int* v); static TexCoord4ivUnsafeDel TexCoord4ivUnsafePtr;
        public static /*GLvoid*/ void TexCoord4s(/*GLshort*/ short s, /*GLshort*/ short t, /*GLshort*/ short r, /*GLshort*/ short q) => TexCoord4sPtr?.Invoke(s, t, r, q); delegate /*GLvoid*/ void TexCoord4sDel(/*GLshort*/ short s, /*GLshort*/ short t, /*GLshort*/ short r, /*GLshort*/ short q); static TexCoord4sDel TexCoord4sPtr;
        public static /*GLvoid*/ void TexCoord4sv(/*const GLshort **/ short[] v) => TexCoord4svPtr?.Invoke(v); delegate /*GLvoid*/ void TexCoord4svDel(/*const GLshort **/ short[] v); static TexCoord4svDel TexCoord4svPtr;
        public static unsafe /*GLvoid*/ void TexCoord4sv(/*const GLshort **/ short* v) => TexCoord4svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void TexCoord4svUnsafeDel(/*const GLshort **/ short* v); static TexCoord4svUnsafeDel TexCoord4svUnsafePtr;
        public static /*GLvoid*/ void Vertex2d(/*GLdouble*/ double x, /*GLdouble*/ double y) => Vertex2dPtr?.Invoke(x, y); delegate /*GLvoid*/ void Vertex2dDel(/*GLdouble*/ double x, /*GLdouble*/ double y); static Vertex2dDel Vertex2dPtr;
        public static /*GLvoid*/ void Vertex2dv(/*const GLdouble **/ double[] v) => Vertex2dvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex2dvDel(/*const GLdouble **/ double[] v); static Vertex2dvDel Vertex2dvPtr;
        public static unsafe /*GLvoid*/ void Vertex2dv(/*const GLdouble **/ double* v) => Vertex2dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex2dvUnsafeDel(/*const GLdouble **/ double* v); static Vertex2dvUnsafeDel Vertex2dvUnsafePtr;
        public static /*GLvoid*/ void Vertex2f(/*GLfloat*/ float x, /*GLfloat*/ float y) => Vertex2fPtr?.Invoke(x, y); delegate /*GLvoid*/ void Vertex2fDel(/*GLfloat*/ float x, /*GLfloat*/ float y); static Vertex2fDel Vertex2fPtr;
        public static /*GLvoid*/ void Vertex2fv(/*const GLfloat **/ float[] v) => Vertex2fvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex2fvDel(/*const GLfloat **/ float[] v); static Vertex2fvDel Vertex2fvPtr;
        public static unsafe /*GLvoid*/ void Vertex2fv(/*const GLfloat **/ float* v) => Vertex2fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex2fvUnsafeDel(/*const GLfloat **/ float* v); static Vertex2fvUnsafeDel Vertex2fvUnsafePtr;
        public static /*GLvoid*/ void Vertex2i(/*GLint*/ int x, /*GLint*/ int y) => Vertex2iPtr?.Invoke(x, y); delegate /*GLvoid*/ void Vertex2iDel(/*GLint*/ int x, /*GLint*/ int y); static Vertex2iDel Vertex2iPtr;
        public static /*GLvoid*/ void Vertex2iv(/*const GLint **/ int[] v) => Vertex2ivPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex2ivDel(/*const GLint **/ int[] v); static Vertex2ivDel Vertex2ivPtr;
        public static unsafe /*GLvoid*/ void Vertex2iv(/*const GLint **/ int* v) => Vertex2ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex2ivUnsafeDel(/*const GLint **/ int* v); static Vertex2ivUnsafeDel Vertex2ivUnsafePtr;
        public static /*GLvoid*/ void Vertex2s(/*GLshort*/ short x, /*GLshort*/ short y) => Vertex2sPtr?.Invoke(x, y); delegate /*GLvoid*/ void Vertex2sDel(/*GLshort*/ short x, /*GLshort*/ short y); static Vertex2sDel Vertex2sPtr;
        public static /*GLvoid*/ void Vertex2sv(/*const GLshort **/ short[] v) => Vertex2svPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex2svDel(/*const GLshort **/ short[] v); static Vertex2svDel Vertex2svPtr;
        public static unsafe /*GLvoid*/ void Vertex2sv(/*const GLshort **/ short* v) => Vertex2svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex2svUnsafeDel(/*const GLshort **/ short* v); static Vertex2svUnsafeDel Vertex2svUnsafePtr;
        public static /*GLvoid*/ void Vertex3d(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z) => Vertex3dPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void Vertex3dDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z); static Vertex3dDel Vertex3dPtr;
        public static /*GLvoid*/ void Vertex3dv(/*const GLdouble **/ double[] v) => Vertex3dvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex3dvDel(/*const GLdouble **/ double[] v); static Vertex3dvDel Vertex3dvPtr;
        public static unsafe /*GLvoid*/ void Vertex3dv(/*const GLdouble **/ double* v) => Vertex3dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex3dvUnsafeDel(/*const GLdouble **/ double* v); static Vertex3dvUnsafeDel Vertex3dvUnsafePtr;
        public static /*GLvoid*/ void Vertex3f(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z) => Vertex3fPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void Vertex3fDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z); static Vertex3fDel Vertex3fPtr;
        public static /*GLvoid*/ void Vertex3fv(/*const GLfloat **/ float[] v) => Vertex3fvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex3fvDel(/*const GLfloat **/ float[] v); static Vertex3fvDel Vertex3fvPtr;
        public static unsafe /*GLvoid*/ void Vertex3fv(/*const GLfloat **/ float* v) => Vertex3fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex3fvUnsafeDel(/*const GLfloat **/ float* v); static Vertex3fvUnsafeDel Vertex3fvUnsafePtr;
        public static /*GLvoid*/ void Vertex3i(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z) => Vertex3iPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void Vertex3iDel(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z); static Vertex3iDel Vertex3iPtr;
        public static /*GLvoid*/ void Vertex3iv(/*const GLint **/ int[] v) => Vertex3ivPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex3ivDel(/*const GLint **/ int[] v); static Vertex3ivDel Vertex3ivPtr;
        public static unsafe /*GLvoid*/ void Vertex3iv(/*const GLint **/ int* v) => Vertex3ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex3ivUnsafeDel(/*const GLint **/ int* v); static Vertex3ivUnsafeDel Vertex3ivUnsafePtr;
        public static /*GLvoid*/ void Vertex3s(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z) => Vertex3sPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void Vertex3sDel(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z); static Vertex3sDel Vertex3sPtr;
        public static /*GLvoid*/ void Vertex3sv(/*const GLshort **/ short[] v) => Vertex3svPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex3svDel(/*const GLshort **/ short[] v); static Vertex3svDel Vertex3svPtr;
        public static unsafe /*GLvoid*/ void Vertex3sv(/*const GLshort **/ short* v) => Vertex3svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex3svUnsafeDel(/*const GLshort **/ short* v); static Vertex3svUnsafeDel Vertex3svUnsafePtr;
        public static /*GLvoid*/ void Vertex4d(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z, /*GLdouble*/ double w) => Vertex4dPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void Vertex4dDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z, /*GLdouble*/ double w); static Vertex4dDel Vertex4dPtr;
        public static /*GLvoid*/ void Vertex4dv(/*const GLdouble **/ double[] v) => Vertex4dvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex4dvDel(/*const GLdouble **/ double[] v); static Vertex4dvDel Vertex4dvPtr;
        public static unsafe /*GLvoid*/ void Vertex4dv(/*const GLdouble **/ double* v) => Vertex4dvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex4dvUnsafeDel(/*const GLdouble **/ double* v); static Vertex4dvUnsafeDel Vertex4dvUnsafePtr;
        public static /*GLvoid*/ void Vertex4f(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z, /*GLfloat*/ float w) => Vertex4fPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void Vertex4fDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z, /*GLfloat*/ float w); static Vertex4fDel Vertex4fPtr;
        public static /*GLvoid*/ void Vertex4fv(/*const GLfloat **/ float[] v) => Vertex4fvPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex4fvDel(/*const GLfloat **/ float[] v); static Vertex4fvDel Vertex4fvPtr;
        public static unsafe /*GLvoid*/ void Vertex4fv(/*const GLfloat **/ float* v) => Vertex4fvUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex4fvUnsafeDel(/*const GLfloat **/ float* v); static Vertex4fvUnsafeDel Vertex4fvUnsafePtr;
        public static /*GLvoid*/ void Vertex4i(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z, /*GLint*/ int w) => Vertex4iPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void Vertex4iDel(/*GLint*/ int x, /*GLint*/ int y, /*GLint*/ int z, /*GLint*/ int w); static Vertex4iDel Vertex4iPtr;
        public static /*GLvoid*/ void Vertex4iv(/*const GLint **/ int[] v) => Vertex4ivPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex4ivDel(/*const GLint **/ int[] v); static Vertex4ivDel Vertex4ivPtr;
        public static unsafe /*GLvoid*/ void Vertex4iv(/*const GLint **/ int* v) => Vertex4ivUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex4ivUnsafeDel(/*const GLint **/ int* v); static Vertex4ivUnsafeDel Vertex4ivUnsafePtr;
        public static /*GLvoid*/ void Vertex4s(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z, /*GLshort*/ short w) => Vertex4sPtr?.Invoke(x, y, z, w); delegate /*GLvoid*/ void Vertex4sDel(/*GLshort*/ short x, /*GLshort*/ short y, /*GLshort*/ short z, /*GLshort*/ short w); static Vertex4sDel Vertex4sPtr;
        public static /*GLvoid*/ void Vertex4sv(/*const GLshort **/ short[] v) => Vertex4svPtr?.Invoke(v); delegate /*GLvoid*/ void Vertex4svDel(/*const GLshort **/ short[] v); static Vertex4svDel Vertex4svPtr;
        public static unsafe /*GLvoid*/ void Vertex4sv(/*const GLshort **/ short* v) => Vertex4svUnsafePtr?.Invoke(v); unsafe delegate /*GLvoid*/ void Vertex4svUnsafeDel(/*const GLshort **/ short* v); static Vertex4svUnsafeDel Vertex4svUnsafePtr;
        public static /*GLvoid*/ void ClipPlane(/*GLenum*/ uint plane, /*const GLdouble **/ double[] equation) => ClipPlanePtr?.Invoke(plane, equation); delegate /*GLvoid*/ void ClipPlaneDel(/*GLenum*/ uint plane, /*const GLdouble **/ double[] equation); static ClipPlaneDel ClipPlanePtr;
        public static unsafe /*GLvoid*/ void ClipPlane(/*GLenum*/ uint plane, /*const GLdouble **/ double* equation) => ClipPlaneUnsafePtr?.Invoke(plane, equation); unsafe delegate /*GLvoid*/ void ClipPlaneUnsafeDel(/*GLenum*/ uint plane, /*const GLdouble **/ double* equation); static ClipPlaneUnsafeDel ClipPlaneUnsafePtr;
        public static /*GLvoid*/ void ColorMaterial(/*GLenum*/ uint face, /*GLenum*/ uint mode) => ColorMaterialPtr?.Invoke(face, mode); delegate /*GLvoid*/ void ColorMaterialDel(/*GLenum*/ uint face, /*GLenum*/ uint mode); static ColorMaterialDel ColorMaterialPtr;
        public static /*GLvoid*/ void Fogf(/*GLenum*/ uint pname, /*GLfloat*/ float param) => FogfPtr?.Invoke(pname, param); delegate /*GLvoid*/ void FogfDel(/*GLenum*/ uint pname, /*GLfloat*/ float param); static FogfDel FogfPtr;
        public static /*GLvoid*/ void Fogfv(/*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => FogfvPtr?.Invoke(pname, parameters); delegate /*GLvoid*/ void FogfvDel(/*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static FogfvDel FogfvPtr;
        public static unsafe /*GLvoid*/ void Fogfv(/*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => FogfvUnsafePtr?.Invoke(pname, parameters); unsafe delegate /*GLvoid*/ void FogfvUnsafeDel(/*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static FogfvUnsafeDel FogfvUnsafePtr;
        public static /*GLvoid*/ void Fogi(/*GLenum*/ uint pname, /*GLint*/ int param) => FogiPtr?.Invoke(pname, param); delegate /*GLvoid*/ void FogiDel(/*GLenum*/ uint pname, /*GLint*/ int param); static FogiDel FogiPtr;
        public static /*GLvoid*/ void Fogiv(/*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => FogivPtr?.Invoke(pname, parameters); delegate /*GLvoid*/ void FogivDel(/*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static FogivDel FogivPtr;
        public static unsafe /*GLvoid*/ void Fogiv(/*GLenum*/ uint pname, /*const GLint **/ int* parameters) => FogivUnsafePtr?.Invoke(pname, parameters); unsafe delegate /*GLvoid*/ void FogivUnsafeDel(/*GLenum*/ uint pname, /*const GLint **/ int* parameters); static FogivUnsafeDel FogivUnsafePtr;
        public static /*GLvoid*/ void Lightf(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat*/ float param) => LightfPtr?.Invoke(light, pname, param); delegate /*GLvoid*/ void LightfDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat*/ float param); static LightfDel LightfPtr;
        public static /*GLvoid*/ void Lightfv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => LightfvPtr?.Invoke(light, pname, parameters); delegate /*GLvoid*/ void LightfvDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static LightfvDel LightfvPtr;
        public static unsafe /*GLvoid*/ void Lightfv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => LightfvUnsafePtr?.Invoke(light, pname, parameters); unsafe delegate /*GLvoid*/ void LightfvUnsafeDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static LightfvUnsafeDel LightfvUnsafePtr;
        public static /*GLvoid*/ void Lighti(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint*/ int param) => LightiPtr?.Invoke(light, pname, param); delegate /*GLvoid*/ void LightiDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint*/ int param); static LightiDel LightiPtr;
        public static /*GLvoid*/ void Lightiv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => LightivPtr?.Invoke(light, pname, parameters); delegate /*GLvoid*/ void LightivDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static LightivDel LightivPtr;
        public static unsafe /*GLvoid*/ void Lightiv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLint **/ int* parameters) => LightivUnsafePtr?.Invoke(light, pname, parameters); unsafe delegate /*GLvoid*/ void LightivUnsafeDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*const GLint **/ int* parameters); static LightivUnsafeDel LightivUnsafePtr;
        public static /*GLvoid*/ void LightModelf(/*GLenum*/ uint pname, /*GLfloat*/ float param) => LightModelfPtr?.Invoke(pname, param); delegate /*GLvoid*/ void LightModelfDel(/*GLenum*/ uint pname, /*GLfloat*/ float param); static LightModelfDel LightModelfPtr;
        public static /*GLvoid*/ void LightModelfv(/*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => LightModelfvPtr?.Invoke(pname, parameters); delegate /*GLvoid*/ void LightModelfvDel(/*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static LightModelfvDel LightModelfvPtr;
        public static unsafe /*GLvoid*/ void LightModelfv(/*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => LightModelfvUnsafePtr?.Invoke(pname, parameters); unsafe delegate /*GLvoid*/ void LightModelfvUnsafeDel(/*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static LightModelfvUnsafeDel LightModelfvUnsafePtr;
        public static /*GLvoid*/ void LightModeli(/*GLenum*/ uint pname, /*GLint*/ int param) => LightModeliPtr?.Invoke(pname, param); delegate /*GLvoid*/ void LightModeliDel(/*GLenum*/ uint pname, /*GLint*/ int param); static LightModeliDel LightModeliPtr;
        public static /*GLvoid*/ void LightModeliv(/*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => LightModelivPtr?.Invoke(pname, parameters); delegate /*GLvoid*/ void LightModelivDel(/*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static LightModelivDel LightModelivPtr;
        public static unsafe /*GLvoid*/ void LightModeliv(/*GLenum*/ uint pname, /*const GLint **/ int* parameters) => LightModelivUnsafePtr?.Invoke(pname, parameters); unsafe delegate /*GLvoid*/ void LightModelivUnsafeDel(/*GLenum*/ uint pname, /*const GLint **/ int* parameters); static LightModelivUnsafeDel LightModelivUnsafePtr;
        public static /*GLvoid*/ void LineStipple(/*GLint*/ int factor, /*GLushort*/ ushort pattern) => LineStipplePtr?.Invoke(factor, pattern); delegate /*GLvoid*/ void LineStippleDel(/*GLint*/ int factor, /*GLushort*/ ushort pattern); static LineStippleDel LineStipplePtr;
        public static /*GLvoid*/ void Materialf(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat*/ float param) => MaterialfPtr?.Invoke(face, pname, param); delegate /*GLvoid*/ void MaterialfDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat*/ float param); static MaterialfDel MaterialfPtr;
        public static /*GLvoid*/ void Materialfv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => MaterialfvPtr?.Invoke(face, pname, parameters); delegate /*GLvoid*/ void MaterialfvDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static MaterialfvDel MaterialfvPtr;
        public static unsafe /*GLvoid*/ void Materialfv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => MaterialfvUnsafePtr?.Invoke(face, pname, parameters); unsafe delegate /*GLvoid*/ void MaterialfvUnsafeDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static MaterialfvUnsafeDel MaterialfvUnsafePtr;
        public static /*GLvoid*/ void Materiali(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint*/ int param) => MaterialiPtr?.Invoke(face, pname, param); delegate /*GLvoid*/ void MaterialiDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint*/ int param); static MaterialiDel MaterialiPtr;
        public static /*GLvoid*/ void Materialiv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => MaterialivPtr?.Invoke(face, pname, parameters); delegate /*GLvoid*/ void MaterialivDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static MaterialivDel MaterialivPtr;
        public static unsafe /*GLvoid*/ void Materialiv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLint **/ int* parameters) => MaterialivUnsafePtr?.Invoke(face, pname, parameters); unsafe delegate /*GLvoid*/ void MaterialivUnsafeDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*const GLint **/ int* parameters); static MaterialivUnsafeDel MaterialivUnsafePtr;
        public static /*GLvoid*/ void PolygonStipple(/*const GLubyte **/ byte[] mask) => PolygonStipplePtr?.Invoke(mask); delegate /*GLvoid*/ void PolygonStippleDel(/*const GLubyte **/ byte[] mask); static PolygonStippleDel PolygonStipplePtr;
        public static unsafe /*GLvoid*/ void PolygonStipple(/*const GLubyte **/ byte* mask) => PolygonStippleUnsafePtr?.Invoke(mask); unsafe delegate /*GLvoid*/ void PolygonStippleUnsafeDel(/*const GLubyte **/ byte* mask); static PolygonStippleUnsafeDel PolygonStippleUnsafePtr;
        public static /*GLvoid*/ void ShadeModel(/*GLenum*/ uint mode) => ShadeModelPtr?.Invoke(mode); delegate /*GLvoid*/ void ShadeModelDel(/*GLenum*/ uint mode); static ShadeModelDel ShadeModelPtr;
        public static /*GLvoid*/ void TexEnvf(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat*/ float param) => TexEnvfPtr?.Invoke(target, pname, param); delegate /*GLvoid*/ void TexEnvfDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat*/ float param); static TexEnvfDel TexEnvfPtr;
        public static /*GLvoid*/ void TexEnvfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => TexEnvfvPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void TexEnvfvDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static TexEnvfvDel TexEnvfvPtr;
        public static unsafe /*GLvoid*/ void TexEnvfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => TexEnvfvUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void TexEnvfvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static TexEnvfvUnsafeDel TexEnvfvUnsafePtr;
        public static /*GLvoid*/ void TexEnvi(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint*/ int param) => TexEnviPtr?.Invoke(target, pname, param); delegate /*GLvoid*/ void TexEnviDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint*/ int param); static TexEnviDel TexEnviPtr;
        public static /*GLvoid*/ void TexEnviv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => TexEnvivPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void TexEnvivDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static TexEnvivDel TexEnvivPtr;
        public static unsafe /*GLvoid*/ void TexEnviv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int* parameters) => TexEnvivUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void TexEnvivUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*const GLint **/ int* parameters); static TexEnvivUnsafeDel TexEnvivUnsafePtr;
        public static /*GLvoid*/ void TexGend(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble*/ double param) => TexGendPtr?.Invoke(coord, pname, param); delegate /*GLvoid*/ void TexGendDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble*/ double param); static TexGendDel TexGendPtr;
        public static /*GLvoid*/ void TexGendv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLdouble **/ double[] parameters) => TexGendvPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void TexGendvDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLdouble **/ double[] parameters); static TexGendvDel TexGendvPtr;
        public static unsafe /*GLvoid*/ void TexGendv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLdouble **/ double* parameters) => TexGendvUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void TexGendvUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLdouble **/ double* parameters); static TexGendvUnsafeDel TexGendvUnsafePtr;
        public static /*GLvoid*/ void TexGenf(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat*/ float param) => TexGenfPtr?.Invoke(coord, pname, param); delegate /*GLvoid*/ void TexGenfDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat*/ float param); static TexGenfDel TexGenfPtr;
        public static /*GLvoid*/ void TexGenfv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters) => TexGenfvPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void TexGenfvDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLfloat **/ float[] parameters); static TexGenfvDel TexGenfvPtr;
        public static unsafe /*GLvoid*/ void TexGenfv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters) => TexGenfvUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void TexGenfvUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLfloat **/ float* parameters); static TexGenfvUnsafeDel TexGenfvUnsafePtr;
        public static /*GLvoid*/ void TexGeni(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint*/ int param) => TexGeniPtr?.Invoke(coord, pname, param); delegate /*GLvoid*/ void TexGeniDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint*/ int param); static TexGeniDel TexGeniPtr;
        public static /*GLvoid*/ void TexGeniv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters) => TexGenivPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void TexGenivDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLint **/ int[] parameters); static TexGenivDel TexGenivPtr;
        public static unsafe /*GLvoid*/ void TexGeniv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLint **/ int* parameters) => TexGenivUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void TexGenivUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*const GLint **/ int* parameters); static TexGenivUnsafeDel TexGenivUnsafePtr;
        public static /*GLvoid*/ void FeedbackBuffer(/*GLsizei*/ uint size, /*GLenum*/ uint type, /*GLfloat **/ float[] buffer) => FeedbackBufferPtr?.Invoke(size, type, buffer); delegate /*GLvoid*/ void FeedbackBufferDel(/*GLsizei*/ uint size, /*GLenum*/ uint type, /*GLfloat **/ float[] buffer); static FeedbackBufferDel FeedbackBufferPtr;
        public static unsafe /*GLvoid*/ void FeedbackBuffer(/*GLsizei*/ uint size, /*GLenum*/ uint type, /*GLfloat **/ float* buffer) => FeedbackBufferUnsafePtr?.Invoke(size, type, buffer); unsafe delegate /*GLvoid*/ void FeedbackBufferUnsafeDel(/*GLsizei*/ uint size, /*GLenum*/ uint type, /*GLfloat **/ float* buffer); static FeedbackBufferUnsafeDel FeedbackBufferUnsafePtr;
        public static /*GLvoid*/ void SelectBuffer(/*GLsizei*/ uint size, /*GLuint **/ uint[] buffer) => SelectBufferPtr?.Invoke(size, buffer); delegate /*GLvoid*/ void SelectBufferDel(/*GLsizei*/ uint size, /*GLuint **/ uint[] buffer); static SelectBufferDel SelectBufferPtr;
        public static unsafe /*GLvoid*/ void SelectBuffer(/*GLsizei*/ uint size, /*GLuint **/ uint* buffer) => SelectBufferUnsafePtr?.Invoke(size, buffer); unsafe delegate /*GLvoid*/ void SelectBufferUnsafeDel(/*GLsizei*/ uint size, /*GLuint **/ uint* buffer); static SelectBufferUnsafeDel SelectBufferUnsafePtr;
        public static /*GLint*/ int RenderMode(/*GLenum*/ uint mode) => RenderModePtr?.Invoke(mode) ?? default; delegate /*GLint*/ int RenderModeDel(/*GLenum*/ uint mode); static RenderModeDel RenderModePtr;
        public static /*GLvoid*/ void InitNames() => InitNamesPtr?.Invoke(); delegate /*GLvoid*/ void InitNamesDel(); static InitNamesDel InitNamesPtr;
        public static /*GLvoid*/ void LoadName(/*GLuint*/ uint name) => LoadNamePtr?.Invoke(name); delegate /*GLvoid*/ void LoadNameDel(/*GLuint*/ uint name); static LoadNameDel LoadNamePtr;
        public static /*GLvoid*/ void PassThrough(/*GLfloat*/ float token) => PassThroughPtr?.Invoke(token); delegate /*GLvoid*/ void PassThroughDel(/*GLfloat*/ float token); static PassThroughDel PassThroughPtr;
        public static /*GLvoid*/ void PopName() => PopNamePtr?.Invoke(); delegate /*GLvoid*/ void PopNameDel(); static PopNameDel PopNamePtr;
        public static /*GLvoid*/ void PushName(/*GLuint*/ uint name) => PushNamePtr?.Invoke(name); delegate /*GLvoid*/ void PushNameDel(/*GLuint*/ uint name); static PushNameDel PushNamePtr;
        public static /*GLvoid*/ void ClearAccum(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha) => ClearAccumPtr?.Invoke(red, green, blue, alpha); delegate /*GLvoid*/ void ClearAccumDel(/*GLfloat*/ float red, /*GLfloat*/ float green, /*GLfloat*/ float blue, /*GLfloat*/ float alpha); static ClearAccumDel ClearAccumPtr;
        public static /*GLvoid*/ void ClearIndex(/*GLfloat*/ float c) => ClearIndexPtr?.Invoke(c); delegate /*GLvoid*/ void ClearIndexDel(/*GLfloat*/ float c); static ClearIndexDel ClearIndexPtr;
        public static /*GLvoid*/ void IndexMask(/*GLuint*/ uint mask) => IndexMaskPtr?.Invoke(mask); delegate /*GLvoid*/ void IndexMaskDel(/*GLuint*/ uint mask); static IndexMaskDel IndexMaskPtr;
        public static /*GLvoid*/ void Accum(/*GLenum*/ uint op, /*GLfloat*/ float value) => AccumPtr?.Invoke(op, value); delegate /*GLvoid*/ void AccumDel(/*GLenum*/ uint op, /*GLfloat*/ float value); static AccumDel AccumPtr;
        public static /*GLvoid*/ void PopAttrib() => PopAttribPtr?.Invoke(); delegate /*GLvoid*/ void PopAttribDel(); static PopAttribDel PopAttribPtr;
        public static /*GLvoid*/ void PushAttrib(/*GLbitfield*/ uint mask) => PushAttribPtr?.Invoke(mask); delegate /*GLvoid*/ void PushAttribDel(/*GLbitfield*/ uint mask); static PushAttribDel PushAttribPtr;
        public static /*GLvoid*/ void Map1d(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLdouble **/ double[] points) => Map1dPtr?.Invoke(target, u1, u2, stride, order, points); delegate /*GLvoid*/ void Map1dDel(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLdouble **/ double[] points); static Map1dDel Map1dPtr;
        public static unsafe /*GLvoid*/ void Map1d(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLdouble **/ double* points) => Map1dUnsafePtr?.Invoke(target, u1, u2, stride, order, points); unsafe delegate /*GLvoid*/ void Map1dUnsafeDel(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLdouble **/ double* points); static Map1dUnsafeDel Map1dUnsafePtr;
        public static /*GLvoid*/ void Map1f(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLfloat **/ float[] points) => Map1fPtr?.Invoke(target, u1, u2, stride, order, points); delegate /*GLvoid*/ void Map1fDel(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLfloat **/ float[] points); static Map1fDel Map1fPtr;
        public static unsafe /*GLvoid*/ void Map1f(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLfloat **/ float* points) => Map1fUnsafePtr?.Invoke(target, u1, u2, stride, order, points); unsafe delegate /*GLvoid*/ void Map1fUnsafeDel(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int stride, /*GLint*/ int order, /*const GLfloat **/ float* points); static Map1fUnsafeDel Map1fUnsafePtr;
        public static /*GLvoid*/ void Map2d(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLdouble*/ double v1, /*GLdouble*/ double v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLdouble **/ double[] points) => Map2dPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); delegate /*GLvoid*/ void Map2dDel(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLdouble*/ double v1, /*GLdouble*/ double v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLdouble **/ double[] points); static Map2dDel Map2dPtr;
        public static unsafe /*GLvoid*/ void Map2d(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLdouble*/ double v1, /*GLdouble*/ double v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLdouble **/ double* points) => Map2dUnsafePtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); unsafe delegate /*GLvoid*/ void Map2dUnsafeDel(/*GLenum*/ uint target, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLdouble*/ double v1, /*GLdouble*/ double v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLdouble **/ double* points); static Map2dUnsafeDel Map2dUnsafePtr;
        public static /*GLvoid*/ void Map2f(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLfloat*/ float v1, /*GLfloat*/ float v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLfloat **/ float[] points) => Map2fPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); delegate /*GLvoid*/ void Map2fDel(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLfloat*/ float v1, /*GLfloat*/ float v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLfloat **/ float[] points); static Map2fDel Map2fPtr;
        public static unsafe /*GLvoid*/ void Map2f(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLfloat*/ float v1, /*GLfloat*/ float v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLfloat **/ float* points) => Map2fUnsafePtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); unsafe delegate /*GLvoid*/ void Map2fUnsafeDel(/*GLenum*/ uint target, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int ustride, /*GLint*/ int uorder, /*GLfloat*/ float v1, /*GLfloat*/ float v2, /*GLint*/ int vstride, /*GLint*/ int vorder, /*const GLfloat **/ float* points); static Map2fUnsafeDel Map2fUnsafePtr;
        public static /*GLvoid*/ void MapGrid1d(/*GLint*/ int un, /*GLdouble*/ double u1, /*GLdouble*/ double u2) => MapGrid1dPtr?.Invoke(un, u1, u2); delegate /*GLvoid*/ void MapGrid1dDel(/*GLint*/ int un, /*GLdouble*/ double u1, /*GLdouble*/ double u2); static MapGrid1dDel MapGrid1dPtr;
        public static /*GLvoid*/ void MapGrid1f(/*GLint*/ int un, /*GLfloat*/ float u1, /*GLfloat*/ float u2) => MapGrid1fPtr?.Invoke(un, u1, u2); delegate /*GLvoid*/ void MapGrid1fDel(/*GLint*/ int un, /*GLfloat*/ float u1, /*GLfloat*/ float u2); static MapGrid1fDel MapGrid1fPtr;
        public static /*GLvoid*/ void MapGrid2d(/*GLint*/ int un, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int vn, /*GLdouble*/ double v1, /*GLdouble*/ double v2) => MapGrid2dPtr?.Invoke(un, u1, u2, vn, v1, v2); delegate /*GLvoid*/ void MapGrid2dDel(/*GLint*/ int un, /*GLdouble*/ double u1, /*GLdouble*/ double u2, /*GLint*/ int vn, /*GLdouble*/ double v1, /*GLdouble*/ double v2); static MapGrid2dDel MapGrid2dPtr;
        public static /*GLvoid*/ void MapGrid2f(/*GLint*/ int un, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int vn, /*GLfloat*/ float v1, /*GLfloat*/ float v2) => MapGrid2fPtr?.Invoke(un, u1, u2, vn, v1, v2); delegate /*GLvoid*/ void MapGrid2fDel(/*GLint*/ int un, /*GLfloat*/ float u1, /*GLfloat*/ float u2, /*GLint*/ int vn, /*GLfloat*/ float v1, /*GLfloat*/ float v2); static MapGrid2fDel MapGrid2fPtr;
        public static /*GLvoid*/ void EvalCoord1d(/*GLdouble*/ double u) => EvalCoord1dPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord1dDel(/*GLdouble*/ double u); static EvalCoord1dDel EvalCoord1dPtr;
        public static /*GLvoid*/ void EvalCoord1dv(/*const GLdouble **/ double[] u) => EvalCoord1dvPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord1dvDel(/*const GLdouble **/ double[] u); static EvalCoord1dvDel EvalCoord1dvPtr;
        public static unsafe /*GLvoid*/ void EvalCoord1dv(/*const GLdouble **/ double* u) => EvalCoord1dvUnsafePtr?.Invoke(u); unsafe delegate /*GLvoid*/ void EvalCoord1dvUnsafeDel(/*const GLdouble **/ double* u); static EvalCoord1dvUnsafeDel EvalCoord1dvUnsafePtr;
        public static /*GLvoid*/ void EvalCoord1f(/*GLfloat*/ float u) => EvalCoord1fPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord1fDel(/*GLfloat*/ float u); static EvalCoord1fDel EvalCoord1fPtr;
        public static /*GLvoid*/ void EvalCoord1fv(/*const GLfloat **/ float[] u) => EvalCoord1fvPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord1fvDel(/*const GLfloat **/ float[] u); static EvalCoord1fvDel EvalCoord1fvPtr;
        public static unsafe /*GLvoid*/ void EvalCoord1fv(/*const GLfloat **/ float* u) => EvalCoord1fvUnsafePtr?.Invoke(u); unsafe delegate /*GLvoid*/ void EvalCoord1fvUnsafeDel(/*const GLfloat **/ float* u); static EvalCoord1fvUnsafeDel EvalCoord1fvUnsafePtr;
        public static /*GLvoid*/ void EvalCoord2d(/*GLdouble*/ double u, /*GLdouble*/ double v) => EvalCoord2dPtr?.Invoke(u, v); delegate /*GLvoid*/ void EvalCoord2dDel(/*GLdouble*/ double u, /*GLdouble*/ double v); static EvalCoord2dDel EvalCoord2dPtr;
        public static /*GLvoid*/ void EvalCoord2dv(/*const GLdouble **/ double[] u) => EvalCoord2dvPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord2dvDel(/*const GLdouble **/ double[] u); static EvalCoord2dvDel EvalCoord2dvPtr;
        public static unsafe /*GLvoid*/ void EvalCoord2dv(/*const GLdouble **/ double* u) => EvalCoord2dvUnsafePtr?.Invoke(u); unsafe delegate /*GLvoid*/ void EvalCoord2dvUnsafeDel(/*const GLdouble **/ double* u); static EvalCoord2dvUnsafeDel EvalCoord2dvUnsafePtr;
        public static /*GLvoid*/ void EvalCoord2f(/*GLfloat*/ float u, /*GLfloat*/ float v) => EvalCoord2fPtr?.Invoke(u, v); delegate /*GLvoid*/ void EvalCoord2fDel(/*GLfloat*/ float u, /*GLfloat*/ float v); static EvalCoord2fDel EvalCoord2fPtr;
        public static /*GLvoid*/ void EvalCoord2fv(/*const GLfloat **/ float[] u) => EvalCoord2fvPtr?.Invoke(u); delegate /*GLvoid*/ void EvalCoord2fvDel(/*const GLfloat **/ float[] u); static EvalCoord2fvDel EvalCoord2fvPtr;
        public static unsafe /*GLvoid*/ void EvalCoord2fv(/*const GLfloat **/ float* u) => EvalCoord2fvUnsafePtr?.Invoke(u); unsafe delegate /*GLvoid*/ void EvalCoord2fvUnsafeDel(/*const GLfloat **/ float* u); static EvalCoord2fvUnsafeDel EvalCoord2fvUnsafePtr;
        public static /*GLvoid*/ void EvalMesh1(/*GLenum*/ uint mode, /*GLint*/ int i1, /*GLint*/ int i2) => EvalMesh1Ptr?.Invoke(mode, i1, i2); delegate /*GLvoid*/ void EvalMesh1Del(/*GLenum*/ uint mode, /*GLint*/ int i1, /*GLint*/ int i2); static EvalMesh1Del EvalMesh1Ptr;
        public static /*GLvoid*/ void EvalPoint1(/*GLint*/ int i) => EvalPoint1Ptr?.Invoke(i); delegate /*GLvoid*/ void EvalPoint1Del(/*GLint*/ int i); static EvalPoint1Del EvalPoint1Ptr;
        public static /*GLvoid*/ void EvalMesh2(/*GLenum*/ uint mode, /*GLint*/ int i1, /*GLint*/ int i2, /*GLint*/ int j1, /*GLint*/ int j2) => EvalMesh2Ptr?.Invoke(mode, i1, i2, j1, j2); delegate /*GLvoid*/ void EvalMesh2Del(/*GLenum*/ uint mode, /*GLint*/ int i1, /*GLint*/ int i2, /*GLint*/ int j1, /*GLint*/ int j2); static EvalMesh2Del EvalMesh2Ptr;
        public static /*GLvoid*/ void EvalPoint2(/*GLint*/ int i, /*GLint*/ int j) => EvalPoint2Ptr?.Invoke(i, j); delegate /*GLvoid*/ void EvalPoint2Del(/*GLint*/ int i, /*GLint*/ int j); static EvalPoint2Del EvalPoint2Ptr;
        public static /*GLvoid*/ void AlphaFunc(/*GLenum*/ uint func, /*GLfloat*/ float reference) => AlphaFuncPtr?.Invoke(func, reference); delegate /*GLvoid*/ void AlphaFuncDel(/*GLenum*/ uint func, /*GLfloat*/ float reference); static AlphaFuncDel AlphaFuncPtr;
        public static /*GLvoid*/ void PixelZoom(/*GLfloat*/ float xfactor, /*GLfloat*/ float yfactor) => PixelZoomPtr?.Invoke(xfactor, yfactor); delegate /*GLvoid*/ void PixelZoomDel(/*GLfloat*/ float xfactor, /*GLfloat*/ float yfactor); static PixelZoomDel PixelZoomPtr;
        public static /*GLvoid*/ void PixelTransferf(/*GLenum*/ uint pname, /*GLfloat*/ float param) => PixelTransferfPtr?.Invoke(pname, param); delegate /*GLvoid*/ void PixelTransferfDel(/*GLenum*/ uint pname, /*GLfloat*/ float param); static PixelTransferfDel PixelTransferfPtr;
        public static /*GLvoid*/ void PixelTransferi(/*GLenum*/ uint pname, /*GLint*/ int param) => PixelTransferiPtr?.Invoke(pname, param); delegate /*GLvoid*/ void PixelTransferiDel(/*GLenum*/ uint pname, /*GLint*/ int param); static PixelTransferiDel PixelTransferiPtr;
        public static /*GLvoid*/ void PixelMapfv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLfloat **/ float[] values) => PixelMapfvPtr?.Invoke(map, mapsize, values); delegate /*GLvoid*/ void PixelMapfvDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLfloat **/ float[] values); static PixelMapfvDel PixelMapfvPtr;
        public static unsafe /*GLvoid*/ void PixelMapfv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLfloat **/ float* values) => PixelMapfvUnsafePtr?.Invoke(map, mapsize, values); unsafe delegate /*GLvoid*/ void PixelMapfvUnsafeDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLfloat **/ float* values); static PixelMapfvUnsafeDel PixelMapfvUnsafePtr;
        public static /*GLvoid*/ void PixelMapuiv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLuint **/ uint[] values) => PixelMapuivPtr?.Invoke(map, mapsize, values); delegate /*GLvoid*/ void PixelMapuivDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLuint **/ uint[] values); static PixelMapuivDel PixelMapuivPtr;
        public static unsafe /*GLvoid*/ void PixelMapuiv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLuint **/ uint* values) => PixelMapuivUnsafePtr?.Invoke(map, mapsize, values); unsafe delegate /*GLvoid*/ void PixelMapuivUnsafeDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLuint **/ uint* values); static PixelMapuivUnsafeDel PixelMapuivUnsafePtr;
        public static /*GLvoid*/ void PixelMapusv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLushort **/ ushort[] values) => PixelMapusvPtr?.Invoke(map, mapsize, values); delegate /*GLvoid*/ void PixelMapusvDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLushort **/ ushort[] values); static PixelMapusvDel PixelMapusvPtr;
        public static unsafe /*GLvoid*/ void PixelMapusv(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLushort **/ ushort* values) => PixelMapusvUnsafePtr?.Invoke(map, mapsize, values); unsafe delegate /*GLvoid*/ void PixelMapusvUnsafeDel(/*GLenum*/ uint map, /*GLsizei*/ uint mapsize, /*const GLushort **/ ushort* values); static PixelMapusvUnsafeDel PixelMapusvUnsafePtr;
        public static /*GLvoid*/ void CopyPixels(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint type) => CopyPixelsPtr?.Invoke(x, y, width, height, type); delegate /*GLvoid*/ void CopyPixelsDel(/*GLint*/ int x, /*GLint*/ int y, /*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint type); static CopyPixelsDel CopyPixelsPtr;
        public static /*GLvoid*/ void DrawPixels(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels) => DrawPixelsPtr?.Invoke(width, height, format, type, pixels); delegate /*GLvoid*/ void DrawPixelsDel(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte[] pixels); static DrawPixelsDel DrawPixelsPtr;
        public static unsafe /*GLvoid*/ void DrawPixels(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels) => DrawPixelsUnsafePtr?.Invoke(width, height, format, type, pixels); unsafe delegate /*GLvoid*/ void DrawPixelsUnsafeDel(/*GLsizei*/ uint width, /*GLsizei*/ uint height, /*GLenum*/ uint format, /*GLenum*/ uint type, /*const void **/ byte* pixels); static DrawPixelsUnsafeDel DrawPixelsUnsafePtr;
        public static /*GLvoid*/ void GetClipPlane(/*GLenum*/ uint plane, /*GLdouble **/ double[] equation) => GetClipPlanePtr?.Invoke(plane, equation); delegate /*GLvoid*/ void GetClipPlaneDel(/*GLenum*/ uint plane, /*GLdouble **/ double[] equation); static GetClipPlaneDel GetClipPlanePtr;
        public static unsafe /*GLvoid*/ void GetClipPlane(/*GLenum*/ uint plane, /*GLdouble **/ double* equation) => GetClipPlaneUnsafePtr?.Invoke(plane, equation); unsafe delegate /*GLvoid*/ void GetClipPlaneUnsafeDel(/*GLenum*/ uint plane, /*GLdouble **/ double* equation); static GetClipPlaneUnsafeDel GetClipPlaneUnsafePtr;
        public static /*GLvoid*/ void GetLightfv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetLightfvPtr?.Invoke(light, pname, parameters); delegate /*GLvoid*/ void GetLightfvDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetLightfvDel GetLightfvPtr;
        public static unsafe /*GLvoid*/ void GetLightfv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetLightfvUnsafePtr?.Invoke(light, pname, parameters); unsafe delegate /*GLvoid*/ void GetLightfvUnsafeDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetLightfvUnsafeDel GetLightfvUnsafePtr;
        public static /*GLvoid*/ void GetLightiv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetLightivPtr?.Invoke(light, pname, parameters); delegate /*GLvoid*/ void GetLightivDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetLightivDel GetLightivPtr;
        public static unsafe /*GLvoid*/ void GetLightiv(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetLightivUnsafePtr?.Invoke(light, pname, parameters); unsafe delegate /*GLvoid*/ void GetLightivUnsafeDel(/*GLenum*/ uint light, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetLightivUnsafeDel GetLightivUnsafePtr;
        public static /*GLvoid*/ void GetMapdv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLdouble **/ double[] v) => GetMapdvPtr?.Invoke(target, query, v); delegate /*GLvoid*/ void GetMapdvDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLdouble **/ double[] v); static GetMapdvDel GetMapdvPtr;
        public static unsafe /*GLvoid*/ void GetMapdv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLdouble **/ double* v) => GetMapdvUnsafePtr?.Invoke(target, query, v); unsafe delegate /*GLvoid*/ void GetMapdvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLdouble **/ double* v); static GetMapdvUnsafeDel GetMapdvUnsafePtr;
        public static /*GLvoid*/ void GetMapfv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLfloat **/ float[] v) => GetMapfvPtr?.Invoke(target, query, v); delegate /*GLvoid*/ void GetMapfvDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLfloat **/ float[] v); static GetMapfvDel GetMapfvPtr;
        public static unsafe /*GLvoid*/ void GetMapfv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLfloat **/ float* v) => GetMapfvUnsafePtr?.Invoke(target, query, v); unsafe delegate /*GLvoid*/ void GetMapfvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLfloat **/ float* v); static GetMapfvUnsafeDel GetMapfvUnsafePtr;
        public static /*GLvoid*/ void GetMapiv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLint **/ int[] v) => GetMapivPtr?.Invoke(target, query, v); delegate /*GLvoid*/ void GetMapivDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLint **/ int[] v); static GetMapivDel GetMapivPtr;
        public static unsafe /*GLvoid*/ void GetMapiv(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLint **/ int* v) => GetMapivUnsafePtr?.Invoke(target, query, v); unsafe delegate /*GLvoid*/ void GetMapivUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint query, /*GLint **/ int* v); static GetMapivUnsafeDel GetMapivUnsafePtr;
        public static /*GLvoid*/ void GetMaterialfv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetMaterialfvPtr?.Invoke(face, pname, parameters); delegate /*GLvoid*/ void GetMaterialfvDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetMaterialfvDel GetMaterialfvPtr;
        public static unsafe /*GLvoid*/ void GetMaterialfv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetMaterialfvUnsafePtr?.Invoke(face, pname, parameters); unsafe delegate /*GLvoid*/ void GetMaterialfvUnsafeDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetMaterialfvUnsafeDel GetMaterialfvUnsafePtr;
        public static /*GLvoid*/ void GetMaterialiv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetMaterialivPtr?.Invoke(face, pname, parameters); delegate /*GLvoid*/ void GetMaterialivDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetMaterialivDel GetMaterialivPtr;
        public static unsafe /*GLvoid*/ void GetMaterialiv(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetMaterialivUnsafePtr?.Invoke(face, pname, parameters); unsafe delegate /*GLvoid*/ void GetMaterialivUnsafeDel(/*GLenum*/ uint face, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetMaterialivUnsafeDel GetMaterialivUnsafePtr;
        public static /*GLvoid*/ void GetPixelMapfv(/*GLenum*/ uint map, /*GLfloat **/ float[] values) => GetPixelMapfvPtr?.Invoke(map, values); delegate /*GLvoid*/ void GetPixelMapfvDel(/*GLenum*/ uint map, /*GLfloat **/ float[] values); static GetPixelMapfvDel GetPixelMapfvPtr;
        public static unsafe /*GLvoid*/ void GetPixelMapfv(/*GLenum*/ uint map, /*GLfloat **/ float* values) => GetPixelMapfvUnsafePtr?.Invoke(map, values); unsafe delegate /*GLvoid*/ void GetPixelMapfvUnsafeDel(/*GLenum*/ uint map, /*GLfloat **/ float* values); static GetPixelMapfvUnsafeDel GetPixelMapfvUnsafePtr;
        public static /*GLvoid*/ void GetPixelMapuiv(/*GLenum*/ uint map, /*GLuint **/ uint[] values) => GetPixelMapuivPtr?.Invoke(map, values); delegate /*GLvoid*/ void GetPixelMapuivDel(/*GLenum*/ uint map, /*GLuint **/ uint[] values); static GetPixelMapuivDel GetPixelMapuivPtr;
        public static unsafe /*GLvoid*/ void GetPixelMapuiv(/*GLenum*/ uint map, /*GLuint **/ uint* values) => GetPixelMapuivUnsafePtr?.Invoke(map, values); unsafe delegate /*GLvoid*/ void GetPixelMapuivUnsafeDel(/*GLenum*/ uint map, /*GLuint **/ uint* values); static GetPixelMapuivUnsafeDel GetPixelMapuivUnsafePtr;
        public static /*GLvoid*/ void GetPixelMapusv(/*GLenum*/ uint map, /*GLushort **/ ushort[] values) => GetPixelMapusvPtr?.Invoke(map, values); delegate /*GLvoid*/ void GetPixelMapusvDel(/*GLenum*/ uint map, /*GLushort **/ ushort[] values); static GetPixelMapusvDel GetPixelMapusvPtr;
        public static unsafe /*GLvoid*/ void GetPixelMapusv(/*GLenum*/ uint map, /*GLushort **/ ushort* values) => GetPixelMapusvUnsafePtr?.Invoke(map, values); unsafe delegate /*GLvoid*/ void GetPixelMapusvUnsafeDel(/*GLenum*/ uint map, /*GLushort **/ ushort* values); static GetPixelMapusvUnsafeDel GetPixelMapusvUnsafePtr;
        public static /*GLvoid*/ void GetPolygonStipple(/*GLubyte **/ byte[] mask) => GetPolygonStipplePtr?.Invoke(mask); delegate /*GLvoid*/ void GetPolygonStippleDel(/*GLubyte **/ byte[] mask); static GetPolygonStippleDel GetPolygonStipplePtr;
        public static unsafe /*GLvoid*/ void GetPolygonStipple(/*GLubyte **/ byte* mask) => GetPolygonStippleUnsafePtr?.Invoke(mask); unsafe delegate /*GLvoid*/ void GetPolygonStippleUnsafeDel(/*GLubyte **/ byte* mask); static GetPolygonStippleUnsafeDel GetPolygonStippleUnsafePtr;
        public static /*GLvoid*/ void GetTexEnvfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetTexEnvfvPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void GetTexEnvfvDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetTexEnvfvDel GetTexEnvfvPtr;
        public static unsafe /*GLvoid*/ void GetTexEnvfv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetTexEnvfvUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexEnvfvUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetTexEnvfvUnsafeDel GetTexEnvfvUnsafePtr;
        public static /*GLvoid*/ void GetTexEnviv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetTexEnvivPtr?.Invoke(target, pname, parameters); delegate /*GLvoid*/ void GetTexEnvivDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetTexEnvivDel GetTexEnvivPtr;
        public static unsafe /*GLvoid*/ void GetTexEnviv(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetTexEnvivUnsafePtr?.Invoke(target, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexEnvivUnsafeDel(/*GLenum*/ uint target, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetTexEnvivUnsafeDel GetTexEnvivUnsafePtr;
        public static /*GLvoid*/ void GetTexGendv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble **/ double[] parameters) => GetTexGendvPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void GetTexGendvDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble **/ double[] parameters); static GetTexGendvDel GetTexGendvPtr;
        public static unsafe /*GLvoid*/ void GetTexGendv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble **/ double* parameters) => GetTexGendvUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexGendvUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLdouble **/ double* parameters); static GetTexGendvUnsafeDel GetTexGendvUnsafePtr;
        public static /*GLvoid*/ void GetTexGenfv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters) => GetTexGenfvPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void GetTexGenfvDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat **/ float[] parameters); static GetTexGenfvDel GetTexGenfvPtr;
        public static unsafe /*GLvoid*/ void GetTexGenfv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters) => GetTexGenfvUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexGenfvUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLfloat **/ float* parameters); static GetTexGenfvUnsafeDel GetTexGenfvUnsafePtr;
        public static /*GLvoid*/ void GetTexGeniv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint **/ int[] parameters) => GetTexGenivPtr?.Invoke(coord, pname, parameters); delegate /*GLvoid*/ void GetTexGenivDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint **/ int[] parameters); static GetTexGenivDel GetTexGenivPtr;
        public static unsafe /*GLvoid*/ void GetTexGeniv(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint **/ int* parameters) => GetTexGenivUnsafePtr?.Invoke(coord, pname, parameters); unsafe delegate /*GLvoid*/ void GetTexGenivUnsafeDel(/*GLenum*/ uint coord, /*GLenum*/ uint pname, /*GLint **/ int* parameters); static GetTexGenivUnsafeDel GetTexGenivUnsafePtr;
        public static /*GLboolean*/ byte IsList(/*GLuint*/ uint list) => IsListPtr?.Invoke(list) ?? default; delegate /*GLboolean*/ byte IsListDel(/*GLuint*/ uint list); static IsListDel IsListPtr;
        public static /*GLvoid*/ void Frustum(/*GLdouble*/ double left, /*GLdouble*/ double right, /*GLdouble*/ double bottom, /*GLdouble*/ double top, /*GLdouble*/ double zNear, /*GLdouble*/ double zFar) => FrustumPtr?.Invoke(left, right, bottom, top, zNear, zFar); delegate /*GLvoid*/ void FrustumDel(/*GLdouble*/ double left, /*GLdouble*/ double right, /*GLdouble*/ double bottom, /*GLdouble*/ double top, /*GLdouble*/ double zNear, /*GLdouble*/ double zFar); static FrustumDel FrustumPtr;
        public static /*GLvoid*/ void LoadIdentity() => LoadIdentityPtr?.Invoke(); delegate /*GLvoid*/ void LoadIdentityDel(); static LoadIdentityDel LoadIdentityPtr;
        public static /*GLvoid*/ void LoadMatrixf(/*const GLfloat **/ float[] m) => LoadMatrixfPtr?.Invoke(m); delegate /*GLvoid*/ void LoadMatrixfDel(/*const GLfloat **/ float[] m); static LoadMatrixfDel LoadMatrixfPtr;
        public static unsafe /*GLvoid*/ void LoadMatrixf(/*const GLfloat **/ float* m) => LoadMatrixfUnsafePtr?.Invoke(m); unsafe delegate /*GLvoid*/ void LoadMatrixfUnsafeDel(/*const GLfloat **/ float* m); static LoadMatrixfUnsafeDel LoadMatrixfUnsafePtr;
        public static /*GLvoid*/ void LoadMatrixd(/*const GLdouble **/ double[] m) => LoadMatrixdPtr?.Invoke(m); delegate /*GLvoid*/ void LoadMatrixdDel(/*const GLdouble **/ double[] m); static LoadMatrixdDel LoadMatrixdPtr;
        public static unsafe /*GLvoid*/ void LoadMatrixd(/*const GLdouble **/ double* m) => LoadMatrixdUnsafePtr?.Invoke(m); unsafe delegate /*GLvoid*/ void LoadMatrixdUnsafeDel(/*const GLdouble **/ double* m); static LoadMatrixdUnsafeDel LoadMatrixdUnsafePtr;
        public static /*GLvoid*/ void MatrixMode(/*GLenum*/ uint mode) => MatrixModePtr?.Invoke(mode); delegate /*GLvoid*/ void MatrixModeDel(/*GLenum*/ uint mode); static MatrixModeDel MatrixModePtr;
        public static /*GLvoid*/ void MultMatrixf(/*const GLfloat **/ float[] m) => MultMatrixfPtr?.Invoke(m); delegate /*GLvoid*/ void MultMatrixfDel(/*const GLfloat **/ float[] m); static MultMatrixfDel MultMatrixfPtr;
        public static unsafe /*GLvoid*/ void MultMatrixf(/*const GLfloat **/ float* m) => MultMatrixfUnsafePtr?.Invoke(m); unsafe delegate /*GLvoid*/ void MultMatrixfUnsafeDel(/*const GLfloat **/ float* m); static MultMatrixfUnsafeDel MultMatrixfUnsafePtr;
        public static /*GLvoid*/ void MultMatrixd(/*const GLdouble **/ double[] m) => MultMatrixdPtr?.Invoke(m); delegate /*GLvoid*/ void MultMatrixdDel(/*const GLdouble **/ double[] m); static MultMatrixdDel MultMatrixdPtr;
        public static unsafe /*GLvoid*/ void MultMatrixd(/*const GLdouble **/ double* m) => MultMatrixdUnsafePtr?.Invoke(m); unsafe delegate /*GLvoid*/ void MultMatrixdUnsafeDel(/*const GLdouble **/ double* m); static MultMatrixdUnsafeDel MultMatrixdUnsafePtr;
        public static /*GLvoid*/ void Ortho(/*GLdouble*/ double left, /*GLdouble*/ double right, /*GLdouble*/ double bottom, /*GLdouble*/ double top, /*GLdouble*/ double zNear, /*GLdouble*/ double zFar) => OrthoPtr?.Invoke(left, right, bottom, top, zNear, zFar); delegate /*GLvoid*/ void OrthoDel(/*GLdouble*/ double left, /*GLdouble*/ double right, /*GLdouble*/ double bottom, /*GLdouble*/ double top, /*GLdouble*/ double zNear, /*GLdouble*/ double zFar); static OrthoDel OrthoPtr;
        public static /*GLvoid*/ void PopMatrix() => PopMatrixPtr?.Invoke(); delegate /*GLvoid*/ void PopMatrixDel(); static PopMatrixDel PopMatrixPtr;
        public static /*GLvoid*/ void PushMatrix() => PushMatrixPtr?.Invoke(); delegate /*GLvoid*/ void PushMatrixDel(); static PushMatrixDel PushMatrixPtr;
        public static /*GLvoid*/ void Rotated(/*GLdouble*/ double angle, /*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z) => RotatedPtr?.Invoke(angle, x, y, z); delegate /*GLvoid*/ void RotatedDel(/*GLdouble*/ double angle, /*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z); static RotatedDel RotatedPtr;
        public static /*GLvoid*/ void Rotatef(/*GLfloat*/ float angle, /*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z) => RotatefPtr?.Invoke(angle, x, y, z); delegate /*GLvoid*/ void RotatefDel(/*GLfloat*/ float angle, /*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z); static RotatefDel RotatefPtr;
        public static /*GLvoid*/ void Scaled(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z) => ScaledPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void ScaledDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z); static ScaledDel ScaledPtr;
        public static /*GLvoid*/ void Scalef(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z) => ScalefPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void ScalefDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z); static ScalefDel ScalefPtr;
        public static /*GLvoid*/ void Translated(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z) => TranslatedPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void TranslatedDel(/*GLdouble*/ double x, /*GLdouble*/ double y, /*GLdouble*/ double z); static TranslatedDel TranslatedPtr;
        public static /*GLvoid*/ void Translatef(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z) => TranslatefPtr?.Invoke(x, y, z); delegate /*GLvoid*/ void TranslatefDel(/*GLfloat*/ float x, /*GLfloat*/ float y, /*GLfloat*/ float z); static TranslatefDel TranslatefPtr;

        private static void Init_GL_1_0(Func<string,IntPtr> getProcAddress)
        {
            CullFacePtr = LoadProcByName<CullFaceDel>("glCullFace", getProcAddress);
            FrontFacePtr = LoadProcByName<FrontFaceDel>("glFrontFace", getProcAddress);
            HintPtr = LoadProcByName<HintDel>("glHint", getProcAddress);
            LineWidthPtr = LoadProcByName<LineWidthDel>("glLineWidth", getProcAddress);
            PointSizePtr = LoadProcByName<PointSizeDel>("glPointSize", getProcAddress);
            PolygonModePtr = LoadProcByName<PolygonModeDel>("glPolygonMode", getProcAddress);
            ScissorPtr = LoadProcByName<ScissorDel>("glScissor", getProcAddress);
            TexParameterfPtr = LoadProcByName<TexParameterfDel>("glTexParameterf", getProcAddress);
            TexParameterfvPtr = LoadProcByName<TexParameterfvDel>("glTexParameterfv", getProcAddress);
            TexParameterfvUnsafePtr = LoadProcByName<TexParameterfvUnsafeDel>("TexParameterfv", getProcAddress);
            TexParameteriPtr = LoadProcByName<TexParameteriDel>("glTexParameteri", getProcAddress);
            TexParameterivPtr = LoadProcByName<TexParameterivDel>("glTexParameteriv", getProcAddress);
            TexParameterivUnsafePtr = LoadProcByName<TexParameterivUnsafeDel>("TexParameteriv", getProcAddress);
            TexImage1DPtr = LoadProcByName<TexImage1DDel>("glTexImage1D", getProcAddress);
            TexImage1DUnsafePtr = LoadProcByName<TexImage1DUnsafeDel>("TexImage1D", getProcAddress);
            TexImage2DPtr = LoadProcByName<TexImage2DDel>("glTexImage2D", getProcAddress);
            TexImage2DUnsafePtr = LoadProcByName<TexImage2DUnsafeDel>("TexImage2D", getProcAddress);
            DrawBufferPtr = LoadProcByName<DrawBufferDel>("glDrawBuffer", getProcAddress);
            ClearPtr = LoadProcByName<ClearDel>("glClear", getProcAddress);
            ClearColorPtr = LoadProcByName<ClearColorDel>("glClearColor", getProcAddress);
            ClearStencilPtr = LoadProcByName<ClearStencilDel>("glClearStencil", getProcAddress);
            ClearDepthPtr = LoadProcByName<ClearDepthDel>("glClearDepth", getProcAddress);
            StencilMaskPtr = LoadProcByName<StencilMaskDel>("glStencilMask", getProcAddress);
            ColorMaskPtr = LoadProcByName<ColorMaskDel>("glColorMask", getProcAddress);
            DepthMaskPtr = LoadProcByName<DepthMaskDel>("glDepthMask", getProcAddress);
            DisablePtr = LoadProcByName<DisableDel>("glDisable", getProcAddress);
            EnablePtr = LoadProcByName<EnableDel>("glEnable", getProcAddress);
            FinishPtr = LoadProcByName<FinishDel>("glFinish", getProcAddress);
            FlushPtr = LoadProcByName<FlushDel>("glFlush", getProcAddress);
            BlendFuncPtr = LoadProcByName<BlendFuncDel>("glBlendFunc", getProcAddress);
            LogicOpPtr = LoadProcByName<LogicOpDel>("glLogicOp", getProcAddress);
            StencilFuncPtr = LoadProcByName<StencilFuncDel>("glStencilFunc", getProcAddress);
            StencilOpPtr = LoadProcByName<StencilOpDel>("glStencilOp", getProcAddress);
            DepthFuncPtr = LoadProcByName<DepthFuncDel>("glDepthFunc", getProcAddress);
            PixelStorefPtr = LoadProcByName<PixelStorefDel>("glPixelStoref", getProcAddress);
            PixelStoreiPtr = LoadProcByName<PixelStoreiDel>("glPixelStorei", getProcAddress);
            ReadBufferPtr = LoadProcByName<ReadBufferDel>("glReadBuffer", getProcAddress);
            ReadPixelsPtr = LoadProcByName<ReadPixelsDel>("glReadPixels", getProcAddress);
            ReadPixelsUnsafePtr = LoadProcByName<ReadPixelsUnsafeDel>("ReadPixels", getProcAddress);
            GetBooleanvPtr = LoadProcByName<GetBooleanvDel>("glGetBooleanv", getProcAddress);
            GetBooleanvUnsafePtr = LoadProcByName<GetBooleanvUnsafeDel>("GetBooleanv", getProcAddress);
            GetDoublevPtr = LoadProcByName<GetDoublevDel>("glGetDoublev", getProcAddress);
            GetDoublevUnsafePtr = LoadProcByName<GetDoublevUnsafeDel>("GetDoublev", getProcAddress);
            GetErrorPtr = LoadProcByName<GetErrorDel>("glGetError", getProcAddress);
            GetFloatvPtr = LoadProcByName<GetFloatvDel>("glGetFloatv", getProcAddress);
            GetFloatvUnsafePtr = LoadProcByName<GetFloatvUnsafeDel>("GetFloatv", getProcAddress);
            GetIntegervPtr = LoadProcByName<GetIntegervDel>("glGetIntegerv", getProcAddress);
            GetIntegervUnsafePtr = LoadProcByName<GetIntegervUnsafeDel>("GetIntegerv", getProcAddress);
            GetStringPtr = LoadProcByName<GetStringDel>("glGetString", getProcAddress);
            GetTexImagePtr = LoadProcByName<GetTexImageDel>("glGetTexImage", getProcAddress);
            GetTexImageUnsafePtr = LoadProcByName<GetTexImageUnsafeDel>("GetTexImage", getProcAddress);
            GetTexParameterfvPtr = LoadProcByName<GetTexParameterfvDel>("glGetTexParameterfv", getProcAddress);
            GetTexParameterfvUnsafePtr = LoadProcByName<GetTexParameterfvUnsafeDel>("GetTexParameterfv", getProcAddress);
            GetTexParameterivPtr = LoadProcByName<GetTexParameterivDel>("glGetTexParameteriv", getProcAddress);
            GetTexParameterivUnsafePtr = LoadProcByName<GetTexParameterivUnsafeDel>("GetTexParameteriv", getProcAddress);
            GetTexLevelParameterfvPtr = LoadProcByName<GetTexLevelParameterfvDel>("glGetTexLevelParameterfv", getProcAddress);
            GetTexLevelParameterfvUnsafePtr = LoadProcByName<GetTexLevelParameterfvUnsafeDel>("GetTexLevelParameterfv", getProcAddress);
            GetTexLevelParameterivPtr = LoadProcByName<GetTexLevelParameterivDel>("glGetTexLevelParameteriv", getProcAddress);
            GetTexLevelParameterivUnsafePtr = LoadProcByName<GetTexLevelParameterivUnsafeDel>("GetTexLevelParameteriv", getProcAddress);
            IsEnabledPtr = LoadProcByName<IsEnabledDel>("glIsEnabled", getProcAddress);
            DepthRangePtr = LoadProcByName<DepthRangeDel>("glDepthRange", getProcAddress);
            ViewportPtr = LoadProcByName<ViewportDel>("glViewport", getProcAddress);
            NewListPtr = LoadProcByName<NewListDel>("glNewList", getProcAddress);
            EndListPtr = LoadProcByName<EndListDel>("glEndList", getProcAddress);
            CallListPtr = LoadProcByName<CallListDel>("glCallList", getProcAddress);
            CallListsPtr = LoadProcByName<CallListsDel>("glCallLists", getProcAddress);
            CallListsUnsafePtr = LoadProcByName<CallListsUnsafeDel>("CallLists", getProcAddress);
            DeleteListsPtr = LoadProcByName<DeleteListsDel>("glDeleteLists", getProcAddress);
            GenListsPtr = LoadProcByName<GenListsDel>("glGenLists", getProcAddress);
            ListBasePtr = LoadProcByName<ListBaseDel>("glListBase", getProcAddress);
            BeginPtr = LoadProcByName<BeginDel>("glBegin", getProcAddress);
            BitmapPtr = LoadProcByName<BitmapDel>("glBitmap", getProcAddress);
            BitmapUnsafePtr = LoadProcByName<BitmapUnsafeDel>("Bitmap", getProcAddress);
            Color3bPtr = LoadProcByName<Color3bDel>("glColor3b", getProcAddress);
            Color3bvPtr = LoadProcByName<Color3bvDel>("glColor3bv", getProcAddress);
            Color3bvUnsafePtr = LoadProcByName<Color3bvUnsafeDel>("Color3bv", getProcAddress);
            Color3dPtr = LoadProcByName<Color3dDel>("glColor3d", getProcAddress);
            Color3dvPtr = LoadProcByName<Color3dvDel>("glColor3dv", getProcAddress);
            Color3dvUnsafePtr = LoadProcByName<Color3dvUnsafeDel>("Color3dv", getProcAddress);
            Color3fPtr = LoadProcByName<Color3fDel>("glColor3f", getProcAddress);
            Color3fvPtr = LoadProcByName<Color3fvDel>("glColor3fv", getProcAddress);
            Color3fvUnsafePtr = LoadProcByName<Color3fvUnsafeDel>("Color3fv", getProcAddress);
            Color3iPtr = LoadProcByName<Color3iDel>("glColor3i", getProcAddress);
            Color3ivPtr = LoadProcByName<Color3ivDel>("glColor3iv", getProcAddress);
            Color3ivUnsafePtr = LoadProcByName<Color3ivUnsafeDel>("Color3iv", getProcAddress);
            Color3sPtr = LoadProcByName<Color3sDel>("glColor3s", getProcAddress);
            Color3svPtr = LoadProcByName<Color3svDel>("glColor3sv", getProcAddress);
            Color3svUnsafePtr = LoadProcByName<Color3svUnsafeDel>("Color3sv", getProcAddress);
            Color3ubPtr = LoadProcByName<Color3ubDel>("glColor3ub", getProcAddress);
            Color3ubvPtr = LoadProcByName<Color3ubvDel>("glColor3ubv", getProcAddress);
            Color3ubvUnsafePtr = LoadProcByName<Color3ubvUnsafeDel>("Color3ubv", getProcAddress);
            Color3uiPtr = LoadProcByName<Color3uiDel>("glColor3ui", getProcAddress);
            Color3uivPtr = LoadProcByName<Color3uivDel>("glColor3uiv", getProcAddress);
            Color3uivUnsafePtr = LoadProcByName<Color3uivUnsafeDel>("Color3uiv", getProcAddress);
            Color3usPtr = LoadProcByName<Color3usDel>("glColor3us", getProcAddress);
            Color3usvPtr = LoadProcByName<Color3usvDel>("glColor3usv", getProcAddress);
            Color3usvUnsafePtr = LoadProcByName<Color3usvUnsafeDel>("Color3usv", getProcAddress);
            Color4bPtr = LoadProcByName<Color4bDel>("glColor4b", getProcAddress);
            Color4bvPtr = LoadProcByName<Color4bvDel>("glColor4bv", getProcAddress);
            Color4bvUnsafePtr = LoadProcByName<Color4bvUnsafeDel>("Color4bv", getProcAddress);
            Color4dPtr = LoadProcByName<Color4dDel>("glColor4d", getProcAddress);
            Color4dvPtr = LoadProcByName<Color4dvDel>("glColor4dv", getProcAddress);
            Color4dvUnsafePtr = LoadProcByName<Color4dvUnsafeDel>("Color4dv", getProcAddress);
            Color4fPtr = LoadProcByName<Color4fDel>("glColor4f", getProcAddress);
            Color4fvPtr = LoadProcByName<Color4fvDel>("glColor4fv", getProcAddress);
            Color4fvUnsafePtr = LoadProcByName<Color4fvUnsafeDel>("Color4fv", getProcAddress);
            Color4iPtr = LoadProcByName<Color4iDel>("glColor4i", getProcAddress);
            Color4ivPtr = LoadProcByName<Color4ivDel>("glColor4iv", getProcAddress);
            Color4ivUnsafePtr = LoadProcByName<Color4ivUnsafeDel>("Color4iv", getProcAddress);
            Color4sPtr = LoadProcByName<Color4sDel>("glColor4s", getProcAddress);
            Color4svPtr = LoadProcByName<Color4svDel>("glColor4sv", getProcAddress);
            Color4svUnsafePtr = LoadProcByName<Color4svUnsafeDel>("Color4sv", getProcAddress);
            Color4ubPtr = LoadProcByName<Color4ubDel>("glColor4ub", getProcAddress);
            Color4ubvPtr = LoadProcByName<Color4ubvDel>("glColor4ubv", getProcAddress);
            Color4ubvUnsafePtr = LoadProcByName<Color4ubvUnsafeDel>("Color4ubv", getProcAddress);
            Color4uiPtr = LoadProcByName<Color4uiDel>("glColor4ui", getProcAddress);
            Color4uivPtr = LoadProcByName<Color4uivDel>("glColor4uiv", getProcAddress);
            Color4uivUnsafePtr = LoadProcByName<Color4uivUnsafeDel>("Color4uiv", getProcAddress);
            Color4usPtr = LoadProcByName<Color4usDel>("glColor4us", getProcAddress);
            Color4usvPtr = LoadProcByName<Color4usvDel>("glColor4usv", getProcAddress);
            Color4usvUnsafePtr = LoadProcByName<Color4usvUnsafeDel>("Color4usv", getProcAddress);
            EdgeFlagPtr = LoadProcByName<EdgeFlagDel>("glEdgeFlag", getProcAddress);
            EdgeFlagvPtr = LoadProcByName<EdgeFlagvDel>("glEdgeFlagv", getProcAddress);
            EdgeFlagvUnsafePtr = LoadProcByName<EdgeFlagvUnsafeDel>("EdgeFlagv", getProcAddress);
            EndPtr = LoadProcByName<EndDel>("glEnd", getProcAddress);
            IndexdPtr = LoadProcByName<IndexdDel>("glIndexd", getProcAddress);
            IndexdvPtr = LoadProcByName<IndexdvDel>("glIndexdv", getProcAddress);
            IndexdvUnsafePtr = LoadProcByName<IndexdvUnsafeDel>("Indexdv", getProcAddress);
            IndexfPtr = LoadProcByName<IndexfDel>("glIndexf", getProcAddress);
            IndexfvPtr = LoadProcByName<IndexfvDel>("glIndexfv", getProcAddress);
            IndexfvUnsafePtr = LoadProcByName<IndexfvUnsafeDel>("Indexfv", getProcAddress);
            IndexiPtr = LoadProcByName<IndexiDel>("glIndexi", getProcAddress);
            IndexivPtr = LoadProcByName<IndexivDel>("glIndexiv", getProcAddress);
            IndexivUnsafePtr = LoadProcByName<IndexivUnsafeDel>("Indexiv", getProcAddress);
            IndexsPtr = LoadProcByName<IndexsDel>("glIndexs", getProcAddress);
            IndexsvPtr = LoadProcByName<IndexsvDel>("glIndexsv", getProcAddress);
            IndexsvUnsafePtr = LoadProcByName<IndexsvUnsafeDel>("Indexsv", getProcAddress);
            Normal3bPtr = LoadProcByName<Normal3bDel>("glNormal3b", getProcAddress);
            Normal3bvPtr = LoadProcByName<Normal3bvDel>("glNormal3bv", getProcAddress);
            Normal3bvUnsafePtr = LoadProcByName<Normal3bvUnsafeDel>("Normal3bv", getProcAddress);
            Normal3dPtr = LoadProcByName<Normal3dDel>("glNormal3d", getProcAddress);
            Normal3dvPtr = LoadProcByName<Normal3dvDel>("glNormal3dv", getProcAddress);
            Normal3dvUnsafePtr = LoadProcByName<Normal3dvUnsafeDel>("Normal3dv", getProcAddress);
            Normal3fPtr = LoadProcByName<Normal3fDel>("glNormal3f", getProcAddress);
            Normal3fvPtr = LoadProcByName<Normal3fvDel>("glNormal3fv", getProcAddress);
            Normal3fvUnsafePtr = LoadProcByName<Normal3fvUnsafeDel>("Normal3fv", getProcAddress);
            Normal3iPtr = LoadProcByName<Normal3iDel>("glNormal3i", getProcAddress);
            Normal3ivPtr = LoadProcByName<Normal3ivDel>("glNormal3iv", getProcAddress);
            Normal3ivUnsafePtr = LoadProcByName<Normal3ivUnsafeDel>("Normal3iv", getProcAddress);
            Normal3sPtr = LoadProcByName<Normal3sDel>("glNormal3s", getProcAddress);
            Normal3svPtr = LoadProcByName<Normal3svDel>("glNormal3sv", getProcAddress);
            Normal3svUnsafePtr = LoadProcByName<Normal3svUnsafeDel>("Normal3sv", getProcAddress);
            RasterPos2dPtr = LoadProcByName<RasterPos2dDel>("glRasterPos2d", getProcAddress);
            RasterPos2dvPtr = LoadProcByName<RasterPos2dvDel>("glRasterPos2dv", getProcAddress);
            RasterPos2dvUnsafePtr = LoadProcByName<RasterPos2dvUnsafeDel>("RasterPos2dv", getProcAddress);
            RasterPos2fPtr = LoadProcByName<RasterPos2fDel>("glRasterPos2f", getProcAddress);
            RasterPos2fvPtr = LoadProcByName<RasterPos2fvDel>("glRasterPos2fv", getProcAddress);
            RasterPos2fvUnsafePtr = LoadProcByName<RasterPos2fvUnsafeDel>("RasterPos2fv", getProcAddress);
            RasterPos2iPtr = LoadProcByName<RasterPos2iDel>("glRasterPos2i", getProcAddress);
            RasterPos2ivPtr = LoadProcByName<RasterPos2ivDel>("glRasterPos2iv", getProcAddress);
            RasterPos2ivUnsafePtr = LoadProcByName<RasterPos2ivUnsafeDel>("RasterPos2iv", getProcAddress);
            RasterPos2sPtr = LoadProcByName<RasterPos2sDel>("glRasterPos2s", getProcAddress);
            RasterPos2svPtr = LoadProcByName<RasterPos2svDel>("glRasterPos2sv", getProcAddress);
            RasterPos2svUnsafePtr = LoadProcByName<RasterPos2svUnsafeDel>("RasterPos2sv", getProcAddress);
            RasterPos3dPtr = LoadProcByName<RasterPos3dDel>("glRasterPos3d", getProcAddress);
            RasterPos3dvPtr = LoadProcByName<RasterPos3dvDel>("glRasterPos3dv", getProcAddress);
            RasterPos3dvUnsafePtr = LoadProcByName<RasterPos3dvUnsafeDel>("RasterPos3dv", getProcAddress);
            RasterPos3fPtr = LoadProcByName<RasterPos3fDel>("glRasterPos3f", getProcAddress);
            RasterPos3fvPtr = LoadProcByName<RasterPos3fvDel>("glRasterPos3fv", getProcAddress);
            RasterPos3fvUnsafePtr = LoadProcByName<RasterPos3fvUnsafeDel>("RasterPos3fv", getProcAddress);
            RasterPos3iPtr = LoadProcByName<RasterPos3iDel>("glRasterPos3i", getProcAddress);
            RasterPos3ivPtr = LoadProcByName<RasterPos3ivDel>("glRasterPos3iv", getProcAddress);
            RasterPos3ivUnsafePtr = LoadProcByName<RasterPos3ivUnsafeDel>("RasterPos3iv", getProcAddress);
            RasterPos3sPtr = LoadProcByName<RasterPos3sDel>("glRasterPos3s", getProcAddress);
            RasterPos3svPtr = LoadProcByName<RasterPos3svDel>("glRasterPos3sv", getProcAddress);
            RasterPos3svUnsafePtr = LoadProcByName<RasterPos3svUnsafeDel>("RasterPos3sv", getProcAddress);
            RasterPos4dPtr = LoadProcByName<RasterPos4dDel>("glRasterPos4d", getProcAddress);
            RasterPos4dvPtr = LoadProcByName<RasterPos4dvDel>("glRasterPos4dv", getProcAddress);
            RasterPos4dvUnsafePtr = LoadProcByName<RasterPos4dvUnsafeDel>("RasterPos4dv", getProcAddress);
            RasterPos4fPtr = LoadProcByName<RasterPos4fDel>("glRasterPos4f", getProcAddress);
            RasterPos4fvPtr = LoadProcByName<RasterPos4fvDel>("glRasterPos4fv", getProcAddress);
            RasterPos4fvUnsafePtr = LoadProcByName<RasterPos4fvUnsafeDel>("RasterPos4fv", getProcAddress);
            RasterPos4iPtr = LoadProcByName<RasterPos4iDel>("glRasterPos4i", getProcAddress);
            RasterPos4ivPtr = LoadProcByName<RasterPos4ivDel>("glRasterPos4iv", getProcAddress);
            RasterPos4ivUnsafePtr = LoadProcByName<RasterPos4ivUnsafeDel>("RasterPos4iv", getProcAddress);
            RasterPos4sPtr = LoadProcByName<RasterPos4sDel>("glRasterPos4s", getProcAddress);
            RasterPos4svPtr = LoadProcByName<RasterPos4svDel>("glRasterPos4sv", getProcAddress);
            RasterPos4svUnsafePtr = LoadProcByName<RasterPos4svUnsafeDel>("RasterPos4sv", getProcAddress);
            RectdPtr = LoadProcByName<RectdDel>("glRectd", getProcAddress);
            RectdvPtr = LoadProcByName<RectdvDel>("glRectdv", getProcAddress);
            RectdvUnsafePtr = LoadProcByName<RectdvUnsafeDel>("Rectdv", getProcAddress);
            RectfPtr = LoadProcByName<RectfDel>("glRectf", getProcAddress);
            RectfvPtr = LoadProcByName<RectfvDel>("glRectfv", getProcAddress);
            RectfvUnsafePtr = LoadProcByName<RectfvUnsafeDel>("Rectfv", getProcAddress);
            RectiPtr = LoadProcByName<RectiDel>("glRecti", getProcAddress);
            RectivPtr = LoadProcByName<RectivDel>("glRectiv", getProcAddress);
            RectivUnsafePtr = LoadProcByName<RectivUnsafeDel>("Rectiv", getProcAddress);
            RectsPtr = LoadProcByName<RectsDel>("glRects", getProcAddress);
            RectsvPtr = LoadProcByName<RectsvDel>("glRectsv", getProcAddress);
            RectsvUnsafePtr = LoadProcByName<RectsvUnsafeDel>("Rectsv", getProcAddress);
            TexCoord1dPtr = LoadProcByName<TexCoord1dDel>("glTexCoord1d", getProcAddress);
            TexCoord1dvPtr = LoadProcByName<TexCoord1dvDel>("glTexCoord1dv", getProcAddress);
            TexCoord1dvUnsafePtr = LoadProcByName<TexCoord1dvUnsafeDel>("TexCoord1dv", getProcAddress);
            TexCoord1fPtr = LoadProcByName<TexCoord1fDel>("glTexCoord1f", getProcAddress);
            TexCoord1fvPtr = LoadProcByName<TexCoord1fvDel>("glTexCoord1fv", getProcAddress);
            TexCoord1fvUnsafePtr = LoadProcByName<TexCoord1fvUnsafeDel>("TexCoord1fv", getProcAddress);
            TexCoord1iPtr = LoadProcByName<TexCoord1iDel>("glTexCoord1i", getProcAddress);
            TexCoord1ivPtr = LoadProcByName<TexCoord1ivDel>("glTexCoord1iv", getProcAddress);
            TexCoord1ivUnsafePtr = LoadProcByName<TexCoord1ivUnsafeDel>("TexCoord1iv", getProcAddress);
            TexCoord1sPtr = LoadProcByName<TexCoord1sDel>("glTexCoord1s", getProcAddress);
            TexCoord1svPtr = LoadProcByName<TexCoord1svDel>("glTexCoord1sv", getProcAddress);
            TexCoord1svUnsafePtr = LoadProcByName<TexCoord1svUnsafeDel>("TexCoord1sv", getProcAddress);
            TexCoord2dPtr = LoadProcByName<TexCoord2dDel>("glTexCoord2d", getProcAddress);
            TexCoord2dvPtr = LoadProcByName<TexCoord2dvDel>("glTexCoord2dv", getProcAddress);
            TexCoord2dvUnsafePtr = LoadProcByName<TexCoord2dvUnsafeDel>("TexCoord2dv", getProcAddress);
            TexCoord2fPtr = LoadProcByName<TexCoord2fDel>("glTexCoord2f", getProcAddress);
            TexCoord2fvPtr = LoadProcByName<TexCoord2fvDel>("glTexCoord2fv", getProcAddress);
            TexCoord2fvUnsafePtr = LoadProcByName<TexCoord2fvUnsafeDel>("TexCoord2fv", getProcAddress);
            TexCoord2iPtr = LoadProcByName<TexCoord2iDel>("glTexCoord2i", getProcAddress);
            TexCoord2ivPtr = LoadProcByName<TexCoord2ivDel>("glTexCoord2iv", getProcAddress);
            TexCoord2ivUnsafePtr = LoadProcByName<TexCoord2ivUnsafeDel>("TexCoord2iv", getProcAddress);
            TexCoord2sPtr = LoadProcByName<TexCoord2sDel>("glTexCoord2s", getProcAddress);
            TexCoord2svPtr = LoadProcByName<TexCoord2svDel>("glTexCoord2sv", getProcAddress);
            TexCoord2svUnsafePtr = LoadProcByName<TexCoord2svUnsafeDel>("TexCoord2sv", getProcAddress);
            TexCoord3dPtr = LoadProcByName<TexCoord3dDel>("glTexCoord3d", getProcAddress);
            TexCoord3dvPtr = LoadProcByName<TexCoord3dvDel>("glTexCoord3dv", getProcAddress);
            TexCoord3dvUnsafePtr = LoadProcByName<TexCoord3dvUnsafeDel>("TexCoord3dv", getProcAddress);
            TexCoord3fPtr = LoadProcByName<TexCoord3fDel>("glTexCoord3f", getProcAddress);
            TexCoord3fvPtr = LoadProcByName<TexCoord3fvDel>("glTexCoord3fv", getProcAddress);
            TexCoord3fvUnsafePtr = LoadProcByName<TexCoord3fvUnsafeDel>("TexCoord3fv", getProcAddress);
            TexCoord3iPtr = LoadProcByName<TexCoord3iDel>("glTexCoord3i", getProcAddress);
            TexCoord3ivPtr = LoadProcByName<TexCoord3ivDel>("glTexCoord3iv", getProcAddress);
            TexCoord3ivUnsafePtr = LoadProcByName<TexCoord3ivUnsafeDel>("TexCoord3iv", getProcAddress);
            TexCoord3sPtr = LoadProcByName<TexCoord3sDel>("glTexCoord3s", getProcAddress);
            TexCoord3svPtr = LoadProcByName<TexCoord3svDel>("glTexCoord3sv", getProcAddress);
            TexCoord3svUnsafePtr = LoadProcByName<TexCoord3svUnsafeDel>("TexCoord3sv", getProcAddress);
            TexCoord4dPtr = LoadProcByName<TexCoord4dDel>("glTexCoord4d", getProcAddress);
            TexCoord4dvPtr = LoadProcByName<TexCoord4dvDel>("glTexCoord4dv", getProcAddress);
            TexCoord4dvUnsafePtr = LoadProcByName<TexCoord4dvUnsafeDel>("TexCoord4dv", getProcAddress);
            TexCoord4fPtr = LoadProcByName<TexCoord4fDel>("glTexCoord4f", getProcAddress);
            TexCoord4fvPtr = LoadProcByName<TexCoord4fvDel>("glTexCoord4fv", getProcAddress);
            TexCoord4fvUnsafePtr = LoadProcByName<TexCoord4fvUnsafeDel>("TexCoord4fv", getProcAddress);
            TexCoord4iPtr = LoadProcByName<TexCoord4iDel>("glTexCoord4i", getProcAddress);
            TexCoord4ivPtr = LoadProcByName<TexCoord4ivDel>("glTexCoord4iv", getProcAddress);
            TexCoord4ivUnsafePtr = LoadProcByName<TexCoord4ivUnsafeDel>("TexCoord4iv", getProcAddress);
            TexCoord4sPtr = LoadProcByName<TexCoord4sDel>("glTexCoord4s", getProcAddress);
            TexCoord4svPtr = LoadProcByName<TexCoord4svDel>("glTexCoord4sv", getProcAddress);
            TexCoord4svUnsafePtr = LoadProcByName<TexCoord4svUnsafeDel>("TexCoord4sv", getProcAddress);
            Vertex2dPtr = LoadProcByName<Vertex2dDel>("glVertex2d", getProcAddress);
            Vertex2dvPtr = LoadProcByName<Vertex2dvDel>("glVertex2dv", getProcAddress);
            Vertex2dvUnsafePtr = LoadProcByName<Vertex2dvUnsafeDel>("Vertex2dv", getProcAddress);
            Vertex2fPtr = LoadProcByName<Vertex2fDel>("glVertex2f", getProcAddress);
            Vertex2fvPtr = LoadProcByName<Vertex2fvDel>("glVertex2fv", getProcAddress);
            Vertex2fvUnsafePtr = LoadProcByName<Vertex2fvUnsafeDel>("Vertex2fv", getProcAddress);
            Vertex2iPtr = LoadProcByName<Vertex2iDel>("glVertex2i", getProcAddress);
            Vertex2ivPtr = LoadProcByName<Vertex2ivDel>("glVertex2iv", getProcAddress);
            Vertex2ivUnsafePtr = LoadProcByName<Vertex2ivUnsafeDel>("Vertex2iv", getProcAddress);
            Vertex2sPtr = LoadProcByName<Vertex2sDel>("glVertex2s", getProcAddress);
            Vertex2svPtr = LoadProcByName<Vertex2svDel>("glVertex2sv", getProcAddress);
            Vertex2svUnsafePtr = LoadProcByName<Vertex2svUnsafeDel>("Vertex2sv", getProcAddress);
            Vertex3dPtr = LoadProcByName<Vertex3dDel>("glVertex3d", getProcAddress);
            Vertex3dvPtr = LoadProcByName<Vertex3dvDel>("glVertex3dv", getProcAddress);
            Vertex3dvUnsafePtr = LoadProcByName<Vertex3dvUnsafeDel>("Vertex3dv", getProcAddress);
            Vertex3fPtr = LoadProcByName<Vertex3fDel>("glVertex3f", getProcAddress);
            Vertex3fvPtr = LoadProcByName<Vertex3fvDel>("glVertex3fv", getProcAddress);
            Vertex3fvUnsafePtr = LoadProcByName<Vertex3fvUnsafeDel>("Vertex3fv", getProcAddress);
            Vertex3iPtr = LoadProcByName<Vertex3iDel>("glVertex3i", getProcAddress);
            Vertex3ivPtr = LoadProcByName<Vertex3ivDel>("glVertex3iv", getProcAddress);
            Vertex3ivUnsafePtr = LoadProcByName<Vertex3ivUnsafeDel>("Vertex3iv", getProcAddress);
            Vertex3sPtr = LoadProcByName<Vertex3sDel>("glVertex3s", getProcAddress);
            Vertex3svPtr = LoadProcByName<Vertex3svDel>("glVertex3sv", getProcAddress);
            Vertex3svUnsafePtr = LoadProcByName<Vertex3svUnsafeDel>("Vertex3sv", getProcAddress);
            Vertex4dPtr = LoadProcByName<Vertex4dDel>("glVertex4d", getProcAddress);
            Vertex4dvPtr = LoadProcByName<Vertex4dvDel>("glVertex4dv", getProcAddress);
            Vertex4dvUnsafePtr = LoadProcByName<Vertex4dvUnsafeDel>("Vertex4dv", getProcAddress);
            Vertex4fPtr = LoadProcByName<Vertex4fDel>("glVertex4f", getProcAddress);
            Vertex4fvPtr = LoadProcByName<Vertex4fvDel>("glVertex4fv", getProcAddress);
            Vertex4fvUnsafePtr = LoadProcByName<Vertex4fvUnsafeDel>("Vertex4fv", getProcAddress);
            Vertex4iPtr = LoadProcByName<Vertex4iDel>("glVertex4i", getProcAddress);
            Vertex4ivPtr = LoadProcByName<Vertex4ivDel>("glVertex4iv", getProcAddress);
            Vertex4ivUnsafePtr = LoadProcByName<Vertex4ivUnsafeDel>("Vertex4iv", getProcAddress);
            Vertex4sPtr = LoadProcByName<Vertex4sDel>("glVertex4s", getProcAddress);
            Vertex4svPtr = LoadProcByName<Vertex4svDel>("glVertex4sv", getProcAddress);
            Vertex4svUnsafePtr = LoadProcByName<Vertex4svUnsafeDel>("Vertex4sv", getProcAddress);
            ClipPlanePtr = LoadProcByName<ClipPlaneDel>("glClipPlane", getProcAddress);
            ClipPlaneUnsafePtr = LoadProcByName<ClipPlaneUnsafeDel>("ClipPlane", getProcAddress);
            ColorMaterialPtr = LoadProcByName<ColorMaterialDel>("glColorMaterial", getProcAddress);
            FogfPtr = LoadProcByName<FogfDel>("glFogf", getProcAddress);
            FogfvPtr = LoadProcByName<FogfvDel>("glFogfv", getProcAddress);
            FogfvUnsafePtr = LoadProcByName<FogfvUnsafeDel>("Fogfv", getProcAddress);
            FogiPtr = LoadProcByName<FogiDel>("glFogi", getProcAddress);
            FogivPtr = LoadProcByName<FogivDel>("glFogiv", getProcAddress);
            FogivUnsafePtr = LoadProcByName<FogivUnsafeDel>("Fogiv", getProcAddress);
            LightfPtr = LoadProcByName<LightfDel>("glLightf", getProcAddress);
            LightfvPtr = LoadProcByName<LightfvDel>("glLightfv", getProcAddress);
            LightfvUnsafePtr = LoadProcByName<LightfvUnsafeDel>("Lightfv", getProcAddress);
            LightiPtr = LoadProcByName<LightiDel>("glLighti", getProcAddress);
            LightivPtr = LoadProcByName<LightivDel>("glLightiv", getProcAddress);
            LightivUnsafePtr = LoadProcByName<LightivUnsafeDel>("Lightiv", getProcAddress);
            LightModelfPtr = LoadProcByName<LightModelfDel>("glLightModelf", getProcAddress);
            LightModelfvPtr = LoadProcByName<LightModelfvDel>("glLightModelfv", getProcAddress);
            LightModelfvUnsafePtr = LoadProcByName<LightModelfvUnsafeDel>("LightModelfv", getProcAddress);
            LightModeliPtr = LoadProcByName<LightModeliDel>("glLightModeli", getProcAddress);
            LightModelivPtr = LoadProcByName<LightModelivDel>("glLightModeliv", getProcAddress);
            LightModelivUnsafePtr = LoadProcByName<LightModelivUnsafeDel>("LightModeliv", getProcAddress);
            LineStipplePtr = LoadProcByName<LineStippleDel>("glLineStipple", getProcAddress);
            MaterialfPtr = LoadProcByName<MaterialfDel>("glMaterialf", getProcAddress);
            MaterialfvPtr = LoadProcByName<MaterialfvDel>("glMaterialfv", getProcAddress);
            MaterialfvUnsafePtr = LoadProcByName<MaterialfvUnsafeDel>("Materialfv", getProcAddress);
            MaterialiPtr = LoadProcByName<MaterialiDel>("glMateriali", getProcAddress);
            MaterialivPtr = LoadProcByName<MaterialivDel>("glMaterialiv", getProcAddress);
            MaterialivUnsafePtr = LoadProcByName<MaterialivUnsafeDel>("Materialiv", getProcAddress);
            PolygonStipplePtr = LoadProcByName<PolygonStippleDel>("glPolygonStipple", getProcAddress);
            PolygonStippleUnsafePtr = LoadProcByName<PolygonStippleUnsafeDel>("PolygonStipple", getProcAddress);
            ShadeModelPtr = LoadProcByName<ShadeModelDel>("glShadeModel", getProcAddress);
            TexEnvfPtr = LoadProcByName<TexEnvfDel>("glTexEnvf", getProcAddress);
            TexEnvfvPtr = LoadProcByName<TexEnvfvDel>("glTexEnvfv", getProcAddress);
            TexEnvfvUnsafePtr = LoadProcByName<TexEnvfvUnsafeDel>("TexEnvfv", getProcAddress);
            TexEnviPtr = LoadProcByName<TexEnviDel>("glTexEnvi", getProcAddress);
            TexEnvivPtr = LoadProcByName<TexEnvivDel>("glTexEnviv", getProcAddress);
            TexEnvivUnsafePtr = LoadProcByName<TexEnvivUnsafeDel>("TexEnviv", getProcAddress);
            TexGendPtr = LoadProcByName<TexGendDel>("glTexGend", getProcAddress);
            TexGendvPtr = LoadProcByName<TexGendvDel>("glTexGendv", getProcAddress);
            TexGendvUnsafePtr = LoadProcByName<TexGendvUnsafeDel>("TexGendv", getProcAddress);
            TexGenfPtr = LoadProcByName<TexGenfDel>("glTexGenf", getProcAddress);
            TexGenfvPtr = LoadProcByName<TexGenfvDel>("glTexGenfv", getProcAddress);
            TexGenfvUnsafePtr = LoadProcByName<TexGenfvUnsafeDel>("TexGenfv", getProcAddress);
            TexGeniPtr = LoadProcByName<TexGeniDel>("glTexGeni", getProcAddress);
            TexGenivPtr = LoadProcByName<TexGenivDel>("glTexGeniv", getProcAddress);
            TexGenivUnsafePtr = LoadProcByName<TexGenivUnsafeDel>("TexGeniv", getProcAddress);
            FeedbackBufferPtr = LoadProcByName<FeedbackBufferDel>("glFeedbackBuffer", getProcAddress);
            FeedbackBufferUnsafePtr = LoadProcByName<FeedbackBufferUnsafeDel>("FeedbackBuffer", getProcAddress);
            SelectBufferPtr = LoadProcByName<SelectBufferDel>("glSelectBuffer", getProcAddress);
            SelectBufferUnsafePtr = LoadProcByName<SelectBufferUnsafeDel>("SelectBuffer", getProcAddress);
            RenderModePtr = LoadProcByName<RenderModeDel>("glRenderMode", getProcAddress);
            InitNamesPtr = LoadProcByName<InitNamesDel>("glInitNames", getProcAddress);
            LoadNamePtr = LoadProcByName<LoadNameDel>("glLoadName", getProcAddress);
            PassThroughPtr = LoadProcByName<PassThroughDel>("glPassThrough", getProcAddress);
            PopNamePtr = LoadProcByName<PopNameDel>("glPopName", getProcAddress);
            PushNamePtr = LoadProcByName<PushNameDel>("glPushName", getProcAddress);
            ClearAccumPtr = LoadProcByName<ClearAccumDel>("glClearAccum", getProcAddress);
            ClearIndexPtr = LoadProcByName<ClearIndexDel>("glClearIndex", getProcAddress);
            IndexMaskPtr = LoadProcByName<IndexMaskDel>("glIndexMask", getProcAddress);
            AccumPtr = LoadProcByName<AccumDel>("glAccum", getProcAddress);
            PopAttribPtr = LoadProcByName<PopAttribDel>("glPopAttrib", getProcAddress);
            PushAttribPtr = LoadProcByName<PushAttribDel>("glPushAttrib", getProcAddress);
            Map1dPtr = LoadProcByName<Map1dDel>("glMap1d", getProcAddress);
            Map1dUnsafePtr = LoadProcByName<Map1dUnsafeDel>("Map1d", getProcAddress);
            Map1fPtr = LoadProcByName<Map1fDel>("glMap1f", getProcAddress);
            Map1fUnsafePtr = LoadProcByName<Map1fUnsafeDel>("Map1f", getProcAddress);
            Map2dPtr = LoadProcByName<Map2dDel>("glMap2d", getProcAddress);
            Map2dUnsafePtr = LoadProcByName<Map2dUnsafeDel>("Map2d", getProcAddress);
            Map2fPtr = LoadProcByName<Map2fDel>("glMap2f", getProcAddress);
            Map2fUnsafePtr = LoadProcByName<Map2fUnsafeDel>("Map2f", getProcAddress);
            MapGrid1dPtr = LoadProcByName<MapGrid1dDel>("glMapGrid1d", getProcAddress);
            MapGrid1fPtr = LoadProcByName<MapGrid1fDel>("glMapGrid1f", getProcAddress);
            MapGrid2dPtr = LoadProcByName<MapGrid2dDel>("glMapGrid2d", getProcAddress);
            MapGrid2fPtr = LoadProcByName<MapGrid2fDel>("glMapGrid2f", getProcAddress);
            EvalCoord1dPtr = LoadProcByName<EvalCoord1dDel>("glEvalCoord1d", getProcAddress);
            EvalCoord1dvPtr = LoadProcByName<EvalCoord1dvDel>("glEvalCoord1dv", getProcAddress);
            EvalCoord1dvUnsafePtr = LoadProcByName<EvalCoord1dvUnsafeDel>("EvalCoord1dv", getProcAddress);
            EvalCoord1fPtr = LoadProcByName<EvalCoord1fDel>("glEvalCoord1f", getProcAddress);
            EvalCoord1fvPtr = LoadProcByName<EvalCoord1fvDel>("glEvalCoord1fv", getProcAddress);
            EvalCoord1fvUnsafePtr = LoadProcByName<EvalCoord1fvUnsafeDel>("EvalCoord1fv", getProcAddress);
            EvalCoord2dPtr = LoadProcByName<EvalCoord2dDel>("glEvalCoord2d", getProcAddress);
            EvalCoord2dvPtr = LoadProcByName<EvalCoord2dvDel>("glEvalCoord2dv", getProcAddress);
            EvalCoord2dvUnsafePtr = LoadProcByName<EvalCoord2dvUnsafeDel>("EvalCoord2dv", getProcAddress);
            EvalCoord2fPtr = LoadProcByName<EvalCoord2fDel>("glEvalCoord2f", getProcAddress);
            EvalCoord2fvPtr = LoadProcByName<EvalCoord2fvDel>("glEvalCoord2fv", getProcAddress);
            EvalCoord2fvUnsafePtr = LoadProcByName<EvalCoord2fvUnsafeDel>("EvalCoord2fv", getProcAddress);
            EvalMesh1Ptr = LoadProcByName<EvalMesh1Del>("glEvalMesh1", getProcAddress);
            EvalPoint1Ptr = LoadProcByName<EvalPoint1Del>("glEvalPoint1", getProcAddress);
            EvalMesh2Ptr = LoadProcByName<EvalMesh2Del>("glEvalMesh2", getProcAddress);
            EvalPoint2Ptr = LoadProcByName<EvalPoint2Del>("glEvalPoint2", getProcAddress);
            AlphaFuncPtr = LoadProcByName<AlphaFuncDel>("glAlphaFunc", getProcAddress);
            PixelZoomPtr = LoadProcByName<PixelZoomDel>("glPixelZoom", getProcAddress);
            PixelTransferfPtr = LoadProcByName<PixelTransferfDel>("glPixelTransferf", getProcAddress);
            PixelTransferiPtr = LoadProcByName<PixelTransferiDel>("glPixelTransferi", getProcAddress);
            PixelMapfvPtr = LoadProcByName<PixelMapfvDel>("glPixelMapfv", getProcAddress);
            PixelMapfvUnsafePtr = LoadProcByName<PixelMapfvUnsafeDel>("PixelMapfv", getProcAddress);
            PixelMapuivPtr = LoadProcByName<PixelMapuivDel>("glPixelMapuiv", getProcAddress);
            PixelMapuivUnsafePtr = LoadProcByName<PixelMapuivUnsafeDel>("PixelMapuiv", getProcAddress);
            PixelMapusvPtr = LoadProcByName<PixelMapusvDel>("glPixelMapusv", getProcAddress);
            PixelMapusvUnsafePtr = LoadProcByName<PixelMapusvUnsafeDel>("PixelMapusv", getProcAddress);
            CopyPixelsPtr = LoadProcByName<CopyPixelsDel>("glCopyPixels", getProcAddress);
            DrawPixelsPtr = LoadProcByName<DrawPixelsDel>("glDrawPixels", getProcAddress);
            DrawPixelsUnsafePtr = LoadProcByName<DrawPixelsUnsafeDel>("DrawPixels", getProcAddress);
            GetClipPlanePtr = LoadProcByName<GetClipPlaneDel>("glGetClipPlane", getProcAddress);
            GetClipPlaneUnsafePtr = LoadProcByName<GetClipPlaneUnsafeDel>("GetClipPlane", getProcAddress);
            GetLightfvPtr = LoadProcByName<GetLightfvDel>("glGetLightfv", getProcAddress);
            GetLightfvUnsafePtr = LoadProcByName<GetLightfvUnsafeDel>("GetLightfv", getProcAddress);
            GetLightivPtr = LoadProcByName<GetLightivDel>("glGetLightiv", getProcAddress);
            GetLightivUnsafePtr = LoadProcByName<GetLightivUnsafeDel>("GetLightiv", getProcAddress);
            GetMapdvPtr = LoadProcByName<GetMapdvDel>("glGetMapdv", getProcAddress);
            GetMapdvUnsafePtr = LoadProcByName<GetMapdvUnsafeDel>("GetMapdv", getProcAddress);
            GetMapfvPtr = LoadProcByName<GetMapfvDel>("glGetMapfv", getProcAddress);
            GetMapfvUnsafePtr = LoadProcByName<GetMapfvUnsafeDel>("GetMapfv", getProcAddress);
            GetMapivPtr = LoadProcByName<GetMapivDel>("glGetMapiv", getProcAddress);
            GetMapivUnsafePtr = LoadProcByName<GetMapivUnsafeDel>("GetMapiv", getProcAddress);
            GetMaterialfvPtr = LoadProcByName<GetMaterialfvDel>("glGetMaterialfv", getProcAddress);
            GetMaterialfvUnsafePtr = LoadProcByName<GetMaterialfvUnsafeDel>("GetMaterialfv", getProcAddress);
            GetMaterialivPtr = LoadProcByName<GetMaterialivDel>("glGetMaterialiv", getProcAddress);
            GetMaterialivUnsafePtr = LoadProcByName<GetMaterialivUnsafeDel>("GetMaterialiv", getProcAddress);
            GetPixelMapfvPtr = LoadProcByName<GetPixelMapfvDel>("glGetPixelMapfv", getProcAddress);
            GetPixelMapfvUnsafePtr = LoadProcByName<GetPixelMapfvUnsafeDel>("GetPixelMapfv", getProcAddress);
            GetPixelMapuivPtr = LoadProcByName<GetPixelMapuivDel>("glGetPixelMapuiv", getProcAddress);
            GetPixelMapuivUnsafePtr = LoadProcByName<GetPixelMapuivUnsafeDel>("GetPixelMapuiv", getProcAddress);
            GetPixelMapusvPtr = LoadProcByName<GetPixelMapusvDel>("glGetPixelMapusv", getProcAddress);
            GetPixelMapusvUnsafePtr = LoadProcByName<GetPixelMapusvUnsafeDel>("GetPixelMapusv", getProcAddress);
            GetPolygonStipplePtr = LoadProcByName<GetPolygonStippleDel>("glGetPolygonStipple", getProcAddress);
            GetPolygonStippleUnsafePtr = LoadProcByName<GetPolygonStippleUnsafeDel>("GetPolygonStipple", getProcAddress);
            GetTexEnvfvPtr = LoadProcByName<GetTexEnvfvDel>("glGetTexEnvfv", getProcAddress);
            GetTexEnvfvUnsafePtr = LoadProcByName<GetTexEnvfvUnsafeDel>("GetTexEnvfv", getProcAddress);
            GetTexEnvivPtr = LoadProcByName<GetTexEnvivDel>("glGetTexEnviv", getProcAddress);
            GetTexEnvivUnsafePtr = LoadProcByName<GetTexEnvivUnsafeDel>("GetTexEnviv", getProcAddress);
            GetTexGendvPtr = LoadProcByName<GetTexGendvDel>("glGetTexGendv", getProcAddress);
            GetTexGendvUnsafePtr = LoadProcByName<GetTexGendvUnsafeDel>("GetTexGendv", getProcAddress);
            GetTexGenfvPtr = LoadProcByName<GetTexGenfvDel>("glGetTexGenfv", getProcAddress);
            GetTexGenfvUnsafePtr = LoadProcByName<GetTexGenfvUnsafeDel>("GetTexGenfv", getProcAddress);
            GetTexGenivPtr = LoadProcByName<GetTexGenivDel>("glGetTexGeniv", getProcAddress);
            GetTexGenivUnsafePtr = LoadProcByName<GetTexGenivUnsafeDel>("GetTexGeniv", getProcAddress);
            IsListPtr = LoadProcByName<IsListDel>("glIsList", getProcAddress);
            FrustumPtr = LoadProcByName<FrustumDel>("glFrustum", getProcAddress);
            LoadIdentityPtr = LoadProcByName<LoadIdentityDel>("glLoadIdentity", getProcAddress);
            LoadMatrixfPtr = LoadProcByName<LoadMatrixfDel>("glLoadMatrixf", getProcAddress);
            LoadMatrixfUnsafePtr = LoadProcByName<LoadMatrixfUnsafeDel>("LoadMatrixf", getProcAddress);
            LoadMatrixdPtr = LoadProcByName<LoadMatrixdDel>("glLoadMatrixd", getProcAddress);
            LoadMatrixdUnsafePtr = LoadProcByName<LoadMatrixdUnsafeDel>("LoadMatrixd", getProcAddress);
            MatrixModePtr = LoadProcByName<MatrixModeDel>("glMatrixMode", getProcAddress);
            MultMatrixfPtr = LoadProcByName<MultMatrixfDel>("glMultMatrixf", getProcAddress);
            MultMatrixfUnsafePtr = LoadProcByName<MultMatrixfUnsafeDel>("MultMatrixf", getProcAddress);
            MultMatrixdPtr = LoadProcByName<MultMatrixdDel>("glMultMatrixd", getProcAddress);
            MultMatrixdUnsafePtr = LoadProcByName<MultMatrixdUnsafeDel>("MultMatrixd", getProcAddress);
            OrthoPtr = LoadProcByName<OrthoDel>("glOrtho", getProcAddress);
            PopMatrixPtr = LoadProcByName<PopMatrixDel>("glPopMatrix", getProcAddress);
            PushMatrixPtr = LoadProcByName<PushMatrixDel>("glPushMatrix", getProcAddress);
            RotatedPtr = LoadProcByName<RotatedDel>("glRotated", getProcAddress);
            RotatefPtr = LoadProcByName<RotatefDel>("glRotatef", getProcAddress);
            ScaledPtr = LoadProcByName<ScaledDel>("glScaled", getProcAddress);
            ScalefPtr = LoadProcByName<ScalefDel>("glScalef", getProcAddress);
            TranslatedPtr = LoadProcByName<TranslatedDel>("glTranslated", getProcAddress);
            TranslatefPtr = LoadProcByName<TranslatefDel>("glTranslatef", getProcAddress);
        }

    }
}
