// ReSharper disable UnusedMember.Global
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedParameter.Global
// ReSharper disable IdentifierTypo
// ReSharper disable CommentTypo
// ReSharper disable StringLiteralTypo
using System;
using System.Runtime.InteropServices;

namespace Yagl.Graphics
{
    public static partial class Gl
    {

        #region Enums

        // AttribMask. 
        public const uint CURRENT_BIT = 0x00000001;
        public const uint POINT_BIT = 0x00000002;
        public const uint LINE_BIT = 0x00000004;
        public const uint POLYGON_BIT = 0x00000008;
        public const uint POLYGON_STIPPLE_BIT = 0x00000010;
        public const uint PIXEL_MODE_BIT = 0x00000020;
        public const uint LIGHTING_BIT = 0x00000040;
        public const uint FOG_BIT = 0x00000080;
        public const uint DEPTH_BUFFER_BIT = 0x00000100;
        public const uint ACCUM_BUFFER_BIT = 0x00000200;
        public const uint STENCIL_BUFFER_BIT = 0x00000400;
        public const uint VIEWPORT_BIT = 0x00000800;
        public const uint TRANSFORM_BIT = 0x00001000;
        public const uint ENABLE_BIT = 0x00002000;
        public const uint COLOR_BUFFER_BIT = 0x00004000;
        public const uint HINT_BIT = 0x00008000;
        public const uint EVAL_BIT = 0x00010000;
        public const uint LIST_BIT = 0x00020000;
        public const uint TEXTURE_BIT = 0x00040000;
        public const uint SCISSOR_BIT = 0x00080000;
        public const uint MULTISAMPLE_BIT = 0x20000000;
        public const uint MULTISAMPLE_BIT_ARB = 0x20000000;
        public const uint MULTISAMPLE_BIT_EXT = 0x20000000;
        public const uint MULTISAMPLE_BIT_3DFX = 0x20000000;
        public const uint ALL_ATTRIB_BITS = 0xFFFFFFFF;
        
        // BufferStorageMask. GL_MAP_{COHERENT,PERSISTENT,READ,WRITE}_{BIT,BIT_EXT} also lie in this namespace
        public const ushort DYNAMIC_STORAGE_BIT = 0x0100;
        public const ushort DYNAMIC_STORAGE_BIT_EXT = 0x0100;
        public const ushort CLIENT_STORAGE_BIT = 0x0200;
        public const ushort CLIENT_STORAGE_BIT_EXT = 0x0200;
        public const ushort SPARSE_STORAGE_BIT_ARB = 0x0400;
        public const ushort LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
        public const ushort PER_GPU_STORAGE_BIT_NV = 0x0800;
        // Unused 0x1000..0x1000. Reserved for NVIDIA
        public const ushort EXTERNAL_STORAGE_BIT_NVX = 0x2000;
        
        // ClearBufferMask. GL_{DEPTH,ACCUM,STENCIL,COLOR}_BUFFER_BIT also lie in this namespace
        public const uint COVERAGE_BUFFER_BIT_NV = 0x00008000;
        
        // ClientAttribMask. 
        public const uint CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public const uint CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public const uint CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
        
        // ContextFlagMask. Should be shared with WGL/GLX, but aren't since the FORWARD_COMPATIBLE and DEBUG values are swapped vs. WGL/GLX.
        public const uint CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
        public const uint CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
        public const uint CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
        public const uint CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
        public const uint CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
        public const uint CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
        public const uint CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
        public const uint CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010;
        
        // ContextProfileMask. 
        public const uint CONTEXT_CORE_PROFILE_BIT = 0x00000001;
        public const uint CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
        
        // MapBufferAccessMask. 
        public const ushort MAP_READ_BIT = 0x0001;
        public const ushort MAP_READ_BIT_EXT = 0x0001;
        public const ushort MAP_WRITE_BIT = 0x0002;
        public const ushort MAP_WRITE_BIT_EXT = 0x0002;
        public const ushort MAP_INVALIDATE_RANGE_BIT = 0x0004;
        public const ushort MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004;
        public const ushort MAP_INVALIDATE_BUFFER_BIT = 0x0008;
        public const ushort MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008;
        public const ushort MAP_FLUSH_EXPLICIT_BIT = 0x0010;
        public const ushort MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010;
        public const ushort MAP_UNSYNCHRONIZED_BIT = 0x0020;
        public const ushort MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020;
        public const ushort MAP_PERSISTENT_BIT = 0x0040;
        public const ushort MAP_PERSISTENT_BIT_EXT = 0x0040;
        public const ushort MAP_COHERENT_BIT = 0x0080;
        public const ushort MAP_COHERENT_BIT_EXT = 0x0080;
        
        // MemoryBarrierMask. 
        public const uint VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
        public const uint VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
        public const uint ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
        public const uint ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
        public const uint UNIFORM_BARRIER_BIT = 0x00000004;
        public const uint UNIFORM_BARRIER_BIT_EXT = 0x00000004;
        public const uint TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
        public const uint TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
        public const uint SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
        public const uint SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
        public const uint SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
        public const uint COMMAND_BARRIER_BIT = 0x00000040;
        public const uint COMMAND_BARRIER_BIT_EXT = 0x00000040;
        public const uint PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
        public const uint PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
        public const uint TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
        public const uint TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
        public const uint BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
        public const uint BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
        public const uint FRAMEBUFFER_BARRIER_BIT = 0x00000400;
        public const uint FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
        public const uint TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
        public const uint TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
        public const uint ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
        public const uint ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
        public const uint SHADER_STORAGE_BARRIER_BIT = 0x00002000;
        public const uint CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
        public const uint CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000;
        public const uint QUERY_BUFFER_BARRIER_BIT = 0x00008000;
        public const uint ALL_BARRIER_BITS = 0xFFFFFFFF;
        public const uint ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
        
        // OcclusionQueryEventMaskAMD. 
        public const uint QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
        public const uint QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
        public const uint QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
        public const uint QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
        public const uint QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
        
        // SyncObjectMask. 
        public const uint SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
        public const uint SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001;
        
        // UseProgramStageMask. 
        public const uint VERTEX_SHADER_BIT = 0x00000001;
        public const uint VERTEX_SHADER_BIT_EXT = 0x00000001;
        public const uint FRAGMENT_SHADER_BIT = 0x00000002;
        public const uint FRAGMENT_SHADER_BIT_EXT = 0x00000002;
        public const uint GEOMETRY_SHADER_BIT = 0x00000004;
        public const uint GEOMETRY_SHADER_BIT_EXT = 0x00000004;
        public const uint GEOMETRY_SHADER_BIT_OES = 0x00000004;
        public const uint TESS_CONTROL_SHADER_BIT = 0x00000008;
        public const uint TESS_CONTROL_SHADER_BIT_EXT = 0x00000008;
        public const uint TESS_CONTROL_SHADER_BIT_OES = 0x00000008;
        public const uint TESS_EVALUATION_SHADER_BIT = 0x00000010;
        public const uint TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010;
        public const uint TESS_EVALUATION_SHADER_BIT_OES = 0x00000010;
        public const uint COMPUTE_SHADER_BIT = 0x00000020;
        public const uint MESH_SHADER_BIT_NV = 0x00000040;
        public const uint TASK_SHADER_BIT_NV = 0x00000080;
        public const uint ALL_SHADER_BITS = 0xFFFFFFFF;
        public const uint ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
        
        // SubgroupSupportedFeatures. 
        public const uint SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
        public const uint SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
        public const uint SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
        public const uint SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
        public const uint SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
        public const uint SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
        public const uint SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
        public const uint SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
        public const uint SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
        
        // TextureStorageMaskAMD. 
        public const uint TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
        
        // FragmentShaderDestMaskATI. 
        public const uint RED_BIT_ATI = 0x00000001;
        public const uint GREEN_BIT_ATI = 0x00000002;
        public const uint BLUE_BIT_ATI = 0x00000004;
        
        // FragmentShaderDestModMaskATI. 
        public const uint GL_2X_BIT_ATI = 0x00000001;
        public const uint GL_4X_BIT_ATI = 0x00000002;
        public const uint GL_8X_BIT_ATI = 0x00000004;
        public const uint HALF_BIT_ATI = 0x00000008;
        public const uint QUARTER_BIT_ATI = 0x00000010;
        public const uint EIGHTH_BIT_ATI = 0x00000020;
        public const uint SATURATE_BIT_ATI = 0x00000040;
        
        // FragmentShaderColorModMaskATI. 
        public const uint COMP_BIT_ATI = 0x00000002;
        public const uint NEGATE_BIT_ATI = 0x00000004;
        public const uint BIAS_BIT_ATI = 0x00000008;
        
        // TraceMaskMESA. 
        public const ushort TRACE_OPERATIONS_BIT_MESA = 0x0001;
        public const ushort TRACE_PRIMITIVES_BIT_MESA = 0x0002;
        public const ushort TRACE_ARRAYS_BIT_MESA = 0x0004;
        public const ushort TRACE_TEXTURES_BIT_MESA = 0x0008;
        public const ushort TRACE_PIXELS_BIT_MESA = 0x0010;
        public const ushort TRACE_ERRORS_BIT_MESA = 0x0020;
        public const ushort TRACE_ALL_BITS_MESA = 0xFFFF;
        
        // PathRenderingMaskNV. 
        public const byte BOLD_BIT_NV = 0x01;
        public const byte ITALIC_BIT_NV = 0x02;
        public const byte GLYPH_WIDTH_BIT_NV = 0x01;
        public const byte GLYPH_HEIGHT_BIT_NV = 0x02;
        public const byte GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
        public const byte GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
        public const byte GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
        public const byte GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
        public const byte GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
        public const byte GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
        public const int GLYPH_HAS_KERNING_BIT_NV = 0x100;
        public const uint FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
        public const uint FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
        public const uint FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
        public const uint FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
        public const uint FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
        public const uint FONT_ASCENDER_BIT_NV = 0x00200000;
        public const uint FONT_DESCENDER_BIT_NV = 0x00400000;
        public const uint FONT_HEIGHT_BIT_NV = 0x00800000;
        public const uint FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
        public const uint FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
        public const uint FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
        public const uint FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
        public const uint FONT_HAS_KERNING_BIT_NV = 0x10000000;
        public const uint FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
        
        // PerformanceQueryCapsMaskINTEL. 
        public const uint PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
        public const uint PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
        
        // VertexHintsMaskPGI. 
        public const uint VERTEX23_BIT_PGI = 0x00000004;
        public const uint VERTEX4_BIT_PGI = 0x00000008;
        public const uint COLOR3_BIT_PGI = 0x00010000;
        public const uint COLOR4_BIT_PGI = 0x00020000;
        public const uint EDGEFLAG_BIT_PGI = 0x00040000;
        public const uint INDEX_BIT_PGI = 0x00080000;
        public const uint MAT_AMBIENT_BIT_PGI = 0x00100000;
        public const uint MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        public const uint MAT_DIFFUSE_BIT_PGI = 0x00400000;
        public const uint MAT_EMISSION_BIT_PGI = 0x00800000;
        public const uint MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        public const uint MAT_SHININESS_BIT_PGI = 0x02000000;
        public const uint MAT_SPECULAR_BIT_PGI = 0x04000000;
        public const uint NORMAL_BIT_PGI = 0x08000000;
        public const uint TEXCOORD1_BIT_PGI = 0x10000000;
        public const uint TEXCOORD2_BIT_PGI = 0x20000000;
        public const uint TEXCOORD3_BIT_PGI = 0x40000000;
        public const uint TEXCOORD4_BIT_PGI = 0x80000000;
        
        // BufferBitQCOM. 
        public const uint COLOR_BUFFER_BIT0_QCOM = 0x00000001;
        public const uint COLOR_BUFFER_BIT1_QCOM = 0x00000002;
        public const uint COLOR_BUFFER_BIT2_QCOM = 0x00000004;
        public const uint COLOR_BUFFER_BIT3_QCOM = 0x00000008;
        public const uint COLOR_BUFFER_BIT4_QCOM = 0x00000010;
        public const uint COLOR_BUFFER_BIT5_QCOM = 0x00000020;
        public const uint COLOR_BUFFER_BIT6_QCOM = 0x00000040;
        public const uint COLOR_BUFFER_BIT7_QCOM = 0x00000080;
        public const uint DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
        public const uint DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
        public const uint DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
        public const uint DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
        public const uint DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
        public const uint DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
        public const uint DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
        public const uint DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
        public const uint STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
        public const uint STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
        public const uint STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
        public const uint STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
        public const uint STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
        public const uint STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
        public const uint STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
        public const uint STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
        public const uint MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
        public const uint MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
        public const uint MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
        public const uint MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
        public const uint MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
        public const uint MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
        public const uint MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
        public const uint MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;
        
        // FoveationConfigBitQCOM. 
        public const uint FOVEATION_ENABLE_BIT_QCOM = 0x00000001;
        public const uint FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002;
        public const uint FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004;
        
        // FfdMaskSGIX. 
        public const uint TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        public const uint GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        
        // CommandOpcodesNV. For NV_command_list.
        public const ushort TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
        public const ushort NOP_COMMAND_NV = 0x0001;
        public const ushort DRAW_ELEMENTS_COMMAND_NV = 0x0002;
        public const ushort DRAW_ARRAYS_COMMAND_NV = 0x0003;
        public const ushort DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
        public const ushort DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
        public const ushort DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
        public const ushort DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
        public const ushort ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
        public const ushort ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
        public const ushort UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
        public const ushort BLEND_COLOR_COMMAND_NV = 0x000B;
        public const ushort STENCIL_REF_COMMAND_NV = 0x000C;
        public const ushort LINE_WIDTH_COMMAND_NV = 0x000D;
        public const ushort POLYGON_OFFSET_COMMAND_NV = 0x000E;
        public const ushort ALPHA_REF_COMMAND_NV = 0x000F;
        public const ushort VIEWPORT_COMMAND_NV = 0x0010;
        public const ushort SCISSOR_COMMAND_NV = 0x0011;
        public const ushort FRONT_FACE_COMMAND_NV = 0x0012;
        
        // MapTextureFormatINTEL. Texture memory layouts for INTEL_map_texture
        public const int LAYOUT_DEFAULT_INTEL = 0;
        public const int LAYOUT_LINEAR_INTEL = 1;
        public const int LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
        
        // PathRenderingTokenNV. 
        public const byte CLOSE_PATH_NV = 0x00;
        public const byte MOVE_TO_NV = 0x02;
        public const byte RELATIVE_MOVE_TO_NV = 0x03;
        public const byte LINE_TO_NV = 0x04;
        public const byte RELATIVE_LINE_TO_NV = 0x05;
        public const byte HORIZONTAL_LINE_TO_NV = 0x06;
        public const byte RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
        public const byte VERTICAL_LINE_TO_NV = 0x08;
        public const byte RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
        public const byte QUADRATIC_CURVE_TO_NV = 0x0A;
        public const byte RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
        public const byte CUBIC_CURVE_TO_NV = 0x0C;
        public const byte RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
        public const byte SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
        public const byte RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
        public const byte SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
        public const byte RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
        public const byte SMALL_CCW_ARC_TO_NV = 0x12;
        public const byte RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
        public const byte SMALL_CW_ARC_TO_NV = 0x14;
        public const byte RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
        public const byte LARGE_CCW_ARC_TO_NV = 0x16;
        public const byte RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
        public const byte LARGE_CW_ARC_TO_NV = 0x18;
        public const byte RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
        public const byte CONIC_CURVE_TO_NV = 0x1A;
        public const byte RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
        // Unused 0x1C..0xBF. Unused for PathRenderingTokenNV
        public const byte SHARED_EDGE_NV = 0xC0;
        // Unused 0xC1..0xE7. Unused for PathRenderingTokenNV
        public const byte ROUNDED_RECT_NV = 0xE8;
        public const byte RELATIVE_ROUNDED_RECT_NV = 0xE9;
        public const byte ROUNDED_RECT2_NV = 0xEA;
        public const byte RELATIVE_ROUNDED_RECT2_NV = 0xEB;
        public const byte ROUNDED_RECT4_NV = 0xEC;
        public const byte RELATIVE_ROUNDED_RECT4_NV = 0xED;
        public const byte ROUNDED_RECT8_NV = 0xEE;
        public const byte RELATIVE_ROUNDED_RECT8_NV = 0xEF;
        public const byte RESTART_PATH_NV = 0xF0;
        public const byte DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
        public const byte DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
        public const byte RECT_NV = 0xF6;
        public const byte RELATIVE_RECT_NV = 0xF7;
        public const byte CIRCULAR_CCW_ARC_TO_NV = 0xF8;
        public const byte CIRCULAR_CW_ARC_TO_NV = 0xFA;
        public const byte CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
        public const byte ARC_TO_NV = 0xFE;
        public const byte RELATIVE_ARC_TO_NV = 0xFF;
        
        // TransformFeedbackTokenNV. For NV_transform_feedback. No clue why small negative values are used
        public const int NEXT_BUFFER_NV = -2;
        public const int SKIP_COMPONENTS4_NV = -3;
        public const int SKIP_COMPONENTS3_NV = -4;
        public const int SKIP_COMPONENTS2_NV = -5;
        public const int SKIP_COMPONENTS1_NV = -6;
        
        // TriangleListSUN. 
        public const ushort RESTART_SUN = 0x0001;
        public const ushort REPLACE_MIDDLE_SUN = 0x0002;
        public const ushort REPLACE_OLDEST_SUN = 0x0003;
        
        // SpecialNumbers. Tokens whose numeric value is intrinsically meaningful
        public const int FALSE = 0;
        public const int NO_ERROR = 0;
        public const int ZERO = 0;
        public const int NONE = 0;
        public const int NONE_OES = 0;
        public const int TRUE = 1;
        public const int ONE = 1;
        public const uint INVALID_INDEX = 0xFFFFFFFF;
        public const uint ALL_PIXELS_AMD = 0xFFFFFFFF;
        public const ulong TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
        public const ulong TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
        public const int VERSION_ES_CL_1_0 = 1;
        public const int VERSION_ES_CM_1_1 = 1;
        public const int VERSION_ES_CL_1_1 = 1;
        public const int UUID_SIZE_EXT = 16;
        public const int LUID_SIZE_EXT = 8;
        
        // . Mostly OpenGL 1.0/1.1 enum assignments. Unused ranges should generally remain unused.
        public const ushort POINTS = 0x0000;
        public const ushort LINES = 0x0001;
        public const ushort LINE_LOOP = 0x0002;
        public const ushort LINE_STRIP = 0x0003;
        public const ushort TRIANGLES = 0x0004;
        public const ushort TRIANGLE_STRIP = 0x0005;
        public const ushort TRIANGLE_FAN = 0x0006;
        public const ushort QUADS = 0x0007;
        public const ushort QUADS_EXT = 0x0007;
        public const ushort QUADS_OES = 0x0007;
        public const ushort QUAD_STRIP = 0x0008;
        public const ushort POLYGON = 0x0009;
        public const ushort LINES_ADJACENCY = 0x000A;
        public const ushort LINES_ADJACENCY_ARB = 0x000A;
        public const ushort LINES_ADJACENCY_EXT = 0x000A;
        public const ushort LINES_ADJACENCY_OES = 0x000A;
        public const ushort LINE_STRIP_ADJACENCY = 0x000B;
        public const ushort LINE_STRIP_ADJACENCY_ARB = 0x000B;
        public const ushort LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public const ushort LINE_STRIP_ADJACENCY_OES = 0x000B;
        public const ushort TRIANGLES_ADJACENCY = 0x000C;
        public const ushort TRIANGLES_ADJACENCY_ARB = 0x000C;
        public const ushort TRIANGLES_ADJACENCY_EXT = 0x000C;
        public const ushort TRIANGLES_ADJACENCY_OES = 0x000C;
        public const ushort TRIANGLE_STRIP_ADJACENCY = 0x000D;
        public const ushort TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
        public const ushort TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public const ushort TRIANGLE_STRIP_ADJACENCY_OES = 0x000D;
        public const ushort PATCHES = 0x000E;
        public const ushort PATCHES_EXT = 0x000E;
        public const ushort PATCHES_OES = 0x000E;
        // Unused 0x000F..0x00FF. Unused for PrimitiveType
        public const ushort ACCUM = 0x0100;
        public const ushort LOAD = 0x0101;
        public const ushort RETURN = 0x0102;
        public const ushort MULT = 0x0103;
        public const ushort ADD = 0x0104;
        // Unused 0x0105..0x01FF. Unused for AccumOp
        public const ushort NEVER = 0x0200;
        public const ushort LESS = 0x0201;
        public const ushort EQUAL = 0x0202;
        public const ushort LEQUAL = 0x0203;
        public const ushort GREATER = 0x0204;
        public const ushort NOTEQUAL = 0x0205;
        public const ushort GEQUAL = 0x0206;
        public const ushort ALWAYS = 0x0207;
        // Unused 0x0208..0x02FF. Unused for AlphaFunction
        public const ushort SRC_COLOR = 0x0300;
        public const ushort ONE_MINUS_SRC_COLOR = 0x0301;
        public const ushort SRC_ALPHA = 0x0302;
        public const ushort ONE_MINUS_SRC_ALPHA = 0x0303;
        public const ushort DST_ALPHA = 0x0304;
        public const ushort ONE_MINUS_DST_ALPHA = 0x0305;
        public const ushort DST_COLOR = 0x0306;
        public const ushort ONE_MINUS_DST_COLOR = 0x0307;
        public const ushort SRC_ALPHA_SATURATE = 0x0308;
        public const ushort SRC_ALPHA_SATURATE_EXT = 0x0308;
        // Unused 0x0309..0x03FF. Unused for BlendingFactor
        public const ushort FRONT_LEFT = 0x0400;
        public const ushort FRONT_RIGHT = 0x0401;
        public const ushort BACK_LEFT = 0x0402;
        public const ushort BACK_RIGHT = 0x0403;
        public const ushort FRONT = 0x0404;
        public const ushort BACK = 0x0405;
        public const ushort LEFT = 0x0406;
        public const ushort RIGHT = 0x0407;
        public const ushort FRONT_AND_BACK = 0x0408;
        public const ushort AUX0 = 0x0409;
        public const ushort AUX1 = 0x040A;
        public const ushort AUX2 = 0x040B;
        public const ushort AUX3 = 0x040C;
        // Unused 0x040D..0x04FF. Unused for DrawBufferMode
        public const ushort INVALID_ENUM = 0x0500;
        public const ushort INVALID_VALUE = 0x0501;
        public const ushort INVALID_OPERATION = 0x0502;
        public const ushort STACK_OVERFLOW = 0x0503;
        public const ushort STACK_OVERFLOW_KHR = 0x0503;
        public const ushort STACK_UNDERFLOW = 0x0504;
        public const ushort STACK_UNDERFLOW_KHR = 0x0504;
        public const ushort OUT_OF_MEMORY = 0x0505;
        public const ushort INVALID_FRAMEBUFFER_OPERATION = 0x0506;
        public const ushort INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
        public const ushort INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506;
        public const ushort CONTEXT_LOST = 0x0507;
        public const ushort CONTEXT_LOST_KHR = 0x0507;
        // Unused 0x0508..0x05FF. Unused for ErrorCode
        public const ushort GL_2D = 0x0600;
        public const ushort GL_3D = 0x0601;
        public const ushort GL_3D_COLOR = 0x0602;
        public const ushort GL_3D_COLOR_TEXTURE = 0x0603;
        public const ushort GL_4D_COLOR_TEXTURE = 0x0604;
        // Unused 0x0605..0x06FF. Unused for FeedbackType
        public const ushort PASS_THROUGH_TOKEN = 0x0700;
        public const ushort POINT_TOKEN = 0x0701;
        public const ushort LINE_TOKEN = 0x0702;
        public const ushort POLYGON_TOKEN = 0x0703;
        public const ushort BITMAP_TOKEN = 0x0704;
        public const ushort DRAW_PIXEL_TOKEN = 0x0705;
        public const ushort COPY_PIXEL_TOKEN = 0x0706;
        public const ushort LINE_RESET_TOKEN = 0x0707;
        // Unused 0x0708..0x07FF. Unused for FeedbackToken
        public const ushort EXP = 0x0800;
        public const ushort EXP2 = 0x0801;
        // Unused 0x0802..0x08FF. Unused for FogMode
        public const ushort CW = 0x0900;
        public const ushort CCW = 0x0901;
        // Unused 0x0902..0x09FF. Unused for FrontFaceDirection
        public const ushort COEFF = 0x0A00;
        public const ushort ORDER = 0x0A01;
        public const ushort DOMAIN = 0x0A02;
        // Unused 0x0A03..0x0AFF. Unused for GetMapQuery
        public const ushort CURRENT_COLOR = 0x0B00;
        public const ushort CURRENT_INDEX = 0x0B01;
        public const ushort CURRENT_NORMAL = 0x0B02;
        public const ushort CURRENT_TEXTURE_COORDS = 0x0B03;
        public const ushort CURRENT_RASTER_COLOR = 0x0B04;
        public const ushort CURRENT_RASTER_INDEX = 0x0B05;
        public const ushort CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public const ushort CURRENT_RASTER_POSITION = 0x0B07;
        public const ushort CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public const ushort CURRENT_RASTER_DISTANCE = 0x0B09;
        public const ushort POINT_SMOOTH = 0x0B10;
        public const ushort POINT_SIZE = 0x0B11;
        public const ushort POINT_SIZE_RANGE = 0x0B12;
        public const ushort SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public const ushort POINT_SIZE_GRANULARITY = 0x0B13;
        public const ushort SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public const ushort LINE_SMOOTH = 0x0B20;
        public const ushort LINE_WIDTH = 0x0B21;
        public const ushort LINE_WIDTH_RANGE = 0x0B22;
        public const ushort SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public const ushort LINE_WIDTH_GRANULARITY = 0x0B23;
        public const ushort SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public const ushort LINE_STIPPLE = 0x0B24;
        public const ushort LINE_STIPPLE_PATTERN = 0x0B25;
        public const ushort LINE_STIPPLE_REPEAT = 0x0B26;
        public const ushort LIST_MODE = 0x0B30;
        public const ushort MAX_LIST_NESTING = 0x0B31;
        public const ushort LIST_BASE = 0x0B32;
        public const ushort LIST_INDEX = 0x0B33;
        public const ushort POLYGON_MODE = 0x0B40;
        public const ushort POLYGON_MODE_NV = 0x0B40;
        public const ushort POLYGON_SMOOTH = 0x0B41;
        public const ushort POLYGON_STIPPLE = 0x0B42;
        public const ushort EDGE_FLAG = 0x0B43;
        public const ushort CULL_FACE = 0x0B44;
        public const ushort CULL_FACE_MODE = 0x0B45;
        public const ushort FRONT_FACE = 0x0B46;
        public const ushort LIGHTING = 0x0B50;
        public const ushort LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public const ushort LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public const ushort LIGHT_MODEL_AMBIENT = 0x0B53;
        public const ushort SHADE_MODEL = 0x0B54;
        public const ushort COLOR_MATERIAL_FACE = 0x0B55;
        public const ushort COLOR_MATERIAL_PARAMETER = 0x0B56;
        public const ushort COLOR_MATERIAL = 0x0B57;
        public const ushort FOG = 0x0B60;
        public const ushort FOG_INDEX = 0x0B61;
        public const ushort FOG_DENSITY = 0x0B62;
        public const ushort FOG_START = 0x0B63;
        public const ushort FOG_END = 0x0B64;
        public const ushort FOG_MODE = 0x0B65;
        public const ushort FOG_COLOR = 0x0B66;
        public const ushort DEPTH_RANGE = 0x0B70;
        public const ushort DEPTH_TEST = 0x0B71;
        public const ushort DEPTH_WRITEMASK = 0x0B72;
        public const ushort DEPTH_CLEAR_VALUE = 0x0B73;
        public const ushort DEPTH_FUNC = 0x0B74;
        public const ushort ACCUM_CLEAR_VALUE = 0x0B80;
        public const ushort STENCIL_TEST = 0x0B90;
        public const ushort STENCIL_CLEAR_VALUE = 0x0B91;
        public const ushort STENCIL_FUNC = 0x0B92;
        public const ushort STENCIL_VALUE_MASK = 0x0B93;
        public const ushort STENCIL_FAIL = 0x0B94;
        public const ushort STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public const ushort STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public const ushort STENCIL_REF = 0x0B97;
        public const ushort STENCIL_WRITEMASK = 0x0B98;
        public const ushort MATRIX_MODE = 0x0BA0;
        public const ushort NORMALIZE = 0x0BA1;
        public const ushort VIEWPORT = 0x0BA2;
        public const ushort MODELVIEW_STACK_DEPTH = 0x0BA3;
        public const ushort MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
        public const ushort PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
        public const ushort PROJECTION_STACK_DEPTH = 0x0BA4;
        public const ushort PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
        public const ushort TEXTURE_STACK_DEPTH = 0x0BA5;
        public const ushort MODELVIEW_MATRIX = 0x0BA6;
        public const ushort MODELVIEW0_MATRIX_EXT = 0x0BA6;
        public const ushort PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
        public const ushort PROJECTION_MATRIX = 0x0BA7;
        public const ushort PATH_PROJECTION_MATRIX_NV = 0x0BA7;
        public const ushort TEXTURE_MATRIX = 0x0BA8;
        public const ushort ATTRIB_STACK_DEPTH = 0x0BB0;
        public const ushort CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public const ushort ALPHA_TEST = 0x0BC0;
        public const ushort ALPHA_TEST_QCOM = 0x0BC0;
        public const ushort ALPHA_TEST_FUNC = 0x0BC1;
        public const ushort ALPHA_TEST_FUNC_QCOM = 0x0BC1;
        public const ushort ALPHA_TEST_REF = 0x0BC2;
        public const ushort ALPHA_TEST_REF_QCOM = 0x0BC2;
        public const ushort DITHER = 0x0BD0;
        public const ushort BLEND_DST = 0x0BE0;
        public const ushort BLEND_SRC = 0x0BE1;
        public const ushort BLEND = 0x0BE2;
        public const ushort LOGIC_OP_MODE = 0x0BF0;
        public const ushort INDEX_LOGIC_OP = 0x0BF1;
        public const ushort LOGIC_OP = 0x0BF1;
        public const ushort COLOR_LOGIC_OP = 0x0BF2;
        public const ushort AUX_BUFFERS = 0x0C00;
        public const ushort DRAW_BUFFER = 0x0C01;
        public const ushort DRAW_BUFFER_EXT = 0x0C01;
        public const ushort READ_BUFFER = 0x0C02;
        public const ushort READ_BUFFER_EXT = 0x0C02;
        public const ushort READ_BUFFER_NV = 0x0C02;
        public const ushort SCISSOR_BOX = 0x0C10;
        public const ushort SCISSOR_TEST = 0x0C11;
        public const ushort INDEX_CLEAR_VALUE = 0x0C20;
        public const ushort INDEX_WRITEMASK = 0x0C21;
        public const ushort COLOR_CLEAR_VALUE = 0x0C22;
        public const ushort COLOR_WRITEMASK = 0x0C23;
        public const ushort INDEX_MODE = 0x0C30;
        public const ushort RGBA_MODE = 0x0C31;
        public const ushort DOUBLEBUFFER = 0x0C32;
        public const ushort STEREO = 0x0C33;
        public const ushort RENDER_MODE = 0x0C40;
        public const ushort PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public const ushort POINT_SMOOTH_HINT = 0x0C51;
        public const ushort LINE_SMOOTH_HINT = 0x0C52;
        public const ushort POLYGON_SMOOTH_HINT = 0x0C53;
        public const ushort FOG_HINT = 0x0C54;
        public const ushort TEXTURE_GEN_S = 0x0C60;
        public const ushort TEXTURE_GEN_T = 0x0C61;
        public const ushort TEXTURE_GEN_R = 0x0C62;
        public const ushort TEXTURE_GEN_Q = 0x0C63;
        public const ushort PIXEL_MAP_I_TO_I = 0x0C70;
        public const ushort PIXEL_MAP_S_TO_S = 0x0C71;
        public const ushort PIXEL_MAP_I_TO_R = 0x0C72;
        public const ushort PIXEL_MAP_I_TO_G = 0x0C73;
        public const ushort PIXEL_MAP_I_TO_B = 0x0C74;
        public const ushort PIXEL_MAP_I_TO_A = 0x0C75;
        public const ushort PIXEL_MAP_R_TO_R = 0x0C76;
        public const ushort PIXEL_MAP_G_TO_G = 0x0C77;
        public const ushort PIXEL_MAP_B_TO_B = 0x0C78;
        public const ushort PIXEL_MAP_A_TO_A = 0x0C79;
        public const ushort PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public const ushort PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public const ushort PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public const ushort PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public const ushort PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public const ushort PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public const ushort PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public const ushort PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public const ushort PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public const ushort PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public const ushort UNPACK_SWAP_BYTES = 0x0CF0;
        public const ushort UNPACK_LSB_FIRST = 0x0CF1;
        public const ushort UNPACK_ROW_LENGTH = 0x0CF2;
        public const ushort UNPACK_ROW_LENGTH_EXT = 0x0CF2;
        public const ushort UNPACK_SKIP_ROWS = 0x0CF3;
        public const ushort UNPACK_SKIP_ROWS_EXT = 0x0CF3;
        public const ushort UNPACK_SKIP_PIXELS = 0x0CF4;
        public const ushort UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
        public const ushort UNPACK_ALIGNMENT = 0x0CF5;
        public const ushort PACK_SWAP_BYTES = 0x0D00;
        public const ushort PACK_LSB_FIRST = 0x0D01;
        public const ushort PACK_ROW_LENGTH = 0x0D02;
        public const ushort PACK_SKIP_ROWS = 0x0D03;
        public const ushort PACK_SKIP_PIXELS = 0x0D04;
        public const ushort PACK_ALIGNMENT = 0x0D05;
        public const ushort MAP_COLOR = 0x0D10;
        public const ushort MAP_STENCIL = 0x0D11;
        public const ushort INDEX_SHIFT = 0x0D12;
        public const ushort INDEX_OFFSET = 0x0D13;
        public const ushort RED_SCALE = 0x0D14;
        public const ushort RED_BIAS = 0x0D15;
        public const ushort ZOOM_X = 0x0D16;
        public const ushort ZOOM_Y = 0x0D17;
        public const ushort GREEN_SCALE = 0x0D18;
        public const ushort GREEN_BIAS = 0x0D19;
        public const ushort BLUE_SCALE = 0x0D1A;
        public const ushort BLUE_BIAS = 0x0D1B;
        public const ushort ALPHA_SCALE = 0x0D1C;
        public const ushort ALPHA_BIAS = 0x0D1D;
        public const ushort DEPTH_SCALE = 0x0D1E;
        public const ushort DEPTH_BIAS = 0x0D1F;
        public const ushort MAX_EVAL_ORDER = 0x0D30;
        public const ushort MAX_LIGHTS = 0x0D31;
        public const ushort MAX_CLIP_PLANES = 0x0D32;
        public const ushort MAX_CLIP_PLANES_IMG = 0x0D32;
        public const ushort MAX_CLIP_DISTANCES = 0x0D32;
        public const ushort MAX_CLIP_DISTANCES_EXT = 0x0D32;
        public const ushort MAX_CLIP_DISTANCES_APPLE = 0x0D32;
        public const ushort MAX_TEXTURE_SIZE = 0x0D33;
        public const ushort MAX_PIXEL_MAP_TABLE = 0x0D34;
        public const ushort MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public const ushort MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public const ushort PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
        public const ushort MAX_NAME_STACK_DEPTH = 0x0D37;
        public const ushort MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public const ushort PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
        public const ushort MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public const ushort MAX_VIEWPORT_DIMS = 0x0D3A;
        public const ushort MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public const ushort SUBPIXEL_BITS = 0x0D50;
        public const ushort INDEX_BITS = 0x0D51;
        public const ushort RED_BITS = 0x0D52;
        public const ushort GREEN_BITS = 0x0D53;
        public const ushort BLUE_BITS = 0x0D54;
        public const ushort ALPHA_BITS = 0x0D55;
        public const ushort DEPTH_BITS = 0x0D56;
        public const ushort STENCIL_BITS = 0x0D57;
        public const ushort ACCUM_RED_BITS = 0x0D58;
        public const ushort ACCUM_GREEN_BITS = 0x0D59;
        public const ushort ACCUM_BLUE_BITS = 0x0D5A;
        public const ushort ACCUM_ALPHA_BITS = 0x0D5B;
        public const ushort NAME_STACK_DEPTH = 0x0D70;
        public const ushort AUTO_NORMAL = 0x0D80;
        public const ushort MAP1_COLOR_4 = 0x0D90;
        public const ushort MAP1_INDEX = 0x0D91;
        public const ushort MAP1_NORMAL = 0x0D92;
        public const ushort MAP1_TEXTURE_COORD_1 = 0x0D93;
        public const ushort MAP1_TEXTURE_COORD_2 = 0x0D94;
        public const ushort MAP1_TEXTURE_COORD_3 = 0x0D95;
        public const ushort MAP1_TEXTURE_COORD_4 = 0x0D96;
        public const ushort MAP1_VERTEX_3 = 0x0D97;
        public const ushort MAP1_VERTEX_4 = 0x0D98;
        public const ushort MAP2_COLOR_4 = 0x0DB0;
        public const ushort MAP2_INDEX = 0x0DB1;
        public const ushort MAP2_NORMAL = 0x0DB2;
        public const ushort MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public const ushort MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public const ushort MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public const ushort MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public const ushort MAP2_VERTEX_3 = 0x0DB7;
        public const ushort MAP2_VERTEX_4 = 0x0DB8;
        public const ushort MAP1_GRID_DOMAIN = 0x0DD0;
        public const ushort MAP1_GRID_SEGMENTS = 0x0DD1;
        public const ushort MAP2_GRID_DOMAIN = 0x0DD2;
        public const ushort MAP2_GRID_SEGMENTS = 0x0DD3;
        public const ushort TEXTURE_1D = 0x0DE0;
        public const ushort TEXTURE_2D = 0x0DE1;
        public const ushort FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public const ushort FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public const ushort FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public const ushort SELECTION_BUFFER_POINTER = 0x0DF3;
        public const ushort SELECTION_BUFFER_SIZE = 0x0DF4;
        // Unused 0x0DF5..0xFFFF. Unused for GetPName
        public const ushort TEXTURE_WIDTH = 0x1000;
        public const ushort TEXTURE_HEIGHT = 0x1001;
        public const ushort TEXTURE_INTERNAL_FORMAT = 0x1003;
        public const ushort TEXTURE_COMPONENTS = 0x1003;
        public const ushort TEXTURE_BORDER_COLOR = 0x1004;
        public const ushort TEXTURE_BORDER_COLOR_EXT = 0x1004;
        public const ushort TEXTURE_BORDER_COLOR_NV = 0x1004;
        public const ushort TEXTURE_BORDER_COLOR_OES = 0x1004;
        public const ushort TEXTURE_BORDER = 0x1005;
        public const ushort TEXTURE_TARGET = 0x1006;
        // Unused 0x1007..0x10FF. Unused for GetTextureParameter
        public const ushort DONT_CARE = 0x1100;
        public const ushort FASTEST = 0x1101;
        public const ushort NICEST = 0x1102;
        // Unused 0x1103..0x11FF. Unused for HintMode
        public const ushort AMBIENT = 0x1200;
        public const ushort DIFFUSE = 0x1201;
        public const ushort SPECULAR = 0x1202;
        public const ushort POSITION = 0x1203;
        public const ushort SPOT_DIRECTION = 0x1204;
        public const ushort SPOT_EXPONENT = 0x1205;
        public const ushort SPOT_CUTOFF = 0x1206;
        public const ushort CONSTANT_ATTENUATION = 0x1207;
        public const ushort LINEAR_ATTENUATION = 0x1208;
        public const ushort QUADRATIC_ATTENUATION = 0x1209;
        // Unused 0x1210..0x12FF. Unused for LightParameter
        public const ushort COMPILE = 0x1300;
        public const ushort COMPILE_AND_EXECUTE = 0x1301;
        // Unused 0x1302..0x13FF. Unused for ListMode
        public const ushort BYTE = 0x1400;
        public const ushort UNSIGNED_BYTE = 0x1401;
        public const ushort SHORT = 0x1402;
        public const ushort UNSIGNED_SHORT = 0x1403;
        public const ushort INT = 0x1404;
        public const ushort UNSIGNED_INT = 0x1405;
        public const ushort FLOAT = 0x1406;
        public const ushort GL_2_BYTES = 0x1407;
        public const ushort GL_2_BYTES_NV = 0x1407;
        public const ushort GL_3_BYTES = 0x1408;
        public const ushort GL_3_BYTES_NV = 0x1408;
        public const ushort GL_4_BYTES = 0x1409;
        public const ushort GL_4_BYTES_NV = 0x1409;
        public const ushort DOUBLE = 0x140A;
        public const ushort DOUBLE_EXT = 0x140A;
        public const ushort HALF_FLOAT = 0x140B;
        public const ushort HALF_FLOAT_ARB = 0x140B;
        public const ushort HALF_FLOAT_NV = 0x140B;
        public const ushort HALF_APPLE = 0x140B;
        public const ushort FIXED = 0x140C;
        public const ushort FIXED_OES = 0x140C;
        // Unused 0x140D. Leave gap to preserve even/odd int/uint token values
        public const ushort INT64_ARB = 0x140E;
        public const ushort INT64_NV = 0x140E;
        public const ushort UNSIGNED_INT64_ARB = 0x140F;
        public const ushort UNSIGNED_INT64_NV = 0x140F;
        // Unused 0x1410..0x14FF. Unused for DataType
        public const ushort CLEAR = 0x1500;
        public const ushort AND = 0x1501;
        public const ushort AND_REVERSE = 0x1502;
        public const ushort COPY = 0x1503;
        public const ushort AND_INVERTED = 0x1504;
        public const ushort NOOP = 0x1505;
        public const ushort XOR = 0x1506;
        public const ushort XOR_NV = 0x1506;
        public const ushort OR = 0x1507;
        public const ushort NOR = 0x1508;
        public const ushort EQUIV = 0x1509;
        public const ushort INVERT = 0x150A;
        public const ushort OR_REVERSE = 0x150B;
        public const ushort COPY_INVERTED = 0x150C;
        public const ushort OR_INVERTED = 0x150D;
        public const ushort NAND = 0x150E;
        public const ushort SET = 0x150F;
        // Unused 0x1510..0x15FF. Unused for LogicOp
        public const ushort EMISSION = 0x1600;
        public const ushort SHININESS = 0x1601;
        public const ushort AMBIENT_AND_DIFFUSE = 0x1602;
        public const ushort COLOR_INDEXES = 0x1603;
        // Unused 0x1604..0x16FF. Unused for MaterialParameter
        public const ushort MODELVIEW = 0x1700;
        public const ushort MODELVIEW0_ARB = 0x1700;
        public const ushort MODELVIEW0_EXT = 0x1700;
        public const ushort PATH_MODELVIEW_NV = 0x1700;
        public const ushort PROJECTION = 0x1701;
        public const ushort PATH_PROJECTION_NV = 0x1701;
        public const ushort TEXTURE = 0x1702;
        // Unused 0x1703..0x17FF. Unused for MatrixMode
        public const ushort COLOR = 0x1800;
        public const ushort COLOR_EXT = 0x1800;
        public const ushort DEPTH = 0x1801;
        public const ushort DEPTH_EXT = 0x1801;
        public const ushort STENCIL = 0x1802;
        public const ushort STENCIL_EXT = 0x1802;
        // Unused 0x1803..0x18FF. Unused for PixelCopyType
        public const ushort COLOR_INDEX = 0x1900;
        public const ushort STENCIL_INDEX = 0x1901;
        public const ushort STENCIL_INDEX_OES = 0x1901;
        public const ushort DEPTH_COMPONENT = 0x1902;
        public const ushort RED = 0x1903;
        public const ushort RED_EXT = 0x1903;
        public const ushort RED_NV = 0x1903;
        public const ushort GREEN = 0x1904;
        public const ushort GREEN_NV = 0x1904;
        public const ushort BLUE = 0x1905;
        public const ushort BLUE_NV = 0x1905;
        public const ushort ALPHA = 0x1906;
        public const ushort RGB = 0x1907;
        public const ushort RGBA = 0x1908;
        public const ushort LUMINANCE = 0x1909;
        public const ushort LUMINANCE_ALPHA = 0x190A;
        // Unused 0x1910..0x19FF. Unused for PixelFormat
        public const ushort BITMAP = 0x1A00;
        // Unused 0x1A01..0x1AFF. Unused for PixelType
        public const ushort POINT = 0x1B00;
        public const ushort POINT_NV = 0x1B00;
        public const ushort LINE = 0x1B01;
        public const ushort LINE_NV = 0x1B01;
        public const ushort FILL = 0x1B02;
        public const ushort FILL_NV = 0x1B02;
        // Unused 0x1B03..0x1BFF. Unused for PolygonMode
        public const ushort RENDER = 0x1C00;
        public const ushort FEEDBACK = 0x1C01;
        public const ushort SELECT = 0x1C02;
        // Unused 0x1C03..0x1CFF. Unused for RenderingMode
        public const ushort FLAT = 0x1D00;
        public const ushort SMOOTH = 0x1D01;
        // Unused 0x1D02..0x1DFF. Unused for ShadingModel
        public const ushort KEEP = 0x1E00;
        public const ushort REPLACE = 0x1E01;
        public const ushort INCR = 0x1E02;
        public const ushort DECR = 0x1E03;
        // Unused 0x1E04..0x1EFF. Unused for StencilOp
        public const ushort VENDOR = 0x1F00;
        public const ushort RENDERER = 0x1F01;
        public const ushort VERSION = 0x1F02;
        public const ushort EXTENSIONS = 0x1F03;
        // Unused 0x1F04..0x1FFF. Unused for StringName
        public const ushort S = 0x2000;
        public const ushort T = 0x2001;
        public const ushort R = 0x2002;
        public const ushort Q = 0x2003;
        // Unused 0x2004..0x20FF. Unused for TextureCoordName
        public const ushort MODULATE = 0x2100;
        public const ushort DECAL = 0x2101;
        // Unused 0x2102..0x21FF. Unused for TextureEnvMode
        public const ushort TEXTURE_ENV_MODE = 0x2200;
        public const ushort TEXTURE_ENV_COLOR = 0x2201;
        // Unused 0x2202..0x22FF. Unused for TextureEnvParameter
        public const ushort TEXTURE_ENV = 0x2300;
        // Unused 0x2301..0x23FF. Unused for TextureEnvTarget
        public const ushort EYE_LINEAR = 0x2400;
        public const ushort EYE_LINEAR_NV = 0x2400;
        public const ushort OBJECT_LINEAR = 0x2401;
        public const ushort OBJECT_LINEAR_NV = 0x2401;
        public const ushort SPHERE_MAP = 0x2402;
        // Unused 0x2403..0x24FF. Unused for TextureGenMode
        public const ushort TEXTURE_GEN_MODE = 0x2500;
        public const ushort TEXTURE_GEN_MODE_OES = 0x2500;
        public const ushort OBJECT_PLANE = 0x2501;
        public const ushort EYE_PLANE = 0x2502;
        // Unused 0x2503..0x25FF. Unused for TextureGenParameter
        public const ushort NEAREST = 0x2600;
        public const ushort LINEAR = 0x2601;
        // Unused 0x2602..0x26FF. Unused for TextureMagFilter
        public const ushort NEAREST_MIPMAP_NEAREST = 0x2700;
        public const ushort LINEAR_MIPMAP_NEAREST = 0x2701;
        public const ushort NEAREST_MIPMAP_LINEAR = 0x2702;
        public const ushort LINEAR_MIPMAP_LINEAR = 0x2703;
        // Unused 0x2704..0x27FF. Unused for TextureMinFilter
        public const ushort TEXTURE_MAG_FILTER = 0x2800;
        public const ushort TEXTURE_MIN_FILTER = 0x2801;
        public const ushort TEXTURE_WRAP_S = 0x2802;
        public const ushort TEXTURE_WRAP_T = 0x2803;
        // Unused 0x2804..0x28FF. Unused for TextureParameterName
        public const ushort CLAMP = 0x2900;
        public const ushort REPEAT = 0x2901;
        // Unused 0x2902..0x29FF. Unused for TextureWrapMode
        public const ushort POLYGON_OFFSET_UNITS = 0x2A00;
        public const ushort POLYGON_OFFSET_POINT = 0x2A01;
        public const ushort POLYGON_OFFSET_POINT_NV = 0x2A01;
        public const ushort POLYGON_OFFSET_LINE = 0x2A02;
        public const ushort POLYGON_OFFSET_LINE_NV = 0x2A02;
        // Unused 0x2A03..0x2A09. Unused for PolygonOffset
        public const ushort R3_G3_B2 = 0x2A10;
        // Unused 0x2A11..0x2A1F. Unused for InternalFormat
        public const ushort V2F = 0x2A20;
        public const ushort V3F = 0x2A21;
        public const ushort C4UB_V2F = 0x2A22;
        public const ushort C4UB_V3F = 0x2A23;
        public const ushort C3F_V3F = 0x2A24;
        public const ushort N3F_V3F = 0x2A25;
        public const ushort C4F_N3F_V3F = 0x2A26;
        public const ushort T2F_V3F = 0x2A27;
        public const ushort T4F_V4F = 0x2A28;
        public const ushort T2F_C4UB_V3F = 0x2A29;
        public const ushort T2F_C3F_V3F = 0x2A2A;
        public const ushort T2F_N3F_V3F = 0x2A2B;
        public const ushort T2F_C4F_N3F_V3F = 0x2A2C;
        public const ushort T4F_C4F_N3F_V4F = 0x2A2D;
        // Unused 0x2A2E..0x2FFF. Unused for InterleavedArrayFormat
        public const ushort CLIP_PLANE0 = 0x3000;
        public const ushort CLIP_PLANE0_IMG = 0x3000;
        public const ushort CLIP_DISTANCE0 = 0x3000;
        public const ushort CLIP_DISTANCE0_EXT = 0x3000;
        public const ushort CLIP_DISTANCE0_APPLE = 0x3000;
        public const ushort CLIP_PLANE1 = 0x3001;
        public const ushort CLIP_PLANE1_IMG = 0x3001;
        public const ushort CLIP_DISTANCE1 = 0x3001;
        public const ushort CLIP_DISTANCE1_EXT = 0x3001;
        public const ushort CLIP_DISTANCE1_APPLE = 0x3001;
        public const ushort CLIP_PLANE2 = 0x3002;
        public const ushort CLIP_PLANE2_IMG = 0x3002;
        public const ushort CLIP_DISTANCE2 = 0x3002;
        public const ushort CLIP_DISTANCE2_EXT = 0x3002;
        public const ushort CLIP_DISTANCE2_APPLE = 0x3002;
        public const ushort CLIP_PLANE3 = 0x3003;
        public const ushort CLIP_PLANE3_IMG = 0x3003;
        public const ushort CLIP_DISTANCE3 = 0x3003;
        public const ushort CLIP_DISTANCE3_EXT = 0x3003;
        public const ushort CLIP_DISTANCE3_APPLE = 0x3003;
        public const ushort CLIP_PLANE4 = 0x3004;
        public const ushort CLIP_PLANE4_IMG = 0x3004;
        public const ushort CLIP_DISTANCE4 = 0x3004;
        public const ushort CLIP_DISTANCE4_EXT = 0x3004;
        public const ushort CLIP_DISTANCE4_APPLE = 0x3004;
        public const ushort CLIP_PLANE5 = 0x3005;
        public const ushort CLIP_PLANE5_IMG = 0x3005;
        public const ushort CLIP_DISTANCE5 = 0x3005;
        public const ushort CLIP_DISTANCE5_EXT = 0x3005;
        public const ushort CLIP_DISTANCE5_APPLE = 0x3005;
        public const ushort CLIP_DISTANCE6 = 0x3006;
        public const ushort CLIP_DISTANCE6_EXT = 0x3006;
        public const ushort CLIP_DISTANCE6_APPLE = 0x3006;
        public const ushort CLIP_DISTANCE7 = 0x3007;
        public const ushort CLIP_DISTANCE7_EXT = 0x3007;
        public const ushort CLIP_DISTANCE7_APPLE = 0x3007;
        // Unused 0x3008..0x3FFF. Unused for ClipPlaneName
        public const ushort LIGHT0 = 0x4000;
        public const ushort LIGHT1 = 0x4001;
        public const ushort LIGHT2 = 0x4002;
        public const ushort LIGHT3 = 0x4003;
        public const ushort LIGHT4 = 0x4004;
        public const ushort LIGHT5 = 0x4005;
        public const ushort LIGHT6 = 0x4006;
        public const ushort LIGHT7 = 0x4007;
        // Unused 0x4008..0x4FFF. Unused for LightName
        // Unused 0x5000..0x5FFF. Unused. Do not use.
        // Unused 0x6000..0x6FFF. Experimental (internal/test only) range. DO NOT SHIP VALUES IN THIS RANGE.
        // Unused 0x7000..0x7FFF. Unused. Do not use.
        
        // . The primary GL enumerant space begins here. All modern enum allocations are in this range. These enums are mostly assigned the default class since it's a great deal of not very useful work to be more specific
        public const ushort ABGR_EXT = 0x8000;
        public const ushort CONSTANT_COLOR = 0x8001;
        public const ushort CONSTANT_COLOR_EXT = 0x8001;
        public const ushort ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public const ushort ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public const ushort CONSTANT_ALPHA = 0x8003;
        public const ushort CONSTANT_ALPHA_EXT = 0x8003;
        public const ushort ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public const ushort ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public const ushort BLEND_COLOR = 0x8005;
        public const ushort BLEND_COLOR_EXT = 0x8005;
        public const ushort FUNC_ADD = 0x8006;
        public const ushort FUNC_ADD_EXT = 0x8006;
        public const ushort FUNC_ADD_OES = 0x8006;
        public const ushort MIN = 0x8007;
        public const ushort MIN_EXT = 0x8007;
        public const ushort MAX = 0x8008;
        public const ushort MAX_EXT = 0x8008;
        public const ushort BLEND_EQUATION = 0x8009;
        public const ushort BLEND_EQUATION_EXT = 0x8009;
        public const ushort BLEND_EQUATION_OES = 0x8009;
        public const ushort BLEND_EQUATION_RGB = 0x8009;
        public const ushort BLEND_EQUATION_RGB_EXT = 0x8009;
        public const ushort BLEND_EQUATION_RGB_OES = 0x8009;
        public const ushort FUNC_SUBTRACT = 0x800A;
        public const ushort FUNC_SUBTRACT_EXT = 0x800A;
        public const ushort FUNC_SUBTRACT_OES = 0x800A;
        public const ushort FUNC_REVERSE_SUBTRACT = 0x800B;
        public const ushort FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
        public const ushort FUNC_REVERSE_SUBTRACT_OES = 0x800B;
        public const ushort CMYK_EXT = 0x800C;
        public const ushort CMYKA_EXT = 0x800D;
        public const ushort PACK_CMYK_HINT_EXT = 0x800E;
        public const ushort UNPACK_CMYK_HINT_EXT = 0x800F;
        public const ushort CONVOLUTION_1D = 0x8010;
        public const ushort CONVOLUTION_1D_EXT = 0x8010;
        public const ushort CONVOLUTION_2D = 0x8011;
        public const ushort CONVOLUTION_2D_EXT = 0x8011;
        public const ushort SEPARABLE_2D = 0x8012;
        public const ushort SEPARABLE_2D_EXT = 0x8012;
        public const ushort CONVOLUTION_BORDER_MODE = 0x8013;
        public const ushort CONVOLUTION_BORDER_MODE_EXT = 0x8013;
        public const ushort CONVOLUTION_FILTER_SCALE = 0x8014;
        public const ushort CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
        public const ushort CONVOLUTION_FILTER_BIAS = 0x8015;
        public const ushort CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
        public const ushort REDUCE = 0x8016;
        public const ushort REDUCE_EXT = 0x8016;
        public const ushort CONVOLUTION_FORMAT = 0x8017;
        public const ushort CONVOLUTION_FORMAT_EXT = 0x8017;
        public const ushort CONVOLUTION_WIDTH = 0x8018;
        public const ushort CONVOLUTION_WIDTH_EXT = 0x8018;
        public const ushort CONVOLUTION_HEIGHT = 0x8019;
        public const ushort CONVOLUTION_HEIGHT_EXT = 0x8019;
        public const ushort MAX_CONVOLUTION_WIDTH = 0x801A;
        public const ushort MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
        public const ushort MAX_CONVOLUTION_HEIGHT = 0x801B;
        public const ushort MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
        public const ushort POST_CONVOLUTION_RED_SCALE = 0x801C;
        public const ushort POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public const ushort POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public const ushort POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public const ushort POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public const ushort POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public const ushort POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public const ushort POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public const ushort POST_CONVOLUTION_RED_BIAS = 0x8020;
        public const ushort POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public const ushort POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public const ushort POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public const ushort POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public const ushort POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public const ushort POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public const ushort POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public const ushort HISTOGRAM = 0x8024;
        public const ushort HISTOGRAM_EXT = 0x8024;
        public const ushort PROXY_HISTOGRAM = 0x8025;
        public const ushort PROXY_HISTOGRAM_EXT = 0x8025;
        public const ushort HISTOGRAM_WIDTH = 0x8026;
        public const ushort HISTOGRAM_WIDTH_EXT = 0x8026;
        public const ushort HISTOGRAM_FORMAT = 0x8027;
        public const ushort HISTOGRAM_FORMAT_EXT = 0x8027;
        public const ushort HISTOGRAM_RED_SIZE = 0x8028;
        public const ushort HISTOGRAM_RED_SIZE_EXT = 0x8028;
        public const ushort HISTOGRAM_GREEN_SIZE = 0x8029;
        public const ushort HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
        public const ushort HISTOGRAM_BLUE_SIZE = 0x802A;
        public const ushort HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
        public const ushort HISTOGRAM_ALPHA_SIZE = 0x802B;
        public const ushort HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
        public const ushort HISTOGRAM_LUMINANCE_SIZE = 0x802C;
        public const ushort HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
        public const ushort HISTOGRAM_SINK = 0x802D;
        public const ushort HISTOGRAM_SINK_EXT = 0x802D;
        public const ushort MINMAX = 0x802E;
        public const ushort MINMAX_EXT = 0x802E;
        public const ushort MINMAX_FORMAT = 0x802F;
        public const ushort MINMAX_FORMAT_EXT = 0x802F;
        public const ushort MINMAX_SINK = 0x8030;
        public const ushort MINMAX_SINK_EXT = 0x8030;
        public const ushort TABLE_TOO_LARGE_EXT = 0x8031;
        public const ushort TABLE_TOO_LARGE = 0x8031;
        public const ushort UNSIGNED_BYTE_3_3_2 = 0x8032;
        public const ushort UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public const ushort UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public const ushort UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public const ushort UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public const ushort UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public const ushort UNSIGNED_INT_8_8_8_8 = 0x8035;
        public const ushort UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public const ushort UNSIGNED_INT_10_10_10_2 = 0x8036;
        public const ushort UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public const ushort POLYGON_OFFSET_EXT = 0x8037;
        public const ushort POLYGON_OFFSET_FILL = 0x8037;
        public const ushort POLYGON_OFFSET_FACTOR = 0x8038;
        public const ushort POLYGON_OFFSET_FACTOR_EXT = 0x8038;
        public const ushort POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public const ushort RESCALE_NORMAL = 0x803A;
        public const ushort RESCALE_NORMAL_EXT = 0x803A;
        public const ushort ALPHA4 = 0x803B;
        public const ushort ALPHA4_EXT = 0x803B;
        public const ushort ALPHA8 = 0x803C;
        public const ushort ALPHA8_EXT = 0x803C;
        public const ushort ALPHA8_OES = 0x803C;
        public const ushort ALPHA12 = 0x803D;
        public const ushort ALPHA12_EXT = 0x803D;
        public const ushort ALPHA16 = 0x803E;
        public const ushort ALPHA16_EXT = 0x803E;
        public const ushort LUMINANCE4 = 0x803F;
        public const ushort LUMINANCE4_EXT = 0x803F;
        public const ushort LUMINANCE8 = 0x8040;
        public const ushort LUMINANCE8_EXT = 0x8040;
        public const ushort LUMINANCE8_OES = 0x8040;
        public const ushort LUMINANCE12 = 0x8041;
        public const ushort LUMINANCE12_EXT = 0x8041;
        public const ushort LUMINANCE16 = 0x8042;
        public const ushort LUMINANCE16_EXT = 0x8042;
        public const ushort LUMINANCE4_ALPHA4 = 0x8043;
        public const ushort LUMINANCE4_ALPHA4_EXT = 0x8043;
        public const ushort LUMINANCE4_ALPHA4_OES = 0x8043;
        public const ushort LUMINANCE6_ALPHA2 = 0x8044;
        public const ushort LUMINANCE6_ALPHA2_EXT = 0x8044;
        public const ushort LUMINANCE8_ALPHA8 = 0x8045;
        public const ushort LUMINANCE8_ALPHA8_EXT = 0x8045;
        public const ushort LUMINANCE8_ALPHA8_OES = 0x8045;
        public const ushort LUMINANCE12_ALPHA4 = 0x8046;
        public const ushort LUMINANCE12_ALPHA4_EXT = 0x8046;
        public const ushort LUMINANCE12_ALPHA12 = 0x8047;
        public const ushort LUMINANCE12_ALPHA12_EXT = 0x8047;
        public const ushort LUMINANCE16_ALPHA16 = 0x8048;
        public const ushort LUMINANCE16_ALPHA16_EXT = 0x8048;
        public const ushort INTENSITY = 0x8049;
        public const ushort INTENSITY_EXT = 0x8049;
        public const ushort INTENSITY4 = 0x804A;
        public const ushort INTENSITY4_EXT = 0x804A;
        public const ushort INTENSITY8 = 0x804B;
        public const ushort INTENSITY8_EXT = 0x804B;
        public const ushort INTENSITY12 = 0x804C;
        public const ushort INTENSITY12_EXT = 0x804C;
        public const ushort INTENSITY16 = 0x804D;
        public const ushort INTENSITY16_EXT = 0x804D;
        public const ushort RGB2_EXT = 0x804E;
        public const ushort RGB4 = 0x804F;
        public const ushort RGB4_EXT = 0x804F;
        public const ushort RGB5 = 0x8050;
        public const ushort RGB5_EXT = 0x8050;
        public const ushort RGB8 = 0x8051;
        public const ushort RGB8_EXT = 0x8051;
        public const ushort RGB8_OES = 0x8051;
        public const ushort RGB10 = 0x8052;
        public const ushort RGB10_EXT = 0x8052;
        public const ushort RGB12 = 0x8053;
        public const ushort RGB12_EXT = 0x8053;
        public const ushort RGB16 = 0x8054;
        public const ushort RGB16_EXT = 0x8054;
        public const ushort RGBA2 = 0x8055;
        public const ushort RGBA2_EXT = 0x8055;
        public const ushort RGBA4 = 0x8056;
        public const ushort RGBA4_EXT = 0x8056;
        public const ushort RGBA4_OES = 0x8056;
        public const ushort RGB5_A1 = 0x8057;
        public const ushort RGB5_A1_EXT = 0x8057;
        public const ushort RGB5_A1_OES = 0x8057;
        public const ushort RGBA8 = 0x8058;
        public const ushort RGBA8_EXT = 0x8058;
        public const ushort RGBA8_OES = 0x8058;
        public const ushort RGB10_A2 = 0x8059;
        public const ushort RGB10_A2_EXT = 0x8059;
        public const ushort RGBA12 = 0x805A;
        public const ushort RGBA12_EXT = 0x805A;
        public const ushort RGBA16 = 0x805B;
        public const ushort RGBA16_EXT = 0x805B;
        public const ushort TEXTURE_RED_SIZE = 0x805C;
        public const ushort TEXTURE_RED_SIZE_EXT = 0x805C;
        public const ushort TEXTURE_GREEN_SIZE = 0x805D;
        public const ushort TEXTURE_GREEN_SIZE_EXT = 0x805D;
        public const ushort TEXTURE_BLUE_SIZE = 0x805E;
        public const ushort TEXTURE_BLUE_SIZE_EXT = 0x805E;
        public const ushort TEXTURE_ALPHA_SIZE = 0x805F;
        public const ushort TEXTURE_ALPHA_SIZE_EXT = 0x805F;
        public const ushort TEXTURE_LUMINANCE_SIZE = 0x8060;
        public const ushort TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
        public const ushort TEXTURE_INTENSITY_SIZE = 0x8061;
        public const ushort TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
        public const ushort REPLACE_EXT = 0x8062;
        public const ushort PROXY_TEXTURE_1D = 0x8063;
        public const ushort PROXY_TEXTURE_1D_EXT = 0x8063;
        public const ushort PROXY_TEXTURE_2D = 0x8064;
        public const ushort PROXY_TEXTURE_2D_EXT = 0x8064;
        public const ushort TEXTURE_TOO_LARGE_EXT = 0x8065;
        public const ushort TEXTURE_PRIORITY = 0x8066;
        public const ushort TEXTURE_PRIORITY_EXT = 0x8066;
        public const ushort TEXTURE_RESIDENT = 0x8067;
        public const ushort TEXTURE_RESIDENT_EXT = 0x8067;
        public const ushort TEXTURE_1D_BINDING_EXT = 0x8068;
        public const ushort TEXTURE_BINDING_1D = 0x8068;
        public const ushort TEXTURE_2D_BINDING_EXT = 0x8069;
        public const ushort TEXTURE_BINDING_2D = 0x8069;
        public const ushort TEXTURE_3D_BINDING_EXT = 0x806A;
        public const ushort TEXTURE_3D_BINDING_OES = 0x806A;
        public const ushort TEXTURE_BINDING_3D = 0x806A;
        public const ushort TEXTURE_BINDING_3D_OES = 0x806A;
        public const ushort PACK_SKIP_IMAGES = 0x806B;
        public const ushort PACK_SKIP_IMAGES_EXT = 0x806B;
        public const ushort PACK_IMAGE_HEIGHT = 0x806C;
        public const ushort PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public const ushort UNPACK_SKIP_IMAGES = 0x806D;
        public const ushort UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public const ushort UNPACK_IMAGE_HEIGHT = 0x806E;
        public const ushort UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public const ushort TEXTURE_3D = 0x806F;
        public const ushort TEXTURE_3D_EXT = 0x806F;
        public const ushort TEXTURE_3D_OES = 0x806F;
        public const ushort PROXY_TEXTURE_3D = 0x8070;
        public const ushort PROXY_TEXTURE_3D_EXT = 0x8070;
        public const ushort TEXTURE_DEPTH = 0x8071;
        public const ushort TEXTURE_DEPTH_EXT = 0x8071;
        public const ushort TEXTURE_WRAP_R = 0x8072;
        public const ushort TEXTURE_WRAP_R_EXT = 0x8072;
        public const ushort TEXTURE_WRAP_R_OES = 0x8072;
        public const ushort MAX_3D_TEXTURE_SIZE = 0x8073;
        public const ushort MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public const ushort MAX_3D_TEXTURE_SIZE_OES = 0x8073;
        public const ushort VERTEX_ARRAY = 0x8074;
        public const ushort VERTEX_ARRAY_EXT = 0x8074;
        public const ushort VERTEX_ARRAY_KHR = 0x8074;
        public const ushort NORMAL_ARRAY = 0x8075;
        public const ushort NORMAL_ARRAY_EXT = 0x8075;
        public const ushort COLOR_ARRAY = 0x8076;
        public const ushort COLOR_ARRAY_EXT = 0x8076;
        public const ushort INDEX_ARRAY = 0x8077;
        public const ushort INDEX_ARRAY_EXT = 0x8077;
        public const ushort TEXTURE_COORD_ARRAY = 0x8078;
        public const ushort TEXTURE_COORD_ARRAY_EXT = 0x8078;
        public const ushort EDGE_FLAG_ARRAY = 0x8079;
        public const ushort EDGE_FLAG_ARRAY_EXT = 0x8079;
        public const ushort VERTEX_ARRAY_SIZE = 0x807A;
        public const ushort VERTEX_ARRAY_SIZE_EXT = 0x807A;
        public const ushort VERTEX_ARRAY_TYPE = 0x807B;
        public const ushort VERTEX_ARRAY_TYPE_EXT = 0x807B;
        public const ushort VERTEX_ARRAY_STRIDE = 0x807C;
        public const ushort VERTEX_ARRAY_STRIDE_EXT = 0x807C;
        public const ushort VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public const ushort NORMAL_ARRAY_TYPE = 0x807E;
        public const ushort NORMAL_ARRAY_TYPE_EXT = 0x807E;
        public const ushort NORMAL_ARRAY_STRIDE = 0x807F;
        public const ushort NORMAL_ARRAY_STRIDE_EXT = 0x807F;
        public const ushort NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public const ushort COLOR_ARRAY_SIZE = 0x8081;
        public const ushort COLOR_ARRAY_SIZE_EXT = 0x8081;
        public const ushort COLOR_ARRAY_TYPE = 0x8082;
        public const ushort COLOR_ARRAY_TYPE_EXT = 0x8082;
        public const ushort COLOR_ARRAY_STRIDE = 0x8083;
        public const ushort COLOR_ARRAY_STRIDE_EXT = 0x8083;
        public const ushort COLOR_ARRAY_COUNT_EXT = 0x8084;
        public const ushort INDEX_ARRAY_TYPE = 0x8085;
        public const ushort INDEX_ARRAY_TYPE_EXT = 0x8085;
        public const ushort INDEX_ARRAY_STRIDE = 0x8086;
        public const ushort INDEX_ARRAY_STRIDE_EXT = 0x8086;
        public const ushort INDEX_ARRAY_COUNT_EXT = 0x8087;
        public const ushort TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public const ushort TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
        public const ushort TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public const ushort TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
        public const ushort TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public const ushort TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
        public const ushort TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public const ushort EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public const ushort EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
        public const ushort EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public const ushort VERTEX_ARRAY_POINTER = 0x808E;
        public const ushort VERTEX_ARRAY_POINTER_EXT = 0x808E;
        public const ushort NORMAL_ARRAY_POINTER = 0x808F;
        public const ushort NORMAL_ARRAY_POINTER_EXT = 0x808F;
        public const ushort COLOR_ARRAY_POINTER = 0x8090;
        public const ushort COLOR_ARRAY_POINTER_EXT = 0x8090;
        public const ushort INDEX_ARRAY_POINTER = 0x8091;
        public const ushort INDEX_ARRAY_POINTER_EXT = 0x8091;
        public const ushort TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public const ushort TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
        public const ushort EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public const ushort EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
        public const ushort INTERLACE_SGIX = 0x8094;
        public const ushort DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public const ushort DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public const ushort LINEAR_DETAIL_SGIS = 0x8097;
        public const ushort LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
        public const ushort LINEAR_DETAIL_COLOR_SGIS = 0x8099;
        public const ushort DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public const ushort DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public const ushort DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public const ushort MULTISAMPLE = 0x809D;
        public const ushort MULTISAMPLE_ARB = 0x809D;
        public const ushort MULTISAMPLE_EXT = 0x809D;
        public const ushort MULTISAMPLE_SGIS = 0x809D;
        public const ushort SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public const ushort SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
        public const ushort SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
        public const ushort SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public const ushort SAMPLE_ALPHA_TO_ONE = 0x809F;
        public const ushort SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
        public const ushort SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
        public const ushort SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public const ushort SAMPLE_COVERAGE = 0x80A0;
        public const ushort SAMPLE_COVERAGE_ARB = 0x80A0;
        public const ushort SAMPLE_MASK_EXT = 0x80A0;
        public const ushort SAMPLE_MASK_SGIS = 0x80A0;
        public const ushort GL_1PASS_EXT = 0x80A1;
        public const ushort GL_1PASS_SGIS = 0x80A1;
        public const ushort GL_2PASS_0_EXT = 0x80A2;
        public const ushort GL_2PASS_0_SGIS = 0x80A2;
        public const ushort GL_2PASS_1_EXT = 0x80A3;
        public const ushort GL_2PASS_1_SGIS = 0x80A3;
        public const ushort GL_4PASS_0_EXT = 0x80A4;
        public const ushort GL_4PASS_0_SGIS = 0x80A4;
        public const ushort GL_4PASS_1_EXT = 0x80A5;
        public const ushort GL_4PASS_1_SGIS = 0x80A5;
        public const ushort GL_4PASS_2_EXT = 0x80A6;
        public const ushort GL_4PASS_2_SGIS = 0x80A6;
        public const ushort GL_4PASS_3_EXT = 0x80A7;
        public const ushort GL_4PASS_3_SGIS = 0x80A7;
        public const ushort SAMPLE_BUFFERS = 0x80A8;
        public const ushort SAMPLE_BUFFERS_ARB = 0x80A8;
        public const ushort SAMPLE_BUFFERS_EXT = 0x80A8;
        public const ushort SAMPLE_BUFFERS_SGIS = 0x80A8;
        public const ushort SAMPLES = 0x80A9;
        public const ushort SAMPLES_ARB = 0x80A9;
        public const ushort SAMPLES_EXT = 0x80A9;
        public const ushort SAMPLES_SGIS = 0x80A9;
        public const ushort SAMPLE_COVERAGE_VALUE = 0x80AA;
        public const ushort SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
        public const ushort SAMPLE_MASK_VALUE_EXT = 0x80AA;
        public const ushort SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public const ushort SAMPLE_COVERAGE_INVERT = 0x80AB;
        public const ushort SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
        public const ushort SAMPLE_MASK_INVERT_EXT = 0x80AB;
        public const ushort SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public const ushort SAMPLE_PATTERN_EXT = 0x80AC;
        public const ushort SAMPLE_PATTERN_SGIS = 0x80AC;
        public const ushort LINEAR_SHARPEN_SGIS = 0x80AD;
        public const ushort LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
        public const ushort LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
        public const ushort SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public const ushort COLOR_MATRIX = 0x80B1;
        public const ushort COLOR_MATRIX_SGI = 0x80B1;
        public const ushort COLOR_MATRIX_STACK_DEPTH = 0x80B2;
        public const ushort COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public const ushort MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
        public const ushort MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public const ushort POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public const ushort POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public const ushort POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public const ushort POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public const ushort POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public const ushort POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public const ushort POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public const ushort POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public const ushort POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public const ushort POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public const ushort POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public const ushort POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public const ushort POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public const ushort POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public const ushort POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public const ushort POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public const ushort TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public const ushort PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
        public const ushort TEXTURE_ENV_BIAS_SGIX = 0x80BE;
        public const ushort SHADOW_AMBIENT_SGIX = 0x80BF;
        public const ushort TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
        
        // . 
        // Unused 0x80C0..0x80C7. 
        public const ushort BLEND_DST_RGB = 0x80C8;
        public const ushort BLEND_DST_RGB_EXT = 0x80C8;
        public const ushort BLEND_DST_RGB_OES = 0x80C8;
        public const ushort BLEND_SRC_RGB = 0x80C9;
        public const ushort BLEND_SRC_RGB_EXT = 0x80C9;
        public const ushort BLEND_SRC_RGB_OES = 0x80C9;
        public const ushort BLEND_DST_ALPHA = 0x80CA;
        public const ushort BLEND_DST_ALPHA_EXT = 0x80CA;
        public const ushort BLEND_DST_ALPHA_OES = 0x80CA;
        public const ushort BLEND_SRC_ALPHA = 0x80CB;
        public const ushort BLEND_SRC_ALPHA_EXT = 0x80CB;
        public const ushort BLEND_SRC_ALPHA_OES = 0x80CB;
        public const ushort GL_422_EXT = 0x80CC;
        public const ushort GL_422_REV_EXT = 0x80CD;
        public const ushort GL_422_AVERAGE_EXT = 0x80CE;
        public const ushort GL_422_REV_AVERAGE_EXT = 0x80CF;
        
        // . 
        public const ushort COLOR_TABLE = 0x80D0;
        public const ushort COLOR_TABLE_SGI = 0x80D0;
        public const ushort POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
        public const ushort POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public const ushort POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
        public const ushort POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public const ushort PROXY_COLOR_TABLE = 0x80D3;
        public const ushort PROXY_COLOR_TABLE_SGI = 0x80D3;
        public const ushort PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
        public const ushort PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
        public const ushort PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
        public const ushort PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
        public const ushort COLOR_TABLE_SCALE = 0x80D6;
        public const ushort COLOR_TABLE_SCALE_SGI = 0x80D6;
        public const ushort COLOR_TABLE_BIAS = 0x80D7;
        public const ushort COLOR_TABLE_BIAS_SGI = 0x80D7;
        public const ushort COLOR_TABLE_FORMAT = 0x80D8;
        public const ushort COLOR_TABLE_FORMAT_SGI = 0x80D8;
        public const ushort COLOR_TABLE_WIDTH = 0x80D9;
        public const ushort COLOR_TABLE_WIDTH_SGI = 0x80D9;
        public const ushort COLOR_TABLE_RED_SIZE = 0x80DA;
        public const ushort COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
        public const ushort COLOR_TABLE_GREEN_SIZE = 0x80DB;
        public const ushort COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
        public const ushort COLOR_TABLE_BLUE_SIZE = 0x80DC;
        public const ushort COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
        public const ushort COLOR_TABLE_ALPHA_SIZE = 0x80DD;
        public const ushort COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
        public const ushort COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
        public const ushort COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
        public const ushort COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
        public const ushort COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
        
        // . 
        public const ushort BGR = 0x80E0;
        public const ushort BGR_EXT = 0x80E0;
        public const ushort BGRA = 0x80E1;
        public const ushort BGRA_EXT = 0x80E1;
        public const ushort BGRA_IMG = 0x80E1;
        public const ushort COLOR_INDEX1_EXT = 0x80E2;
        public const ushort COLOR_INDEX2_EXT = 0x80E3;
        public const ushort COLOR_INDEX4_EXT = 0x80E4;
        public const ushort COLOR_INDEX8_EXT = 0x80E5;
        public const ushort COLOR_INDEX12_EXT = 0x80E6;
        public const ushort COLOR_INDEX16_EXT = 0x80E7;
        public const ushort MAX_ELEMENTS_VERTICES = 0x80E8;
        public const ushort MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
        public const ushort MAX_ELEMENTS_INDICES = 0x80E9;
        public const ushort MAX_ELEMENTS_INDICES_EXT = 0x80E9;
        public const ushort PHONG_WIN = 0x80EA;
        public const ushort PHONG_HINT_WIN = 0x80EB;
        public const ushort FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
        public const ushort TEXTURE_INDEX_SIZE_EXT = 0x80ED;
        public const ushort PARAMETER_BUFFER = 0x80EE;
        public const ushort PARAMETER_BUFFER_ARB = 0x80EE;
        public const ushort PARAMETER_BUFFER_BINDING = 0x80EF;
        public const ushort PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
        public const ushort CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        // Unused 0x80F1..0x810F. 
        
        // . 
        public const ushort DUAL_ALPHA4_SGIS = 0x8110;
        public const ushort DUAL_ALPHA8_SGIS = 0x8111;
        public const ushort DUAL_ALPHA12_SGIS = 0x8112;
        public const ushort DUAL_ALPHA16_SGIS = 0x8113;
        public const ushort DUAL_LUMINANCE4_SGIS = 0x8114;
        public const ushort DUAL_LUMINANCE8_SGIS = 0x8115;
        public const ushort DUAL_LUMINANCE12_SGIS = 0x8116;
        public const ushort DUAL_LUMINANCE16_SGIS = 0x8117;
        public const ushort DUAL_INTENSITY4_SGIS = 0x8118;
        public const ushort DUAL_INTENSITY8_SGIS = 0x8119;
        public const ushort DUAL_INTENSITY12_SGIS = 0x811A;
        public const ushort DUAL_INTENSITY16_SGIS = 0x811B;
        public const ushort DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
        public const ushort DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
        public const ushort QUAD_ALPHA4_SGIS = 0x811E;
        public const ushort QUAD_ALPHA8_SGIS = 0x811F;
        public const ushort QUAD_LUMINANCE4_SGIS = 0x8120;
        public const ushort QUAD_LUMINANCE8_SGIS = 0x8121;
        public const ushort QUAD_INTENSITY4_SGIS = 0x8122;
        public const ushort QUAD_INTENSITY8_SGIS = 0x8123;
        public const ushort DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public const ushort QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public const ushort POINT_SIZE_MIN = 0x8126;
        public const ushort POINT_SIZE_MIN_ARB = 0x8126;
        public const ushort POINT_SIZE_MIN_EXT = 0x8126;
        public const ushort POINT_SIZE_MIN_SGIS = 0x8126;
        public const ushort POINT_SIZE_MAX = 0x8127;
        public const ushort POINT_SIZE_MAX_ARB = 0x8127;
        public const ushort POINT_SIZE_MAX_EXT = 0x8127;
        public const ushort POINT_SIZE_MAX_SGIS = 0x8127;
        public const ushort POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public const ushort POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
        public const ushort POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
        public const ushort POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public const ushort DISTANCE_ATTENUATION_EXT = 0x8129;
        public const ushort DISTANCE_ATTENUATION_SGIS = 0x8129;
        public const ushort POINT_DISTANCE_ATTENUATION = 0x8129;
        public const ushort POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
        public const ushort FOG_FUNC_SGIS = 0x812A;
        public const ushort FOG_FUNC_POINTS_SGIS = 0x812B;
        public const ushort MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public const ushort CLAMP_TO_BORDER = 0x812D;
        public const ushort CLAMP_TO_BORDER_ARB = 0x812D;
        public const ushort CLAMP_TO_BORDER_EXT = 0x812D;
        public const ushort CLAMP_TO_BORDER_NV = 0x812D;
        public const ushort CLAMP_TO_BORDER_SGIS = 0x812D;
        public const ushort CLAMP_TO_BORDER_OES = 0x812D;
        public const ushort TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public const ushort CLAMP_TO_EDGE = 0x812F;
        public const ushort CLAMP_TO_EDGE_SGIS = 0x812F;
        public const ushort PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public const ushort PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public const ushort UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public const ushort UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public const ushort TEXTURE_4D_SGIS = 0x8134;
        public const ushort PROXY_TEXTURE_4D_SGIS = 0x8135;
        public const ushort TEXTURE_4DSIZE_SGIS = 0x8136;
        public const ushort TEXTURE_WRAP_Q_SGIS = 0x8137;
        public const ushort MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public const ushort PIXEL_TEX_GEN_SGIX = 0x8139;
        public const ushort TEXTURE_MIN_LOD = 0x813A;
        public const ushort TEXTURE_MIN_LOD_SGIS = 0x813A;
        public const ushort TEXTURE_MAX_LOD = 0x813B;
        public const ushort TEXTURE_MAX_LOD_SGIS = 0x813B;
        public const ushort TEXTURE_BASE_LEVEL = 0x813C;
        public const ushort TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public const ushort TEXTURE_MAX_LEVEL = 0x813D;
        public const ushort TEXTURE_MAX_LEVEL_APPLE = 0x813D;
        public const ushort TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public const ushort PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public const ushort PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public const ushort PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public const ushort PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public const ushort PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public const ushort PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public const ushort PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public const ushort PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public const ushort FILTER4_SGIS = 0x8146;
        public const ushort TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public const ushort SPRITE_SGIX = 0x8148;
        public const ushort SPRITE_MODE_SGIX = 0x8149;
        public const ushort SPRITE_AXIS_SGIX = 0x814A;
        public const ushort SPRITE_TRANSLATION_SGIX = 0x814B;
        public const ushort SPRITE_AXIAL_SGIX = 0x814C;
        public const ushort SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
        public const ushort SPRITE_EYE_ALIGNED_SGIX = 0x814E;
        public const ushort TEXTURE_4D_BINDING_SGIS = 0x814F;
        
        // . 
        public const ushort IGNORE_BORDER_HP = 0x8150;
        public const ushort CONSTANT_BORDER = 0x8151;
        public const ushort CONSTANT_BORDER_HP = 0x8151;
        // Unused 0x8152. GL_WRAP_BORDER = 0x8152 was proposed, but not actually promoted to core
        public const ushort REPLICATE_BORDER = 0x8153;
        public const ushort REPLICATE_BORDER_HP = 0x8153;
        public const ushort CONVOLUTION_BORDER_COLOR = 0x8154;
        public const ushort CONVOLUTION_BORDER_COLOR_HP = 0x8154;
        public const ushort IMAGE_SCALE_X_HP = 0x8155;
        public const ushort IMAGE_SCALE_Y_HP = 0x8156;
        public const ushort IMAGE_TRANSLATE_X_HP = 0x8157;
        public const ushort IMAGE_TRANSLATE_Y_HP = 0x8158;
        public const ushort IMAGE_ROTATE_ANGLE_HP = 0x8159;
        public const ushort IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
        public const ushort IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
        public const ushort IMAGE_MAG_FILTER_HP = 0x815C;
        public const ushort IMAGE_MIN_FILTER_HP = 0x815D;
        public const ushort IMAGE_CUBIC_WEIGHT_HP = 0x815E;
        public const ushort CUBIC_HP = 0x815F;
        public const ushort AVERAGE_HP = 0x8160;
        public const ushort IMAGE_TRANSFORM_2D_HP = 0x8161;
        public const ushort POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
        public const ushort PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
        // Unused 0x8164. 
        public const ushort OCCLUSION_TEST_HP = 0x8165;
        public const ushort OCCLUSION_TEST_RESULT_HP = 0x8166;
        public const ushort TEXTURE_LIGHTING_MODE_HP = 0x8167;
        public const ushort TEXTURE_POST_SPECULAR_HP = 0x8168;
        public const ushort TEXTURE_PRE_SPECULAR_HP = 0x8169;
        // Unused 0x816A..0x816F. 
        
        // . 
        public const ushort LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
        public const ushort TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public const ushort TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public const ushort TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public const ushort TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public const ushort TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public const ushort TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public const ushort MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public const ushort MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public const ushort POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public const ushort POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public const ushort POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public const ushort POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public const ushort REFERENCE_PLANE_SGIX = 0x817D;
        public const ushort REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public const ushort IR_INSTRUMENT1_SGIX = 0x817F;
        public const ushort INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
        public const ushort INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public const ushort LIST_PRIORITY_SGIX = 0x8182;
        public const ushort CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public const ushort PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
        public const ushort PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
        public const ushort PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
        public const ushort PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
        public const ushort PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
        public const ushort PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
        public const ushort PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
        public const ushort FRAMEZOOM_SGIX = 0x818B;
        public const ushort FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public const ushort MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public const ushort TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public const ushort TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public const ushort TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public const ushort GENERATE_MIPMAP = 0x8191;
        public const ushort GENERATE_MIPMAP_SGIS = 0x8191;
        public const ushort GENERATE_MIPMAP_HINT = 0x8192;
        public const ushort GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        // Unused 0x8193..0x8193. Incomplete extension SGIX_spotlight_cutoff
        public const ushort GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public const ushort TEXTURE_DEFORMATION_SGIX = 0x8195;
        public const ushort DEFORMATIONS_MASK_SGIX = 0x8196;
        public const ushort MAX_DEFORMATION_ORDER_SGIX = 0x8197;
        public const ushort FOG_OFFSET_SGIX = 0x8198;
        public const ushort FOG_OFFSET_VALUE_SGIX = 0x8199;
        public const ushort TEXTURE_COMPARE_SGIX = 0x819A;
        public const ushort TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public const ushort TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public const ushort TEXTURE_GEQUAL_R_SGIX = 0x819D;
        // Unused 0x819E..0x81A4. Private (internal) extension SGIX_igloo_interface
        public const ushort DEPTH_COMPONENT16 = 0x81A5;
        public const ushort DEPTH_COMPONENT16_ARB = 0x81A5;
        public const ushort DEPTH_COMPONENT16_OES = 0x81A5;
        public const ushort DEPTH_COMPONENT16_SGIX = 0x81A5;
        public const ushort DEPTH_COMPONENT24 = 0x81A6;
        public const ushort DEPTH_COMPONENT24_ARB = 0x81A6;
        public const ushort DEPTH_COMPONENT24_OES = 0x81A6;
        public const ushort DEPTH_COMPONENT24_SGIX = 0x81A6;
        public const ushort DEPTH_COMPONENT32 = 0x81A7;
        public const ushort DEPTH_COMPONENT32_ARB = 0x81A7;
        public const ushort DEPTH_COMPONENT32_OES = 0x81A7;
        public const ushort DEPTH_COMPONENT32_SGIX = 0x81A7;
        public const ushort ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
        public const ushort ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
        public const ushort CULL_VERTEX_EXT = 0x81AA;
        public const ushort CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
        public const ushort CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
        public const ushort IUI_V2F_EXT = 0x81AD;
        public const ushort IUI_V3F_EXT = 0x81AE;
        public const ushort IUI_N3F_V2F_EXT = 0x81AF;
        public const ushort IUI_N3F_V3F_EXT = 0x81B0;
        public const ushort T2F_IUI_V2F_EXT = 0x81B1;
        public const ushort T2F_IUI_V3F_EXT = 0x81B2;
        public const ushort T2F_IUI_N3F_V2F_EXT = 0x81B3;
        public const ushort T2F_IUI_N3F_V3F_EXT = 0x81B4;
        public const ushort INDEX_TEST_EXT = 0x81B5;
        public const ushort INDEX_TEST_FUNC_EXT = 0x81B6;
        public const ushort INDEX_TEST_REF_EXT = 0x81B7;
        public const ushort INDEX_MATERIAL_EXT = 0x81B8;
        public const ushort INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
        public const ushort INDEX_MATERIAL_FACE_EXT = 0x81BA;
        public const ushort YCRCB_422_SGIX = 0x81BB;
        public const ushort YCRCB_444_SGIX = 0x81BC;
        // Unused 0x81BD..0x81C3. Incomplete extension SGI_complex_type
        // Unused 0x81C4..0x81CA. Incomplete extension SGI_fft
        // Unused 0x81CB..0x81CF. Incomplete extension SGIX_nurbs_eval
        
        // . 
        // Unused 0x81D0..0x81D1. 
        // Unused 0x81D2..0x81D3. No extension spec SUNX_surface_hint
        public const ushort WRAP_BORDER_SUN = 0x81D4;
        public const ushort UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
        public const ushort TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
        public const ushort TRIANGLE_LIST_SUN = 0x81D7;
        public const ushort REPLACEMENT_CODE_SUN = 0x81D8;
        public const ushort GLOBAL_ALPHA_SUN = 0x81D9;
        public const ushort GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
        // Unused 0x81DB..0x81DF. 
        
        // . 
        // Unused 0x81E0..0x81EE. Incomplete extension SGIX_nurbs_eval
        public const ushort TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
        public const ushort EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
        public const ushort OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
        public const ushort EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
        public const ushort OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
        public const ushort EYE_POINT_SGIS = 0x81F4;
        public const ushort OBJECT_POINT_SGIS = 0x81F5;
        public const ushort EYE_LINE_SGIS = 0x81F6;
        public const ushort OBJECT_LINE_SGIS = 0x81F7;
        public const ushort LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public const ushort LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public const ushort SINGLE_COLOR = 0x81F9;
        public const ushort SINGLE_COLOR_EXT = 0x81F9;
        public const ushort SEPARATE_SPECULAR_COLOR = 0x81FA;
        public const ushort SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
        public const ushort SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        // Unused 0x81FC..0x81FD. Incomplete extension SGIX_fog_scale
        // Unused 0x81FE..0x81FF. Incomplete extension SGIX_fog_blend
        
        // . Range released by MS 2002/9/16
        public const ushort TEXT_FRAGMENT_SHADER_ATI = 0x8200;
        // Unused 0x8201..0x820F. 
        
        // . 
        public const ushort FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
        public const ushort FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
        public const ushort FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
        public const ushort FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
        public const ushort FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
        public const ushort FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
        public const ushort FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
        public const ushort FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
        public const ushort FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
        public const ushort FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
        public const ushort FRAMEBUFFER_DEFAULT = 0x8218;
        public const ushort FRAMEBUFFER_UNDEFINED = 0x8219;
        public const ushort FRAMEBUFFER_UNDEFINED_OES = 0x8219;
        public const ushort DEPTH_STENCIL_ATTACHMENT = 0x821A;
        public const ushort MAJOR_VERSION = 0x821B;
        public const ushort MINOR_VERSION = 0x821C;
        public const ushort NUM_EXTENSIONS = 0x821D;
        public const ushort CONTEXT_FLAGS = 0x821E;
        public const ushort BUFFER_IMMUTABLE_STORAGE = 0x821F;
        public const ushort BUFFER_IMMUTABLE_STORAGE_EXT = 0x821F;
        public const ushort BUFFER_STORAGE_FLAGS = 0x8220;
        public const ushort BUFFER_STORAGE_FLAGS_EXT = 0x8220;
        public const ushort PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
        public const ushort PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221;
        public const ushort INDEX = 0x8222;
        // Unused 0x8223. GL_DEPTH_BUFFER = 0x8223 not actually used in the API
        // Unused 0x8224. GL_STENCIL_BUFFER = 0x8224 not actually used in the API
        public const ushort COMPRESSED_RED = 0x8225;
        public const ushort COMPRESSED_RG = 0x8226;
        public const ushort RG = 0x8227;
        public const ushort RG_EXT = 0x8227;
        public const ushort RG_INTEGER = 0x8228;
        public const ushort R8 = 0x8229;
        public const ushort R8_EXT = 0x8229;
        public const ushort R16 = 0x822A;
        public const ushort R16_EXT = 0x822A;
        public const ushort RG8 = 0x822B;
        public const ushort RG8_EXT = 0x822B;
        public const ushort RG16 = 0x822C;
        public const ushort RG16_EXT = 0x822C;
        public const ushort R16F = 0x822D;
        public const ushort R16F_EXT = 0x822D;
        public const ushort R32F = 0x822E;
        public const ushort R32F_EXT = 0x822E;
        public const ushort RG16F = 0x822F;
        public const ushort RG16F_EXT = 0x822F;
        public const ushort RG32F = 0x8230;
        public const ushort RG32F_EXT = 0x8230;
        public const ushort R8I = 0x8231;
        public const ushort R8UI = 0x8232;
        public const ushort R16I = 0x8233;
        public const ushort R16UI = 0x8234;
        public const ushort R32I = 0x8235;
        public const ushort R32UI = 0x8236;
        public const ushort RG8I = 0x8237;
        public const ushort RG8UI = 0x8238;
        public const ushort RG16I = 0x8239;
        public const ushort RG16UI = 0x823A;
        public const ushort RG32I = 0x823B;
        public const ushort RG32UI = 0x823C;
        // Unused 0x823D..0x823F. 
        
        // . Range released by MS on 2002/9/16
        public const ushort SYNC_CL_EVENT_ARB = 0x8240;
        public const ushort SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
        public const ushort DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
        public const ushort DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
        public const ushort DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
        public const ushort DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
        public const ushort DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
        public const ushort DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
        public const ushort DEBUG_CALLBACK_FUNCTION = 0x8244;
        public const ushort DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
        public const ushort DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
        public const ushort DEBUG_CALLBACK_USER_PARAM = 0x8245;
        public const ushort DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
        public const ushort DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
        public const ushort DEBUG_SOURCE_API = 0x8246;
        public const ushort DEBUG_SOURCE_API_ARB = 0x8246;
        public const ushort DEBUG_SOURCE_API_KHR = 0x8246;
        public const ushort DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
        public const ushort DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
        public const ushort DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
        public const ushort DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
        public const ushort DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
        public const ushort DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
        public const ushort DEBUG_SOURCE_THIRD_PARTY = 0x8249;
        public const ushort DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
        public const ushort DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
        public const ushort DEBUG_SOURCE_APPLICATION = 0x824A;
        public const ushort DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
        public const ushort DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
        public const ushort DEBUG_SOURCE_OTHER = 0x824B;
        public const ushort DEBUG_SOURCE_OTHER_ARB = 0x824B;
        public const ushort DEBUG_SOURCE_OTHER_KHR = 0x824B;
        public const ushort DEBUG_TYPE_ERROR = 0x824C;
        public const ushort DEBUG_TYPE_ERROR_ARB = 0x824C;
        public const ushort DEBUG_TYPE_ERROR_KHR = 0x824C;
        public const ushort DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
        public const ushort DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
        public const ushort DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
        public const ushort DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
        public const ushort DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
        public const ushort DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
        public const ushort DEBUG_TYPE_PORTABILITY = 0x824F;
        public const ushort DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
        public const ushort DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
        public const ushort DEBUG_TYPE_PERFORMANCE = 0x8250;
        public const ushort DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
        public const ushort DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
        public const ushort DEBUG_TYPE_OTHER = 0x8251;
        public const ushort DEBUG_TYPE_OTHER_ARB = 0x8251;
        public const ushort DEBUG_TYPE_OTHER_KHR = 0x8251;
        public const ushort LOSE_CONTEXT_ON_RESET = 0x8252;
        public const ushort LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
        public const ushort LOSE_CONTEXT_ON_RESET_EXT = 0x8252;
        public const ushort LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
        public const ushort GUILTY_CONTEXT_RESET = 0x8253;
        public const ushort GUILTY_CONTEXT_RESET_ARB = 0x8253;
        public const ushort GUILTY_CONTEXT_RESET_EXT = 0x8253;
        public const ushort GUILTY_CONTEXT_RESET_KHR = 0x8253;
        public const ushort INNOCENT_CONTEXT_RESET = 0x8254;
        public const ushort INNOCENT_CONTEXT_RESET_ARB = 0x8254;
        public const ushort INNOCENT_CONTEXT_RESET_EXT = 0x8254;
        public const ushort INNOCENT_CONTEXT_RESET_KHR = 0x8254;
        public const ushort UNKNOWN_CONTEXT_RESET = 0x8255;
        public const ushort UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
        public const ushort UNKNOWN_CONTEXT_RESET_EXT = 0x8255;
        public const ushort UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
        public const ushort RESET_NOTIFICATION_STRATEGY = 0x8256;
        public const ushort RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
        public const ushort RESET_NOTIFICATION_STRATEGY_EXT = 0x8256;
        public const ushort RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
        public const ushort PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
        public const ushort PROGRAM_SEPARABLE = 0x8258;
        public const ushort PROGRAM_SEPARABLE_EXT = 0x8258;
        public const ushort ACTIVE_PROGRAM = 0x8259;
        public const ushort PROGRAM_PIPELINE_BINDING = 0x825A;
        public const ushort PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
        public const ushort MAX_VIEWPORTS = 0x825B;
        public const ushort MAX_VIEWPORTS_NV = 0x825B;
        public const ushort MAX_VIEWPORTS_OES = 0x825B;
        public const ushort VIEWPORT_SUBPIXEL_BITS = 0x825C;
        public const ushort VIEWPORT_SUBPIXEL_BITS_EXT = 0x825C;
        public const ushort VIEWPORT_SUBPIXEL_BITS_NV = 0x825C;
        public const ushort VIEWPORT_SUBPIXEL_BITS_OES = 0x825C;
        public const ushort VIEWPORT_BOUNDS_RANGE = 0x825D;
        public const ushort VIEWPORT_BOUNDS_RANGE_EXT = 0x825D;
        public const ushort VIEWPORT_BOUNDS_RANGE_NV = 0x825D;
        public const ushort VIEWPORT_BOUNDS_RANGE_OES = 0x825D;
        public const ushort LAYER_PROVOKING_VERTEX = 0x825E;
        public const ushort LAYER_PROVOKING_VERTEX_EXT = 0x825E;
        public const ushort LAYER_PROVOKING_VERTEX_OES = 0x825E;
        public const ushort VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
        public const ushort VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825F;
        public const ushort VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825F;
        public const ushort VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825F;
        public const ushort UNDEFINED_VERTEX = 0x8260;
        public const ushort UNDEFINED_VERTEX_EXT = 0x8260;
        public const ushort UNDEFINED_VERTEX_OES = 0x8260;
        public const ushort NO_RESET_NOTIFICATION = 0x8261;
        public const ushort NO_RESET_NOTIFICATION_ARB = 0x8261;
        public const ushort NO_RESET_NOTIFICATION_EXT = 0x8261;
        public const ushort NO_RESET_NOTIFICATION_KHR = 0x8261;
        public const ushort MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
        public const ushort MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
        public const ushort MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
        public const ushort MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
        public const ushort MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
        public const ushort COMPUTE_WORK_GROUP_SIZE = 0x8267;
        public const ushort DEBUG_TYPE_MARKER = 0x8268;
        public const ushort DEBUG_TYPE_MARKER_KHR = 0x8268;
        public const ushort DEBUG_TYPE_PUSH_GROUP = 0x8269;
        public const ushort DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
        public const ushort DEBUG_TYPE_POP_GROUP = 0x826A;
        public const ushort DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
        public const ushort DEBUG_SEVERITY_NOTIFICATION = 0x826B;
        public const ushort DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
        public const ushort MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
        public const ushort MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
        public const ushort DEBUG_GROUP_STACK_DEPTH = 0x826D;
        public const ushort DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
        public const ushort MAX_UNIFORM_LOCATIONS = 0x826E;
        public const ushort INTERNALFORMAT_SUPPORTED = 0x826F;
        public const ushort INTERNALFORMAT_PREFERRED = 0x8270;
        public const ushort INTERNALFORMAT_RED_SIZE = 0x8271;
        public const ushort INTERNALFORMAT_GREEN_SIZE = 0x8272;
        public const ushort INTERNALFORMAT_BLUE_SIZE = 0x8273;
        public const ushort INTERNALFORMAT_ALPHA_SIZE = 0x8274;
        public const ushort INTERNALFORMAT_DEPTH_SIZE = 0x8275;
        public const ushort INTERNALFORMAT_STENCIL_SIZE = 0x8276;
        public const ushort INTERNALFORMAT_SHARED_SIZE = 0x8277;
        public const ushort INTERNALFORMAT_RED_TYPE = 0x8278;
        public const ushort INTERNALFORMAT_GREEN_TYPE = 0x8279;
        public const ushort INTERNALFORMAT_BLUE_TYPE = 0x827A;
        public const ushort INTERNALFORMAT_ALPHA_TYPE = 0x827B;
        public const ushort INTERNALFORMAT_DEPTH_TYPE = 0x827C;
        public const ushort INTERNALFORMAT_STENCIL_TYPE = 0x827D;
        public const ushort MAX_WIDTH = 0x827E;
        public const ushort MAX_HEIGHT = 0x827F;
        public const ushort MAX_DEPTH = 0x8280;
        public const ushort MAX_LAYERS = 0x8281;
        public const ushort MAX_COMBINED_DIMENSIONS = 0x8282;
        public const ushort COLOR_COMPONENTS = 0x8283;
        public const ushort DEPTH_COMPONENTS = 0x8284;
        public const ushort STENCIL_COMPONENTS = 0x8285;
        public const ushort COLOR_RENDERABLE = 0x8286;
        public const ushort DEPTH_RENDERABLE = 0x8287;
        public const ushort STENCIL_RENDERABLE = 0x8288;
        public const ushort FRAMEBUFFER_RENDERABLE = 0x8289;
        public const ushort FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
        public const ushort FRAMEBUFFER_BLEND = 0x828B;
        public const ushort READ_PIXELS = 0x828C;
        public const ushort READ_PIXELS_FORMAT = 0x828D;
        public const ushort READ_PIXELS_TYPE = 0x828E;
        public const ushort TEXTURE_IMAGE_FORMAT = 0x828F;
        public const ushort TEXTURE_IMAGE_TYPE = 0x8290;
        public const ushort GET_TEXTURE_IMAGE_FORMAT = 0x8291;
        public const ushort GET_TEXTURE_IMAGE_TYPE = 0x8292;
        public const ushort MIPMAP = 0x8293;
        public const ushort MANUAL_GENERATE_MIPMAP = 0x8294;
        public const ushort AUTO_GENERATE_MIPMAP = 0x8295;
        public const ushort COLOR_ENCODING = 0x8296;
        public const ushort SRGB_READ = 0x8297;
        public const ushort SRGB_WRITE = 0x8298;
        public const ushort SRGB_DECODE_ARB = 0x8299;
        public const ushort FILTER = 0x829A;
        public const ushort VERTEX_TEXTURE = 0x829B;
        public const ushort TESS_CONTROL_TEXTURE = 0x829C;
        public const ushort TESS_EVALUATION_TEXTURE = 0x829D;
        public const ushort GEOMETRY_TEXTURE = 0x829E;
        public const ushort FRAGMENT_TEXTURE = 0x829F;
        public const ushort COMPUTE_TEXTURE = 0x82A0;
        public const ushort TEXTURE_SHADOW = 0x82A1;
        public const ushort TEXTURE_GATHER = 0x82A2;
        public const ushort TEXTURE_GATHER_SHADOW = 0x82A3;
        public const ushort SHADER_IMAGE_LOAD = 0x82A4;
        public const ushort SHADER_IMAGE_STORE = 0x82A5;
        public const ushort SHADER_IMAGE_ATOMIC = 0x82A6;
        public const ushort IMAGE_TEXEL_SIZE = 0x82A7;
        public const ushort IMAGE_COMPATIBILITY_CLASS = 0x82A8;
        public const ushort IMAGE_PIXEL_FORMAT = 0x82A9;
        public const ushort IMAGE_PIXEL_TYPE = 0x82AA;
        // Unused 0x82AB. 
        public const ushort SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
        public const ushort SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
        public const ushort SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
        public const ushort SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
        
        // . Range reclaimed from ADD on 2012/05/10
        // Unused 0x82B0. 
        public const ushort TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
        public const ushort TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
        public const ushort TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
        public const ushort CLEAR_BUFFER = 0x82B4;
        public const ushort TEXTURE_VIEW = 0x82B5;
        public const ushort VIEW_COMPATIBILITY_CLASS = 0x82B6;
        public const ushort FULL_SUPPORT = 0x82B7;
        public const ushort CAVEAT_SUPPORT = 0x82B8;
        public const ushort IMAGE_CLASS_4_X_32 = 0x82B9;
        public const ushort IMAGE_CLASS_2_X_32 = 0x82BA;
        public const ushort IMAGE_CLASS_1_X_32 = 0x82BB;
        public const ushort IMAGE_CLASS_4_X_16 = 0x82BC;
        public const ushort IMAGE_CLASS_2_X_16 = 0x82BD;
        public const ushort IMAGE_CLASS_1_X_16 = 0x82BE;
        public const ushort IMAGE_CLASS_4_X_8 = 0x82BF;
        public const ushort IMAGE_CLASS_2_X_8 = 0x82C0;
        public const ushort IMAGE_CLASS_1_X_8 = 0x82C1;
        public const ushort IMAGE_CLASS_11_11_10 = 0x82C2;
        public const ushort IMAGE_CLASS_10_10_10_2 = 0x82C3;
        public const ushort VIEW_CLASS_128_BITS = 0x82C4;
        public const ushort VIEW_CLASS_96_BITS = 0x82C5;
        public const ushort VIEW_CLASS_64_BITS = 0x82C6;
        public const ushort VIEW_CLASS_48_BITS = 0x82C7;
        public const ushort VIEW_CLASS_32_BITS = 0x82C8;
        public const ushort VIEW_CLASS_24_BITS = 0x82C9;
        public const ushort VIEW_CLASS_16_BITS = 0x82CA;
        public const ushort VIEW_CLASS_8_BITS = 0x82CB;
        public const ushort VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
        public const ushort VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
        public const ushort VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
        public const ushort VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
        public const ushort VIEW_CLASS_RGTC1_RED = 0x82D0;
        public const ushort VIEW_CLASS_RGTC2_RG = 0x82D1;
        public const ushort VIEW_CLASS_BPTC_UNORM = 0x82D2;
        public const ushort VIEW_CLASS_BPTC_FLOAT = 0x82D3;
        public const ushort VERTEX_ATTRIB_BINDING = 0x82D4;
        public const ushort VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
        public const ushort VERTEX_BINDING_DIVISOR = 0x82D6;
        public const ushort VERTEX_BINDING_OFFSET = 0x82D7;
        public const ushort VERTEX_BINDING_STRIDE = 0x82D8;
        public const ushort MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
        public const ushort MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
        public const ushort TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
        public const ushort TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB;
        public const ushort TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DB;
        public const ushort TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
        public const ushort TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC;
        public const ushort TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DC;
        public const ushort TEXTURE_VIEW_MIN_LAYER = 0x82DD;
        public const ushort TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD;
        public const ushort TEXTURE_VIEW_MIN_LAYER_OES = 0x82DD;
        public const ushort TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
        public const ushort TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE;
        public const ushort TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DE;
        public const ushort TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
        public const ushort BUFFER = 0x82E0;
        public const ushort BUFFER_KHR = 0x82E0;
        public const ushort SHADER = 0x82E1;
        public const ushort SHADER_KHR = 0x82E1;
        public const ushort PROGRAM = 0x82E2;
        public const ushort PROGRAM_KHR = 0x82E2;
        public const ushort QUERY = 0x82E3;
        public const ushort QUERY_KHR = 0x82E3;
        public const ushort PROGRAM_PIPELINE = 0x82E4;
        public const ushort PROGRAM_PIPELINE_KHR = 0x82E4;
        public const ushort MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
        public const ushort SAMPLER = 0x82E6;
        public const ushort SAMPLER_KHR = 0x82E6;
        public const ushort DISPLAY_LIST = 0x82E7;
        public const ushort MAX_LABEL_LENGTH = 0x82E8;
        public const ushort MAX_LABEL_LENGTH_KHR = 0x82E8;
        public const ushort NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
        public const ushort QUERY_TARGET = 0x82EA;
        // Unused 0x82EB. Reserved. Formerly used for GL_TEXTURE_BINDING.
        public const ushort TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
        public const ushort TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
        public const ushort TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
        public const ushort TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
        public const ushort VERTICES_SUBMITTED = 0x82EE;
        public const ushort VERTICES_SUBMITTED_ARB = 0x82EE;
        public const ushort PRIMITIVES_SUBMITTED = 0x82EF;
        public const ushort PRIMITIVES_SUBMITTED_ARB = 0x82EF;
        public const ushort VERTEX_SHADER_INVOCATIONS = 0x82F0;
        public const ushort VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
        public const ushort TESS_CONTROL_SHADER_PATCHES = 0x82F1;
        public const ushort TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
        public const ushort TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
        public const ushort TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
        public const ushort GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
        public const ushort GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
        public const ushort FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
        public const ushort FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
        public const ushort COMPUTE_SHADER_INVOCATIONS = 0x82F5;
        public const ushort COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
        public const ushort CLIPPING_INPUT_PRIMITIVES = 0x82F6;
        public const ushort CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
        public const ushort CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
        public const ushort CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
        public const ushort SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
        public const ushort MAX_CULL_DISTANCES = 0x82F9;
        public const ushort MAX_CULL_DISTANCES_EXT = 0x82F9;
        public const ushort MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
        public const ushort MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FA;
        public const ushort CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
        public const ushort CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
        public const ushort CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
        public const ushort CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
        public const ushort ROBUST_GPU_TIMEOUT_MS_KHR = 0x82FD;
        // Unused 0x82FE..0x830F. 
        
        // . 
        public const ushort DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
        public const ushort DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
        public const ushort DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
        public const ushort FRAGMENTS_INSTRUMENT_SGIX = 0x8313;
        public const ushort FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314;
        public const ushort FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315;
        public const ushort CONVOLUTION_HINT_SGIX = 0x8316;
        // Unused 0x8317. Incomplete extension SGIX_color_matrix_accuracy
        public const ushort YCRCB_SGIX = 0x8318;
        public const ushort YCRCBA_SGIX = 0x8319;
        public const ushort UNPACK_COMPRESSED_SIZE_SGIX = 0x831A;
        public const ushort PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B;
        public const ushort PACK_COMPRESSED_SIZE_SGIX = 0x831C;
        public const ushort SLIM8U_SGIX = 0x831D;
        public const ushort SLIM10U_SGIX = 0x831E;
        public const ushort SLIM12S_SGIX = 0x831F;
        public const ushort ALPHA_MIN_SGIX = 0x8320;
        public const ushort ALPHA_MAX_SGIX = 0x8321;
        public const ushort SCALEBIAS_HINT_SGIX = 0x8322;
        // Unused 0x8323..0x8328. Incomplete extension SGIX_fog_layers
        public const ushort ASYNC_MARKER_SGIX = 0x8329;
        // Unused 0x832A. Incomplete extension SGIX_texture_phase
        public const ushort PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public const ushort ASYNC_HISTOGRAM_SGIX = 0x832C;
        public const ushort MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        // Unused 0x832E..0x832F. Incomplete extension SGIX_texture_mipmap_anisotropic
        
        // . 
        public const ushort PIXEL_TRANSFORM_2D_EXT = 0x8330;
        public const ushort PIXEL_MAG_FILTER_EXT = 0x8331;
        public const ushort PIXEL_MIN_FILTER_EXT = 0x8332;
        public const ushort PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
        public const ushort CUBIC_EXT = 0x8334;
        public const ushort AVERAGE_EXT = 0x8335;
        public const ushort PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
        public const ushort MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
        public const ushort PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
        // Unused 0x8339..0x833F. 
        
        // . 
        // Unused 0x8340..0x8348. Incomplete extension SGIX_cube_map
        public const ushort FRAGMENT_MATERIAL_EXT = 0x8349;
        public const ushort FRAGMENT_NORMAL_EXT = 0x834A;
        public const ushort FRAGMENT_COLOR_EXT = 0x834C;
        public const ushort ATTENUATION_EXT = 0x834D;
        public const ushort SHADOW_ATTENUATION_EXT = 0x834E;
        public const ushort TEXTURE_APPLICATION_MODE_EXT = 0x834F;
        public const ushort TEXTURE_LIGHT_EXT = 0x8350;
        public const ushort TEXTURE_MATERIAL_FACE_EXT = 0x8351;
        public const ushort TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
        public const ushort PIXEL_TEXTURE_SGIS = 0x8353;
        public const ushort PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
        public const ushort PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
        public const ushort PIXEL_GROUP_COLOR_SGIS = 0x8356;
        // Unused 0x8357..0x8359. Incomplete extension SGIX_pixel_texture_bits
        // Unused 0x835A. Incomplete extension SGIX_pixel_texture_lod
        public const ushort LINE_QUALITY_HINT_SGIX = 0x835B;
        public const ushort ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public const ushort ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public const ushort ASYNC_READ_PIXELS_SGIX = 0x835E;
        public const ushort MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public const ushort MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public const ushort MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public const ushort UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public const ushort UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
        public const ushort UNSIGNED_SHORT_5_6_5 = 0x8363;
        public const ushort UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
        public const ushort UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public const ushort UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
        public const ushort UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public const ushort UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
        public const ushort UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
        public const ushort UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public const ushort UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
        public const ushort UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public const ushort UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
        public const ushort UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public const ushort UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
        public const ushort TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public const ushort TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public const ushort TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        // Unused 0x836C..0x836E. Incomplete extension SGIX_fog_texture
        // Unused 0x836F. Incomplete extension SGIX_fog_factor_to_alpha
        
        // . 
        public const ushort MIRRORED_REPEAT = 0x8370;
        public const ushort MIRRORED_REPEAT_ARB = 0x8370;
        public const ushort MIRRORED_REPEAT_IBM = 0x8370;
        public const ushort MIRRORED_REPEAT_OES = 0x8370;
        // Unused 0x8371..0x837F. 
        
        // . 
        // Unused 0x8380..0x839F. 
        
        // . 
        public const ushort RGB_S3TC = 0x83A0;
        public const ushort RGB4_S3TC = 0x83A1;
        public const ushort RGBA_S3TC = 0x83A2;
        public const ushort RGBA4_S3TC = 0x83A3;
        public const ushort RGBA_DXT5_S3TC = 0x83A4;
        public const ushort RGBA4_DXT5_S3TC = 0x83A5;
        // Unused 0x83A6..0x83BF. 
        
        // . Most of this could be reclaimed
        // Unused 0x83C0..0x83CA. Withdrawn extension SGIS_multitexture
        // Unused 0x83CB..0x83E5. 
        // Unused 0x83E6..0x83E9. Incomplete extension SGIX_bali_g_instruments
        // Unused 0x83EA..0x83EC. Incomplete extension SGIX_bali_r_instruments
        // Unused 0x83ED. Incomplete extension SGIX_occlusion_instrument
        public const ushort VERTEX_PRECLIP_SGIX = 0x83EE;
        public const ushort VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        
        // . 
        public const ushort COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
        public const ushort COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
        public const ushort COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2;
        public const ushort COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
        public const ushort COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3;
        public const ushort COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
        public const ushort PARALLEL_ARRAYS_INTEL = 0x83F4;
        public const ushort VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
        public const ushort NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
        public const ushort COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
        public const ushort TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
        public const ushort PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
        public const ushort PERFQUERY_FLUSH_INTEL = 0x83FA;
        public const ushort PERFQUERY_WAIT_INTEL = 0x83FB;
        public const ushort BLACKHOLE_RENDER_INTEL = 0x83FC;
        // Unused 0x83FD. 
        public const ushort CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
        public const ushort TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
        
        // . 
        public const ushort FRAGMENT_LIGHTING_SGIX = 0x8400;
        public const ushort FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public const ushort FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public const ushort FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public const ushort MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public const ushort MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public const ushort CURRENT_RASTER_NORMAL_SGIX = 0x8406;
        public const ushort LIGHT_ENV_MODE_SGIX = 0x8407;
        public const ushort FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public const ushort FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public const ushort FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public const ushort FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public const ushort FRAGMENT_LIGHT0_SGIX = 0x840C;
        public const ushort FRAGMENT_LIGHT1_SGIX = 0x840D;
        public const ushort FRAGMENT_LIGHT2_SGIX = 0x840E;
        public const ushort FRAGMENT_LIGHT3_SGIX = 0x840F;
        public const ushort FRAGMENT_LIGHT4_SGIX = 0x8410;
        public const ushort FRAGMENT_LIGHT5_SGIX = 0x8411;
        public const ushort FRAGMENT_LIGHT6_SGIX = 0x8412;
        public const ushort FRAGMENT_LIGHT7_SGIX = 0x8413;
        // Unused 0x8414..0x842D. 
        public const ushort PACK_RESAMPLE_SGIX = 0x842E;
        public const ushort UNPACK_RESAMPLE_SGIX = 0x842F;
        public const ushort RESAMPLE_DECIMATE_SGIX = 0x8430;
        // Unused 0x8431..0x8432. 
        public const ushort RESAMPLE_REPLICATE_SGIX = 0x8433;
        public const ushort RESAMPLE_ZERO_FILL_SGIX = 0x8434;
        // Unused 0x8435. 
        public const ushort TANGENT_ARRAY_EXT = 0x8439;
        public const ushort BINORMAL_ARRAY_EXT = 0x843A;
        public const ushort CURRENT_TANGENT_EXT = 0x843B;
        public const ushort CURRENT_BINORMAL_EXT = 0x843C;
        // Unused 0x844D. 
        public const ushort TANGENT_ARRAY_TYPE_EXT = 0x843E;
        public const ushort TANGENT_ARRAY_STRIDE_EXT = 0x843F;
        public const ushort BINORMAL_ARRAY_TYPE_EXT = 0x8440;
        public const ushort BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
        public const ushort TANGENT_ARRAY_POINTER_EXT = 0x8442;
        public const ushort BINORMAL_ARRAY_POINTER_EXT = 0x8443;
        public const ushort MAP1_TANGENT_EXT = 0x8444;
        public const ushort MAP2_TANGENT_EXT = 0x8445;
        public const ushort MAP1_BINORMAL_EXT = 0x8446;
        public const ushort MAP2_BINORMAL_EXT = 0x8447;
        // Unused 0x8448..0x8449. Incomplete extension SGIX_fragment_lighting
        // Unused 0x844A..0x844C. Incomplete extension SGIX_bali_timer_instruments
        public const ushort NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
        public const ushort NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
        public const ushort LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
        public const ushort FOG_COORDINATE_SOURCE = 0x8450;
        public const ushort FOG_COORDINATE_SOURCE_EXT = 0x8450;
        public const ushort FOG_COORD_SRC = 0x8450;
        public const ushort FOG_COORDINATE = 0x8451;
        public const ushort FOG_COORD = 0x8451;
        public const ushort FOG_COORDINATE_EXT = 0x8451;
        public const ushort FRAGMENT_DEPTH = 0x8452;
        public const ushort FRAGMENT_DEPTH_EXT = 0x8452;
        public const ushort CURRENT_FOG_COORDINATE = 0x8453;
        public const ushort CURRENT_FOG_COORD = 0x8453;
        public const ushort CURRENT_FOG_COORDINATE_EXT = 0x8453;
        public const ushort FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        public const ushort FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
        public const ushort FOG_COORD_ARRAY_TYPE = 0x8454;
        public const ushort FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        public const ushort FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
        public const ushort FOG_COORD_ARRAY_STRIDE = 0x8455;
        public const ushort FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        public const ushort FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
        public const ushort FOG_COORD_ARRAY_POINTER = 0x8456;
        public const ushort FOG_COORDINATE_ARRAY = 0x8457;
        public const ushort FOG_COORDINATE_ARRAY_EXT = 0x8457;
        public const ushort FOG_COORD_ARRAY = 0x8457;
        public const ushort COLOR_SUM = 0x8458;
        public const ushort COLOR_SUM_ARB = 0x8458;
        public const ushort COLOR_SUM_EXT = 0x8458;
        public const ushort CURRENT_SECONDARY_COLOR = 0x8459;
        public const ushort CURRENT_SECONDARY_COLOR_EXT = 0x8459;
        public const ushort SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        public const ushort SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
        public const ushort SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        public const ushort SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
        public const ushort SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        public const ushort SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
        public const ushort SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        public const ushort SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
        public const ushort SECONDARY_COLOR_ARRAY = 0x845E;
        public const ushort SECONDARY_COLOR_ARRAY_EXT = 0x845E;
        public const ushort CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
        // Unused 0x8460..0x846B. Incomplete extension SGIX_icc_texture
        // Unused 0x846C. 
        public const ushort ALIASED_POINT_SIZE_RANGE = 0x846D;
        public const ushort ALIASED_LINE_WIDTH_RANGE = 0x846E;
        // Unused 0x846F. 
        
        // . 
        // Unused 0x8470..0x848F. 
        
        // . 
        public const ushort SCREEN_COORDINATES_REND = 0x8490;
        public const ushort INVERTED_SCREEN_W_REND = 0x8491;
        // Unused 0x8492..0x849F. 
        
        // . 
        // Unused 0x84A0..0x84BF. 
        
        // . 
        public const ushort TEXTURE0 = 0x84C0;
        public const ushort TEXTURE0_ARB = 0x84C0;
        public const ushort TEXTURE1 = 0x84C1;
        public const ushort TEXTURE1_ARB = 0x84C1;
        public const ushort TEXTURE2 = 0x84C2;
        public const ushort TEXTURE2_ARB = 0x84C2;
        public const ushort TEXTURE3 = 0x84C3;
        public const ushort TEXTURE3_ARB = 0x84C3;
        public const ushort TEXTURE4 = 0x84C4;
        public const ushort TEXTURE4_ARB = 0x84C4;
        public const ushort TEXTURE5 = 0x84C5;
        public const ushort TEXTURE5_ARB = 0x84C5;
        public const ushort TEXTURE6 = 0x84C6;
        public const ushort TEXTURE6_ARB = 0x84C6;
        public const ushort TEXTURE7 = 0x84C7;
        public const ushort TEXTURE7_ARB = 0x84C7;
        public const ushort TEXTURE8 = 0x84C8;
        public const ushort TEXTURE8_ARB = 0x84C8;
        public const ushort TEXTURE9 = 0x84C9;
        public const ushort TEXTURE9_ARB = 0x84C9;
        public const ushort TEXTURE10 = 0x84CA;
        public const ushort TEXTURE10_ARB = 0x84CA;
        public const ushort TEXTURE11 = 0x84CB;
        public const ushort TEXTURE11_ARB = 0x84CB;
        public const ushort TEXTURE12 = 0x84CC;
        public const ushort TEXTURE12_ARB = 0x84CC;
        public const ushort TEXTURE13 = 0x84CD;
        public const ushort TEXTURE13_ARB = 0x84CD;
        public const ushort TEXTURE14 = 0x84CE;
        public const ushort TEXTURE14_ARB = 0x84CE;
        public const ushort TEXTURE15 = 0x84CF;
        public const ushort TEXTURE15_ARB = 0x84CF;
        public const ushort TEXTURE16 = 0x84D0;
        public const ushort TEXTURE16_ARB = 0x84D0;
        public const ushort TEXTURE17 = 0x84D1;
        public const ushort TEXTURE17_ARB = 0x84D1;
        public const ushort TEXTURE18 = 0x84D2;
        public const ushort TEXTURE18_ARB = 0x84D2;
        public const ushort TEXTURE19 = 0x84D3;
        public const ushort TEXTURE19_ARB = 0x84D3;
        public const ushort TEXTURE20 = 0x84D4;
        public const ushort TEXTURE20_ARB = 0x84D4;
        public const ushort TEXTURE21 = 0x84D5;
        public const ushort TEXTURE21_ARB = 0x84D5;
        public const ushort TEXTURE22 = 0x84D6;
        public const ushort TEXTURE22_ARB = 0x84D6;
        public const ushort TEXTURE23 = 0x84D7;
        public const ushort TEXTURE23_ARB = 0x84D7;
        public const ushort TEXTURE24 = 0x84D8;
        public const ushort TEXTURE24_ARB = 0x84D8;
        public const ushort TEXTURE25 = 0x84D9;
        public const ushort TEXTURE25_ARB = 0x84D9;
        public const ushort TEXTURE26 = 0x84DA;
        public const ushort TEXTURE26_ARB = 0x84DA;
        public const ushort TEXTURE27 = 0x84DB;
        public const ushort TEXTURE27_ARB = 0x84DB;
        public const ushort TEXTURE28 = 0x84DC;
        public const ushort TEXTURE28_ARB = 0x84DC;
        public const ushort TEXTURE29 = 0x84DD;
        public const ushort TEXTURE29_ARB = 0x84DD;
        public const ushort TEXTURE30 = 0x84DE;
        public const ushort TEXTURE30_ARB = 0x84DE;
        public const ushort TEXTURE31 = 0x84DF;
        public const ushort TEXTURE31_ARB = 0x84DF;
        public const ushort ACTIVE_TEXTURE = 0x84E0;
        public const ushort ACTIVE_TEXTURE_ARB = 0x84E0;
        public const ushort CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public const ushort CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
        public const ushort MAX_TEXTURE_UNITS = 0x84E2;
        public const ushort MAX_TEXTURE_UNITS_ARB = 0x84E2;
        public const ushort TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        public const ushort TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
        public const ushort PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
        public const ushort TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        public const ushort TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
        public const ushort PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
        public const ushort TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        public const ushort TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
        public const ushort TRANSPOSE_COLOR_MATRIX = 0x84E6;
        public const ushort TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
        public const ushort SUBTRACT = 0x84E7;
        public const ushort SUBTRACT_ARB = 0x84E7;
        public const ushort MAX_RENDERBUFFER_SIZE = 0x84E8;
        public const ushort MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
        public const ushort MAX_RENDERBUFFER_SIZE_OES = 0x84E8;
        public const ushort COMPRESSED_ALPHA = 0x84E9;
        public const ushort COMPRESSED_ALPHA_ARB = 0x84E9;
        public const ushort COMPRESSED_LUMINANCE = 0x84EA;
        public const ushort COMPRESSED_LUMINANCE_ARB = 0x84EA;
        public const ushort COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        public const ushort COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
        public const ushort COMPRESSED_INTENSITY = 0x84EC;
        public const ushort COMPRESSED_INTENSITY_ARB = 0x84EC;
        public const ushort COMPRESSED_RGB = 0x84ED;
        public const ushort COMPRESSED_RGB_ARB = 0x84ED;
        public const ushort COMPRESSED_RGBA = 0x84EE;
        public const ushort COMPRESSED_RGBA_ARB = 0x84EE;
        public const ushort TEXTURE_COMPRESSION_HINT = 0x84EF;
        public const ushort TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        
        // . 
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
        public const ushort ALL_COMPLETED_NV = 0x84F2;
        public const ushort FENCE_STATUS_NV = 0x84F3;
        public const ushort FENCE_CONDITION_NV = 0x84F4;
        public const ushort TEXTURE_RECTANGLE = 0x84F5;
        public const ushort TEXTURE_RECTANGLE_ARB = 0x84F5;
        public const ushort TEXTURE_RECTANGLE_NV = 0x84F5;
        public const ushort TEXTURE_BINDING_RECTANGLE = 0x84F6;
        public const ushort TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
        public const ushort TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
        public const ushort PROXY_TEXTURE_RECTANGLE = 0x84F7;
        public const ushort PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
        public const ushort PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
        public const ushort MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
        public const ushort MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
        public const ushort MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
        public const ushort DEPTH_STENCIL = 0x84F9;
        public const ushort DEPTH_STENCIL_EXT = 0x84F9;
        public const ushort DEPTH_STENCIL_NV = 0x84F9;
        public const ushort DEPTH_STENCIL_OES = 0x84F9;
        public const ushort UNSIGNED_INT_24_8 = 0x84FA;
        public const ushort UNSIGNED_INT_24_8_EXT = 0x84FA;
        public const ushort UNSIGNED_INT_24_8_NV = 0x84FA;
        public const ushort UNSIGNED_INT_24_8_OES = 0x84FA;
        // Unused 0x84FB..0x84FC. 
        public const ushort MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public const ushort MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
        public const ushort TEXTURE_MAX_ANISOTROPY = 0x84FE;
        public const ushort TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
        public const ushort MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
        public const ushort MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
        public const ushort TEXTURE_FILTER_CONTROL = 0x8500;
        public const ushort TEXTURE_FILTER_CONTROL_EXT = 0x8500;
        public const ushort TEXTURE_LOD_BIAS = 0x8501;
        public const ushort TEXTURE_LOD_BIAS_EXT = 0x8501;
        public const ushort MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
        public const ushort COMBINE4_NV = 0x8503;
        public const ushort MAX_SHININESS_NV = 0x8504;
        public const ushort MAX_SPOT_EXPONENT_NV = 0x8505;
        public const ushort MODELVIEW1_MATRIX_EXT = 0x8506;
        public const ushort INCR_WRAP = 0x8507;
        public const ushort INCR_WRAP_EXT = 0x8507;
        public const ushort INCR_WRAP_OES = 0x8507;
        public const ushort DECR_WRAP = 0x8508;
        public const ushort DECR_WRAP_EXT = 0x8508;
        public const ushort DECR_WRAP_OES = 0x8508;
        public const ushort VERTEX_WEIGHTING_EXT = 0x8509;
        public const ushort MODELVIEW1_ARB = 0x850A;
        public const ushort MODELVIEW1_EXT = 0x850A;
        public const ushort CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
        public const ushort VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
        public const ushort VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
        public const ushort VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
        public const ushort VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
        public const ushort VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
        public const ushort NORMAL_MAP = 0x8511;
        public const ushort NORMAL_MAP_ARB = 0x8511;
        public const ushort NORMAL_MAP_EXT = 0x8511;
        public const ushort NORMAL_MAP_NV = 0x8511;
        public const ushort NORMAL_MAP_OES = 0x8511;
        public const ushort REFLECTION_MAP = 0x8512;
        public const ushort REFLECTION_MAP_ARB = 0x8512;
        public const ushort REFLECTION_MAP_EXT = 0x8512;
        public const ushort REFLECTION_MAP_NV = 0x8512;
        public const ushort REFLECTION_MAP_OES = 0x8512;
        public const ushort TEXTURE_CUBE_MAP = 0x8513;
        public const ushort TEXTURE_CUBE_MAP_ARB = 0x8513;
        public const ushort TEXTURE_CUBE_MAP_EXT = 0x8513;
        public const ushort TEXTURE_CUBE_MAP_OES = 0x8513;
        public const ushort TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public const ushort TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
        public const ushort TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
        public const ushort TEXTURE_BINDING_CUBE_MAP_OES = 0x8514;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
        public const ushort TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
        public const ushort TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A;
        public const ushort PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public const ushort PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
        public const ushort PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
        public const ushort MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public const ushort MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
        public const ushort MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
        public const ushort MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C;
        public const ushort VERTEX_ARRAY_RANGE_APPLE = 0x851D;
        public const ushort VERTEX_ARRAY_RANGE_NV = 0x851D;
        public const ushort VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
        public const ushort VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
        public const ushort VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
        public const ushort VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public const ushort MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
        public const ushort VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
        public const ushort VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
        public const ushort REGISTER_COMBINERS_NV = 0x8522;
        public const ushort VARIABLE_A_NV = 0x8523;
        public const ushort VARIABLE_B_NV = 0x8524;
        public const ushort VARIABLE_C_NV = 0x8525;
        public const ushort VARIABLE_D_NV = 0x8526;
        public const ushort VARIABLE_E_NV = 0x8527;
        public const ushort VARIABLE_F_NV = 0x8528;
        public const ushort VARIABLE_G_NV = 0x8529;
        public const ushort CONSTANT_COLOR0_NV = 0x852A;
        public const ushort CONSTANT_COLOR1_NV = 0x852B;
        public const ushort PRIMARY_COLOR_NV = 0x852C;
        public const ushort SECONDARY_COLOR_NV = 0x852D;
        public const ushort SPARE0_NV = 0x852E;
        public const ushort SPARE1_NV = 0x852F;
        public const ushort DISCARD_NV = 0x8530;
        public const ushort E_TIMES_F_NV = 0x8531;
        public const ushort SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
        public const ushort VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
        public const ushort MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public const ushort PER_STAGE_CONSTANTS_NV = 0x8535;
        public const ushort UNSIGNED_IDENTITY_NV = 0x8536;
        public const ushort UNSIGNED_INVERT_NV = 0x8537;
        public const ushort EXPAND_NORMAL_NV = 0x8538;
        public const ushort EXPAND_NEGATE_NV = 0x8539;
        public const ushort HALF_BIAS_NORMAL_NV = 0x853A;
        public const ushort HALF_BIAS_NEGATE_NV = 0x853B;
        public const ushort SIGNED_IDENTITY_NV = 0x853C;
        public const ushort SIGNED_NEGATE_NV = 0x853D;
        public const ushort SCALE_BY_TWO_NV = 0x853E;
        public const ushort SCALE_BY_FOUR_NV = 0x853F;
        public const ushort SCALE_BY_ONE_HALF_NV = 0x8540;
        public const ushort BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
        public const ushort COMBINER_INPUT_NV = 0x8542;
        public const ushort COMBINER_MAPPING_NV = 0x8543;
        public const ushort COMBINER_COMPONENT_USAGE_NV = 0x8544;
        public const ushort COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
        public const ushort COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
        public const ushort COMBINER_MUX_SUM_NV = 0x8547;
        public const ushort COMBINER_SCALE_NV = 0x8548;
        public const ushort COMBINER_BIAS_NV = 0x8549;
        public const ushort COMBINER_AB_OUTPUT_NV = 0x854A;
        public const ushort COMBINER_CD_OUTPUT_NV = 0x854B;
        public const ushort COMBINER_SUM_OUTPUT_NV = 0x854C;
        public const ushort MAX_GENERAL_COMBINERS_NV = 0x854D;
        public const ushort NUM_GENERAL_COMBINERS_NV = 0x854E;
        public const ushort COLOR_SUM_CLAMP_NV = 0x854F;
        public const ushort COMBINER0_NV = 0x8550;
        public const ushort COMBINER1_NV = 0x8551;
        public const ushort COMBINER2_NV = 0x8552;
        public const ushort COMBINER3_NV = 0x8553;
        public const ushort COMBINER4_NV = 0x8554;
        public const ushort COMBINER5_NV = 0x8555;
        public const ushort COMBINER6_NV = 0x8556;
        public const ushort COMBINER7_NV = 0x8557;
        public const ushort PRIMITIVE_RESTART_NV = 0x8558;
        public const ushort PRIMITIVE_RESTART_INDEX_NV = 0x8559;
        public const ushort FOG_DISTANCE_MODE_NV = 0x855A;
        public const ushort EYE_RADIAL_NV = 0x855B;
        public const ushort EYE_PLANE_ABSOLUTE_NV = 0x855C;
        public const ushort EMBOSS_LIGHT_NV = 0x855D;
        public const ushort EMBOSS_CONSTANT_NV = 0x855E;
        public const ushort EMBOSS_MAP_NV = 0x855F;
        
        // . 
        public const ushort RED_MIN_CLAMP_INGR = 0x8560;
        public const ushort GREEN_MIN_CLAMP_INGR = 0x8561;
        public const ushort BLUE_MIN_CLAMP_INGR = 0x8562;
        public const ushort ALPHA_MIN_CLAMP_INGR = 0x8563;
        public const ushort RED_MAX_CLAMP_INGR = 0x8564;
        public const ushort GREEN_MAX_CLAMP_INGR = 0x8565;
        public const ushort BLUE_MAX_CLAMP_INGR = 0x8566;
        public const ushort ALPHA_MAX_CLAMP_INGR = 0x8567;
        public const ushort INTERLACE_READ_INGR = 0x8568;
        // Unused 0x8569..0x856F. 
        
        // RegisterCombinerPname. 
        public const ushort COMBINE = 0x8570;
        public const ushort COMBINE_ARB = 0x8570;
        public const ushort COMBINE_EXT = 0x8570;
        public const ushort COMBINE_RGB = 0x8571;
        public const ushort COMBINE_RGB_ARB = 0x8571;
        public const ushort COMBINE_RGB_EXT = 0x8571;
        public const ushort COMBINE_ALPHA = 0x8572;
        public const ushort COMBINE_ALPHA_ARB = 0x8572;
        public const ushort COMBINE_ALPHA_EXT = 0x8572;
        public const ushort RGB_SCALE = 0x8573;
        public const ushort RGB_SCALE_ARB = 0x8573;
        public const ushort RGB_SCALE_EXT = 0x8573;
        public const ushort ADD_SIGNED = 0x8574;
        public const ushort ADD_SIGNED_ARB = 0x8574;
        public const ushort ADD_SIGNED_EXT = 0x8574;
        public const ushort INTERPOLATE = 0x8575;
        public const ushort INTERPOLATE_ARB = 0x8575;
        public const ushort INTERPOLATE_EXT = 0x8575;
        public const ushort CONSTANT = 0x8576;
        public const ushort CONSTANT_ARB = 0x8576;
        public const ushort CONSTANT_EXT = 0x8576;
        public const ushort CONSTANT_NV = 0x8576;
        public const ushort PRIMARY_COLOR = 0x8577;
        public const ushort PRIMARY_COLOR_ARB = 0x8577;
        public const ushort PRIMARY_COLOR_EXT = 0x8577;
        public const ushort PREVIOUS = 0x8578;
        public const ushort PREVIOUS_ARB = 0x8578;
        public const ushort PREVIOUS_EXT = 0x8578;
        // Unused 0x8579..0x857F. Additional combiner enums only
        public const ushort SOURCE0_RGB = 0x8580;
        public const ushort SOURCE0_RGB_ARB = 0x8580;
        public const ushort SOURCE0_RGB_EXT = 0x8580;
        public const ushort SRC0_RGB = 0x8580;
        public const ushort SOURCE1_RGB = 0x8581;
        public const ushort SOURCE1_RGB_ARB = 0x8581;
        public const ushort SOURCE1_RGB_EXT = 0x8581;
        public const ushort SRC1_RGB = 0x8581;
        public const ushort SOURCE2_RGB = 0x8582;
        public const ushort SOURCE2_RGB_ARB = 0x8582;
        public const ushort SOURCE2_RGB_EXT = 0x8582;
        public const ushort SRC2_RGB = 0x8582;
        public const ushort SOURCE3_RGB_NV = 0x8583;
        // Unused 0x8584..0x8587. Additional combiner enums only
        public const ushort SOURCE0_ALPHA = 0x8588;
        public const ushort SOURCE0_ALPHA_ARB = 0x8588;
        public const ushort SOURCE0_ALPHA_EXT = 0x8588;
        public const ushort SRC0_ALPHA = 0x8588;
        public const ushort SOURCE1_ALPHA = 0x8589;
        public const ushort SOURCE1_ALPHA_ARB = 0x8589;
        public const ushort SOURCE1_ALPHA_EXT = 0x8589;
        public const ushort SRC1_ALPHA = 0x8589;
        public const ushort SRC1_ALPHA_EXT = 0x8589;
        public const ushort SOURCE2_ALPHA = 0x858A;
        public const ushort SOURCE2_ALPHA_ARB = 0x858A;
        public const ushort SOURCE2_ALPHA_EXT = 0x858A;
        public const ushort SRC2_ALPHA = 0x858A;
        public const ushort SOURCE3_ALPHA_NV = 0x858B;
        // Unused 0x858C..0x858F. Additional combiner enums only
        public const ushort OPERAND0_RGB = 0x8590;
        public const ushort OPERAND0_RGB_ARB = 0x8590;
        public const ushort OPERAND0_RGB_EXT = 0x8590;
        public const ushort OPERAND1_RGB = 0x8591;
        public const ushort OPERAND1_RGB_ARB = 0x8591;
        public const ushort OPERAND1_RGB_EXT = 0x8591;
        public const ushort OPERAND2_RGB = 0x8592;
        public const ushort OPERAND2_RGB_ARB = 0x8592;
        public const ushort OPERAND2_RGB_EXT = 0x8592;
        public const ushort OPERAND3_RGB_NV = 0x8593;
        // Unused 0x8594..0x8597. Additional combiner enums only
        public const ushort OPERAND0_ALPHA = 0x8598;
        public const ushort OPERAND0_ALPHA_ARB = 0x8598;
        public const ushort OPERAND0_ALPHA_EXT = 0x8598;
        public const ushort OPERAND1_ALPHA = 0x8599;
        public const ushort OPERAND1_ALPHA_ARB = 0x8599;
        public const ushort OPERAND1_ALPHA_EXT = 0x8599;
        public const ushort OPERAND2_ALPHA = 0x859A;
        public const ushort OPERAND2_ALPHA_ARB = 0x859A;
        public const ushort OPERAND2_ALPHA_EXT = 0x859A;
        public const ushort OPERAND3_ALPHA_NV = 0x859B;
        // Unused 0x859C..0x859F. Additional combiner enums only
        
        // . 
        public const ushort PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public const ushort UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public const ushort PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
        public const ushort PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
        public const ushort PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
        // Unused 0x85A5..0x85AD. Incomplete extension SGIS_color_range
        public const ushort PERTURB_EXT = 0x85AE;
        public const ushort TEXTURE_NORMAL_EXT = 0x85AF;
        
        // . 
        public const ushort LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
        public const ushort TRANSFORM_HINT_APPLE = 0x85B1;
        public const ushort UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
        public const ushort BUFFER_OBJECT_APPLE = 0x85B3;
        public const ushort STORAGE_CLIENT_APPLE = 0x85B4;
        public const ushort VERTEX_ARRAY_BINDING = 0x85B5;
        public const ushort VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
        public const ushort VERTEX_ARRAY_BINDING_OES = 0x85B5;
        // Unused 0x85B6. Unknown extension (Khronos error #632)
        public const ushort TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
        public const ushort TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
        public const ushort YCBCR_422_APPLE = 0x85B9;
        public const ushort UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
        public const ushort UNSIGNED_SHORT_8_8_MESA = 0x85BA;
        public const ushort UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
        public const ushort UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
        public const ushort TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
        public const ushort STORAGE_PRIVATE_APPLE = 0x85BD;
        public const ushort STORAGE_CACHED_APPLE = 0x85BE;
        public const ushort STORAGE_SHARED_APPLE = 0x85BF;
        
        // . 
        public const ushort REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
        public const ushort REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
        public const ushort REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
        public const ushort REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
        public const ushort R1UI_V3F_SUN = 0x85C4;
        public const ushort R1UI_C4UB_V3F_SUN = 0x85C5;
        public const ushort R1UI_C3F_V3F_SUN = 0x85C6;
        public const ushort R1UI_N3F_V3F_SUN = 0x85C7;
        public const ushort R1UI_C4F_N3F_V3F_SUN = 0x85C8;
        public const ushort R1UI_T2F_V3F_SUN = 0x85C9;
        public const ushort R1UI_T2F_N3F_V3F_SUN = 0x85CA;
        public const ushort R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
        public const ushort SLICE_ACCUM_SUN = 0x85CC;
        // Unused 0x85CD..0x85CF. 
        
        // . 3Dlabs private extension for Autodesk
        // Unused 0x85D0..0x85D1. Unknown 3Dlabs private extension for Autodesk (but we know the enum values)
        // Unused 0x85D2..0x85DF. 
        
        // . 
        // Unused 0x85E0..0x85FB. Incomplete extension SGIX_texture_range
        // Unused 0x85FC..0x85FF. 
        
        // . 
        // Unused 0x8600..0x8613. 
        public const ushort QUAD_MESH_SUN = 0x8614;
        public const ushort TRIANGLE_MESH_SUN = 0x8615;
        // Unused 0x8614..0x861F. 
        
        // . 
        public const ushort VERTEX_PROGRAM_ARB = 0x8620;
        public const ushort VERTEX_PROGRAM_NV = 0x8620;
        public const ushort VERTEX_STATE_PROGRAM_NV = 0x8621;
        public const ushort VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public const ushort VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
        public const ushort ATTRIB_ARRAY_SIZE_NV = 0x8623;
        public const ushort VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public const ushort VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
        public const ushort ATTRIB_ARRAY_STRIDE_NV = 0x8624;
        public const ushort VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public const ushort VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
        public const ushort ATTRIB_ARRAY_TYPE_NV = 0x8625;
        public const ushort VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public const ushort VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
        public const ushort CURRENT_ATTRIB_NV = 0x8626;
        public const ushort CURRENT_VERTEX_ATTRIB = 0x8626;
        public const ushort CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
        public const ushort PROGRAM_LENGTH_ARB = 0x8627;
        public const ushort PROGRAM_LENGTH_NV = 0x8627;
        public const ushort PROGRAM_STRING_ARB = 0x8628;
        public const ushort PROGRAM_STRING_NV = 0x8628;
        public const ushort MODELVIEW_PROJECTION_NV = 0x8629;
        public const ushort IDENTITY_NV = 0x862A;
        public const ushort INVERSE_NV = 0x862B;
        public const ushort TRANSPOSE_NV = 0x862C;
        public const ushort INVERSE_TRANSPOSE_NV = 0x862D;
        public const ushort MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
        public const ushort MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
        public const ushort MAX_PROGRAM_MATRICES_ARB = 0x862F;
        public const ushort MAX_TRACK_MATRICES_NV = 0x862F;
        public const ushort MATRIX0_NV = 0x8630;
        public const ushort MATRIX1_NV = 0x8631;
        public const ushort MATRIX2_NV = 0x8632;
        public const ushort MATRIX3_NV = 0x8633;
        public const ushort MATRIX4_NV = 0x8634;
        public const ushort MATRIX5_NV = 0x8635;
        public const ushort MATRIX6_NV = 0x8636;
        public const ushort MATRIX7_NV = 0x8637;
        // Unused 0x8638..0x863F. Reserved for MATRIX{8-15}_NV
        public const ushort CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
        public const ushort CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
        public const ushort CURRENT_MATRIX_ARB = 0x8641;
        public const ushort CURRENT_MATRIX_NV = 0x8641;
        public const ushort VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public const ushort VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
        public const ushort VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
        public const ushort PROGRAM_POINT_SIZE = 0x8642;
        public const ushort PROGRAM_POINT_SIZE_ARB = 0x8642;
        public const ushort PROGRAM_POINT_SIZE_EXT = 0x8642;
        public const ushort VERTEX_PROGRAM_TWO_SIDE = 0x8643;
        public const ushort VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
        public const ushort VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
        public const ushort PROGRAM_PARAMETER_NV = 0x8644;
        public const ushort ATTRIB_ARRAY_POINTER_NV = 0x8645;
        public const ushort VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public const ushort VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
        public const ushort PROGRAM_TARGET_NV = 0x8646;
        public const ushort PROGRAM_RESIDENT_NV = 0x8647;
        public const ushort TRACK_MATRIX_NV = 0x8648;
        public const ushort TRACK_MATRIX_TRANSFORM_NV = 0x8649;
        public const ushort VERTEX_PROGRAM_BINDING_NV = 0x864A;
        public const ushort PROGRAM_ERROR_POSITION_ARB = 0x864B;
        public const ushort PROGRAM_ERROR_POSITION_NV = 0x864B;
        public const ushort OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
        public const ushort OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
        public const ushort DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
        public const ushort DEPTH_CLAMP = 0x864F;
        public const ushort DEPTH_CLAMP_NV = 0x864F;
        public const ushort DEPTH_CLAMP_EXT = 0x864F;
        public const ushort VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
        public const ushort VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
        public const ushort VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
        public const ushort VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
        public const ushort VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
        public const ushort VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
        public const ushort VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
        public const ushort VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
        public const ushort VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
        public const ushort VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
        public const ushort VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
        public const ushort VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
        public const ushort VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
        public const ushort VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
        public const ushort VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
        public const ushort VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
        public const ushort MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
        public const ushort MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
        public const ushort MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
        public const ushort MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
        public const ushort MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
        public const ushort MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
        public const ushort MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
        public const ushort MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
        public const ushort MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
        public const ushort MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
        public const ushort MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
        public const ushort MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
        public const ushort MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
        public const ushort MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
        public const ushort MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
        public const ushort MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
        public const ushort MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
        public const ushort MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
        public const ushort MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
        public const ushort MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
        public const ushort MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
        public const ushort MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
        public const ushort MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
        public const ushort MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
        public const ushort PROGRAM_BINDING_ARB = 0x8677;
        public const ushort MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
        public const ushort MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
        public const ushort MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
        public const ushort MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
        public const ushort MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
        public const ushort MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
        public const ushort MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
        public const ushort MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
        
        // . 
        // Unused 0x8680..0x869F. 
        
        // . 
        public const ushort TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public const ushort TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
        public const ushort TEXTURE_COMPRESSED = 0x86A1;
        public const ushort TEXTURE_COMPRESSED_ARB = 0x86A1;
        public const ushort NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public const ushort NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
        public const ushort COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public const ushort COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
        public const ushort MAX_VERTEX_UNITS_ARB = 0x86A4;
        public const ushort MAX_VERTEX_UNITS_OES = 0x86A4;
        public const ushort ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
        public const ushort WEIGHT_SUM_UNITY_ARB = 0x86A6;
        public const ushort VERTEX_BLEND_ARB = 0x86A7;
        public const ushort CURRENT_WEIGHT_ARB = 0x86A8;
        public const ushort WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
        public const ushort WEIGHT_ARRAY_TYPE_OES = 0x86A9;
        public const ushort WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
        public const ushort WEIGHT_ARRAY_STRIDE_OES = 0x86AA;
        public const ushort WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
        public const ushort WEIGHT_ARRAY_SIZE_OES = 0x86AB;
        public const ushort WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
        public const ushort WEIGHT_ARRAY_POINTER_OES = 0x86AC;
        public const ushort WEIGHT_ARRAY_ARB = 0x86AD;
        public const ushort WEIGHT_ARRAY_OES = 0x86AD;
        public const ushort DOT3_RGB = 0x86AE;
        public const ushort DOT3_RGB_ARB = 0x86AE;
        public const ushort DOT3_RGBA = 0x86AF;
        public const ushort DOT3_RGBA_ARB = 0x86AF;
        public const ushort DOT3_RGBA_IMG = 0x86AF;
        
        // . 
        public const ushort COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
        public const ushort COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
        public const ushort MULTISAMPLE_3DFX = 0x86B2;
        public const ushort SAMPLE_BUFFERS_3DFX = 0x86B3;
        public const ushort SAMPLES_3DFX = 0x86B4;
        // Unused 0x86B5..0x86BF. 
        
        // . 
        public const ushort EVAL_2D_NV = 0x86C0;
        public const ushort EVAL_TRIANGULAR_2D_NV = 0x86C1;
        public const ushort MAP_TESSELLATION_NV = 0x86C2;
        public const ushort MAP_ATTRIB_U_ORDER_NV = 0x86C3;
        public const ushort MAP_ATTRIB_V_ORDER_NV = 0x86C4;
        public const ushort EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
        public const ushort EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
        public const ushort EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
        public const ushort EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
        public const ushort EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
        public const ushort EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
        public const ushort EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
        public const ushort EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
        public const ushort EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
        public const ushort EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
        public const ushort EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
        public const ushort EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
        public const ushort EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
        public const ushort EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
        public const ushort EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
        public const ushort EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
        public const ushort EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
        public const ushort MAX_MAP_TESSELLATION_NV = 0x86D6;
        public const ushort MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
        public const ushort MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
        public const ushort RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
        public const ushort UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
        public const ushort UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
        public const ushort DSDT_MAG_INTENSITY_NV = 0x86DC;
        public const ushort SHADER_CONSISTENT_NV = 0x86DD;
        public const ushort TEXTURE_SHADER_NV = 0x86DE;
        public const ushort SHADER_OPERATION_NV = 0x86DF;
        public const ushort CULL_MODES_NV = 0x86E0;
        public const ushort OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
        public const ushort OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
        public const ushort OFFSET_TEXTURE_SCALE_NV = 0x86E2;
        public const ushort OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
        public const ushort OFFSET_TEXTURE_BIAS_NV = 0x86E3;
        public const ushort OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
        public const ushort PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
        public const ushort CONST_EYE_NV = 0x86E5;
        public const ushort PASS_THROUGH_NV = 0x86E6;
        public const ushort CULL_FRAGMENT_NV = 0x86E7;
        public const ushort OFFSET_TEXTURE_2D_NV = 0x86E8;
        public const ushort DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
        public const ushort DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
        public const ushort SURFACE_STATE_NV = 0x86EB;
        public const ushort DOT_PRODUCT_NV = 0x86EC;
        public const ushort DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
        public const ushort DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
        public const ushort DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
        public const ushort DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
        public const ushort DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
        public const ushort DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
        public const ushort DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
        public const ushort HILO_NV = 0x86F4;
        public const ushort DSDT_NV = 0x86F5;
        public const ushort DSDT_MAG_NV = 0x86F6;
        public const ushort DSDT_MAG_VIB_NV = 0x86F7;
        public const ushort HILO16_NV = 0x86F8;
        public const ushort SIGNED_HILO_NV = 0x86F9;
        public const ushort SIGNED_HILO16_NV = 0x86FA;
        public const ushort SIGNED_RGBA_NV = 0x86FB;
        public const ushort SIGNED_RGBA8_NV = 0x86FC;
        public const ushort SURFACE_REGISTERED_NV = 0x86FD;
        public const ushort SIGNED_RGB_NV = 0x86FE;
        public const ushort SIGNED_RGB8_NV = 0x86FF;
        public const ushort SURFACE_MAPPED_NV = 0x8700;
        public const ushort SIGNED_LUMINANCE_NV = 0x8701;
        public const ushort SIGNED_LUMINANCE8_NV = 0x8702;
        public const ushort SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
        public const ushort SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
        public const ushort SIGNED_ALPHA_NV = 0x8705;
        public const ushort SIGNED_ALPHA8_NV = 0x8706;
        public const ushort SIGNED_INTENSITY_NV = 0x8707;
        public const ushort SIGNED_INTENSITY8_NV = 0x8708;
        public const ushort DSDT8_NV = 0x8709;
        public const ushort DSDT8_MAG8_NV = 0x870A;
        public const ushort DSDT8_MAG8_INTENSITY8_NV = 0x870B;
        public const ushort SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
        public const ushort SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
        public const ushort HI_SCALE_NV = 0x870E;
        public const ushort LO_SCALE_NV = 0x870F;
        public const ushort DS_SCALE_NV = 0x8710;
        public const ushort DT_SCALE_NV = 0x8711;
        public const ushort MAGNITUDE_SCALE_NV = 0x8712;
        public const ushort VIBRANCE_SCALE_NV = 0x8713;
        public const ushort HI_BIAS_NV = 0x8714;
        public const ushort LO_BIAS_NV = 0x8715;
        public const ushort DS_BIAS_NV = 0x8716;
        public const ushort DT_BIAS_NV = 0x8717;
        public const ushort MAGNITUDE_BIAS_NV = 0x8718;
        public const ushort VIBRANCE_BIAS_NV = 0x8719;
        public const ushort TEXTURE_BORDER_VALUES_NV = 0x871A;
        public const ushort TEXTURE_HI_SIZE_NV = 0x871B;
        public const ushort TEXTURE_LO_SIZE_NV = 0x871C;
        public const ushort TEXTURE_DS_SIZE_NV = 0x871D;
        public const ushort TEXTURE_DT_SIZE_NV = 0x871E;
        public const ushort TEXTURE_MAG_SIZE_NV = 0x871F;
        
        // . 
        // Unused 0x8720..0x8721. MODELVIEW0/1 already exist
        public const ushort MODELVIEW2_ARB = 0x8722;
        public const ushort MODELVIEW3_ARB = 0x8723;
        public const ushort MODELVIEW4_ARB = 0x8724;
        public const ushort MODELVIEW5_ARB = 0x8725;
        public const ushort MODELVIEW6_ARB = 0x8726;
        public const ushort MODELVIEW7_ARB = 0x8727;
        public const ushort MODELVIEW8_ARB = 0x8728;
        public const ushort MODELVIEW9_ARB = 0x8729;
        public const ushort MODELVIEW10_ARB = 0x872A;
        public const ushort MODELVIEW11_ARB = 0x872B;
        public const ushort MODELVIEW12_ARB = 0x872C;
        public const ushort MODELVIEW13_ARB = 0x872D;
        public const ushort MODELVIEW14_ARB = 0x872E;
        public const ushort MODELVIEW15_ARB = 0x872F;
        public const ushort MODELVIEW16_ARB = 0x8730;
        public const ushort MODELVIEW17_ARB = 0x8731;
        public const ushort MODELVIEW18_ARB = 0x8732;
        public const ushort MODELVIEW19_ARB = 0x8733;
        public const ushort MODELVIEW20_ARB = 0x8734;
        public const ushort MODELVIEW21_ARB = 0x8735;
        public const ushort MODELVIEW22_ARB = 0x8736;
        public const ushort MODELVIEW23_ARB = 0x8737;
        public const ushort MODELVIEW24_ARB = 0x8738;
        public const ushort MODELVIEW25_ARB = 0x8739;
        public const ushort MODELVIEW26_ARB = 0x873A;
        public const ushort MODELVIEW27_ARB = 0x873B;
        public const ushort MODELVIEW28_ARB = 0x873C;
        public const ushort MODELVIEW29_ARB = 0x873D;
        public const ushort MODELVIEW30_ARB = 0x873E;
        public const ushort MODELVIEW31_ARB = 0x873F;
        
        // . 
        public const ushort DOT3_RGB_EXT = 0x8740;
        public const ushort Z400_BINARY_AMD = 0x8740;
        public const ushort DOT3_RGBA_EXT = 0x8741;
        public const ushort PROGRAM_BINARY_LENGTH_OES = 0x8741;
        public const ushort PROGRAM_BINARY_LENGTH = 0x8741;
        public const ushort MIRROR_CLAMP_ATI = 0x8742;
        public const ushort MIRROR_CLAMP_EXT = 0x8742;
        public const ushort MIRROR_CLAMP_TO_EDGE = 0x8743;
        public const ushort MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
        public const ushort MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
        public const ushort MODULATE_ADD_ATI = 0x8744;
        public const ushort MODULATE_SIGNED_ADD_ATI = 0x8745;
        public const ushort MODULATE_SUBTRACT_ATI = 0x8746;
        // Unused 0x8747..0x8749. 
        public const ushort SET_AMD = 0x874A;
        public const ushort REPLACE_VALUE_AMD = 0x874B;
        public const ushort STENCIL_OP_VALUE_AMD = 0x874C;
        public const ushort STENCIL_BACK_OP_VALUE_AMD = 0x874D;
        public const ushort VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
        public const ushort OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
        
        // . 
        public const ushort DEPTH_STENCIL_MESA = 0x8750;
        public const ushort UNSIGNED_INT_24_8_MESA = 0x8751;
        public const ushort UNSIGNED_INT_8_24_REV_MESA = 0x8752;
        public const ushort UNSIGNED_SHORT_15_1_MESA = 0x8753;
        public const ushort UNSIGNED_SHORT_1_15_REV_MESA = 0x8754;
        public const ushort TRACE_MASK_MESA = 0x8755;
        public const ushort TRACE_NAME_MESA = 0x8756;
        public const ushort YCBCR_MESA = 0x8757;
        public const ushort PACK_INVERT_MESA = 0x8758;
        public const ushort DEBUG_OBJECT_MESA = 0x8759;
        public const ushort TEXTURE_1D_STACK_MESAX = 0x8759;
        public const ushort DEBUG_PRINT_MESA = 0x875A;
        public const ushort TEXTURE_2D_STACK_MESAX = 0x875A;
        public const ushort DEBUG_ASSERT_MESA = 0x875B;
        public const ushort PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
        public const ushort PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
        public const ushort TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
        public const ushort TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
        public const ushort PROGRAM_BINARY_FORMAT_MESA = 0x875F;
        
        // . 
        public const ushort STATIC_ATI = 0x8760;
        public const ushort DYNAMIC_ATI = 0x8761;
        public const ushort PRESERVE_ATI = 0x8762;
        public const ushort DISCARD_ATI = 0x8763;
        public const ushort BUFFER_SIZE = 0x8764;
        public const ushort BUFFER_SIZE_ARB = 0x8764;
        public const ushort OBJECT_BUFFER_SIZE_ATI = 0x8764;
        public const ushort BUFFER_USAGE = 0x8765;
        public const ushort BUFFER_USAGE_ARB = 0x8765;
        public const ushort OBJECT_BUFFER_USAGE_ATI = 0x8765;
        public const ushort ARRAY_OBJECT_BUFFER_ATI = 0x8766;
        public const ushort ARRAY_OBJECT_OFFSET_ATI = 0x8767;
        public const ushort ELEMENT_ARRAY_ATI = 0x8768;
        public const ushort ELEMENT_ARRAY_TYPE_ATI = 0x8769;
        public const ushort ELEMENT_ARRAY_POINTER_ATI = 0x876A;
        public const ushort MAX_VERTEX_STREAMS_ATI = 0x876B;
        public const ushort VERTEX_STREAM0_ATI = 0x876C;
        public const ushort VERTEX_STREAM1_ATI = 0x876D;
        public const ushort VERTEX_STREAM2_ATI = 0x876E;
        public const ushort VERTEX_STREAM3_ATI = 0x876F;
        public const ushort VERTEX_STREAM4_ATI = 0x8770;
        public const ushort VERTEX_STREAM5_ATI = 0x8771;
        public const ushort VERTEX_STREAM6_ATI = 0x8772;
        public const ushort VERTEX_STREAM7_ATI = 0x8773;
        public const ushort VERTEX_SOURCE_ATI = 0x8774;
        public const ushort BUMP_ROT_MATRIX_ATI = 0x8775;
        public const ushort BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
        public const ushort BUMP_NUM_TEX_UNITS_ATI = 0x8777;
        public const ushort BUMP_TEX_UNITS_ATI = 0x8778;
        public const ushort DUDV_ATI = 0x8779;
        public const ushort DU8DV8_ATI = 0x877A;
        public const ushort BUMP_ENVMAP_ATI = 0x877B;
        public const ushort BUMP_TARGET_ATI = 0x877C;
        // Unused 0x877D..0x877F. 
        public const ushort VERTEX_SHADER_EXT = 0x8780;
        public const ushort VERTEX_SHADER_BINDING_EXT = 0x8781;
        public const ushort OP_INDEX_EXT = 0x8782;
        public const ushort OP_NEGATE_EXT = 0x8783;
        public const ushort OP_DOT3_EXT = 0x8784;
        public const ushort OP_DOT4_EXT = 0x8785;
        public const ushort OP_MUL_EXT = 0x8786;
        public const ushort OP_ADD_EXT = 0x8787;
        public const ushort OP_MADD_EXT = 0x8788;
        public const ushort OP_FRAC_EXT = 0x8789;
        public const ushort OP_MAX_EXT = 0x878A;
        public const ushort OP_MIN_EXT = 0x878B;
        public const ushort OP_SET_GE_EXT = 0x878C;
        public const ushort OP_SET_LT_EXT = 0x878D;
        public const ushort OP_CLAMP_EXT = 0x878E;
        public const ushort OP_FLOOR_EXT = 0x878F;
        public const ushort OP_ROUND_EXT = 0x8790;
        public const ushort OP_EXP_BASE_2_EXT = 0x8791;
        public const ushort OP_LOG_BASE_2_EXT = 0x8792;
        public const ushort OP_POWER_EXT = 0x8793;
        public const ushort OP_RECIP_EXT = 0x8794;
        public const ushort OP_RECIP_SQRT_EXT = 0x8795;
        public const ushort OP_SUB_EXT = 0x8796;
        public const ushort OP_CROSS_PRODUCT_EXT = 0x8797;
        public const ushort OP_MULTIPLY_MATRIX_EXT = 0x8798;
        public const ushort OP_MOV_EXT = 0x8799;
        public const ushort OUTPUT_VERTEX_EXT = 0x879A;
        public const ushort OUTPUT_COLOR0_EXT = 0x879B;
        public const ushort OUTPUT_COLOR1_EXT = 0x879C;
        public const ushort OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
        public const ushort OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
        public const ushort OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
        public const ushort OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
        public const ushort OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
        public const ushort OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
        public const ushort OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
        public const ushort OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
        public const ushort OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
        public const ushort OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
        public const ushort OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
        public const ushort OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
        public const ushort OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
        public const ushort OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
        public const ushort OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
        public const ushort OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
        public const ushort OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
        public const ushort OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
        public const ushort OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
        public const ushort OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
        public const ushort OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
        public const ushort OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
        public const ushort OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
        public const ushort OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
        public const ushort OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
        public const ushort OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
        public const ushort OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
        public const ushort OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
        public const ushort OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
        public const ushort OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
        public const ushort OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
        public const ushort OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
        public const ushort OUTPUT_FOG_EXT = 0x87BD;
        public const ushort SCALAR_EXT = 0x87BE;
        public const ushort VECTOR_EXT = 0x87BF;
        public const ushort MATRIX_EXT = 0x87C0;
        public const ushort VARIANT_EXT = 0x87C1;
        public const ushort INVARIANT_EXT = 0x87C2;
        public const ushort LOCAL_CONSTANT_EXT = 0x87C3;
        public const ushort LOCAL_EXT = 0x87C4;
        public const ushort MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
        public const ushort MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
        public const ushort MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
        public const ushort MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
        public const ushort MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
        public const ushort MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
        public const ushort MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
        public const ushort MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
        public const ushort MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
        public const ushort MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
        public const ushort VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
        public const ushort VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
        public const ushort VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
        public const ushort VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
        public const ushort VERTEX_SHADER_LOCALS_EXT = 0x87D3;
        public const ushort VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
        public const ushort X_EXT = 0x87D5;
        public const ushort Y_EXT = 0x87D6;
        public const ushort Z_EXT = 0x87D7;
        public const ushort W_EXT = 0x87D8;
        public const ushort NEGATIVE_X_EXT = 0x87D9;
        public const ushort NEGATIVE_Y_EXT = 0x87DA;
        public const ushort NEGATIVE_Z_EXT = 0x87DB;
        public const ushort NEGATIVE_W_EXT = 0x87DC;
        public const ushort ZERO_EXT = 0x87DD;
        public const ushort ONE_EXT = 0x87DE;
        public const ushort NEGATIVE_ONE_EXT = 0x87DF;
        public const ushort NORMALIZED_RANGE_EXT = 0x87E0;
        public const ushort FULL_RANGE_EXT = 0x87E1;
        public const ushort CURRENT_VERTEX_EXT = 0x87E2;
        public const ushort MVP_MATRIX_EXT = 0x87E3;
        public const ushort VARIANT_VALUE_EXT = 0x87E4;
        public const ushort VARIANT_DATATYPE_EXT = 0x87E5;
        public const ushort VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
        public const ushort VARIANT_ARRAY_TYPE_EXT = 0x87E7;
        public const ushort VARIANT_ARRAY_EXT = 0x87E8;
        public const ushort VARIANT_ARRAY_POINTER_EXT = 0x87E9;
        public const ushort INVARIANT_VALUE_EXT = 0x87EA;
        public const ushort INVARIANT_DATATYPE_EXT = 0x87EB;
        public const ushort LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
        public const ushort LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
        public const ushort ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
        public const ushort PN_TRIANGLES_ATI = 0x87F0;
        public const ushort MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
        public const ushort PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
        public const ushort PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
        public const ushort PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
        public const ushort PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
        public const ushort PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
        public const ushort PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
        public const ushort PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
        public const ushort GL_3DC_X_AMD = 0x87F9;
        public const ushort GL_3DC_XY_AMD = 0x87FA;
        public const ushort VBO_FREE_MEMORY_ATI = 0x87FB;
        public const ushort TEXTURE_FREE_MEMORY_ATI = 0x87FC;
        public const ushort RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
        public const ushort NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
        public const ushort NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE;
        public const ushort PROGRAM_BINARY_FORMATS = 0x87FF;
        public const ushort PROGRAM_BINARY_FORMATS_OES = 0x87FF;
        public const ushort STENCIL_BACK_FUNC = 0x8800;
        public const ushort STENCIL_BACK_FUNC_ATI = 0x8800;
        public const ushort STENCIL_BACK_FAIL = 0x8801;
        public const ushort STENCIL_BACK_FAIL_ATI = 0x8801;
        public const ushort STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public const ushort STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
        public const ushort STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public const ushort STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
        public const ushort FRAGMENT_PROGRAM_ARB = 0x8804;
        public const ushort PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
        public const ushort PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
        public const ushort PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
        public const ushort PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
        public const ushort PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
        public const ushort PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
        public const ushort MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
        public const ushort MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
        public const ushort MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
        public const ushort MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
        public const ushort MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
        public const ushort MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
        // Unused 0x8811..0x8813. 
        public const ushort RGBA32F = 0x8814;
        public const ushort RGBA32F_ARB = 0x8814;
        public const ushort RGBA32F_EXT = 0x8814;
        public const ushort RGBA_FLOAT32_APPLE = 0x8814;
        public const ushort RGBA_FLOAT32_ATI = 0x8814;
        public const ushort RGB32F = 0x8815;
        public const ushort RGB32F_ARB = 0x8815;
        public const ushort RGB32F_EXT = 0x8815;
        public const ushort RGB_FLOAT32_APPLE = 0x8815;
        public const ushort RGB_FLOAT32_ATI = 0x8815;
        public const ushort ALPHA32F_ARB = 0x8816;
        public const ushort ALPHA32F_EXT = 0x8816;
        public const ushort ALPHA_FLOAT32_APPLE = 0x8816;
        public const ushort ALPHA_FLOAT32_ATI = 0x8816;
        public const ushort INTENSITY32F_ARB = 0x8817;
        public const ushort INTENSITY_FLOAT32_APPLE = 0x8817;
        public const ushort INTENSITY_FLOAT32_ATI = 0x8817;
        public const ushort LUMINANCE32F_ARB = 0x8818;
        public const ushort LUMINANCE32F_EXT = 0x8818;
        public const ushort LUMINANCE_FLOAT32_APPLE = 0x8818;
        public const ushort LUMINANCE_FLOAT32_ATI = 0x8818;
        public const ushort LUMINANCE_ALPHA32F_ARB = 0x8819;
        public const ushort LUMINANCE_ALPHA32F_EXT = 0x8819;
        public const ushort LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
        public const ushort LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
        public const ushort RGBA16F = 0x881A;
        public const ushort RGBA16F_ARB = 0x881A;
        public const ushort RGBA16F_EXT = 0x881A;
        public const ushort RGBA_FLOAT16_APPLE = 0x881A;
        public const ushort RGBA_FLOAT16_ATI = 0x881A;
        public const ushort RGB16F = 0x881B;
        public const ushort RGB16F_ARB = 0x881B;
        public const ushort RGB16F_EXT = 0x881B;
        public const ushort RGB_FLOAT16_APPLE = 0x881B;
        public const ushort RGB_FLOAT16_ATI = 0x881B;
        public const ushort ALPHA16F_ARB = 0x881C;
        public const ushort ALPHA16F_EXT = 0x881C;
        public const ushort ALPHA_FLOAT16_APPLE = 0x881C;
        public const ushort ALPHA_FLOAT16_ATI = 0x881C;
        public const ushort INTENSITY16F_ARB = 0x881D;
        public const ushort INTENSITY_FLOAT16_APPLE = 0x881D;
        public const ushort INTENSITY_FLOAT16_ATI = 0x881D;
        public const ushort LUMINANCE16F_ARB = 0x881E;
        public const ushort LUMINANCE16F_EXT = 0x881E;
        public const ushort LUMINANCE_FLOAT16_APPLE = 0x881E;
        public const ushort LUMINANCE_FLOAT16_ATI = 0x881E;
        public const ushort LUMINANCE_ALPHA16F_ARB = 0x881F;
        public const ushort LUMINANCE_ALPHA16F_EXT = 0x881F;
        public const ushort LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
        public const ushort LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
        public const ushort RGBA_FLOAT_MODE_ARB = 0x8820;
        public const ushort RGBA_FLOAT_MODE_ATI = 0x8820;
        // Unused 0x8821..0x8822. 
        public const ushort WRITEONLY_RENDERING_QCOM = 0x8823;
        public const ushort MAX_DRAW_BUFFERS = 0x8824;
        public const ushort MAX_DRAW_BUFFERS_ARB = 0x8824;
        public const ushort MAX_DRAW_BUFFERS_ATI = 0x8824;
        public const ushort MAX_DRAW_BUFFERS_EXT = 0x8824;
        public const ushort MAX_DRAW_BUFFERS_NV = 0x8824;
        public const ushort DRAW_BUFFER0 = 0x8825;
        public const ushort DRAW_BUFFER0_ARB = 0x8825;
        public const ushort DRAW_BUFFER0_ATI = 0x8825;
        public const ushort DRAW_BUFFER0_EXT = 0x8825;
        public const ushort DRAW_BUFFER0_NV = 0x8825;
        public const ushort DRAW_BUFFER1 = 0x8826;
        public const ushort DRAW_BUFFER1_ARB = 0x8826;
        public const ushort DRAW_BUFFER1_ATI = 0x8826;
        public const ushort DRAW_BUFFER1_EXT = 0x8826;
        public const ushort DRAW_BUFFER1_NV = 0x8826;
        public const ushort DRAW_BUFFER2 = 0x8827;
        public const ushort DRAW_BUFFER2_ARB = 0x8827;
        public const ushort DRAW_BUFFER2_ATI = 0x8827;
        public const ushort DRAW_BUFFER2_EXT = 0x8827;
        public const ushort DRAW_BUFFER2_NV = 0x8827;
        public const ushort DRAW_BUFFER3 = 0x8828;
        public const ushort DRAW_BUFFER3_ARB = 0x8828;
        public const ushort DRAW_BUFFER3_ATI = 0x8828;
        public const ushort DRAW_BUFFER3_EXT = 0x8828;
        public const ushort DRAW_BUFFER3_NV = 0x8828;
        public const ushort DRAW_BUFFER4 = 0x8829;
        public const ushort DRAW_BUFFER4_ARB = 0x8829;
        public const ushort DRAW_BUFFER4_ATI = 0x8829;
        public const ushort DRAW_BUFFER4_EXT = 0x8829;
        public const ushort DRAW_BUFFER4_NV = 0x8829;
        public const ushort DRAW_BUFFER5 = 0x882A;
        public const ushort DRAW_BUFFER5_ARB = 0x882A;
        public const ushort DRAW_BUFFER5_ATI = 0x882A;
        public const ushort DRAW_BUFFER5_EXT = 0x882A;
        public const ushort DRAW_BUFFER5_NV = 0x882A;
        public const ushort DRAW_BUFFER6 = 0x882B;
        public const ushort DRAW_BUFFER6_ARB = 0x882B;
        public const ushort DRAW_BUFFER6_ATI = 0x882B;
        public const ushort DRAW_BUFFER6_EXT = 0x882B;
        public const ushort DRAW_BUFFER6_NV = 0x882B;
        public const ushort DRAW_BUFFER7 = 0x882C;
        public const ushort DRAW_BUFFER7_ARB = 0x882C;
        public const ushort DRAW_BUFFER7_ATI = 0x882C;
        public const ushort DRAW_BUFFER7_EXT = 0x882C;
        public const ushort DRAW_BUFFER7_NV = 0x882C;
        public const ushort DRAW_BUFFER8 = 0x882D;
        public const ushort DRAW_BUFFER8_ARB = 0x882D;
        public const ushort DRAW_BUFFER8_ATI = 0x882D;
        public const ushort DRAW_BUFFER8_EXT = 0x882D;
        public const ushort DRAW_BUFFER8_NV = 0x882D;
        public const ushort DRAW_BUFFER9 = 0x882E;
        public const ushort DRAW_BUFFER9_ARB = 0x882E;
        public const ushort DRAW_BUFFER9_ATI = 0x882E;
        public const ushort DRAW_BUFFER9_EXT = 0x882E;
        public const ushort DRAW_BUFFER9_NV = 0x882E;
        public const ushort DRAW_BUFFER10 = 0x882F;
        public const ushort DRAW_BUFFER10_ARB = 0x882F;
        public const ushort DRAW_BUFFER10_ATI = 0x882F;
        public const ushort DRAW_BUFFER10_EXT = 0x882F;
        public const ushort DRAW_BUFFER10_NV = 0x882F;
        public const ushort DRAW_BUFFER11 = 0x8830;
        public const ushort DRAW_BUFFER11_ARB = 0x8830;
        public const ushort DRAW_BUFFER11_ATI = 0x8830;
        public const ushort DRAW_BUFFER11_EXT = 0x8830;
        public const ushort DRAW_BUFFER11_NV = 0x8830;
        public const ushort DRAW_BUFFER12 = 0x8831;
        public const ushort DRAW_BUFFER12_ARB = 0x8831;
        public const ushort DRAW_BUFFER12_ATI = 0x8831;
        public const ushort DRAW_BUFFER12_EXT = 0x8831;
        public const ushort DRAW_BUFFER12_NV = 0x8831;
        public const ushort DRAW_BUFFER13 = 0x8832;
        public const ushort DRAW_BUFFER13_ARB = 0x8832;
        public const ushort DRAW_BUFFER13_ATI = 0x8832;
        public const ushort DRAW_BUFFER13_EXT = 0x8832;
        public const ushort DRAW_BUFFER13_NV = 0x8832;
        public const ushort DRAW_BUFFER14 = 0x8833;
        public const ushort DRAW_BUFFER14_ARB = 0x8833;
        public const ushort DRAW_BUFFER14_ATI = 0x8833;
        public const ushort DRAW_BUFFER14_EXT = 0x8833;
        public const ushort DRAW_BUFFER14_NV = 0x8833;
        public const ushort DRAW_BUFFER15 = 0x8834;
        public const ushort DRAW_BUFFER15_ARB = 0x8834;
        public const ushort DRAW_BUFFER15_ATI = 0x8834;
        public const ushort DRAW_BUFFER15_EXT = 0x8834;
        public const ushort DRAW_BUFFER15_NV = 0x8834;
        public const ushort COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
        // Unused 0x8836. 
        public const ushort COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837;
        // Unused 0x8838..0x883C. 
        public const ushort BLEND_EQUATION_ALPHA = 0x883D;
        public const ushort BLEND_EQUATION_ALPHA_EXT = 0x883D;
        public const ushort BLEND_EQUATION_ALPHA_OES = 0x883D;
        // Unused 0x883E. 
        public const ushort SUBSAMPLE_DISTANCE_AMD = 0x883F;
        
        // . 
        public const ushort MATRIX_PALETTE_ARB = 0x8840;
        public const ushort MATRIX_PALETTE_OES = 0x8840;
        public const ushort MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
        public const ushort MAX_PALETTE_MATRICES_ARB = 0x8842;
        public const ushort MAX_PALETTE_MATRICES_OES = 0x8842;
        public const ushort CURRENT_PALETTE_MATRIX_ARB = 0x8843;
        public const ushort CURRENT_PALETTE_MATRIX_OES = 0x8843;
        public const ushort MATRIX_INDEX_ARRAY_ARB = 0x8844;
        public const ushort MATRIX_INDEX_ARRAY_OES = 0x8844;
        public const ushort CURRENT_MATRIX_INDEX_ARB = 0x8845;
        public const ushort MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
        public const ushort MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846;
        public const ushort MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
        public const ushort MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847;
        public const ushort MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
        public const ushort MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848;
        public const ushort MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
        public const ushort MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849;
        public const ushort TEXTURE_DEPTH_SIZE = 0x884A;
        public const ushort TEXTURE_DEPTH_SIZE_ARB = 0x884A;
        public const ushort DEPTH_TEXTURE_MODE = 0x884B;
        public const ushort DEPTH_TEXTURE_MODE_ARB = 0x884B;
        public const ushort TEXTURE_COMPARE_MODE = 0x884C;
        public const ushort TEXTURE_COMPARE_MODE_ARB = 0x884C;
        public const ushort TEXTURE_COMPARE_MODE_EXT = 0x884C;
        public const ushort TEXTURE_COMPARE_FUNC = 0x884D;
        public const ushort TEXTURE_COMPARE_FUNC_ARB = 0x884D;
        public const ushort TEXTURE_COMPARE_FUNC_EXT = 0x884D;
        public const ushort COMPARE_R_TO_TEXTURE = 0x884E;
        public const ushort COMPARE_R_TO_TEXTURE_ARB = 0x884E;
        public const ushort COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
        public const ushort COMPARE_REF_TO_TEXTURE = 0x884E;
        public const ushort COMPARE_REF_TO_TEXTURE_EXT = 0x884E;
        public const ushort TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
        
        // . 
        public const ushort OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
        public const ushort OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
        public const ushort OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
        public const ushort OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
        public const ushort OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
        public const ushort OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
        public const ushort OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
        public const ushort OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
        public const ushort DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
        public const ushort DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
        public const ushort DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
        public const ushort DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
        public const ushort DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
        public const ushort DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
        public const ushort HILO8_NV = 0x885E;
        public const ushort SIGNED_HILO8_NV = 0x885F;
        public const ushort FORCE_BLUE_TO_ONE_NV = 0x8860;
        public const ushort POINT_SPRITE = 0x8861;
        public const ushort POINT_SPRITE_ARB = 0x8861;
        public const ushort POINT_SPRITE_NV = 0x8861;
        public const ushort POINT_SPRITE_OES = 0x8861;
        public const ushort COORD_REPLACE = 0x8862;
        public const ushort COORD_REPLACE_ARB = 0x8862;
        public const ushort COORD_REPLACE_NV = 0x8862;
        public const ushort COORD_REPLACE_OES = 0x8862;
        public const ushort POINT_SPRITE_R_MODE_NV = 0x8863;
        public const ushort PIXEL_COUNTER_BITS_NV = 0x8864;
        public const ushort QUERY_COUNTER_BITS = 0x8864;
        public const ushort QUERY_COUNTER_BITS_ARB = 0x8864;
        public const ushort QUERY_COUNTER_BITS_EXT = 0x8864;
        public const ushort CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
        public const ushort CURRENT_QUERY = 0x8865;
        public const ushort CURRENT_QUERY_ARB = 0x8865;
        public const ushort CURRENT_QUERY_EXT = 0x8865;
        public const ushort PIXEL_COUNT_NV = 0x8866;
        public const ushort QUERY_RESULT = 0x8866;
        public const ushort QUERY_RESULT_ARB = 0x8866;
        public const ushort QUERY_RESULT_EXT = 0x8866;
        public const ushort PIXEL_COUNT_AVAILABLE_NV = 0x8867;
        public const ushort QUERY_RESULT_AVAILABLE = 0x8867;
        public const ushort QUERY_RESULT_AVAILABLE_ARB = 0x8867;
        public const ushort QUERY_RESULT_AVAILABLE_EXT = 0x8867;
        public const ushort MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
        public const ushort MAX_VERTEX_ATTRIBS = 0x8869;
        public const ushort MAX_VERTEX_ATTRIBS_ARB = 0x8869;
        public const ushort VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public const ushort VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
        // Unused 0x886B. 
        public const ushort MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
        public const ushort MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C;
        public const ushort MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886C;
        public const ushort MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
        public const ushort MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D;
        public const ushort MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886D;
        public const ushort DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
        public const ushort DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
        public const ushort FRAGMENT_PROGRAM_NV = 0x8870;
        public const ushort MAX_TEXTURE_COORDS = 0x8871;
        public const ushort MAX_TEXTURE_COORDS_ARB = 0x8871;
        public const ushort MAX_TEXTURE_COORDS_NV = 0x8871;
        public const ushort MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public const ushort MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
        public const ushort MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
        public const ushort FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
        public const ushort PROGRAM_ERROR_STRING_ARB = 0x8874;
        public const ushort PROGRAM_ERROR_STRING_NV = 0x8874;
        public const ushort PROGRAM_FORMAT_ASCII_ARB = 0x8875;
        public const ushort PROGRAM_FORMAT_ARB = 0x8876;
        // Unused 0x8877. Should have been assigned to PROGRAM_BINDING_ARB
        public const ushort WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
        public const ushort READ_PIXEL_DATA_RANGE_NV = 0x8879;
        public const ushort WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
        public const ushort READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
        public const ushort WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
        public const ushort READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
        // Unused 0x887E. 
        public const ushort GEOMETRY_SHADER_INVOCATIONS = 0x887F;
        public const ushort GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F;
        public const ushort GEOMETRY_SHADER_INVOCATIONS_OES = 0x887F;
        public const ushort FLOAT_R_NV = 0x8880;
        public const ushort FLOAT_RG_NV = 0x8881;
        public const ushort FLOAT_RGB_NV = 0x8882;
        public const ushort FLOAT_RGBA_NV = 0x8883;
        public const ushort FLOAT_R16_NV = 0x8884;
        public const ushort FLOAT_R32_NV = 0x8885;
        public const ushort FLOAT_RG16_NV = 0x8886;
        public const ushort FLOAT_RG32_NV = 0x8887;
        public const ushort FLOAT_RGB16_NV = 0x8888;
        public const ushort FLOAT_RGB32_NV = 0x8889;
        public const ushort FLOAT_RGBA16_NV = 0x888A;
        public const ushort FLOAT_RGBA32_NV = 0x888B;
        public const ushort TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
        public const ushort FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
        public const ushort FLOAT_RGBA_MODE_NV = 0x888E;
        public const ushort TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
        public const ushort DEPTH_BOUNDS_TEST_EXT = 0x8890;
        public const ushort DEPTH_BOUNDS_EXT = 0x8891;
        public const ushort ARRAY_BUFFER = 0x8892;
        public const ushort ARRAY_BUFFER_ARB = 0x8892;
        public const ushort ELEMENT_ARRAY_BUFFER = 0x8893;
        public const ushort ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
        public const ushort ARRAY_BUFFER_BINDING = 0x8894;
        public const ushort ARRAY_BUFFER_BINDING_ARB = 0x8894;
        public const ushort ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public const ushort ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
        public const ushort VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public const ushort VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
        public const ushort NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public const ushort NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
        public const ushort COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public const ushort COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
        public const ushort INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        public const ushort INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
        public const ushort TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public const ushort TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
        public const ushort EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        public const ushort EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
        public const ushort SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        public const ushort SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
        public const ushort FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
        public const ushort FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        public const ushort FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
        public const ushort WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        public const ushort WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
        public const ushort WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E;
        public const ushort VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public const ushort VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
        public const ushort PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
        public const ushort MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
        public const ushort PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
        public const ushort MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
        public const ushort PROGRAM_TEMPORARIES_ARB = 0x88A4;
        public const ushort MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
        public const ushort PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
        public const ushort MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
        public const ushort PROGRAM_PARAMETERS_ARB = 0x88A8;
        public const ushort MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
        public const ushort PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
        public const ushort MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
        public const ushort PROGRAM_ATTRIBS_ARB = 0x88AC;
        public const ushort MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
        public const ushort PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
        public const ushort MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
        public const ushort PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
        public const ushort MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
        public const ushort PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
        public const ushort MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
        public const ushort MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
        public const ushort MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
        public const ushort PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
        public const ushort TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
        public const ushort READ_ONLY = 0x88B8;
        public const ushort READ_ONLY_ARB = 0x88B8;
        public const ushort WRITE_ONLY = 0x88B9;
        public const ushort WRITE_ONLY_ARB = 0x88B9;
        public const ushort WRITE_ONLY_OES = 0x88B9;
        public const ushort READ_WRITE = 0x88BA;
        public const ushort READ_WRITE_ARB = 0x88BA;
        public const ushort BUFFER_ACCESS = 0x88BB;
        public const ushort BUFFER_ACCESS_ARB = 0x88BB;
        public const ushort BUFFER_ACCESS_OES = 0x88BB;
        public const ushort BUFFER_MAPPED = 0x88BC;
        public const ushort BUFFER_MAPPED_ARB = 0x88BC;
        public const ushort BUFFER_MAPPED_OES = 0x88BC;
        public const ushort BUFFER_MAP_POINTER = 0x88BD;
        public const ushort BUFFER_MAP_POINTER_ARB = 0x88BD;
        public const ushort BUFFER_MAP_POINTER_OES = 0x88BD;
        public const ushort WRITE_DISCARD_NV = 0x88BE;
        public const ushort TIME_ELAPSED = 0x88BF;
        public const ushort TIME_ELAPSED_EXT = 0x88BF;
        public const ushort MATRIX0_ARB = 0x88C0;
        public const ushort MATRIX1_ARB = 0x88C1;
        public const ushort MATRIX2_ARB = 0x88C2;
        public const ushort MATRIX3_ARB = 0x88C3;
        public const ushort MATRIX4_ARB = 0x88C4;
        public const ushort MATRIX5_ARB = 0x88C5;
        public const ushort MATRIX6_ARB = 0x88C6;
        public const ushort MATRIX7_ARB = 0x88C7;
        public const ushort MATRIX8_ARB = 0x88C8;
        public const ushort MATRIX9_ARB = 0x88C9;
        public const ushort MATRIX10_ARB = 0x88CA;
        public const ushort MATRIX11_ARB = 0x88CB;
        public const ushort MATRIX12_ARB = 0x88CC;
        public const ushort MATRIX13_ARB = 0x88CD;
        public const ushort MATRIX14_ARB = 0x88CE;
        public const ushort MATRIX15_ARB = 0x88CF;
        public const ushort MATRIX16_ARB = 0x88D0;
        public const ushort MATRIX17_ARB = 0x88D1;
        public const ushort MATRIX18_ARB = 0x88D2;
        public const ushort MATRIX19_ARB = 0x88D3;
        public const ushort MATRIX20_ARB = 0x88D4;
        public const ushort MATRIX21_ARB = 0x88D5;
        public const ushort MATRIX22_ARB = 0x88D6;
        public const ushort MATRIX23_ARB = 0x88D7;
        public const ushort MATRIX24_ARB = 0x88D8;
        public const ushort MATRIX25_ARB = 0x88D9;
        public const ushort MATRIX26_ARB = 0x88DA;
        public const ushort MATRIX27_ARB = 0x88DB;
        public const ushort MATRIX28_ARB = 0x88DC;
        public const ushort MATRIX29_ARB = 0x88DD;
        public const ushort MATRIX30_ARB = 0x88DE;
        public const ushort MATRIX31_ARB = 0x88DF;
        public const ushort STREAM_DRAW = 0x88E0;
        public const ushort STREAM_DRAW_ARB = 0x88E0;
        public const ushort STREAM_READ = 0x88E1;
        public const ushort STREAM_READ_ARB = 0x88E1;
        public const ushort STREAM_COPY = 0x88E2;
        public const ushort STREAM_COPY_ARB = 0x88E2;
        // Unused 0x88E3. To extend ARB_vbo
        public const ushort STATIC_DRAW = 0x88E4;
        public const ushort STATIC_DRAW_ARB = 0x88E4;
        public const ushort STATIC_READ = 0x88E5;
        public const ushort STATIC_READ_ARB = 0x88E5;
        public const ushort STATIC_COPY = 0x88E6;
        public const ushort STATIC_COPY_ARB = 0x88E6;
        // Unused 0x88E7. To extend ARB_vbo
        public const ushort DYNAMIC_DRAW = 0x88E8;
        public const ushort DYNAMIC_DRAW_ARB = 0x88E8;
        public const ushort DYNAMIC_READ = 0x88E9;
        public const ushort DYNAMIC_READ_ARB = 0x88E9;
        public const ushort DYNAMIC_COPY = 0x88EA;
        public const ushort DYNAMIC_COPY_ARB = 0x88EA;
        public const ushort PIXEL_PACK_BUFFER = 0x88EB;
        public const ushort PIXEL_PACK_BUFFER_ARB = 0x88EB;
        public const ushort PIXEL_PACK_BUFFER_EXT = 0x88EB;
        public const ushort PIXEL_PACK_BUFFER_NV = 0x88EB;
        public const ushort PIXEL_UNPACK_BUFFER = 0x88EC;
        public const ushort PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
        public const ushort PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
        public const ushort PIXEL_UNPACK_BUFFER_NV = 0x88EC;
        public const ushort PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public const ushort PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
        public const ushort PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
        public const ushort PIXEL_PACK_BUFFER_BINDING_NV = 0x88ED;
        public const ushort ETC1_SRGB8_NV = 0x88EE;
        public const ushort PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public const ushort PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
        public const ushort PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
        public const ushort PIXEL_UNPACK_BUFFER_BINDING_NV = 0x88EF;
        public const ushort DEPTH24_STENCIL8 = 0x88F0;
        public const ushort DEPTH24_STENCIL8_EXT = 0x88F0;
        public const ushort DEPTH24_STENCIL8_OES = 0x88F0;
        public const ushort TEXTURE_STENCIL_SIZE = 0x88F1;
        public const ushort TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
        public const ushort STENCIL_TAG_BITS_EXT = 0x88F2;
        public const ushort STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
        public const ushort MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
        public const ushort MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
        public const ushort MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
        public const ushort MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
        public const ushort MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
        public const ushort SRC1_COLOR = 0x88F9;
        public const ushort SRC1_COLOR_EXT = 0x88F9;
        public const ushort ONE_MINUS_SRC1_COLOR = 0x88FA;
        public const ushort ONE_MINUS_SRC1_COLOR_EXT = 0x88FA;
        public const ushort ONE_MINUS_SRC1_ALPHA = 0x88FB;
        public const ushort ONE_MINUS_SRC1_ALPHA_EXT = 0x88FB;
        public const ushort MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
        public const ushort MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FC;
        public const ushort VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
        public const ushort VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
        public const ushort VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
        public const ushort VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
        public const ushort VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
        public const ushort VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
        public const ushort VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE;
        public const ushort VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE;
        public const ushort MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
        public const ushort MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
        public const ushort MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
        public const ushort MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
        public const ushort MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
        public const ushort MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
        public const ushort MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
        public const ushort MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
        public const ushort PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
        public const ushort PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
        public const ushort MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
        public const ushort MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
        public const ushort STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
        public const ushort ACTIVE_STENCIL_FACE_EXT = 0x8911;
        public const ushort MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
        // Unused 0x8913. 
        public const ushort SAMPLES_PASSED = 0x8914;
        public const ushort SAMPLES_PASSED_ARB = 0x8914;
        // Unused 0x8915. 
        public const ushort GEOMETRY_VERTICES_OUT = 0x8916;
        public const ushort GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916;
        public const ushort GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916;
        public const ushort GEOMETRY_INPUT_TYPE = 0x8917;
        public const ushort GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917;
        public const ushort GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917;
        public const ushort GEOMETRY_OUTPUT_TYPE = 0x8918;
        public const ushort GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918;
        public const ushort GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918;
        public const ushort SAMPLER_BINDING = 0x8919;
        public const ushort CLAMP_VERTEX_COLOR = 0x891A;
        public const ushort CLAMP_VERTEX_COLOR_ARB = 0x891A;
        public const ushort CLAMP_FRAGMENT_COLOR = 0x891B;
        public const ushort CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
        public const ushort CLAMP_READ_COLOR = 0x891C;
        public const ushort CLAMP_READ_COLOR_ARB = 0x891C;
        public const ushort FIXED_ONLY = 0x891D;
        public const ushort FIXED_ONLY_ARB = 0x891D;
        public const ushort TESS_CONTROL_PROGRAM_NV = 0x891E;
        public const ushort TESS_EVALUATION_PROGRAM_NV = 0x891F;
        
        // . 
        public const ushort FRAGMENT_SHADER_ATI = 0x8920;
        public const ushort REG_0_ATI = 0x8921;
        public const ushort REG_1_ATI = 0x8922;
        public const ushort REG_2_ATI = 0x8923;
        public const ushort REG_3_ATI = 0x8924;
        public const ushort REG_4_ATI = 0x8925;
        public const ushort REG_5_ATI = 0x8926;
        public const ushort REG_6_ATI = 0x8927;
        public const ushort REG_7_ATI = 0x8928;
        public const ushort REG_8_ATI = 0x8929;
        public const ushort REG_9_ATI = 0x892A;
        public const ushort REG_10_ATI = 0x892B;
        public const ushort REG_11_ATI = 0x892C;
        public const ushort REG_12_ATI = 0x892D;
        public const ushort REG_13_ATI = 0x892E;
        public const ushort REG_14_ATI = 0x892F;
        public const ushort REG_15_ATI = 0x8930;
        public const ushort REG_16_ATI = 0x8931;
        public const ushort REG_17_ATI = 0x8932;
        public const ushort REG_18_ATI = 0x8933;
        public const ushort REG_19_ATI = 0x8934;
        public const ushort REG_20_ATI = 0x8935;
        public const ushort REG_21_ATI = 0x8936;
        public const ushort REG_22_ATI = 0x8937;
        public const ushort REG_23_ATI = 0x8938;
        public const ushort REG_24_ATI = 0x8939;
        public const ushort REG_25_ATI = 0x893A;
        public const ushort REG_26_ATI = 0x893B;
        public const ushort REG_27_ATI = 0x893C;
        public const ushort REG_28_ATI = 0x893D;
        public const ushort REG_29_ATI = 0x893E;
        public const ushort REG_30_ATI = 0x893F;
        public const ushort REG_31_ATI = 0x8940;
        public const ushort CON_0_ATI = 0x8941;
        public const ushort CON_1_ATI = 0x8942;
        public const ushort CON_2_ATI = 0x8943;
        public const ushort CON_3_ATI = 0x8944;
        public const ushort CON_4_ATI = 0x8945;
        public const ushort CON_5_ATI = 0x8946;
        public const ushort CON_6_ATI = 0x8947;
        public const ushort CON_7_ATI = 0x8948;
        public const ushort CON_8_ATI = 0x8949;
        public const ushort CON_9_ATI = 0x894A;
        public const ushort CON_10_ATI = 0x894B;
        public const ushort CON_11_ATI = 0x894C;
        public const ushort CON_12_ATI = 0x894D;
        public const ushort CON_13_ATI = 0x894E;
        public const ushort CON_14_ATI = 0x894F;
        public const ushort CON_15_ATI = 0x8950;
        public const ushort CON_16_ATI = 0x8951;
        public const ushort CON_17_ATI = 0x8952;
        public const ushort CON_18_ATI = 0x8953;
        public const ushort CON_19_ATI = 0x8954;
        public const ushort CON_20_ATI = 0x8955;
        public const ushort CON_21_ATI = 0x8956;
        public const ushort CON_22_ATI = 0x8957;
        public const ushort CON_23_ATI = 0x8958;
        public const ushort CON_24_ATI = 0x8959;
        public const ushort CON_25_ATI = 0x895A;
        public const ushort CON_26_ATI = 0x895B;
        public const ushort CON_27_ATI = 0x895C;
        public const ushort CON_28_ATI = 0x895D;
        public const ushort CON_29_ATI = 0x895E;
        public const ushort CON_30_ATI = 0x895F;
        public const ushort CON_31_ATI = 0x8960;
        public const ushort MOV_ATI = 0x8961;
        public const ushort ADD_ATI = 0x8963;
        public const ushort MUL_ATI = 0x8964;
        public const ushort SUB_ATI = 0x8965;
        public const ushort DOT3_ATI = 0x8966;
        public const ushort DOT4_ATI = 0x8967;
        public const ushort MAD_ATI = 0x8968;
        public const ushort LERP_ATI = 0x8969;
        public const ushort CND_ATI = 0x896A;
        public const ushort CND0_ATI = 0x896B;
        public const ushort DOT2_ADD_ATI = 0x896C;
        public const ushort SECONDARY_INTERPOLATOR_ATI = 0x896D;
        public const ushort NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
        public const ushort NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
        public const ushort NUM_PASSES_ATI = 0x8970;
        public const ushort NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
        public const ushort NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
        public const ushort NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
        public const ushort NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
        public const ushort COLOR_ALPHA_PAIRING_ATI = 0x8975;
        public const ushort SWIZZLE_STR_ATI = 0x8976;
        public const ushort SWIZZLE_STQ_ATI = 0x8977;
        public const ushort SWIZZLE_STR_DR_ATI = 0x8978;
        public const ushort SWIZZLE_STQ_DQ_ATI = 0x8979;
        public const ushort SWIZZLE_STRQ_ATI = 0x897A;
        public const ushort SWIZZLE_STRQ_DQ_ATI = 0x897B;
        // Unused 0x897C..0x897F. 
        
        // . 
        public const ushort INTERLACE_OML = 0x8980;
        public const ushort INTERLACE_READ_OML = 0x8981;
        public const ushort FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
        public const ushort FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
        public const ushort PACK_RESAMPLE_OML = 0x8984;
        public const ushort UNPACK_RESAMPLE_OML = 0x8985;
        public const ushort RESAMPLE_REPLICATE_OML = 0x8986;
        public const ushort RESAMPLE_ZERO_FILL_OML = 0x8987;
        public const ushort RESAMPLE_AVERAGE_OML = 0x8988;
        public const ushort RESAMPLE_DECIMATE_OML = 0x8989;
        public const ushort POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
        public const ushort POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
        public const ushort POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
        public const ushort MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
        public const ushort PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
        public const ushort TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;
        
        // . 
        // Unused 0x8990..0x899F. 
        
        // . 
        // Unused 0x89A0..0x89FF. 
        
        // . 
        public const ushort VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
        public const ushort VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
        public const ushort VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
        public const ushort VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
        public const ushort VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
        public const ushort VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
        public const ushort VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
        public const ushort VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
        public const ushort VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
        public const ushort VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
        public const ushort DRAW_PIXELS_APPLE = 0x8A0A;
        public const ushort FENCE_APPLE = 0x8A0B;
        public const ushort ELEMENT_ARRAY_APPLE = 0x8A0C;
        public const ushort ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
        public const ushort ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
        public const ushort COLOR_FLOAT_APPLE = 0x8A0F;
        // Unused 0x8A10. Unknown extension (Khronos error #632)
        public const ushort UNIFORM_BUFFER = 0x8A11;
        public const ushort BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
        public const ushort BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
        public const ushort AUX_DEPTH_STENCIL_APPLE = 0x8A14;
        public const ushort PACK_ROW_BYTES_APPLE = 0x8A15;
        public const ushort UNPACK_ROW_BYTES_APPLE = 0x8A16;
        // Unused 0x8A17..0x8A18. 
        public const ushort RELEASED_APPLE = 0x8A19;
        public const ushort VOLATILE_APPLE = 0x8A1A;
        public const ushort RETAINED_APPLE = 0x8A1B;
        public const ushort UNDEFINED_APPLE = 0x8A1C;
        public const ushort PURGEABLE_APPLE = 0x8A1D;
        // Unused 0x8A1E. 
        public const ushort RGB_422_APPLE = 0x8A1F;
        // Unused 0x8A20..0x8A27. 
        public const ushort UNIFORM_BUFFER_BINDING = 0x8A28;
        public const ushort UNIFORM_BUFFER_START = 0x8A29;
        public const ushort UNIFORM_BUFFER_SIZE = 0x8A2A;
        public const ushort MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
        public const ushort MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
        public const ushort MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C;
        public const ushort MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2C;
        public const ushort MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
        public const ushort MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
        public const ushort MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
        public const ushort MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
        public const ushort MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
        public const ushort MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
        public const ushort MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32;
        public const ushort MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32;
        public const ushort MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
        public const ushort UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
        public const ushort ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
        public const ushort ACTIVE_UNIFORM_BLOCKS = 0x8A36;
        public const ushort UNIFORM_TYPE = 0x8A37;
        public const ushort UNIFORM_SIZE = 0x8A38;
        public const ushort UNIFORM_NAME_LENGTH = 0x8A39;
        public const ushort UNIFORM_BLOCK_INDEX = 0x8A3A;
        public const ushort UNIFORM_OFFSET = 0x8A3B;
        public const ushort UNIFORM_ARRAY_STRIDE = 0x8A3C;
        public const ushort UNIFORM_MATRIX_STRIDE = 0x8A3D;
        public const ushort UNIFORM_IS_ROW_MAJOR = 0x8A3E;
        public const ushort UNIFORM_BLOCK_BINDING = 0x8A3F;
        public const ushort UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
        public const ushort UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
        public const ushort UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
        public const ushort UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
        // Unused 0x8A47. 
        public const ushort TEXTURE_SRGB_DECODE_EXT = 0x8A48;
        public const ushort DECODE_EXT = 0x8A49;
        public const ushort SKIP_DECODE_EXT = 0x8A4A;
        // Unused 0x8A4B..0x8A4E. 
        public const ushort PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
        // Unused 0x8A50. 
        public const ushort RGB_RAW_422_APPLE = 0x8A51;
        public const ushort FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
        public const ushort SYNC_OBJECT_APPLE = 0x8A53;
        public const ushort COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54;
        public const ushort COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55;
        public const ushort COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56;
        public const ushort COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57;
        // Unused 0x8A58..0x8A7F. 
        
        // . 
        // Unused 0x8A80..0x8AEF. 
        
        // . For Brian Paul
        // Unused 0x8AF0..0x8B2F. 
        
        // ShaderType. 
        public const ushort FRAGMENT_SHADER = 0x8B30;
        public const ushort FRAGMENT_SHADER_ARB = 0x8B30;
        public const ushort VERTEX_SHADER = 0x8B31;
        public const ushort VERTEX_SHADER_ARB = 0x8B31;
        // Unused 0x8B32..0x8B3F. For shader types
        
        // ContainerType. 
        public const ushort PROGRAM_OBJECT_ARB = 0x8B40;
        public const ushort PROGRAM_OBJECT_EXT = 0x8B40;
        // Unused 0x8B41..0x8B47. For container types
        
        // . 
        public const ushort SHADER_OBJECT_ARB = 0x8B48;
        public const ushort SHADER_OBJECT_EXT = 0x8B48;
        public const ushort MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public const ushort MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
        public const ushort MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public const ushort MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
        public const ushort MAX_VARYING_FLOATS = 0x8B4B;
        public const ushort MAX_VARYING_COMPONENTS = 0x8B4B;
        public const ushort MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
        public const ushort MAX_VARYING_FLOATS_ARB = 0x8B4B;
        public const ushort MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public const ushort MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
        public const ushort MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public const ushort MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
        public const ushort OBJECT_TYPE_ARB = 0x8B4E;
        public const ushort SHADER_TYPE = 0x8B4F;
        public const ushort OBJECT_SUBTYPE_ARB = 0x8B4F;
        
        // AttributeType. 
        public const ushort FLOAT_VEC2 = 0x8B50;
        public const ushort FLOAT_VEC2_ARB = 0x8B50;
        public const ushort FLOAT_VEC3 = 0x8B51;
        public const ushort FLOAT_VEC3_ARB = 0x8B51;
        public const ushort FLOAT_VEC4 = 0x8B52;
        public const ushort FLOAT_VEC4_ARB = 0x8B52;
        public const ushort INT_VEC2 = 0x8B53;
        public const ushort INT_VEC2_ARB = 0x8B53;
        public const ushort INT_VEC3 = 0x8B54;
        public const ushort INT_VEC3_ARB = 0x8B54;
        public const ushort INT_VEC4 = 0x8B55;
        public const ushort INT_VEC4_ARB = 0x8B55;
        public const ushort BOOL = 0x8B56;
        public const ushort BOOL_ARB = 0x8B56;
        public const ushort BOOL_VEC2 = 0x8B57;
        public const ushort BOOL_VEC2_ARB = 0x8B57;
        public const ushort BOOL_VEC3 = 0x8B58;
        public const ushort BOOL_VEC3_ARB = 0x8B58;
        public const ushort BOOL_VEC4 = 0x8B59;
        public const ushort BOOL_VEC4_ARB = 0x8B59;
        public const ushort FLOAT_MAT2 = 0x8B5A;
        public const ushort FLOAT_MAT2_ARB = 0x8B5A;
        public const ushort FLOAT_MAT3 = 0x8B5B;
        public const ushort FLOAT_MAT3_ARB = 0x8B5B;
        public const ushort FLOAT_MAT4 = 0x8B5C;
        public const ushort FLOAT_MAT4_ARB = 0x8B5C;
        public const ushort SAMPLER_1D = 0x8B5D;
        public const ushort SAMPLER_1D_ARB = 0x8B5D;
        public const ushort SAMPLER_2D = 0x8B5E;
        public const ushort SAMPLER_2D_ARB = 0x8B5E;
        public const ushort SAMPLER_3D = 0x8B5F;
        public const ushort SAMPLER_3D_ARB = 0x8B5F;
        public const ushort SAMPLER_3D_OES = 0x8B5F;
        public const ushort SAMPLER_CUBE = 0x8B60;
        public const ushort SAMPLER_CUBE_ARB = 0x8B60;
        public const ushort SAMPLER_1D_SHADOW = 0x8B61;
        public const ushort SAMPLER_1D_SHADOW_ARB = 0x8B61;
        public const ushort SAMPLER_2D_SHADOW = 0x8B62;
        public const ushort SAMPLER_2D_SHADOW_ARB = 0x8B62;
        public const ushort SAMPLER_2D_SHADOW_EXT = 0x8B62;
        public const ushort SAMPLER_2D_RECT = 0x8B63;
        public const ushort SAMPLER_2D_RECT_ARB = 0x8B63;
        public const ushort SAMPLER_2D_RECT_SHADOW = 0x8B64;
        public const ushort SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
        public const ushort FLOAT_MAT2x3 = 0x8B65;
        public const ushort FLOAT_MAT2x3_NV = 0x8B65;
        public const ushort FLOAT_MAT2x4 = 0x8B66;
        public const ushort FLOAT_MAT2x4_NV = 0x8B66;
        public const ushort FLOAT_MAT3x2 = 0x8B67;
        public const ushort FLOAT_MAT3x2_NV = 0x8B67;
        public const ushort FLOAT_MAT3x4 = 0x8B68;
        public const ushort FLOAT_MAT3x4_NV = 0x8B68;
        public const ushort FLOAT_MAT4x2 = 0x8B69;
        public const ushort FLOAT_MAT4x2_NV = 0x8B69;
        public const ushort FLOAT_MAT4x3 = 0x8B6A;
        public const ushort FLOAT_MAT4x3_NV = 0x8B6A;
        // Unused 0x8B6B..0x8B7F. For attribute types
        
        // . 
        public const ushort DELETE_STATUS = 0x8B80;
        public const ushort OBJECT_DELETE_STATUS_ARB = 0x8B80;
        public const ushort COMPILE_STATUS = 0x8B81;
        public const ushort OBJECT_COMPILE_STATUS_ARB = 0x8B81;
        public const ushort LINK_STATUS = 0x8B82;
        public const ushort OBJECT_LINK_STATUS_ARB = 0x8B82;
        public const ushort VALIDATE_STATUS = 0x8B83;
        public const ushort OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
        public const ushort INFO_LOG_LENGTH = 0x8B84;
        public const ushort OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
        public const ushort ATTACHED_SHADERS = 0x8B85;
        public const ushort OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
        public const ushort ACTIVE_UNIFORMS = 0x8B86;
        public const ushort OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
        public const ushort ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public const ushort OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
        public const ushort SHADER_SOURCE_LENGTH = 0x8B88;
        public const ushort OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
        public const ushort ACTIVE_ATTRIBUTES = 0x8B89;
        public const ushort OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
        public const ushort ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public const ushort OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
        public const ushort FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public const ushort FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public const ushort FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
        public const ushort SHADING_LANGUAGE_VERSION = 0x8B8C;
        public const ushort SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
        public const ushort CURRENT_PROGRAM = 0x8B8D;
        public const ushort ACTIVE_PROGRAM_EXT = 0x8B8D;
        // Unused 0x8B8E..0x8B8F. 
        
        // . 
        public const ushort PALETTE4_RGB8_OES = 0x8B90;
        public const ushort PALETTE4_RGBA8_OES = 0x8B91;
        public const ushort PALETTE4_R5_G6_B5_OES = 0x8B92;
        public const ushort PALETTE4_RGBA4_OES = 0x8B93;
        public const ushort PALETTE4_RGB5_A1_OES = 0x8B94;
        public const ushort PALETTE8_RGB8_OES = 0x8B95;
        public const ushort PALETTE8_RGBA8_OES = 0x8B96;
        public const ushort PALETTE8_R5_G6_B5_OES = 0x8B97;
        public const ushort PALETTE8_RGBA4_OES = 0x8B98;
        public const ushort PALETTE8_RGB5_A1_OES = 0x8B99;
        public const ushort IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
        public const ushort IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
        public const ushort IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
        public const ushort IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
        public const ushort POINT_SIZE_ARRAY_OES = 0x8B9C;
        public const ushort TEXTURE_CROP_RECT_OES = 0x8B9D;
        public const ushort MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
        public const ushort POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;
        
        // . 
        // Unused 0x8BA0..0x8BAF. 
        
        // . 
        public const ushort FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0;
        public const ushort FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1;
        public const ushort FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2;
        public const ushort FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3;
        public const ushort VERTEX_PROGRAM_POSITION_MESA = 0x8BB4;
        public const ushort VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5;
        public const ushort VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6;
        public const ushort VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7;
        public const ushort TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8;
        public const ushort TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9;
        public const ushort TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA;
        public const ushort FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
        public const ushort FRAMEBUFFER_FLIP_X_MESA = 0x8BBC;
        public const ushort FRAMEBUFFER_SWAP_XY_MESA = 0x8BBD;
        
        // . Reassigned from AMD to QCOM
        public const ushort COUNTER_TYPE_AMD = 0x8BC0;
        public const ushort COUNTER_RANGE_AMD = 0x8BC1;
        public const ushort UNSIGNED_INT64_AMD = 0x8BC2;
        public const ushort PERCENTAGE_AMD = 0x8BC3;
        public const ushort PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
        public const ushort PERFMON_RESULT_SIZE_AMD = 0x8BC5;
        public const ushort PERFMON_RESULT_AMD = 0x8BC6;
        // Unused 0x8BC7..0x8BD1. 
        public const ushort TEXTURE_WIDTH_QCOM = 0x8BD2;
        public const ushort TEXTURE_HEIGHT_QCOM = 0x8BD3;
        public const ushort TEXTURE_DEPTH_QCOM = 0x8BD4;
        public const ushort TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
        public const ushort TEXTURE_FORMAT_QCOM = 0x8BD6;
        public const ushort TEXTURE_TYPE_QCOM = 0x8BD7;
        public const ushort TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
        public const ushort TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
        public const ushort TEXTURE_TARGET_QCOM = 0x8BDA;
        public const ushort TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
        public const ushort STATE_RESTORE = 0x8BDC;
        // Unused 0x8BDD..0x8BE6. 
        public const ushort SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7;
        // Unused 0x8BE8..0x8BEF. 
        public const ushort TEXTURE_PROTECTED_EXT = 0x8BFA;
        public const ushort TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x8BFB;
        public const ushort TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x8BFC;
        public const ushort TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x8BFD;
        public const ushort TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x8BFE;
        public const ushort FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x8BFF;
        
        // . 
        public const ushort COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
        public const ushort COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
        public const ushort COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
        public const ushort COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
        public const ushort MODULATE_COLOR_IMG = 0x8C04;
        public const ushort RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
        public const ushort TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
        public const ushort FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
        public const ushort FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
        public const ushort ADD_BLEND_IMG = 0x8C09;
        public const ushort SGX_BINARY_IMG = 0x8C0A;
        // Unused 0x8C0B..0x8C0F. 
        
        // . For Pat Brown
        public const ushort TEXTURE_RED_TYPE = 0x8C10;
        public const ushort TEXTURE_RED_TYPE_ARB = 0x8C10;
        public const ushort TEXTURE_GREEN_TYPE = 0x8C11;
        public const ushort TEXTURE_GREEN_TYPE_ARB = 0x8C11;
        public const ushort TEXTURE_BLUE_TYPE = 0x8C12;
        public const ushort TEXTURE_BLUE_TYPE_ARB = 0x8C12;
        public const ushort TEXTURE_ALPHA_TYPE = 0x8C13;
        public const ushort TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
        public const ushort TEXTURE_LUMINANCE_TYPE = 0x8C14;
        public const ushort TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
        public const ushort TEXTURE_INTENSITY_TYPE = 0x8C15;
        public const ushort TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
        public const ushort TEXTURE_DEPTH_TYPE = 0x8C16;
        public const ushort TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
        public const ushort UNSIGNED_NORMALIZED = 0x8C17;
        public const ushort UNSIGNED_NORMALIZED_ARB = 0x8C17;
        public const ushort UNSIGNED_NORMALIZED_EXT = 0x8C17;
        public const ushort TEXTURE_1D_ARRAY = 0x8C18;
        public const ushort TEXTURE_1D_ARRAY_EXT = 0x8C18;
        public const ushort PROXY_TEXTURE_1D_ARRAY = 0x8C19;
        public const ushort PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
        public const ushort TEXTURE_2D_ARRAY = 0x8C1A;
        public const ushort TEXTURE_2D_ARRAY_EXT = 0x8C1A;
        public const ushort PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
        public const ushort PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
        public const ushort TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
        public const ushort TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
        public const ushort TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
        public const ushort TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
        // Unused 0x8C1E..0x8C25. 
        public const ushort GEOMETRY_PROGRAM_NV = 0x8C26;
        public const ushort MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
        public const ushort MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
        public const ushort MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
        public const ushort MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
        public const ushort MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
        public const ushort MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29;
        public const ushort TEXTURE_BUFFER = 0x8C2A;
        public const ushort TEXTURE_BUFFER_ARB = 0x8C2A;
        public const ushort TEXTURE_BUFFER_EXT = 0x8C2A;
        public const ushort TEXTURE_BUFFER_OES = 0x8C2A;
        public const ushort TEXTURE_BUFFER_BINDING = 0x8C2A;
        public const ushort TEXTURE_BUFFER_BINDING_EXT = 0x8C2A;
        public const ushort TEXTURE_BUFFER_BINDING_OES = 0x8C2A;
        public const ushort MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
        public const ushort MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
        public const ushort MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
        public const ushort MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2B;
        public const ushort TEXTURE_BINDING_BUFFER = 0x8C2C;
        public const ushort TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
        public const ushort TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
        public const ushort TEXTURE_BINDING_BUFFER_OES = 0x8C2C;
        public const ushort TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
        public const ushort TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
        public const ushort TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
        public const ushort TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2D;
        public const ushort TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
        public const ushort TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
        public const ushort ANY_SAMPLES_PASSED = 0x8C2F;
        public const ushort ANY_SAMPLES_PASSED_EXT = 0x8C2F;
        // Unused 0x8C30..0x8C35. 
        public const ushort SAMPLE_SHADING = 0x8C36;
        public const ushort SAMPLE_SHADING_ARB = 0x8C36;
        public const ushort SAMPLE_SHADING_OES = 0x8C36;
        public const ushort MIN_SAMPLE_SHADING_VALUE = 0x8C37;
        public const ushort MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
        public const ushort MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37;
        // Unused 0x8C38..0x8C39. 
        public const ushort R11F_G11F_B10F = 0x8C3A;
        public const ushort R11F_G11F_B10F_APPLE = 0x8C3A;
        public const ushort R11F_G11F_B10F_EXT = 0x8C3A;
        public const ushort UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
        public const ushort UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B;
        public const ushort UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
        public const ushort RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
        public const ushort RGB9_E5 = 0x8C3D;
        public const ushort RGB9_E5_APPLE = 0x8C3D;
        public const ushort RGB9_E5_EXT = 0x8C3D;
        public const ushort UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
        public const ushort UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E;
        public const ushort UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
        public const ushort TEXTURE_SHARED_SIZE = 0x8C3F;
        public const ushort TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
        public const ushort SRGB = 0x8C40;
        public const ushort SRGB_EXT = 0x8C40;
        public const ushort SRGB8 = 0x8C41;
        public const ushort SRGB8_EXT = 0x8C41;
        public const ushort SRGB8_NV = 0x8C41;
        public const ushort SRGB_ALPHA = 0x8C42;
        public const ushort SRGB_ALPHA_EXT = 0x8C42;
        public const ushort SRGB8_ALPHA8 = 0x8C43;
        public const ushort SRGB8_ALPHA8_EXT = 0x8C43;
        public const ushort SLUMINANCE_ALPHA = 0x8C44;
        public const ushort SLUMINANCE_ALPHA_EXT = 0x8C44;
        public const ushort SLUMINANCE_ALPHA_NV = 0x8C44;
        public const ushort SLUMINANCE8_ALPHA8 = 0x8C45;
        public const ushort SLUMINANCE8_ALPHA8_EXT = 0x8C45;
        public const ushort SLUMINANCE8_ALPHA8_NV = 0x8C45;
        public const ushort SLUMINANCE = 0x8C46;
        public const ushort SLUMINANCE_EXT = 0x8C46;
        public const ushort SLUMINANCE_NV = 0x8C46;
        public const ushort SLUMINANCE8 = 0x8C47;
        public const ushort SLUMINANCE8_EXT = 0x8C47;
        public const ushort SLUMINANCE8_NV = 0x8C47;
        public const ushort COMPRESSED_SRGB = 0x8C48;
        public const ushort COMPRESSED_SRGB_EXT = 0x8C48;
        public const ushort COMPRESSED_SRGB_ALPHA = 0x8C49;
        public const ushort COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
        public const ushort COMPRESSED_SLUMINANCE = 0x8C4A;
        public const ushort COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
        public const ushort COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
        public const ushort COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
        public const ushort COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
        public const ushort COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
        public const ushort COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F;
        // Unused 0x8C50..0x8C6F. 
        public const ushort COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
        public const ushort COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
        public const ushort COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
        public const ushort COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
        public const ushort TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
        public const ushort TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
        public const ushort TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
        public const ushort TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
        public const ushort BACK_PRIMARY_COLOR_NV = 0x8C77;
        public const ushort BACK_SECONDARY_COLOR_NV = 0x8C78;
        public const ushort TEXTURE_COORD_NV = 0x8C79;
        public const ushort CLIP_DISTANCE_NV = 0x8C7A;
        public const ushort VERTEX_ID_NV = 0x8C7B;
        public const ushort PRIMITIVE_ID_NV = 0x8C7C;
        public const ushort GENERIC_ATTRIB_NV = 0x8C7D;
        public const ushort TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
        public const ushort ACTIVE_VARYINGS_NV = 0x8C81;
        public const ushort ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
        public const ushort TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
        public const ushort TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
        public const ushort TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
        public const ushort TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
        public const ushort PRIMITIVES_GENERATED = 0x8C87;
        public const ushort PRIMITIVES_GENERATED_EXT = 0x8C87;
        public const ushort PRIMITIVES_GENERATED_NV = 0x8C87;
        public const ushort PRIMITIVES_GENERATED_OES = 0x8C87;
        public const ushort TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
        public const ushort TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
        public const ushort TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
        public const ushort RASTERIZER_DISCARD = 0x8C89;
        public const ushort RASTERIZER_DISCARD_EXT = 0x8C89;
        public const ushort RASTERIZER_DISCARD_NV = 0x8C89;
        public const ushort MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
        public const ushort MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
        public const ushort MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
        public const ushort MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
        public const ushort INTERLEAVED_ATTRIBS = 0x8C8C;
        public const ushort INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
        public const ushort INTERLEAVED_ATTRIBS_NV = 0x8C8C;
        public const ushort SEPARATE_ATTRIBS = 0x8C8D;
        public const ushort SEPARATE_ATTRIBS_EXT = 0x8C8D;
        public const ushort SEPARATE_ATTRIBS_NV = 0x8C8D;
        public const ushort TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
        
        // . For Affie Munshi. Reassigned from AMD to QCOM (error #5874)
        public const ushort MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = 0x8C90;
        public const ushort MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = 0x8C91;
        public const ushort ATC_RGB_AMD = 0x8C92;
        public const ushort ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
        // Unused 0x8C94..0x8C9F. 
        
        // . 
        public const ushort POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public const ushort LOWER_LEFT = 0x8CA1;
        public const ushort LOWER_LEFT_EXT = 0x8CA1;
        public const ushort UPPER_LEFT = 0x8CA2;
        public const ushort UPPER_LEFT_EXT = 0x8CA2;
        public const ushort STENCIL_BACK_REF = 0x8CA3;
        public const ushort STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public const ushort STENCIL_BACK_WRITEMASK = 0x8CA5;
        public const ushort DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
        public const ushort DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
        public const ushort DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
        public const ushort DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
        public const ushort DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6;
        public const ushort FRAMEBUFFER_BINDING = 0x8CA6;
        public const ushort FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
        public const ushort FRAMEBUFFER_BINDING_EXT = 0x8CA6;
        public const ushort FRAMEBUFFER_BINDING_OES = 0x8CA6;
        public const ushort RENDERBUFFER_BINDING = 0x8CA7;
        public const ushort RENDERBUFFER_BINDING_ANGLE = 0x8CA7;
        public const ushort RENDERBUFFER_BINDING_EXT = 0x8CA7;
        public const ushort RENDERBUFFER_BINDING_OES = 0x8CA7;
        public const ushort READ_FRAMEBUFFER = 0x8CA8;
        public const ushort READ_FRAMEBUFFER_ANGLE = 0x8CA8;
        public const ushort READ_FRAMEBUFFER_APPLE = 0x8CA8;
        public const ushort READ_FRAMEBUFFER_EXT = 0x8CA8;
        public const ushort READ_FRAMEBUFFER_NV = 0x8CA8;
        public const ushort DRAW_FRAMEBUFFER = 0x8CA9;
        public const ushort DRAW_FRAMEBUFFER_ANGLE = 0x8CA9;
        public const ushort DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
        public const ushort DRAW_FRAMEBUFFER_EXT = 0x8CA9;
        public const ushort DRAW_FRAMEBUFFER_NV = 0x8CA9;
        public const ushort READ_FRAMEBUFFER_BINDING = 0x8CAA;
        public const ushort READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA;
        public const ushort READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
        public const ushort READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
        public const ushort READ_FRAMEBUFFER_BINDING_NV = 0x8CAA;
        public const ushort RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
        public const ushort RENDERBUFFER_SAMPLES = 0x8CAB;
        public const ushort RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB;
        public const ushort RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
        public const ushort RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
        public const ushort RENDERBUFFER_SAMPLES_NV = 0x8CAB;
        public const ushort DEPTH_COMPONENT32F = 0x8CAC;
        public const ushort DEPTH32F_STENCIL8 = 0x8CAD;
        // Unused 0x8CAE..0x8CAF. 
        
        // . For Barthold Lichtenbelt 2004/12/1
        // Unused 0x8CB0..0x8CCF. 
        
        // . Framebuffer object specification + headroom
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0;
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
        public const ushort FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
        public const ushort FRAMEBUFFER_COMPLETE = 0x8CD5;
        public const ushort FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
        public const ushort FRAMEBUFFER_COMPLETE_OES = 0x8CD5;
        public const ushort FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
        public const ushort FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
        public const ushort FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6;
        public const ushort FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
        public const ushort FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
        public const ushort FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7;
        // Unused 0x8CD8. Removed 2005/09/26 in revision #117 of the FBO extension spec
        public const ushort FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
        public const ushort FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
        public const ushort FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9;
        public const ushort FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
        public const ushort FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA;
        public const ushort FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
        public const ushort FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
        public const ushort FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB;
        public const ushort FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
        public const ushort FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
        public const ushort FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC;
        public const ushort FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
        public const ushort FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
        public const ushort FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD;
        // Unused 0x8CDE. Removed 2005/05/31 in revision #113 of the FBO extension spec
        public const ushort MAX_COLOR_ATTACHMENTS = 0x8CDF;
        public const ushort MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
        public const ushort MAX_COLOR_ATTACHMENTS_NV = 0x8CDF;
        public const ushort COLOR_ATTACHMENT0 = 0x8CE0;
        public const ushort COLOR_ATTACHMENT0_EXT = 0x8CE0;
        public const ushort COLOR_ATTACHMENT0_NV = 0x8CE0;
        public const ushort COLOR_ATTACHMENT0_OES = 0x8CE0;
        public const ushort COLOR_ATTACHMENT1 = 0x8CE1;
        public const ushort COLOR_ATTACHMENT1_EXT = 0x8CE1;
        public const ushort COLOR_ATTACHMENT1_NV = 0x8CE1;
        public const ushort COLOR_ATTACHMENT2 = 0x8CE2;
        public const ushort COLOR_ATTACHMENT2_EXT = 0x8CE2;
        public const ushort COLOR_ATTACHMENT2_NV = 0x8CE2;
        public const ushort COLOR_ATTACHMENT3 = 0x8CE3;
        public const ushort COLOR_ATTACHMENT3_EXT = 0x8CE3;
        public const ushort COLOR_ATTACHMENT3_NV = 0x8CE3;
        public const ushort COLOR_ATTACHMENT4 = 0x8CE4;
        public const ushort COLOR_ATTACHMENT4_EXT = 0x8CE4;
        public const ushort COLOR_ATTACHMENT4_NV = 0x8CE4;
        public const ushort COLOR_ATTACHMENT5 = 0x8CE5;
        public const ushort COLOR_ATTACHMENT5_EXT = 0x8CE5;
        public const ushort COLOR_ATTACHMENT5_NV = 0x8CE5;
        public const ushort COLOR_ATTACHMENT6 = 0x8CE6;
        public const ushort COLOR_ATTACHMENT6_EXT = 0x8CE6;
        public const ushort COLOR_ATTACHMENT6_NV = 0x8CE6;
        public const ushort COLOR_ATTACHMENT7 = 0x8CE7;
        public const ushort COLOR_ATTACHMENT7_EXT = 0x8CE7;
        public const ushort COLOR_ATTACHMENT7_NV = 0x8CE7;
        public const ushort COLOR_ATTACHMENT8 = 0x8CE8;
        public const ushort COLOR_ATTACHMENT8_EXT = 0x8CE8;
        public const ushort COLOR_ATTACHMENT8_NV = 0x8CE8;
        public const ushort COLOR_ATTACHMENT9 = 0x8CE9;
        public const ushort COLOR_ATTACHMENT9_EXT = 0x8CE9;
        public const ushort COLOR_ATTACHMENT9_NV = 0x8CE9;
        public const ushort COLOR_ATTACHMENT10 = 0x8CEA;
        public const ushort COLOR_ATTACHMENT10_EXT = 0x8CEA;
        public const ushort COLOR_ATTACHMENT10_NV = 0x8CEA;
        public const ushort COLOR_ATTACHMENT11 = 0x8CEB;
        public const ushort COLOR_ATTACHMENT11_EXT = 0x8CEB;
        public const ushort COLOR_ATTACHMENT11_NV = 0x8CEB;
        public const ushort COLOR_ATTACHMENT12 = 0x8CEC;
        public const ushort COLOR_ATTACHMENT12_EXT = 0x8CEC;
        public const ushort COLOR_ATTACHMENT12_NV = 0x8CEC;
        public const ushort COLOR_ATTACHMENT13 = 0x8CED;
        public const ushort COLOR_ATTACHMENT13_EXT = 0x8CED;
        public const ushort COLOR_ATTACHMENT13_NV = 0x8CED;
        public const ushort COLOR_ATTACHMENT14 = 0x8CEE;
        public const ushort COLOR_ATTACHMENT14_EXT = 0x8CEE;
        public const ushort COLOR_ATTACHMENT14_NV = 0x8CEE;
        public const ushort COLOR_ATTACHMENT15 = 0x8CEF;
        public const ushort COLOR_ATTACHMENT15_EXT = 0x8CEF;
        public const ushort COLOR_ATTACHMENT15_NV = 0x8CEF;
        public const ushort COLOR_ATTACHMENT16 = 0x8CF0;
        public const ushort COLOR_ATTACHMENT17 = 0x8CF1;
        public const ushort COLOR_ATTACHMENT18 = 0x8CF2;
        public const ushort COLOR_ATTACHMENT19 = 0x8CF3;
        public const ushort COLOR_ATTACHMENT20 = 0x8CF4;
        public const ushort COLOR_ATTACHMENT21 = 0x8CF5;
        public const ushort COLOR_ATTACHMENT22 = 0x8CF6;
        public const ushort COLOR_ATTACHMENT23 = 0x8CF7;
        public const ushort COLOR_ATTACHMENT24 = 0x8CF8;
        public const ushort COLOR_ATTACHMENT25 = 0x8CF9;
        public const ushort COLOR_ATTACHMENT26 = 0x8CFA;
        public const ushort COLOR_ATTACHMENT27 = 0x8CFB;
        public const ushort COLOR_ATTACHMENT28 = 0x8CFC;
        public const ushort COLOR_ATTACHMENT29 = 0x8CFD;
        public const ushort COLOR_ATTACHMENT30 = 0x8CFE;
        public const ushort COLOR_ATTACHMENT31 = 0x8CFF;
        public const ushort DEPTH_ATTACHMENT = 0x8D00;
        public const ushort DEPTH_ATTACHMENT_EXT = 0x8D00;
        public const ushort DEPTH_ATTACHMENT_OES = 0x8D00;
        // Unused 0x8D01..0x8D1F. For depth attachments 16-31
        public const ushort STENCIL_ATTACHMENT = 0x8D20;
        public const ushort STENCIL_ATTACHMENT_EXT = 0x8D20;
        public const ushort STENCIL_ATTACHMENT_OES = 0x8D20;
        // Unused 0x8D21..0x8D3F. For stencil attachments 16-31
        public const ushort FRAMEBUFFER = 0x8D40;
        public const ushort FRAMEBUFFER_EXT = 0x8D40;
        public const ushort FRAMEBUFFER_OES = 0x8D40;
        public const ushort RENDERBUFFER = 0x8D41;
        public const ushort RENDERBUFFER_EXT = 0x8D41;
        public const ushort RENDERBUFFER_OES = 0x8D41;
        public const ushort RENDERBUFFER_WIDTH = 0x8D42;
        public const ushort RENDERBUFFER_WIDTH_EXT = 0x8D42;
        public const ushort RENDERBUFFER_WIDTH_OES = 0x8D42;
        public const ushort RENDERBUFFER_HEIGHT = 0x8D43;
        public const ushort RENDERBUFFER_HEIGHT_EXT = 0x8D43;
        public const ushort RENDERBUFFER_HEIGHT_OES = 0x8D43;
        public const ushort RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
        public const ushort RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
        public const ushort RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44;
        // Unused 0x8D45. Was for GL_STENCIL_INDEX_EXT, but now use core STENCIL_INDEX instead
        public const ushort STENCIL_INDEX1 = 0x8D46;
        public const ushort STENCIL_INDEX1_EXT = 0x8D46;
        public const ushort STENCIL_INDEX1_OES = 0x8D46;
        public const ushort STENCIL_INDEX4 = 0x8D47;
        public const ushort STENCIL_INDEX4_EXT = 0x8D47;
        public const ushort STENCIL_INDEX4_OES = 0x8D47;
        public const ushort STENCIL_INDEX8 = 0x8D48;
        public const ushort STENCIL_INDEX8_EXT = 0x8D48;
        public const ushort STENCIL_INDEX8_OES = 0x8D48;
        public const ushort STENCIL_INDEX16 = 0x8D49;
        public const ushort STENCIL_INDEX16_EXT = 0x8D49;
        // Unused 0x8D4A..0x8D4F. For additional stencil formats
        public const ushort RENDERBUFFER_RED_SIZE = 0x8D50;
        public const ushort RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
        public const ushort RENDERBUFFER_RED_SIZE_OES = 0x8D50;
        public const ushort RENDERBUFFER_GREEN_SIZE = 0x8D51;
        public const ushort RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
        public const ushort RENDERBUFFER_GREEN_SIZE_OES = 0x8D51;
        public const ushort RENDERBUFFER_BLUE_SIZE = 0x8D52;
        public const ushort RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
        public const ushort RENDERBUFFER_BLUE_SIZE_OES = 0x8D52;
        public const ushort RENDERBUFFER_ALPHA_SIZE = 0x8D53;
        public const ushort RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
        public const ushort RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53;
        public const ushort RENDERBUFFER_DEPTH_SIZE = 0x8D54;
        public const ushort RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
        public const ushort RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54;
        public const ushort RENDERBUFFER_STENCIL_SIZE = 0x8D55;
        public const ushort RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
        public const ushort RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56;
        public const ushort MAX_SAMPLES = 0x8D57;
        public const ushort MAX_SAMPLES_ANGLE = 0x8D57;
        public const ushort MAX_SAMPLES_APPLE = 0x8D57;
        public const ushort MAX_SAMPLES_EXT = 0x8D57;
        public const ushort MAX_SAMPLES_NV = 0x8D57;
        // Unused 0x8D58..0x8D5F. 
        
        // . 
        public const ushort TEXTURE_GEN_STR_OES = 0x8D60;
        public const ushort HALF_FLOAT_OES = 0x8D61;
        public const ushort RGB565_OES = 0x8D62;
        public const ushort RGB565 = 0x8D62;
        // Unused 0x8D63. Was GL_TEXTURE_IMMUTABLE_LEVELS in draft ES 3.0 spec
        public const ushort ETC1_RGB8_OES = 0x8D64;
        public const ushort TEXTURE_EXTERNAL_OES = 0x8D65;
        public const ushort SAMPLER_EXTERNAL_OES = 0x8D66;
        public const ushort TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
        public const ushort REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
        public const ushort PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
        public const ushort ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
        public const ushort ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A;
        public const ushort MAX_ELEMENT_INDEX = 0x8D6B;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
        // Unused 0x8D6D..0x8D6F. 
        
        // . For Pat Brown 2005/10/13
        public const ushort RGBA32UI = 0x8D70;
        public const ushort RGBA32UI_EXT = 0x8D70;
        public const ushort RGB32UI = 0x8D71;
        public const ushort RGB32UI_EXT = 0x8D71;
        public const ushort ALPHA32UI_EXT = 0x8D72;
        public const ushort INTENSITY32UI_EXT = 0x8D73;
        public const ushort LUMINANCE32UI_EXT = 0x8D74;
        public const ushort LUMINANCE_ALPHA32UI_EXT = 0x8D75;
        public const ushort RGBA16UI = 0x8D76;
        public const ushort RGBA16UI_EXT = 0x8D76;
        public const ushort RGB16UI = 0x8D77;
        public const ushort RGB16UI_EXT = 0x8D77;
        public const ushort ALPHA16UI_EXT = 0x8D78;
        public const ushort INTENSITY16UI_EXT = 0x8D79;
        public const ushort LUMINANCE16UI_EXT = 0x8D7A;
        public const ushort LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
        public const ushort RGBA8UI = 0x8D7C;
        public const ushort RGBA8UI_EXT = 0x8D7C;
        public const ushort RGB8UI = 0x8D7D;
        public const ushort RGB8UI_EXT = 0x8D7D;
        public const ushort ALPHA8UI_EXT = 0x8D7E;
        public const ushort INTENSITY8UI_EXT = 0x8D7F;
        public const ushort LUMINANCE8UI_EXT = 0x8D80;
        public const ushort LUMINANCE_ALPHA8UI_EXT = 0x8D81;
        public const ushort RGBA32I = 0x8D82;
        public const ushort RGBA32I_EXT = 0x8D82;
        public const ushort RGB32I = 0x8D83;
        public const ushort RGB32I_EXT = 0x8D83;
        public const ushort ALPHA32I_EXT = 0x8D84;
        public const ushort INTENSITY32I_EXT = 0x8D85;
        public const ushort LUMINANCE32I_EXT = 0x8D86;
        public const ushort LUMINANCE_ALPHA32I_EXT = 0x8D87;
        public const ushort RGBA16I = 0x8D88;
        public const ushort RGBA16I_EXT = 0x8D88;
        public const ushort RGB16I = 0x8D89;
        public const ushort RGB16I_EXT = 0x8D89;
        public const ushort ALPHA16I_EXT = 0x8D8A;
        public const ushort INTENSITY16I_EXT = 0x8D8B;
        public const ushort LUMINANCE16I_EXT = 0x8D8C;
        public const ushort LUMINANCE_ALPHA16I_EXT = 0x8D8D;
        public const ushort RGBA8I = 0x8D8E;
        public const ushort RGBA8I_EXT = 0x8D8E;
        public const ushort RGB8I = 0x8D8F;
        public const ushort RGB8I_EXT = 0x8D8F;
        public const ushort ALPHA8I_EXT = 0x8D90;
        public const ushort INTENSITY8I_EXT = 0x8D91;
        public const ushort LUMINANCE8I_EXT = 0x8D92;
        public const ushort LUMINANCE_ALPHA8I_EXT = 0x8D93;
        public const ushort RED_INTEGER = 0x8D94;
        public const ushort RED_INTEGER_EXT = 0x8D94;
        public const ushort GREEN_INTEGER = 0x8D95;
        public const ushort GREEN_INTEGER_EXT = 0x8D95;
        public const ushort BLUE_INTEGER = 0x8D96;
        public const ushort BLUE_INTEGER_EXT = 0x8D96;
        public const ushort ALPHA_INTEGER = 0x8D97;
        public const ushort ALPHA_INTEGER_EXT = 0x8D97;
        public const ushort RGB_INTEGER = 0x8D98;
        public const ushort RGB_INTEGER_EXT = 0x8D98;
        public const ushort RGBA_INTEGER = 0x8D99;
        public const ushort RGBA_INTEGER_EXT = 0x8D99;
        public const ushort BGR_INTEGER = 0x8D9A;
        public const ushort BGR_INTEGER_EXT = 0x8D9A;
        public const ushort BGRA_INTEGER = 0x8D9B;
        public const ushort BGRA_INTEGER_EXT = 0x8D9B;
        public const ushort LUMINANCE_INTEGER_EXT = 0x8D9C;
        public const ushort LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
        public const ushort RGBA_INTEGER_MODE_EXT = 0x8D9E;
        public const ushort INT_2_10_10_10_REV = 0x8D9F;
        public const ushort MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
        public const ushort MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
        public const ushort VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
        public const ushort GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
        public const ushort FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
        public const ushort MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
        public const ushort MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
        public const ushort FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
        public const ushort FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
        public const ushort FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
        public const ushort FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
        public const ushort FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
        public const ushort LAYER_NV = 0x8DAA;
        public const ushort DEPTH_COMPONENT32F_NV = 0x8DAB;
        public const ushort DEPTH32F_STENCIL8_NV = 0x8DAC;
        public const ushort FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
        public const ushort FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
        public const ushort SHADER_INCLUDE_ARB = 0x8DAE;
        public const ushort DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
        // Unused 0x8DB0..0x8DB8. 
        public const ushort FRAMEBUFFER_SRGB = 0x8DB9;
        public const ushort FRAMEBUFFER_SRGB_EXT = 0x8DB9;
        public const ushort FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
        public const ushort COMPRESSED_RED_RGTC1 = 0x8DBB;
        public const ushort COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
        public const ushort COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
        public const ushort COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
        public const ushort COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
        public const ushort COMPRESSED_RG_RGTC2 = 0x8DBD;
        public const ushort COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
        public const ushort COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
        public const ushort SAMPLER_1D_ARRAY = 0x8DC0;
        public const ushort SAMPLER_1D_ARRAY_EXT = 0x8DC0;
        public const ushort SAMPLER_2D_ARRAY = 0x8DC1;
        public const ushort SAMPLER_2D_ARRAY_EXT = 0x8DC1;
        public const ushort SAMPLER_BUFFER = 0x8DC2;
        public const ushort SAMPLER_BUFFER_EXT = 0x8DC2;
        public const ushort SAMPLER_BUFFER_OES = 0x8DC2;
        public const ushort SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
        public const ushort SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
        public const ushort SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
        public const ushort SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
        public const ushort SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4;
        public const ushort SAMPLER_CUBE_SHADOW = 0x8DC5;
        public const ushort SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
        public const ushort SAMPLER_CUBE_SHADOW_NV = 0x8DC5;
        public const ushort UNSIGNED_INT_VEC2 = 0x8DC6;
        public const ushort UNSIGNED_INT_VEC2_EXT = 0x8DC6;
        public const ushort UNSIGNED_INT_VEC3 = 0x8DC7;
        public const ushort UNSIGNED_INT_VEC3_EXT = 0x8DC7;
        public const ushort UNSIGNED_INT_VEC4 = 0x8DC8;
        public const ushort UNSIGNED_INT_VEC4_EXT = 0x8DC8;
        public const ushort INT_SAMPLER_1D = 0x8DC9;
        public const ushort INT_SAMPLER_1D_EXT = 0x8DC9;
        public const ushort INT_SAMPLER_2D = 0x8DCA;
        public const ushort INT_SAMPLER_2D_EXT = 0x8DCA;
        public const ushort INT_SAMPLER_3D = 0x8DCB;
        public const ushort INT_SAMPLER_3D_EXT = 0x8DCB;
        public const ushort INT_SAMPLER_CUBE = 0x8DCC;
        public const ushort INT_SAMPLER_CUBE_EXT = 0x8DCC;
        public const ushort INT_SAMPLER_2D_RECT = 0x8DCD;
        public const ushort INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
        public const ushort INT_SAMPLER_1D_ARRAY = 0x8DCE;
        public const ushort INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
        public const ushort INT_SAMPLER_2D_ARRAY = 0x8DCF;
        public const ushort INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
        public const ushort INT_SAMPLER_BUFFER = 0x8DD0;
        public const ushort INT_SAMPLER_BUFFER_EXT = 0x8DD0;
        public const ushort INT_SAMPLER_BUFFER_OES = 0x8DD0;
        public const ushort UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
        public const ushort UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
        public const ushort UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
        public const ushort UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
        public const ushort UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
        public const ushort UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
        public const ushort UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
        public const ushort UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
        public const ushort UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
        public const ushort UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
        public const ushort UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
        public const ushort UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
        public const ushort UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
        public const ushort UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
        public const ushort UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8;
        public const ushort GEOMETRY_SHADER = 0x8DD9;
        public const ushort GEOMETRY_SHADER_ARB = 0x8DD9;
        public const ushort GEOMETRY_SHADER_EXT = 0x8DD9;
        public const ushort GEOMETRY_SHADER_OES = 0x8DD9;
        public const ushort GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
        public const ushort GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
        public const ushort GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
        public const ushort GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
        public const ushort GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
        public const ushort GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
        public const ushort MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
        public const ushort MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
        public const ushort MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
        public const ushort MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
        public const ushort MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
        public const ushort MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
        public const ushort MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
        public const ushort MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDF;
        public const ushort MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
        public const ushort MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
        public const ushort MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
        public const ushort MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0;
        public const ushort MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
        public const ushort MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
        public const ushort MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
        public const ushort MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1;
        public const ushort MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
        public const ushort MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
        public const ushort MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
        public const ushort ACTIVE_SUBROUTINES = 0x8DE5;
        public const ushort ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
        public const ushort MAX_SUBROUTINES = 0x8DE7;
        public const ushort MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
        public const ushort NAMED_STRING_LENGTH_ARB = 0x8DE9;
        public const ushort NAMED_STRING_TYPE_ARB = 0x8DEA;
        // Unused 0x8DEB..0x8DEC. 
        public const ushort MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
        public const ushort UNIFORM_BUFFER_EXT = 0x8DEE;
        public const ushort UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
        
        // . 
        public const ushort LOW_FLOAT = 0x8DF0;
        public const ushort MEDIUM_FLOAT = 0x8DF1;
        public const ushort HIGH_FLOAT = 0x8DF2;
        public const ushort LOW_INT = 0x8DF3;
        public const ushort MEDIUM_INT = 0x8DF4;
        public const ushort HIGH_INT = 0x8DF5;
        public const ushort UNSIGNED_INT_10_10_10_2_OES = 0x8DF6;
        public const ushort INT_10_10_10_2_OES = 0x8DF7;
        public const ushort SHADER_BINARY_FORMATS = 0x8DF8;
        public const ushort NUM_SHADER_BINARY_FORMATS = 0x8DF9;
        public const ushort SHADER_COMPILER = 0x8DFA;
        public const ushort MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
        public const ushort MAX_VARYING_VECTORS = 0x8DFC;
        public const ushort MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
        // Unused 0x8DFE..0x8E0F. 
        
        // . For Michael Gold 2006/08/07
        public const ushort RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
        public const ushort MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
        public const ushort MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
        public const ushort QUERY_WAIT = 0x8E13;
        public const ushort QUERY_WAIT_NV = 0x8E13;
        public const ushort QUERY_NO_WAIT = 0x8E14;
        public const ushort QUERY_NO_WAIT_NV = 0x8E14;
        public const ushort QUERY_BY_REGION_WAIT = 0x8E15;
        public const ushort QUERY_BY_REGION_WAIT_NV = 0x8E15;
        public const ushort QUERY_BY_REGION_NO_WAIT = 0x8E16;
        public const ushort QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
        public const ushort QUERY_WAIT_INVERTED = 0x8E17;
        public const ushort QUERY_NO_WAIT_INVERTED = 0x8E18;
        public const ushort QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
        public const ushort QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
        public const ushort POLYGON_OFFSET_CLAMP = 0x8E1B;
        public const ushort POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
        // Unused 0x8E1C..0x8E1D. 
        public const ushort MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
        public const ushort MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E;
        public const ushort MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1E;
        public const ushort MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
        public const ushort MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F;
        public const ushort MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1F;
        public const ushort COLOR_SAMPLES_NV = 0x8E20;
        // Unused 0x8E21. 
        public const ushort TRANSFORM_FEEDBACK = 0x8E22;
        public const ushort TRANSFORM_FEEDBACK_NV = 0x8E22;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
        public const ushort TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
        public const ushort TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
        public const ushort TRANSFORM_FEEDBACK_BINDING = 0x8E25;
        public const ushort TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
        public const ushort FRAME_NV = 0x8E26;
        public const ushort FIELDS_NV = 0x8E27;
        public const ushort CURRENT_TIME_NV = 0x8E28;
        public const ushort TIMESTAMP = 0x8E28;
        public const ushort TIMESTAMP_EXT = 0x8E28;
        public const ushort NUM_FILL_STREAMS_NV = 0x8E29;
        public const ushort PRESENT_TIME_NV = 0x8E2A;
        public const ushort PRESENT_DURATION_NV = 0x8E2B;
        public const ushort DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C;
        public const ushort PROGRAM_MATRIX_EXT = 0x8E2D;
        public const ushort TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
        public const ushort PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
        // Unused 0x8E30..0x8E41. 
        public const ushort TEXTURE_SWIZZLE_R = 0x8E42;
        public const ushort TEXTURE_SWIZZLE_R_EXT = 0x8E42;
        public const ushort TEXTURE_SWIZZLE_G = 0x8E43;
        public const ushort TEXTURE_SWIZZLE_G_EXT = 0x8E43;
        public const ushort TEXTURE_SWIZZLE_B = 0x8E44;
        public const ushort TEXTURE_SWIZZLE_B_EXT = 0x8E44;
        public const ushort TEXTURE_SWIZZLE_A = 0x8E45;
        public const ushort TEXTURE_SWIZZLE_A_EXT = 0x8E45;
        public const ushort TEXTURE_SWIZZLE_RGBA = 0x8E46;
        public const ushort TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
        public const ushort ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
        public const ushort ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
        public const ushort ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
        public const ushort NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
        public const ushort COMPATIBLE_SUBROUTINES = 0x8E4B;
        public const ushort QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
        public const ushort QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
        public const ushort FIRST_VERTEX_CONVENTION = 0x8E4D;
        public const ushort FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
        public const ushort FIRST_VERTEX_CONVENTION_OES = 0x8E4D;
        public const ushort LAST_VERTEX_CONVENTION = 0x8E4E;
        public const ushort LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
        public const ushort LAST_VERTEX_CONVENTION_OES = 0x8E4E;
        public const ushort PROVOKING_VERTEX = 0x8E4F;
        public const ushort PROVOKING_VERTEX_EXT = 0x8E4F;
        public const ushort SAMPLE_POSITION = 0x8E50;
        public const ushort SAMPLE_POSITION_NV = 0x8E50;
        public const ushort SAMPLE_LOCATION_ARB = 0x8E50;
        public const ushort SAMPLE_LOCATION_NV = 0x8E50;
        public const ushort SAMPLE_MASK = 0x8E51;
        public const ushort SAMPLE_MASK_NV = 0x8E51;
        public const ushort SAMPLE_MASK_VALUE = 0x8E52;
        public const ushort SAMPLE_MASK_VALUE_NV = 0x8E52;
        public const ushort TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
        public const ushort TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
        public const ushort TEXTURE_RENDERBUFFER_NV = 0x8E55;
        public const ushort SAMPLER_RENDERBUFFER_NV = 0x8E56;
        public const ushort INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
        public const ushort UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
        public const ushort MAX_SAMPLE_MASK_WORDS = 0x8E59;
        public const ushort MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
        public const ushort MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
        public const ushort MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
        public const ushort MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A;
        public const ushort MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5A;
        public const ushort MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
        public const ushort MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B;
        public const ushort MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
        public const ushort MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
        public const ushort MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C;
        public const ushort MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
        public const ushort FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
        public const ushort FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D;
        public const ushort FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
        public const ushort MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
        public const ushort MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
        public const ushort MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
        public const ushort MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
        public const ushort MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
        public const ushort MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
        public const ushort MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
        public const ushort MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
        public const ushort MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
        public const ushort MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
        public const ushort MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
        public const ushort MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
        public const ushort MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
        public const ushort MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
        public const ushort MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
        public const ushort MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
        public const ushort MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
        public const ushort MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
        public const ushort MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
        public const ushort MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
        public const ushort MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
        public const ushort MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
        public const ushort MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
        public const ushort MAX_VERTEX_STREAMS = 0x8E71;
        public const ushort PATCH_VERTICES = 0x8E72;
        public const ushort PATCH_VERTICES_EXT = 0x8E72;
        public const ushort PATCH_VERTICES_OES = 0x8E72;
        public const ushort PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
        public const ushort PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73;
        public const ushort PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
        public const ushort PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74;
        public const ushort TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
        public const ushort TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75;
        public const ushort TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75;
        public const ushort TESS_GEN_MODE = 0x8E76;
        public const ushort TESS_GEN_MODE_EXT = 0x8E76;
        public const ushort TESS_GEN_MODE_OES = 0x8E76;
        public const ushort TESS_GEN_SPACING = 0x8E77;
        public const ushort TESS_GEN_SPACING_EXT = 0x8E77;
        public const ushort TESS_GEN_SPACING_OES = 0x8E77;
        public const ushort TESS_GEN_VERTEX_ORDER = 0x8E78;
        public const ushort TESS_GEN_VERTEX_ORDER_EXT = 0x8E78;
        public const ushort TESS_GEN_VERTEX_ORDER_OES = 0x8E78;
        public const ushort TESS_GEN_POINT_MODE = 0x8E79;
        public const ushort TESS_GEN_POINT_MODE_EXT = 0x8E79;
        public const ushort TESS_GEN_POINT_MODE_OES = 0x8E79;
        public const ushort ISOLINES = 0x8E7A;
        public const ushort ISOLINES_EXT = 0x8E7A;
        public const ushort ISOLINES_OES = 0x8E7A;
        public const ushort FRACTIONAL_ODD = 0x8E7B;
        public const ushort FRACTIONAL_ODD_EXT = 0x8E7B;
        public const ushort FRACTIONAL_ODD_OES = 0x8E7B;
        public const ushort FRACTIONAL_EVEN = 0x8E7C;
        public const ushort FRACTIONAL_EVEN_EXT = 0x8E7C;
        public const ushort FRACTIONAL_EVEN_OES = 0x8E7C;
        public const ushort MAX_PATCH_VERTICES = 0x8E7D;
        public const ushort MAX_PATCH_VERTICES_EXT = 0x8E7D;
        public const ushort MAX_PATCH_VERTICES_OES = 0x8E7D;
        public const ushort MAX_TESS_GEN_LEVEL = 0x8E7E;
        public const ushort MAX_TESS_GEN_LEVEL_EXT = 0x8E7E;
        public const ushort MAX_TESS_GEN_LEVEL_OES = 0x8E7E;
        public const ushort MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
        public const ushort MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F;
        public const ushort MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7F;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80;
        public const ushort MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
        public const ushort MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81;
        public const ushort MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81;
        public const ushort MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
        public const ushort MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82;
        public const ushort MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82;
        public const ushort MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
        public const ushort MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83;
        public const ushort MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83;
        public const ushort MAX_TESS_PATCH_COMPONENTS = 0x8E84;
        public const ushort MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84;
        public const ushort MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84;
        public const ushort MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
        public const ushort MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85;
        public const ushort MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85;
        public const ushort MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
        public const ushort MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86;
        public const ushort MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86;
        public const ushort TESS_EVALUATION_SHADER = 0x8E87;
        public const ushort TESS_EVALUATION_SHADER_EXT = 0x8E87;
        public const ushort TESS_EVALUATION_SHADER_OES = 0x8E87;
        public const ushort TESS_CONTROL_SHADER = 0x8E88;
        public const ushort TESS_CONTROL_SHADER_EXT = 0x8E88;
        public const ushort TESS_CONTROL_SHADER_OES = 0x8E88;
        public const ushort MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
        public const ushort MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89;
        public const ushort MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A;
        public const ushort MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8A;
        // Unused 0x8E8B. 
        public const ushort COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
        public const ushort COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
        public const ushort COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
        public const ushort COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
        public const ushort COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
        public const ushort COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
        public const ushort COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
        public const ushort COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
        public const ushort COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
        public const ushort COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
        public const ushort COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
        public const ushort COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
        
        // . For QNX_texture_tiling, QNX_complex_polygon, QNX_stippled_lines (Khronos error #696)
        // Unused 0x8E90..0x8E9F. 
        
        // . 
        // Unused 0x8EA0..0x8EAF. 
        
        // . For Affie Munshi 2007/07/20
        // Unused 0x8EB0..0x8EBF. 
        
        // . 
        // Unused 0x8EC0..0x8ECF. 
        
        // . For Pat Brown, Khronos error #3191
        public const ushort COVERAGE_COMPONENT_NV = 0x8ED0;
        public const ushort COVERAGE_COMPONENT4_NV = 0x8ED1;
        public const ushort COVERAGE_ATTACHMENT_NV = 0x8ED2;
        public const ushort COVERAGE_BUFFERS_NV = 0x8ED3;
        public const ushort COVERAGE_SAMPLES_NV = 0x8ED4;
        public const ushort COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5;
        public const ushort COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6;
        public const ushort COVERAGE_AUTOMATIC_NV = 0x8ED7;
        // Unused 0x8ED8..0x8F0F. 
        public const ushort INCLUSIVE_EXT = 0x8F10;
        public const ushort EXCLUSIVE_EXT = 0x8F11;
        public const ushort WINDOW_RECTANGLE_EXT = 0x8F12;
        public const ushort WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
        public const ushort MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
        public const ushort NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
        // Unused 0x8F16..0x8F1C. 
        public const ushort BUFFER_GPU_ADDRESS_NV = 0x8F1D;
        public const ushort VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
        public const ushort ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
        public const ushort VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
        public const ushort VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
        public const ushort NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
        public const ushort COLOR_ARRAY_ADDRESS_NV = 0x8F23;
        public const ushort INDEX_ARRAY_ADDRESS_NV = 0x8F24;
        public const ushort TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
        public const ushort EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
        public const ushort SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
        public const ushort FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
        public const ushort ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
        public const ushort VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
        public const ushort VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
        public const ushort NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
        public const ushort COLOR_ARRAY_LENGTH_NV = 0x8F2D;
        public const ushort INDEX_ARRAY_LENGTH_NV = 0x8F2E;
        public const ushort TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
        public const ushort EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
        public const ushort SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
        public const ushort FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
        public const ushort ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
        public const ushort GPU_ADDRESS_NV = 0x8F34;
        public const ushort MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
        public const ushort COPY_READ_BUFFER = 0x8F36;
        public const ushort COPY_READ_BUFFER_NV = 0x8F36;
        public const ushort COPY_READ_BUFFER_BINDING = 0x8F36;
        public const ushort COPY_WRITE_BUFFER = 0x8F37;
        public const ushort COPY_WRITE_BUFFER_NV = 0x8F37;
        public const ushort COPY_WRITE_BUFFER_BINDING = 0x8F37;
        public const ushort MAX_IMAGE_UNITS = 0x8F38;
        public const ushort MAX_IMAGE_UNITS_EXT = 0x8F38;
        public const ushort MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
        public const ushort MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
        public const ushort MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
        public const ushort IMAGE_BINDING_NAME = 0x8F3A;
        public const ushort IMAGE_BINDING_NAME_EXT = 0x8F3A;
        public const ushort IMAGE_BINDING_LEVEL = 0x8F3B;
        public const ushort IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
        public const ushort IMAGE_BINDING_LAYERED = 0x8F3C;
        public const ushort IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
        public const ushort IMAGE_BINDING_LAYER = 0x8F3D;
        public const ushort IMAGE_BINDING_LAYER_EXT = 0x8F3D;
        public const ushort IMAGE_BINDING_ACCESS = 0x8F3E;
        public const ushort IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
        public const ushort DRAW_INDIRECT_BUFFER = 0x8F3F;
        public const ushort DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
        public const ushort DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
        public const ushort DRAW_INDIRECT_LENGTH_NV = 0x8F42;
        public const ushort DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
        public const ushort MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
        public const ushort MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
        public const ushort DOUBLE_MAT2 = 0x8F46;
        public const ushort DOUBLE_MAT2_EXT = 0x8F46;
        public const ushort DOUBLE_MAT3 = 0x8F47;
        public const ushort DOUBLE_MAT3_EXT = 0x8F47;
        public const ushort DOUBLE_MAT4 = 0x8F48;
        public const ushort DOUBLE_MAT4_EXT = 0x8F48;
        public const ushort DOUBLE_MAT2x3 = 0x8F49;
        public const ushort DOUBLE_MAT2x3_EXT = 0x8F49;
        public const ushort DOUBLE_MAT2x4 = 0x8F4A;
        public const ushort DOUBLE_MAT2x4_EXT = 0x8F4A;
        public const ushort DOUBLE_MAT3x2 = 0x8F4B;
        public const ushort DOUBLE_MAT3x2_EXT = 0x8F4B;
        public const ushort DOUBLE_MAT3x4 = 0x8F4C;
        public const ushort DOUBLE_MAT3x4_EXT = 0x8F4C;
        public const ushort DOUBLE_MAT4x2 = 0x8F4D;
        public const ushort DOUBLE_MAT4x2_EXT = 0x8F4D;
        public const ushort DOUBLE_MAT4x3 = 0x8F4E;
        public const ushort DOUBLE_MAT4x3_EXT = 0x8F4E;
        public const ushort VERTEX_BINDING_BUFFER = 0x8F4F;
        
        // . For Jon Kennedy, Khronos public error #75
        // Unused 0x8F50..0x8F5F. 
        
        // . For Remi Pedersen, Khronos error #3745
        public const ushort MALI_SHADER_BINARY_ARM = 0x8F60;
        public const ushort MALI_PROGRAM_BINARY_ARM = 0x8F61;
        // Unused 0x8F62. 
        public const ushort MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63;
        public const ushort SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64;
        public const ushort FETCH_PER_SAMPLE_ARM = 0x8F65;
        public const ushort FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66;
        public const ushort MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67;
        // Unused 0x8F68. 
        public const ushort TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69;
        public const ushort TEXTURE_UNNORMALIZED_COORDINATES_ARM = 0x8F6A;
        // Unused 0x8F6B..0x8F6F. 
        
        // . For Mark Callow, Khronos error #4055. Shared with EGL.
        // Unused 0x8F70..0x8F7F. 
        
        // . For Mike Weiblen, public error #910
        // Unused 0x8F80..0x8F8F. 
        
        // . 
        public const ushort RED_SNORM = 0x8F90;
        public const ushort RG_SNORM = 0x8F91;
        public const ushort RGB_SNORM = 0x8F92;
        public const ushort RGBA_SNORM = 0x8F93;
        public const ushort R8_SNORM = 0x8F94;
        public const ushort RG8_SNORM = 0x8F95;
        public const ushort RGB8_SNORM = 0x8F96;
        public const ushort RGBA8_SNORM = 0x8F97;
        public const ushort R16_SNORM = 0x8F98;
        public const ushort R16_SNORM_EXT = 0x8F98;
        public const ushort RG16_SNORM = 0x8F99;
        public const ushort RG16_SNORM_EXT = 0x8F99;
        public const ushort RGB16_SNORM = 0x8F9A;
        public const ushort RGB16_SNORM_EXT = 0x8F9A;
        public const ushort RGBA16_SNORM = 0x8F9B;
        public const ushort RGBA16_SNORM_EXT = 0x8F9B;
        public const ushort SIGNED_NORMALIZED = 0x8F9C;
        public const ushort PRIMITIVE_RESTART = 0x8F9D;
        public const ushort PRIMITIVE_RESTART_INDEX = 0x8F9E;
        public const ushort MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
        
        // . For Maurice Ribble, error #4512
        public const ushort PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
        public const ushort MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x8FA1;
        // Unused 0x8FA2..0x8FAF. 
        public const ushort BINNING_CONTROL_HINT_QCOM = 0x8FB0;
        public const ushort CPU_OPTIMIZED_QCOM = 0x8FB1;
        public const ushort GPU_OPTIMIZED_QCOM = 0x8FB2;
        public const ushort RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3;
        // Unused 0x8FB4..0x8FBA. 
        public const ushort GPU_DISJOINT_EXT = 0x8FBB;
        // Unused 0x8FBC. 
        public const ushort SR8_EXT = 0x8FBD;
        public const ushort SRG8_EXT = 0x8FBE;
        public const ushort TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x8FBF;
        
        // . For Frido Garritsen, error #4526
        public const ushort SHADER_BINARY_VIV = 0x8FC4;
        
        // . For Pat Brown, error #4935
        public const ushort INT8_NV = 0x8FE0;
        public const ushort INT8_VEC2_NV = 0x8FE1;
        public const ushort INT8_VEC3_NV = 0x8FE2;
        public const ushort INT8_VEC4_NV = 0x8FE3;
        public const ushort INT16_NV = 0x8FE4;
        public const ushort INT16_VEC2_NV = 0x8FE5;
        public const ushort INT16_VEC3_NV = 0x8FE6;
        public const ushort INT16_VEC4_NV = 0x8FE7;
        public const ushort INT64_VEC2_ARB = 0x8FE9;
        public const ushort INT64_VEC2_NV = 0x8FE9;
        public const ushort INT64_VEC3_ARB = 0x8FEA;
        public const ushort INT64_VEC3_NV = 0x8FEA;
        public const ushort INT64_VEC4_ARB = 0x8FEB;
        public const ushort INT64_VEC4_NV = 0x8FEB;
        public const ushort UNSIGNED_INT8_NV = 0x8FEC;
        public const ushort UNSIGNED_INT8_VEC2_NV = 0x8FED;
        public const ushort UNSIGNED_INT8_VEC3_NV = 0x8FEE;
        public const ushort UNSIGNED_INT8_VEC4_NV = 0x8FEF;
        public const ushort UNSIGNED_INT16_NV = 0x8FF0;
        public const ushort UNSIGNED_INT16_VEC2_NV = 0x8FF1;
        public const ushort UNSIGNED_INT16_VEC3_NV = 0x8FF2;
        public const ushort UNSIGNED_INT16_VEC4_NV = 0x8FF3;
        public const ushort UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
        public const ushort UNSIGNED_INT64_VEC2_NV = 0x8FF5;
        public const ushort UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
        public const ushort UNSIGNED_INT64_VEC3_NV = 0x8FF6;
        public const ushort UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
        public const ushort UNSIGNED_INT64_VEC4_NV = 0x8FF7;
        public const ushort FLOAT16_NV = 0x8FF8;
        public const ushort FLOAT16_VEC2_NV = 0x8FF9;
        public const ushort FLOAT16_VEC3_NV = 0x8FFA;
        public const ushort FLOAT16_VEC4_NV = 0x8FFB;
        public const ushort DOUBLE_VEC2 = 0x8FFC;
        public const ushort DOUBLE_VEC2_EXT = 0x8FFC;
        public const ushort DOUBLE_VEC3 = 0x8FFD;
        public const ushort DOUBLE_VEC3_EXT = 0x8FFD;
        public const ushort DOUBLE_VEC4 = 0x8FFE;
        public const ushort DOUBLE_VEC4_EXT = 0x8FFE;
        // Unused 0x8FFF. 
        
        // . For Bill Licea-Kane
        public const ushort SAMPLER_BUFFER_AMD = 0x9001;
        public const ushort INT_SAMPLER_BUFFER_AMD = 0x9002;
        public const ushort UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
        public const ushort TESSELLATION_MODE_AMD = 0x9004;
        public const ushort TESSELLATION_FACTOR_AMD = 0x9005;
        public const ushort DISCRETE_AMD = 0x9006;
        public const ushort CONTINUOUS_AMD = 0x9007;
        // Unused 0x9008. 
        public const ushort TEXTURE_CUBE_MAP_ARRAY = 0x9009;
        public const ushort TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
        public const ushort TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009;
        public const ushort TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009;
        public const ushort TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
        public const ushort TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
        public const ushort TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A;
        public const ushort TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900A;
        public const ushort PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
        public const ushort PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
        public const ushort SAMPLER_CUBE_MAP_ARRAY = 0x900C;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_OES = 0x900C;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D;
        public const ushort SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900D;
        public const ushort INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
        public const ushort INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
        public const ushort INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E;
        public const ushort INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900E;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F;
        public const ushort UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900F;
        public const ushort ALPHA_SNORM = 0x9010;
        public const ushort LUMINANCE_SNORM = 0x9011;
        public const ushort LUMINANCE_ALPHA_SNORM = 0x9012;
        public const ushort INTENSITY_SNORM = 0x9013;
        public const ushort ALPHA8_SNORM = 0x9014;
        public const ushort LUMINANCE8_SNORM = 0x9015;
        public const ushort LUMINANCE8_ALPHA8_SNORM = 0x9016;
        public const ushort INTENSITY8_SNORM = 0x9017;
        public const ushort ALPHA16_SNORM = 0x9018;
        public const ushort LUMINANCE16_SNORM = 0x9019;
        public const ushort LUMINANCE16_ALPHA16_SNORM = 0x901A;
        public const ushort INTENSITY16_SNORM = 0x901B;
        public const ushort FACTOR_MIN_AMD = 0x901C;
        public const ushort FACTOR_MAX_AMD = 0x901D;
        public const ushort DEPTH_CLAMP_NEAR_AMD = 0x901E;
        public const ushort DEPTH_CLAMP_FAR_AMD = 0x901F;
        
        // . For Pat Brown, error #4935
        public const ushort VIDEO_BUFFER_NV = 0x9020;
        public const ushort VIDEO_BUFFER_BINDING_NV = 0x9021;
        public const ushort FIELD_UPPER_NV = 0x9022;
        public const ushort FIELD_LOWER_NV = 0x9023;
        public const ushort NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
        public const ushort NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
        public const ushort VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
        public const ushort LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
        public const ushort VIDEO_BUFFER_PITCH_NV = 0x9028;
        public const ushort VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
        public const ushort VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
        public const ushort VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
        public const ushort VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
        public const ushort VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
        public const ushort PARTIAL_SUCCESS_NV = 0x902E;
        public const ushort SUCCESS_NV = 0x902F;
        public const ushort FAILURE_NV = 0x9030;
        public const ushort YCBYCR8_422_NV = 0x9031;
        public const ushort YCBAYCR8A_4224_NV = 0x9032;
        public const ushort Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
        public const ushort Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
        public const ushort Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
        public const ushort Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
        public const ushort Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
        public const ushort VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
        public const ushort VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
        public const ushort VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
        public const ushort VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
        public const ushort VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
        // Unused 0x903D..0x9044. 
        public const ushort TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
        public const ushort TEXTURE_COLOR_SAMPLES_NV = 0x9046;
        public const ushort GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
        public const ushort GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
        public const ushort GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
        public const ushort GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
        public const ushort GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
        public const ushort IMAGE_1D = 0x904C;
        public const ushort IMAGE_1D_EXT = 0x904C;
        public const ushort IMAGE_2D = 0x904D;
        public const ushort IMAGE_2D_EXT = 0x904D;
        public const ushort IMAGE_3D = 0x904E;
        public const ushort IMAGE_3D_EXT = 0x904E;
        public const ushort IMAGE_2D_RECT = 0x904F;
        public const ushort IMAGE_2D_RECT_EXT = 0x904F;
        public const ushort IMAGE_CUBE = 0x9050;
        public const ushort IMAGE_CUBE_EXT = 0x9050;
        public const ushort IMAGE_BUFFER = 0x9051;
        public const ushort IMAGE_BUFFER_EXT = 0x9051;
        public const ushort IMAGE_BUFFER_OES = 0x9051;
        public const ushort IMAGE_1D_ARRAY = 0x9052;
        public const ushort IMAGE_1D_ARRAY_EXT = 0x9052;
        public const ushort IMAGE_2D_ARRAY = 0x9053;
        public const ushort IMAGE_2D_ARRAY_EXT = 0x9053;
        public const ushort IMAGE_CUBE_MAP_ARRAY = 0x9054;
        public const ushort IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
        public const ushort IMAGE_CUBE_MAP_ARRAY_OES = 0x9054;
        public const ushort IMAGE_2D_MULTISAMPLE = 0x9055;
        public const ushort IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
        public const ushort IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
        public const ushort IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
        public const ushort INT_IMAGE_1D = 0x9057;
        public const ushort INT_IMAGE_1D_EXT = 0x9057;
        public const ushort INT_IMAGE_2D = 0x9058;
        public const ushort INT_IMAGE_2D_EXT = 0x9058;
        public const ushort INT_IMAGE_3D = 0x9059;
        public const ushort INT_IMAGE_3D_EXT = 0x9059;
        public const ushort INT_IMAGE_2D_RECT = 0x905A;
        public const ushort INT_IMAGE_2D_RECT_EXT = 0x905A;
        public const ushort INT_IMAGE_CUBE = 0x905B;
        public const ushort INT_IMAGE_CUBE_EXT = 0x905B;
        public const ushort INT_IMAGE_BUFFER = 0x905C;
        public const ushort INT_IMAGE_BUFFER_EXT = 0x905C;
        public const ushort INT_IMAGE_BUFFER_OES = 0x905C;
        public const ushort INT_IMAGE_1D_ARRAY = 0x905D;
        public const ushort INT_IMAGE_1D_ARRAY_EXT = 0x905D;
        public const ushort INT_IMAGE_2D_ARRAY = 0x905E;
        public const ushort INT_IMAGE_2D_ARRAY_EXT = 0x905E;
        public const ushort INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
        public const ushort INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
        public const ushort INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905F;
        public const ushort INT_IMAGE_2D_MULTISAMPLE = 0x9060;
        public const ushort INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
        public const ushort INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
        public const ushort INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
        public const ushort UNSIGNED_INT_IMAGE_1D = 0x9062;
        public const ushort UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
        public const ushort UNSIGNED_INT_IMAGE_2D = 0x9063;
        public const ushort UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
        public const ushort UNSIGNED_INT_IMAGE_3D = 0x9064;
        public const ushort UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
        public const ushort UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
        public const ushort UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
        public const ushort UNSIGNED_INT_IMAGE_CUBE = 0x9066;
        public const ushort UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
        public const ushort UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
        public const ushort UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
        public const ushort UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067;
        public const ushort UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
        public const ushort UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
        public const ushort UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
        public const ushort UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
        public const ushort UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
        public const ushort UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
        public const ushort UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906A;
        public const ushort UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
        public const ushort UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
        public const ushort UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
        public const ushort UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
        public const ushort MAX_IMAGE_SAMPLES = 0x906D;
        public const ushort MAX_IMAGE_SAMPLES_EXT = 0x906D;
        public const ushort IMAGE_BINDING_FORMAT = 0x906E;
        public const ushort IMAGE_BINDING_FORMAT_EXT = 0x906E;
        public const ushort RGB10_A2UI = 0x906F;
        public const ushort PATH_FORMAT_SVG_NV = 0x9070;
        public const ushort PATH_FORMAT_PS_NV = 0x9071;
        public const ushort STANDARD_FONT_NAME_NV = 0x9072;
        public const ushort SYSTEM_FONT_NAME_NV = 0x9073;
        public const ushort FILE_NAME_NV = 0x9074;
        public const ushort PATH_STROKE_WIDTH_NV = 0x9075;
        public const ushort PATH_END_CAPS_NV = 0x9076;
        public const ushort PATH_INITIAL_END_CAP_NV = 0x9077;
        public const ushort PATH_TERMINAL_END_CAP_NV = 0x9078;
        public const ushort PATH_JOIN_STYLE_NV = 0x9079;
        public const ushort PATH_MITER_LIMIT_NV = 0x907A;
        public const ushort PATH_DASH_CAPS_NV = 0x907B;
        public const ushort PATH_INITIAL_DASH_CAP_NV = 0x907C;
        public const ushort PATH_TERMINAL_DASH_CAP_NV = 0x907D;
        public const ushort PATH_DASH_OFFSET_NV = 0x907E;
        public const ushort PATH_CLIENT_LENGTH_NV = 0x907F;
        public const ushort PATH_FILL_MODE_NV = 0x9080;
        public const ushort PATH_FILL_MASK_NV = 0x9081;
        public const ushort PATH_FILL_COVER_MODE_NV = 0x9082;
        public const ushort PATH_STROKE_COVER_MODE_NV = 0x9083;
        public const ushort PATH_STROKE_MASK_NV = 0x9084;
        public const ushort COUNT_UP_NV = 0x9088;
        public const ushort COUNT_DOWN_NV = 0x9089;
        public const ushort PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
        public const ushort CONVEX_HULL_NV = 0x908B;
        public const ushort BOUNDING_BOX_NV = 0x908D;
        public const ushort TRANSLATE_X_NV = 0x908E;
        public const ushort TRANSLATE_Y_NV = 0x908F;
        public const ushort TRANSLATE_2D_NV = 0x9090;
        public const ushort TRANSLATE_3D_NV = 0x9091;
        public const ushort AFFINE_2D_NV = 0x9092;
        public const ushort AFFINE_3D_NV = 0x9094;
        public const ushort TRANSPOSE_AFFINE_2D_NV = 0x9096;
        public const ushort TRANSPOSE_AFFINE_3D_NV = 0x9098;
        public const ushort UTF8_NV = 0x909A;
        public const ushort UTF16_NV = 0x909B;
        public const ushort BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
        public const ushort PATH_COMMAND_COUNT_NV = 0x909D;
        public const ushort PATH_COORD_COUNT_NV = 0x909E;
        public const ushort PATH_DASH_ARRAY_COUNT_NV = 0x909F;
        public const ushort PATH_COMPUTED_LENGTH_NV = 0x90A0;
        public const ushort PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
        public const ushort PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
        public const ushort SQUARE_NV = 0x90A3;
        public const ushort ROUND_NV = 0x90A4;
        public const ushort TRIANGULAR_NV = 0x90A5;
        public const ushort BEVEL_NV = 0x90A6;
        public const ushort MITER_REVERT_NV = 0x90A7;
        public const ushort MITER_TRUNCATE_NV = 0x90A8;
        public const ushort SKIP_MISSING_GLYPH_NV = 0x90A9;
        public const ushort USE_MISSING_GLYPH_NV = 0x90AA;
        public const ushort PATH_ERROR_POSITION_NV = 0x90AB;
        public const ushort PATH_FOG_GEN_MODE_NV = 0x90AC;
        public const ushort ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
        public const ushort ADJACENT_PAIRS_NV = 0x90AE;
        public const ushort FIRST_TO_REST_NV = 0x90AF;
        public const ushort PATH_GEN_MODE_NV = 0x90B0;
        public const ushort PATH_GEN_COEFF_NV = 0x90B1;
        public const ushort PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
        public const ushort PATH_GEN_COMPONENTS_NV = 0x90B3;
        public const ushort PATH_DASH_OFFSET_RESET_NV = 0x90B4;
        public const ushort MOVE_TO_RESETS_NV = 0x90B5;
        public const ushort MOVE_TO_CONTINUES_NV = 0x90B6;
        public const ushort PATH_STENCIL_FUNC_NV = 0x90B7;
        public const ushort PATH_STENCIL_REF_NV = 0x90B8;
        public const ushort PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
        public const ushort SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
        public const ushort SCALED_RESOLVE_NICEST_EXT = 0x90BB;
        public const ushort MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
        public const ushort PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
        public const ushort PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
        public const ushort PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
        // Unused 0x90C0..0x90C6. 
        public const ushort IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
        public const ushort IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
        public const ushort IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
        public const ushort MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
        public const ushort MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
        public const ushort MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB;
        public const ushort MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CB;
        public const ushort MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
        public const ushort MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC;
        public const ushort MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CC;
        public const ushort MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
        public const ushort MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD;
        public const ushort MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CD;
        public const ushort MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
        public const ushort MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
        public const ushort MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
        public const ushort MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
        public const ushort SHADER_STORAGE_BUFFER = 0x90D2;
        public const ushort SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
        public const ushort SHADER_STORAGE_BUFFER_START = 0x90D4;
        public const ushort SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
        public const ushort MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
        public const ushort MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
        public const ushort MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7;
        public const ushort MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7;
        public const ushort MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
        public const ushort MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8;
        public const ushort MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8;
        public const ushort MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
        public const ushort MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9;
        public const ushort MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9;
        public const ushort MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
        public const ushort MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
        public const ushort MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
        public const ushort MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
        public const ushort MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
        public const ushort SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
        // Unused 0x90E0. 
        public const ushort SYNC_X11_FENCE_EXT = 0x90E1;
        // Unused 0x90E2..0x90E9. 
        public const ushort DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
        public const ushort MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
        public const ushort MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
        public const ushort DISPATCH_INDIRECT_BUFFER = 0x90EE;
        public const ushort DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
        public const ushort COLOR_ATTACHMENT_EXT = 0x90F0;
        public const ushort MULTIVIEW_EXT = 0x90F1;
        public const ushort MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2;
        public const ushort CONTEXT_ROBUST_ACCESS = 0x90F3;
        public const ushort CONTEXT_ROBUST_ACCESS_EXT = 0x90F3;
        public const ushort CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
        // Unused 0x90F4..0x90FA. 
        public const ushort COMPUTE_PROGRAM_NV = 0x90FB;
        public const ushort COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
        // Unused 0x90FD..0x90FF. 
        
        // . 
        public const ushort TEXTURE_2D_MULTISAMPLE = 0x9100;
        public const ushort PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
        public const ushort TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
        public const ushort TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102;
        public const ushort PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
        public const ushort TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
        public const ushort TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
        public const ushort TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105;
        public const ushort TEXTURE_SAMPLES = 0x9106;
        public const ushort TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
        public const ushort SAMPLER_2D_MULTISAMPLE = 0x9108;
        public const ushort INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
        public const ushort UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
        public const ushort SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
        public const ushort SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B;
        public const ushort INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
        public const ushort INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C;
        public const ushort UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
        public const ushort UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D;
        public const ushort MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
        public const ushort MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
        public const ushort MAX_INTEGER_SAMPLES = 0x9110;
        public const ushort MAX_SERVER_WAIT_TIMEOUT = 0x9111;
        public const ushort MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111;
        public const ushort OBJECT_TYPE = 0x9112;
        public const ushort OBJECT_TYPE_APPLE = 0x9112;
        public const ushort SYNC_CONDITION = 0x9113;
        public const ushort SYNC_CONDITION_APPLE = 0x9113;
        public const ushort SYNC_STATUS = 0x9114;
        public const ushort SYNC_STATUS_APPLE = 0x9114;
        public const ushort SYNC_FLAGS = 0x9115;
        public const ushort SYNC_FLAGS_APPLE = 0x9115;
        public const ushort SYNC_FENCE = 0x9116;
        public const ushort SYNC_FENCE_APPLE = 0x9116;
        public const ushort SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
        public const ushort SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117;
        public const ushort UNSIGNALED = 0x9118;
        public const ushort UNSIGNALED_APPLE = 0x9118;
        public const ushort SIGNALED = 0x9119;
        public const ushort SIGNALED_APPLE = 0x9119;
        public const ushort ALREADY_SIGNALED = 0x911A;
        public const ushort ALREADY_SIGNALED_APPLE = 0x911A;
        public const ushort TIMEOUT_EXPIRED = 0x911B;
        public const ushort TIMEOUT_EXPIRED_APPLE = 0x911B;
        public const ushort CONDITION_SATISFIED = 0x911C;
        public const ushort CONDITION_SATISFIED_APPLE = 0x911C;
        public const ushort WAIT_FAILED = 0x911D;
        public const ushort WAIT_FAILED_APPLE = 0x911D;
        public const ushort BUFFER_ACCESS_FLAGS = 0x911F;
        public const ushort BUFFER_MAP_LENGTH = 0x9120;
        public const ushort BUFFER_MAP_OFFSET = 0x9121;
        public const ushort MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
        public const ushort MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
        public const ushort MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123;
        public const ushort MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123;
        public const ushort MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
        public const ushort MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124;
        public const ushort MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124;
        public const ushort MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
        public const ushort CONTEXT_PROFILE_MASK = 0x9126;
        public const ushort UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
        public const ushort UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
        public const ushort UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
        public const ushort UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
        public const ushort PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
        public const ushort PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
        public const ushort PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
        public const ushort PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
        public const ushort TEXTURE_IMMUTABLE_FORMAT = 0x912F;
        public const ushort TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F;
        
        // . Khronos error #882
        public const ushort SGX_PROGRAM_BINARY_IMG = 0x9130;
        // Unused 0x9131..0x9132. 
        public const ushort RENDERBUFFER_SAMPLES_IMG = 0x9133;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
        public const ushort MAX_SAMPLES_IMG = 0x9135;
        public const ushort TEXTURE_SAMPLES_IMG = 0x9136;
        public const ushort COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;
        public const ushort COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;
        public const ushort CUBIC_IMG = 0x9139;
        public const ushort CUBIC_MIPMAP_NEAREST_IMG = 0x913A;
        public const ushort CUBIC_MIPMAP_LINEAR_IMG = 0x913B;
        public const ushort FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C;
        public const ushort NUM_DOWNSAMPLE_SCALES_IMG = 0x913D;
        public const ushort DOWNSAMPLE_SCALES_IMG = 0x913E;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F;
        
        // . Khronos bugs 5899, 6004
        // Unused 0x9140..0x9142. 
        public const ushort MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
        public const ushort MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
        public const ushort MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
        public const ushort MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
        public const ushort MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
        public const ushort MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
        public const ushort MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
        public const ushort MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
        public const ushort DEBUG_LOGGED_MESSAGES = 0x9145;
        public const ushort DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
        public const ushort DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
        public const ushort DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
        public const ushort DEBUG_SEVERITY_HIGH = 0x9146;
        public const ushort DEBUG_SEVERITY_HIGH_AMD = 0x9146;
        public const ushort DEBUG_SEVERITY_HIGH_ARB = 0x9146;
        public const ushort DEBUG_SEVERITY_HIGH_KHR = 0x9146;
        public const ushort DEBUG_SEVERITY_MEDIUM = 0x9147;
        public const ushort DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
        public const ushort DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
        public const ushort DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
        public const ushort DEBUG_SEVERITY_LOW = 0x9148;
        public const ushort DEBUG_SEVERITY_LOW_AMD = 0x9148;
        public const ushort DEBUG_SEVERITY_LOW_ARB = 0x9148;
        public const ushort DEBUG_SEVERITY_LOW_KHR = 0x9148;
        public const ushort DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
        public const ushort DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
        public const ushort DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
        public const ushort DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
        public const ushort DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
        public const ushort DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
        public const ushort DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
        public const ushort DEBUG_CATEGORY_OTHER_AMD = 0x9150;
        public const ushort BUFFER_OBJECT_EXT = 0x9151;
        public const ushort DATA_BUFFER_AMD = 0x9151;
        public const ushort PERFORMANCE_MONITOR_AMD = 0x9152;
        public const ushort QUERY_OBJECT_AMD = 0x9153;
        public const ushort QUERY_OBJECT_EXT = 0x9153;
        public const ushort VERTEX_ARRAY_OBJECT_AMD = 0x9154;
        public const ushort VERTEX_ARRAY_OBJECT_EXT = 0x9154;
        public const ushort SAMPLER_OBJECT_AMD = 0x9155;
        // Unused 0x9156..0x915F. 
        public const ushort EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
        // Unused 0x9161. 
        public const ushort QUERY_BUFFER = 0x9192;
        public const ushort QUERY_BUFFER_AMD = 0x9192;
        public const ushort QUERY_BUFFER_BINDING = 0x9193;
        public const ushort QUERY_BUFFER_BINDING_AMD = 0x9193;
        public const ushort QUERY_RESULT_NO_WAIT = 0x9194;
        public const ushort QUERY_RESULT_NO_WAIT_AMD = 0x9194;
        public const ushort VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
        public const ushort VIRTUAL_PAGE_SIZE_X_EXT = 0x9195;
        public const ushort VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
        public const ushort VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
        public const ushort VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196;
        public const ushort VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
        public const ushort VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
        public const ushort VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197;
        public const ushort VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
        public const ushort MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
        public const ushort MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198;
        public const ushort MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
        public const ushort MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
        public const ushort MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199;
        public const ushort MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
        public const ushort MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
        public const ushort MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
        public const ushort MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919A;
        public const ushort MIN_SPARSE_LEVEL_AMD = 0x919B;
        public const ushort MIN_LOD_WARNING_AMD = 0x919C;
        public const ushort TEXTURE_BUFFER_OFFSET = 0x919D;
        public const ushort TEXTURE_BUFFER_OFFSET_EXT = 0x919D;
        public const ushort TEXTURE_BUFFER_OFFSET_OES = 0x919D;
        public const ushort TEXTURE_BUFFER_SIZE = 0x919E;
        public const ushort TEXTURE_BUFFER_SIZE_EXT = 0x919E;
        public const ushort TEXTURE_BUFFER_SIZE_OES = 0x919E;
        public const ushort TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
        public const ushort TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F;
        public const ushort TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919F;
        public const ushort STREAM_RASTERIZATION_AMD = 0x91A0;
        // Unused 0x91A1..0x91A3. 
        public const ushort VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
        public const ushort VERTEX_ID_SWIZZLE_AMD = 0x91A5;
        public const ushort TEXTURE_SPARSE_ARB = 0x91A6;
        public const ushort TEXTURE_SPARSE_EXT = 0x91A6;
        public const ushort VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
        public const ushort VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7;
        public const ushort NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
        public const ushort NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8;
        public const ushort SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
        public const ushort SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9;
        public const ushort NUM_SPARSE_LEVELS_ARB = 0x91AA;
        public const ushort NUM_SPARSE_LEVELS_EXT = 0x91AA;
        // Unused 0x91AB..0x91AD. 
        public const ushort PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
        public const ushort PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
        public const ushort MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
        public const ushort MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
        public const ushort COMPLETION_STATUS_KHR = 0x91B1;
        public const ushort COMPLETION_STATUS_ARB = 0x91B1;
        public const ushort RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
        public const ushort MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
        public const ushort MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
        public const ushort MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
        public const ushort NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
        public const ushort SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
        // Unused 0x91B8..0x91B8. 
        public const ushort COMPUTE_SHADER = 0x91B9;
        // Unused 0x91BA. 
        public const ushort MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
        public const ushort MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
        public const ushort MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
        public const ushort MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
        public const ushort MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
        public const ushort MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
        // Unused 0x91C0..0x91C4. 
        public const ushort FLOAT16_MAT2_AMD = 0x91C5;
        public const ushort FLOAT16_MAT3_AMD = 0x91C6;
        public const ushort FLOAT16_MAT4_AMD = 0x91C7;
        public const ushort FLOAT16_MAT2x3_AMD = 0x91C8;
        public const ushort FLOAT16_MAT2x4_AMD = 0x91C9;
        public const ushort FLOAT16_MAT3x2_AMD = 0x91CA;
        public const ushort FLOAT16_MAT3x4_AMD = 0x91CB;
        public const ushort FLOAT16_MAT4x2_AMD = 0x91CC;
        public const ushort FLOAT16_MAT4x3_AMD = 0x91CD;
        // Unused 0x91CE..0x923F. 
        
        // . Khronos error #6473,6884
        public const ushort UNPACK_FLIP_Y_WEBGL = 0x9240;
        public const ushort UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
        public const ushort CONTEXT_LOST_WEBGL = 0x9242;
        public const ushort UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
        public const ushort BROWSER_DEFAULT_WEBGL = 0x9244;
        // Unused 0x9245..0x924F. 
        
        // . For Eisaku Ohbuchi via email
        public const ushort SHADER_BINARY_DMP = 0x9250;
        public const ushort SMAPHS30_PROGRAM_BINARY_DMP = 0x9251;
        public const ushort SMAPHS_PROGRAM_BINARY_DMP = 0x9252;
        public const ushort DMP_PROGRAM_BINARY_DMP = 0x9253;
        // Unused 0x9254..0x925F. 
        
        // . Khronos error #7486
        public const ushort GCCSO_SHADER_BINARY_FJ = 0x9260;
        // Unused 0x9261..0x926F. 
        
        // . Khronos error #7625
        public const ushort COMPRESSED_R11_EAC = 0x9270;
        public const ushort COMPRESSED_R11_EAC_OES = 0x9270;
        public const ushort COMPRESSED_SIGNED_R11_EAC = 0x9271;
        public const ushort COMPRESSED_SIGNED_R11_EAC_OES = 0x9271;
        public const ushort COMPRESSED_RG11_EAC = 0x9272;
        public const ushort COMPRESSED_RG11_EAC_OES = 0x9272;
        public const ushort COMPRESSED_SIGNED_RG11_EAC = 0x9273;
        public const ushort COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273;
        public const ushort COMPRESSED_RGB8_ETC2 = 0x9274;
        public const ushort COMPRESSED_RGB8_ETC2_OES = 0x9274;
        public const ushort COMPRESSED_SRGB8_ETC2 = 0x9275;
        public const ushort COMPRESSED_SRGB8_ETC2_OES = 0x9275;
        public const ushort COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
        public const ushort COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276;
        public const ushort COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
        public const ushort COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277;
        public const ushort COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
        public const ushort COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279;
        // Unused 0x927A..0x927F. 
        
        // . Khronos error #7658
        public const ushort BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
        public const ushort BLEND_OVERLAP_NV = 0x9281;
        public const ushort UNCORRELATED_NV = 0x9282;
        public const ushort DISJOINT_NV = 0x9283;
        public const ushort CONJOINT_NV = 0x9284;
        public const ushort BLEND_ADVANCED_COHERENT_KHR = 0x9285;
        public const ushort BLEND_ADVANCED_COHERENT_NV = 0x9285;
        public const ushort SRC_NV = 0x9286;
        public const ushort DST_NV = 0x9287;
        public const ushort SRC_OVER_NV = 0x9288;
        public const ushort DST_OVER_NV = 0x9289;
        public const ushort SRC_IN_NV = 0x928A;
        public const ushort DST_IN_NV = 0x928B;
        public const ushort SRC_OUT_NV = 0x928C;
        public const ushort DST_OUT_NV = 0x928D;
        public const ushort SRC_ATOP_NV = 0x928E;
        public const ushort DST_ATOP_NV = 0x928F;
        // Unused 0x9290. 
        public const ushort PLUS_NV = 0x9291;
        public const ushort PLUS_DARKER_NV = 0x9292;
        // Unused 0x9293. 
        public const ushort MULTIPLY = 0x9294;
        public const ushort MULTIPLY_KHR = 0x9294;
        public const ushort MULTIPLY_NV = 0x9294;
        public const ushort SCREEN = 0x9295;
        public const ushort SCREEN_KHR = 0x9295;
        public const ushort SCREEN_NV = 0x9295;
        public const ushort OVERLAY = 0x9296;
        public const ushort OVERLAY_KHR = 0x9296;
        public const ushort OVERLAY_NV = 0x9296;
        public const ushort DARKEN = 0x9297;
        public const ushort DARKEN_KHR = 0x9297;
        public const ushort DARKEN_NV = 0x9297;
        public const ushort LIGHTEN = 0x9298;
        public const ushort LIGHTEN_KHR = 0x9298;
        public const ushort LIGHTEN_NV = 0x9298;
        public const ushort COLORDODGE = 0x9299;
        public const ushort COLORDODGE_KHR = 0x9299;
        public const ushort COLORDODGE_NV = 0x9299;
        public const ushort COLORBURN = 0x929A;
        public const ushort COLORBURN_KHR = 0x929A;
        public const ushort COLORBURN_NV = 0x929A;
        public const ushort HARDLIGHT = 0x929B;
        public const ushort HARDLIGHT_KHR = 0x929B;
        public const ushort HARDLIGHT_NV = 0x929B;
        public const ushort SOFTLIGHT = 0x929C;
        public const ushort SOFTLIGHT_KHR = 0x929C;
        public const ushort SOFTLIGHT_NV = 0x929C;
        // Unused 0x929D. 
        public const ushort DIFFERENCE = 0x929E;
        public const ushort DIFFERENCE_KHR = 0x929E;
        public const ushort DIFFERENCE_NV = 0x929E;
        public const ushort MINUS_NV = 0x929F;
        public const ushort EXCLUSION = 0x92A0;
        public const ushort EXCLUSION_KHR = 0x92A0;
        public const ushort EXCLUSION_NV = 0x92A0;
        public const ushort CONTRAST_NV = 0x92A1;
        // Unused 0x92A2. 
        public const ushort INVERT_RGB_NV = 0x92A3;
        public const ushort LINEARDODGE_NV = 0x92A4;
        public const ushort LINEARBURN_NV = 0x92A5;
        public const ushort VIVIDLIGHT_NV = 0x92A6;
        public const ushort LINEARLIGHT_NV = 0x92A7;
        public const ushort PINLIGHT_NV = 0x92A8;
        public const ushort HARDMIX_NV = 0x92A9;
        // Unused 0x92AA..0x92AC. 
        public const ushort HSL_HUE = 0x92AD;
        public const ushort HSL_HUE_KHR = 0x92AD;
        public const ushort HSL_HUE_NV = 0x92AD;
        public const ushort HSL_SATURATION = 0x92AE;
        public const ushort HSL_SATURATION_KHR = 0x92AE;
        public const ushort HSL_SATURATION_NV = 0x92AE;
        public const ushort HSL_COLOR = 0x92AF;
        public const ushort HSL_COLOR_KHR = 0x92AF;
        public const ushort HSL_COLOR_NV = 0x92AF;
        public const ushort HSL_LUMINOSITY = 0x92B0;
        public const ushort HSL_LUMINOSITY_KHR = 0x92B0;
        public const ushort HSL_LUMINOSITY_NV = 0x92B0;
        public const ushort PLUS_CLAMPED_NV = 0x92B1;
        public const ushort PLUS_CLAMPED_ALPHA_NV = 0x92B2;
        public const ushort MINUS_CLAMPED_NV = 0x92B3;
        public const ushort INVERT_OVG_NV = 0x92B4;
        // Unused 0x92B5..0x92B9. 
        public const ushort MAX_LGPU_GPUS_NVX = 0x92BA;
        public const ushort MULTICAST_GPUS_NV = 0x92BA;
        public const ushort PURGED_CONTEXT_RESET_NV = 0x92BB;
        // Unused 0x92BC..0x92BD. 
        public const ushort PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
        public const ushort PRIMITIVE_BOUNDING_BOX = 0x92BE;
        public const ushort PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE;
        public const ushort PRIMITIVE_BOUNDING_BOX_OES = 0x92BE;
        public const ushort ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
        public const ushort ATOMIC_COUNTER_BUFFER = 0x92C0;
        public const ushort ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
        public const ushort ATOMIC_COUNTER_BUFFER_START = 0x92C2;
        public const ushort ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
        public const ushort ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
        public const ushort ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
        public const ushort ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
        public const ushort MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CD;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CE;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CF;
        public const ushort MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
        public const ushort MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
        public const ushort MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3;
        public const ushort MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4;
        public const ushort MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5;
        public const ushort MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5;
        public const ushort MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
        public const ushort MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
        public const ushort MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
        public const ushort ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
        public const ushort UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
        public const ushort UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
        public const ushort MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
        public const ushort FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
        public const ushort FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
        public const ushort MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
        public const ushort DEBUG_OUTPUT = 0x92E0;
        public const ushort DEBUG_OUTPUT_KHR = 0x92E0;
        public const ushort UNIFORM = 0x92E1;
        public const ushort UNIFORM_BLOCK = 0x92E2;
        public const ushort PROGRAM_INPUT = 0x92E3;
        public const ushort PROGRAM_OUTPUT = 0x92E4;
        public const ushort BUFFER_VARIABLE = 0x92E5;
        public const ushort SHADER_STORAGE_BLOCK = 0x92E6;
        public const ushort IS_PER_PATCH = 0x92E7;
        public const ushort IS_PER_PATCH_EXT = 0x92E7;
        public const ushort IS_PER_PATCH_OES = 0x92E7;
        public const ushort VERTEX_SUBROUTINE = 0x92E8;
        public const ushort TESS_CONTROL_SUBROUTINE = 0x92E9;
        public const ushort TESS_EVALUATION_SUBROUTINE = 0x92EA;
        public const ushort GEOMETRY_SUBROUTINE = 0x92EB;
        public const ushort FRAGMENT_SUBROUTINE = 0x92EC;
        public const ushort COMPUTE_SUBROUTINE = 0x92ED;
        public const ushort VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
        public const ushort TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
        public const ushort TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
        public const ushort GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
        public const ushort FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
        public const ushort COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
        public const ushort TRANSFORM_FEEDBACK_VARYING = 0x92F4;
        public const ushort ACTIVE_RESOURCES = 0x92F5;
        public const ushort MAX_NAME_LENGTH = 0x92F6;
        public const ushort MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
        public const ushort MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
        public const ushort NAME_LENGTH = 0x92F9;
        public const ushort TYPE = 0x92FA;
        public const ushort ARRAY_SIZE = 0x92FB;
        public const ushort OFFSET = 0x92FC;
        public const ushort BLOCK_INDEX = 0x92FD;
        public const ushort ARRAY_STRIDE = 0x92FE;
        public const ushort MATRIX_STRIDE = 0x92FF;
        public const ushort IS_ROW_MAJOR = 0x9300;
        public const ushort ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
        public const ushort BUFFER_BINDING = 0x9302;
        public const ushort BUFFER_DATA_SIZE = 0x9303;
        public const ushort NUM_ACTIVE_VARIABLES = 0x9304;
        public const ushort ACTIVE_VARIABLES = 0x9305;
        public const ushort REFERENCED_BY_VERTEX_SHADER = 0x9306;
        public const ushort REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
        public const ushort REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307;
        public const ushort REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307;
        public const ushort REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
        public const ushort REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308;
        public const ushort REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308;
        public const ushort REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
        public const ushort REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309;
        public const ushort REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309;
        public const ushort REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
        public const ushort REFERENCED_BY_COMPUTE_SHADER = 0x930B;
        public const ushort TOP_LEVEL_ARRAY_SIZE = 0x930C;
        public const ushort TOP_LEVEL_ARRAY_STRIDE = 0x930D;
        public const ushort LOCATION = 0x930E;
        public const ushort LOCATION_INDEX = 0x930F;
        public const ushort LOCATION_INDEX_EXT = 0x930F;
        public const ushort FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
        public const ushort FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
        public const ushort FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
        public const ushort FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312;
        public const ushort FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312;
        public const ushort FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
        public const ushort FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
        public const ushort MAX_FRAMEBUFFER_WIDTH = 0x9315;
        public const ushort MAX_FRAMEBUFFER_HEIGHT = 0x9316;
        public const ushort MAX_FRAMEBUFFER_LAYERS = 0x9317;
        public const ushort MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317;
        public const ushort MAX_FRAMEBUFFER_LAYERS_OES = 0x9317;
        public const ushort MAX_FRAMEBUFFER_SAMPLES = 0x9318;
        // Unused 0x9319..0x9326. 
        public const ushort RASTER_MULTISAMPLE_EXT = 0x9327;
        public const ushort RASTER_SAMPLES_EXT = 0x9328;
        public const ushort MAX_RASTER_SAMPLES_EXT = 0x9329;
        public const ushort RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
        public const ushort MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
        public const ushort EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
        public const ushort DEPTH_SAMPLES_NV = 0x932D;
        public const ushort STENCIL_SAMPLES_NV = 0x932E;
        public const ushort MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
        public const ushort MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
        public const ushort COVERAGE_MODULATION_TABLE_NV = 0x9331;
        public const ushort COVERAGE_MODULATION_NV = 0x9332;
        public const ushort COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
        // Unused 0x9334..0x9338. 
        public const ushort WARP_SIZE_NV = 0x9339;
        public const ushort WARPS_PER_SM_NV = 0x933A;
        public const ushort SM_COUNT_NV = 0x933B;
        public const ushort FILL_RECTANGLE_NV = 0x933C;
        public const ushort SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
        public const ushort SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
        public const ushort SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
        public const ushort SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
        public const ushort SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
        public const ushort SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
        public const ushort PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
        public const ushort PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
        public const ushort PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
        public const ushort PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
        public const ushort FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
        public const ushort FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
        public const ushort FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
        public const ushort FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
        public const ushort MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
        public const ushort MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
        public const ushort CONSERVATIVE_RASTERIZATION_NV = 0x9346;
        public const ushort SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
        public const ushort SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
        public const ushort MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
        public const ushort LOCATION_COMPONENT = 0x934A;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
        public const ushort TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
        public const ushort ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
        public const ushort ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
        public const ushort ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
        public const ushort VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
        public const ushort VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
        public const ushort VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
        public const ushort VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
        public const ushort VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
        public const ushort VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
        public const ushort VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
        public const ushort VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
        public const ushort VIEWPORT_SWIZZLE_X_NV = 0x9358;
        public const ushort VIEWPORT_SWIZZLE_Y_NV = 0x9359;
        public const ushort VIEWPORT_SWIZZLE_Z_NV = 0x935A;
        public const ushort VIEWPORT_SWIZZLE_W_NV = 0x935B;
        public const ushort CLIP_ORIGIN = 0x935C;
        public const ushort CLIP_ORIGIN_EXT = 0x935C;
        public const ushort CLIP_DEPTH_MODE = 0x935D;
        public const ushort CLIP_DEPTH_MODE_EXT = 0x935D;
        public const ushort NEGATIVE_ONE_TO_ONE = 0x935E;
        public const ushort NEGATIVE_ONE_TO_ONE_EXT = 0x935E;
        public const ushort ZERO_TO_ONE = 0x935F;
        public const ushort ZERO_TO_ONE_EXT = 0x935F;
        // Unused 0x9360..0x9364. 
        public const ushort CLEAR_TEXTURE = 0x9365;
        public const ushort TEXTURE_REDUCTION_MODE_ARB = 0x9366;
        public const ushort TEXTURE_REDUCTION_MODE_EXT = 0x9366;
        public const ushort WEIGHTED_AVERAGE_ARB = 0x9367;
        public const ushort WEIGHTED_AVERAGE_EXT = 0x9367;
        public const ushort FONT_GLYPHS_AVAILABLE_NV = 0x9368;
        public const ushort FONT_TARGET_UNAVAILABLE_NV = 0x9369;
        public const ushort FONT_UNAVAILABLE_NV = 0x936A;
        public const ushort FONT_UNINTELLIGIBLE_NV = 0x936B;
        public const ushort STANDARD_FONT_FORMAT_NV = 0x936C;
        public const ushort FRAGMENT_INPUT_NV = 0x936D;
        public const ushort UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
        public const ushort UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
        public const ushort UNIFORM_BUFFER_LENGTH_NV = 0x9370;
        public const ushort MULTISAMPLES_NV = 0x9371;
        public const ushort SUPERSAMPLE_SCALE_X_NV = 0x9372;
        public const ushort SUPERSAMPLE_SCALE_Y_NV = 0x9373;
        public const ushort CONFORMANT_NV = 0x9374;
        // Unused 0x9375..0x9378. 
        public const ushort CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
        public const ushort CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
        public const ushort CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
        public const ushort VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
        public const ushort VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
        public const ushort VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
        public const ushort REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
        
        // . 
        public const ushort NUM_SAMPLE_COUNTS = 0x9380;
        public const ushort MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
        public const ushort MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;
        public const ushort MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
        public const ushort MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;
        public const ushort VIEW_CLASS_EAC_R11 = 0x9383;
        public const ushort VIEW_CLASS_EAC_RG11 = 0x9384;
        public const ushort VIEW_CLASS_ETC2_RGB = 0x9385;
        public const ushort VIEW_CLASS_ETC2_RGBA = 0x9386;
        public const ushort VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
        public const ushort VIEW_CLASS_ASTC_4x4_RGBA = 0x9388;
        public const ushort VIEW_CLASS_ASTC_5x4_RGBA = 0x9389;
        public const ushort VIEW_CLASS_ASTC_5x5_RGBA = 0x938A;
        public const ushort VIEW_CLASS_ASTC_6x5_RGBA = 0x938B;
        public const ushort VIEW_CLASS_ASTC_6x6_RGBA = 0x938C;
        public const ushort VIEW_CLASS_ASTC_8x5_RGBA = 0x938D;
        public const ushort VIEW_CLASS_ASTC_8x6_RGBA = 0x938E;
        public const ushort VIEW_CLASS_ASTC_8x8_RGBA = 0x938F;
        public const ushort VIEW_CLASS_ASTC_10x5_RGBA = 0x9390;
        public const ushort VIEW_CLASS_ASTC_10x6_RGBA = 0x9391;
        public const ushort VIEW_CLASS_ASTC_10x8_RGBA = 0x9392;
        public const ushort VIEW_CLASS_ASTC_10x10_RGBA = 0x9393;
        public const ushort VIEW_CLASS_ASTC_12x10_RGBA = 0x9394;
        public const ushort VIEW_CLASS_ASTC_12x12_RGBA = 0x9395;
        // Unused 0x9396..0x939F. reserved for ASTC 3D interactions with ARB_ifq2
        
        // . Khronos error #8100
        public const ushort TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0;
        public const ushort BGRA8_EXT = 0x93A1;
        public const ushort TEXTURE_USAGE_ANGLE = 0x93A2;
        public const ushort FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3;
        public const ushort PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4;
        // Unused 0x93A5. 
        public const ushort PROGRAM_BINARY_ANGLE = 0x93A6;
        // Unused 0x93A7..0x93AF. 
        
        // . Khronos error #8853
        public const ushort COMPRESSED_RGBA_ASTC_4x4 = 0x93B0;
        public const ushort COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
        public const ushort COMPRESSED_RGBA_ASTC_5x4 = 0x93B1;
        public const ushort COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
        public const ushort COMPRESSED_RGBA_ASTC_5x5 = 0x93B2;
        public const ushort COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
        public const ushort COMPRESSED_RGBA_ASTC_6x5 = 0x93B3;
        public const ushort COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
        public const ushort COMPRESSED_RGBA_ASTC_6x6 = 0x93B4;
        public const ushort COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
        public const ushort COMPRESSED_RGBA_ASTC_8x5 = 0x93B5;
        public const ushort COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
        public const ushort COMPRESSED_RGBA_ASTC_8x6 = 0x93B6;
        public const ushort COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
        public const ushort COMPRESSED_RGBA_ASTC_8x8 = 0x93B7;
        public const ushort COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
        public const ushort COMPRESSED_RGBA_ASTC_10x5 = 0x93B8;
        public const ushort COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
        public const ushort COMPRESSED_RGBA_ASTC_10x6 = 0x93B9;
        public const ushort COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
        public const ushort COMPRESSED_RGBA_ASTC_10x8 = 0x93BA;
        public const ushort COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
        public const ushort COMPRESSED_RGBA_ASTC_10x10 = 0x93BB;
        public const ushort COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
        public const ushort COMPRESSED_RGBA_ASTC_12x10 = 0x93BC;
        public const ushort COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
        public const ushort COMPRESSED_RGBA_ASTC_12x12 = 0x93BD;
        public const ushort COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
        // Unused 0x93BE..0x93BF. 
        public const ushort COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0;
        public const ushort COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1;
        public const ushort COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2;
        public const ushort COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3;
        public const ushort COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4;
        public const ushort COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5;
        public const ushort COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6;
        public const ushort COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7;
        public const ushort COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8;
        public const ushort COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9;
        // Unused 0x93CA..0x93CF. 
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
        // Unused 0x93DE..0x93DF. 
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8;
        public const ushort COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9;
        // Unused 0x93EA..0x93EF. 
        
        // . Khronos error #10233
        public const ushort COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0;
        public const ushort COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1;
        // Unused 0x93F2..0x94EF. 
        
        // . Khronos error #11345
        public const ushort PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
        public const ushort PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
        public const ushort PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
        public const ushort PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
        public const ushort PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
        public const ushort PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
        // Unused 0x94F6..0x94F7. 
        public const ushort PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
        public const ushort PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
        public const ushort PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
        public const ushort PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
        public const ushort PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
        public const ushort PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
        public const ushort PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
        public const ushort PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
        public const ushort PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
        // Unused 0x9501..0x950F. 
        
        // . Khronos error #12203
        // Unused 0x9510..0x952F. 
        
        // . Khronos error #12977
        public const ushort LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530;
        public const ushort LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531;
        public const ushort SUBGROUP_SIZE_KHR = 0x9532;
        public const ushort SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
        public const ushort SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
        public const ushort SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
        public const ushort MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
        public const ushort MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
        public const ushort MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
        public const ushort MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
        public const ushort MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
        public const ushort MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
        public const ushort MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
        public const ushort MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
        public const ushort MESH_WORK_GROUP_SIZE_NV = 0x953E;
        public const ushort TASK_WORK_GROUP_SIZE_NV = 0x953F;
        public const ushort QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;
        // Unused 0x9541. 
        public const ushort QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;
        public const ushort MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
        public const ushort QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;
        public const ushort QUERY_RESOURCE_TEXTURE_NV = 0x9545;
        public const ushort QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;
        public const ushort QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;
        public const ushort PER_GPU_STORAGE_NV = 0x9548;
        public const ushort MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
        public const ushort UPLOAD_GPU_MASK_NVX = 0x954A;
        // Unused 0x954B..0x954C. 
        public const ushort CONSERVATIVE_RASTER_MODE_NV = 0x954D;
        public const ushort CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
        public const ushort CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
        public const ushort CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
        public const ushort SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
        public const ushort SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
        public const ushort SPIR_V_BINARY = 0x9552;
        public const ushort SPIR_V_BINARY_ARB = 0x9552;
        public const ushort SPIR_V_EXTENSIONS = 0x9553;
        public const ushort NUM_SPIR_V_EXTENSIONS = 0x9554;
        public const ushort SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
        public const ushort SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
        public const ushort MAX_MESH_VIEWS_NV = 0x9557;
        public const ushort RENDER_GPU_MASK_NV = 0x9558;
        public const ushort MESH_SHADER_NV = 0x9559;
        public const ushort TASK_SHADER_NV = 0x955A;
        public const ushort SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
        public const ushort SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
        public const ushort SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
        public const ushort SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
        public const ushort MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
        // Unused 0x9560..0x9562. 
        public const ushort SHADING_RATE_IMAGE_NV = 0x9563;
        public const ushort SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
        public const ushort SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
        public const ushort SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
        public const ushort SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
        public const ushort SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
        public const ushort SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
        public const ushort SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
        public const ushort SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
        public const ushort SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
        public const ushort SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
        public const ushort SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
        public const ushort SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
        // Unused 0x9570..0x9578. 
        public const ushort MESH_VERTICES_OUT_NV = 0x9579;
        public const ushort MESH_PRIMITIVES_OUT_NV = 0x957A;
        public const ushort MESH_OUTPUT_TYPE_NV = 0x957B;
        public const ushort MESH_SUBROUTINE_NV = 0x957C;
        public const ushort TASK_SUBROUTINE_NV = 0x957D;
        public const ushort MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
        public const ushort TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
        public const ushort TEXTURE_TILING_EXT = 0x9580;
        public const ushort DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
        public const ushort NUM_TILING_TYPES_EXT = 0x9582;
        public const ushort TILING_TYPES_EXT = 0x9583;
        public const ushort OPTIMAL_TILING_EXT = 0x9584;
        public const ushort LINEAR_TILING_EXT = 0x9585;
        public const ushort HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
        public const ushort HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
        public const ushort HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
        public const ushort HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
        public const ushort HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
        public const ushort HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
        public const ushort HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
        public const ushort LAYOUT_GENERAL_EXT = 0x958D;
        public const ushort LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
        public const ushort LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
        public const ushort LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
        public const ushort LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
        public const ushort LAYOUT_TRANSFER_SRC_EXT = 0x9592;
        public const ushort LAYOUT_TRANSFER_DST_EXT = 0x9593;
        public const ushort HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
        public const ushort D3D12_FENCE_VALUE_EXT = 0x9595;
        public const ushort NUM_DEVICE_UUIDS_EXT = 0x9596;
        public const ushort DEVICE_UUID_EXT = 0x9597;
        public const ushort DRIVER_UUID_EXT = 0x9598;
        public const ushort DEVICE_LUID_EXT = 0x9599;
        public const ushort DEVICE_NODE_MASK_EXT = 0x959A;
        public const ushort PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
        public const ushort UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
        public const ushort ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
        public const ushort REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
        public const ushort REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
        public const ushort MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
        public const ushort MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
        public const ushort ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
        public const ushort ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
        public const ushort MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
        public const ushort MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
        public const ushort MEMORY_ATTACHABLE_NV = 0x95A8;
        public const ushort DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
        public const ushort DETACHED_TEXTURES_NV = 0x95AA;
        public const ushort DETACHED_BUFFERS_NV = 0x95AB;
        public const ushort MAX_DETACHED_TEXTURES_NV = 0x95AC;
        public const ushort MAX_DETACHED_BUFFERS_NV = 0x95AD;
        public const ushort SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
        public const ushort SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
        public const ushort SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
        // Unused 0x9581..0x962F. 
        
        // . Email from Cass Everitt
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
        public const ushort MAX_VIEWS_OVR = 0x9631;
        public const ushort FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
        public const ushort FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
        // Unused 0x9634..0x963F. 
        
        // . Khronos error #14294
        public const ushort GS_SHADER_BINARY_MTK = 0x9640;
        public const ushort GS_PROGRAM_BINARY_MTK = 0x9641;
        // Unused 0x9642..0x964F. 
        
        // . Khronos error #14977
        public const ushort MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650;
        public const ushort MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651;
        public const ushort FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652;
        // Unused 0x9653..0x968F. 
        
        // . Khronos error #15423
        // Unused 0x9690..0x969F. 
        
        // . contact Jeff Leger
        // Unused 0x96A0..0x96A1. 
        public const ushort FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2;
        public const ushort VALIDATE_SHADER_BINARY_QCOM = 0x96A3;
        public const ushort SHADING_RATE_QCOM = 0x96A4;
        public const ushort SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = 0x96A5;
        public const ushort SHADING_RATE_1X1_PIXELS_QCOM = 0x96A6;
        public const ushort SHADING_RATE_1X2_PIXELS_QCOM = 0x96A7;
        public const ushort SHADING_RATE_2X1_PIXELS_QCOM = 0x96A8;
        public const ushort SHADING_RATE_2X2_PIXELS_QCOM = 0x96A9;
        public const ushort SHADING_RATE_1X4_PIXELS_QCOM = 0x96AA;
        public const ushort SHADING_RATE_4X1_PIXELS_QCOM = 0x96AB;
        public const ushort SHADING_RATE_4X2_PIXELS_QCOM = 0x96AC;
        public const ushort SHADING_RATE_2X4_PIXELS_QCOM = 0x96AD;
        public const ushort SHADING_RATE_4X4_PIXELS_QCOM = 0x96AE;
        // Unused 0x96AF..0x96AF. 
        
        // . github pull request
        // Unused 0x96B0..0x96BF. 
        
        // . Contact Jan-Harald Fredriksen
        // Unused 0x96C0..0x96CF. 
        
        // . RESERVED FOR FUTURE ALLOCATIONS BY KHRONOS
        // Unused 0x96D0..99999. RESERVED
        
        // . GLU enums
        
        // . Conformance test enums
        
        // . Unused, unlikely to ever be used
        
        // . IBM is out of the graphics hardware business. Most of this range will remain unused.
        public const int RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
        public const int CULL_VERTEX_IBM = 103050;
        public const int ALL_STATIC_DATA_IBM = 103060;
        public const int STATIC_VERTEX_ARRAY_IBM = 103061;
        public const int VERTEX_ARRAY_LIST_IBM = 103070;
        public const int NORMAL_ARRAY_LIST_IBM = 103071;
        public const int COLOR_ARRAY_LIST_IBM = 103072;
        public const int INDEX_ARRAY_LIST_IBM = 103073;
        public const int TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
        public const int EDGE_FLAG_ARRAY_LIST_IBM = 103075;
        public const int FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
        public const int SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
        public const int VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
        public const int NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
        public const int COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
        public const int INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
        public const int TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
        public const int EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
        public const int FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
        public const int SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
        
        // . NEC may be out of the graphics hardware business?
        
        // . Compaq was acquired by HP
        
        // . Kubota Pacific is out of business
        
        // . Portland Graphics was acquired by Template Graphics, which is out of business
        public const int PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public const int CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public const int RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public const int NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
        public const int NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public const int NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public const int ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public const int ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public const int ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public const int ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public const int ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public const int ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public const int STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public const int STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public const int STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public const int FULL_STIPPLE_HINT_PGI = 0x1A219;
        public const int CLIP_NEAR_HINT_PGI = 0x1A220;
        public const int CLIP_FAR_HINT_PGI = 0x1A221;
        public const int WIDE_LINE_HINT_PGI = 0x1A222;
        public const int BACK_NORMALS_HINT_PGI = 0x1A223;
        public const int VERTEX_DATA_HINT_PGI = 0x1A22A;
        public const int VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public const int MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public const int MAX_VERTEX_HINT_PGI = 0x1A22D;
        
        // . Evans and Sutherland is out of the graphics hardware business
        

        #endregion

        #region Functions

        // glAccum
        public static void glAccum(uint /*AccumOp*/  op, float /*CoordF*/  value) => glAccumPtr?.Invoke(op, value);
        private delegate void glAccumDel(uint /*AccumOp*/  op, float /*CoordF*/  value);
        private static glAccumDel glAccumPtr;
        
        // glAccumxOES
        public static void glAccumxOES(uint  op, int  value) => glAccumxOESPtr?.Invoke(op, value);
        private delegate void glAccumxOESDel(uint  op, int  value);
        private static glAccumxOESDel glAccumxOESPtr;
        
        // glActiveProgramEXT
        public static void glActiveProgramEXT(uint  program) => glActiveProgramEXTPtr?.Invoke(program);
        private delegate void glActiveProgramEXTDel(uint  program);
        private static glActiveProgramEXTDel glActiveProgramEXTPtr;
        
        // glActiveShaderProgram
        public static void glActiveShaderProgram(uint  pipeline, uint  program) => glActiveShaderProgramPtr?.Invoke(pipeline, program);
        private delegate void glActiveShaderProgramDel(uint  pipeline, uint  program);
        private static glActiveShaderProgramDel glActiveShaderProgramPtr;
        
        // glActiveShaderProgramEXT
        public static void glActiveShaderProgramEXT(uint  pipeline, uint  program) => glActiveShaderProgramEXTPtr?.Invoke(pipeline, program);
        private delegate void glActiveShaderProgramEXTDel(uint  pipeline, uint  program);
        private static glActiveShaderProgramEXTDel glActiveShaderProgramEXTPtr;
        
        // glActiveStencilFaceEXT
        public static void glActiveStencilFaceEXT(uint /*StencilFaceDirection*/  face) => glActiveStencilFaceEXTPtr?.Invoke(face);
        private delegate void glActiveStencilFaceEXTDel(uint /*StencilFaceDirection*/  face);
        private static glActiveStencilFaceEXTDel glActiveStencilFaceEXTPtr;
        
        // glActiveTexture
        public static void glActiveTexture(uint /*TextureUnit*/  texture) => glActiveTexturePtr?.Invoke(texture);
        private delegate void glActiveTextureDel(uint /*TextureUnit*/  texture);
        private static glActiveTextureDel glActiveTexturePtr;
        
        // glActiveTextureARB
        public static void glActiveTextureARB(uint /*TextureUnit*/  texture) => glActiveTextureARBPtr?.Invoke(texture);
        private delegate void glActiveTextureARBDel(uint /*TextureUnit*/  texture);
        private static glActiveTextureARBDel glActiveTextureARBPtr;
        
        // glActiveVaryingNV
        public static void glActiveVaryingNV(uint  program, string  name) => glActiveVaryingNVPtr?.Invoke(program, name);
        private delegate void glActiveVaryingNVDel(uint  program, string  name);
        private static glActiveVaryingNVDel glActiveVaryingNVPtr;
        
        // glAlphaFragmentOp1ATI
        public static void glAlphaFragmentOp1ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod) => glAlphaFragmentOp1ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        private delegate void glAlphaFragmentOp1ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod);
        private static glAlphaFragmentOp1ATIDel glAlphaFragmentOp1ATIPtr;
        
        // glAlphaFragmentOp2ATI
        public static void glAlphaFragmentOp2ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod) => glAlphaFragmentOp2ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        private delegate void glAlphaFragmentOp2ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod);
        private static glAlphaFragmentOp2ATIDel glAlphaFragmentOp2ATIPtr;
        
        // glAlphaFragmentOp3ATI
        public static void glAlphaFragmentOp3ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod) => glAlphaFragmentOp3ATIPtr?.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        private delegate void glAlphaFragmentOp3ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod);
        private static glAlphaFragmentOp3ATIDel glAlphaFragmentOp3ATIPtr;
        
        // glAlphaFunc
        public static void glAlphaFunc(uint /*AlphaFunction*/  func, float  refVal) => glAlphaFuncPtr?.Invoke(func, refVal);
        private delegate void glAlphaFuncDel(uint /*AlphaFunction*/  func, float  refVal);
        private static glAlphaFuncDel glAlphaFuncPtr;
        
        // glAlphaFuncQCOM
        public static void glAlphaFuncQCOM(uint  func, float  refVal) => glAlphaFuncQCOMPtr?.Invoke(func, refVal);
        private delegate void glAlphaFuncQCOMDel(uint  func, float  refVal);
        private static glAlphaFuncQCOMDel glAlphaFuncQCOMPtr;
        
        // glAlphaFuncx
        public static void glAlphaFuncx(uint /*AlphaFunction*/  func, int  refVal) => glAlphaFuncxPtr?.Invoke(func, refVal);
        private delegate void glAlphaFuncxDel(uint /*AlphaFunction*/  func, int  refVal);
        private static glAlphaFuncxDel glAlphaFuncxPtr;
        
        // glAlphaFuncxOES
        public static void glAlphaFuncxOES(uint /*AlphaFunction*/  func, int /*ClampedFixed*/  refVal) => glAlphaFuncxOESPtr?.Invoke(func, refVal);
        private delegate void glAlphaFuncxOESDel(uint /*AlphaFunction*/  func, int /*ClampedFixed*/  refVal);
        private static glAlphaFuncxOESDel glAlphaFuncxOESPtr;
        
        // glAlphaToCoverageDitherControlNV
        public static void glAlphaToCoverageDitherControlNV(uint  mode) => glAlphaToCoverageDitherControlNVPtr?.Invoke(mode);
        private delegate void glAlphaToCoverageDitherControlNVDel(uint  mode);
        private static glAlphaToCoverageDitherControlNVDel glAlphaToCoverageDitherControlNVPtr;
        
        // glApplyFramebufferAttachmentCMAAINTEL
        public static void glApplyFramebufferAttachmentCMAAINTEL() => glApplyFramebufferAttachmentCMAAINTELPtr?.Invoke();
        private delegate void glApplyFramebufferAttachmentCMAAINTELDel();
        private static glApplyFramebufferAttachmentCMAAINTELDel glApplyFramebufferAttachmentCMAAINTELPtr;
        
        // glApplyTextureEXT
        public static void glApplyTextureEXT(uint /*LightTextureModeEXT*/  mode) => glApplyTextureEXTPtr?.Invoke(mode);
        private delegate void glApplyTextureEXTDel(uint /*LightTextureModeEXT*/  mode);
        private static glApplyTextureEXTDel glApplyTextureEXTPtr;
        
        // glAcquireKeyedMutexWin32EXT
        public static bool /*Boolean*/ glAcquireKeyedMutexWin32EXT(uint  memory, ulong  key, uint  timeout) => glAcquireKeyedMutexWin32EXTPtr?.Invoke(memory, key, timeout) ?? default;
        private delegate bool /*Boolean*/ glAcquireKeyedMutexWin32EXTDel(uint  memory, ulong  key, uint  timeout);
        private static glAcquireKeyedMutexWin32EXTDel glAcquireKeyedMutexWin32EXTPtr;
        
        // glAreProgramsResidentNV
        public static bool /*Boolean*/ glAreProgramsResidentNV(uint  n, uint[]  programs, bool[] /*Boolean*/  residences) => glAreProgramsResidentNVPtr?.Invoke(n, programs, residences) ?? default;
        private delegate bool /*Boolean*/ glAreProgramsResidentNVDel(uint  n, uint[]  programs, bool[] /*Boolean*/  residences);
        private static glAreProgramsResidentNVDel glAreProgramsResidentNVPtr;
        
        // glAreTexturesResident
        public static bool /*Boolean*/ glAreTexturesResident(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences) => glAreTexturesResidentPtr?.Invoke(n, textures, residences) ?? default;
        private delegate bool /*Boolean*/ glAreTexturesResidentDel(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences);
        private static glAreTexturesResidentDel glAreTexturesResidentPtr;
        
        // glAreTexturesResidentEXT
        public static bool /*Boolean*/ glAreTexturesResidentEXT(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences) => glAreTexturesResidentEXTPtr?.Invoke(n, textures, residences) ?? default;
        private delegate bool /*Boolean*/ glAreTexturesResidentEXTDel(uint  n, uint[] /*Texture*/  textures, bool[] /*Boolean*/  residences);
        private static glAreTexturesResidentEXTDel glAreTexturesResidentEXTPtr;
        
        // glArrayElement
        public static void glArrayElement(int  i) => glArrayElementPtr?.Invoke(i);
        private delegate void glArrayElementDel(int  i);
        private static glArrayElementDel glArrayElementPtr;
        
        // glArrayElementEXT
        public static void glArrayElementEXT(int  i) => glArrayElementEXTPtr?.Invoke(i);
        private delegate void glArrayElementEXTDel(int  i);
        private static glArrayElementEXTDel glArrayElementEXTPtr;
        
        // glArrayObjectATI
        public static void glArrayObjectATI(uint /*EnableCap*/  array, int  size, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset) => glArrayObjectATIPtr?.Invoke(array, size, type, stride, buffer, offset);
        private delegate void glArrayObjectATIDel(uint /*EnableCap*/  array, int  size, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset);
        private static glArrayObjectATIDel glArrayObjectATIPtr;
        
        // glAsyncCopyBufferSubDataNVX
        public static uint glAsyncCopyBufferSubDataNVX(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  fenceValueArray, uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray) => glAsyncCopyBufferSubDataNVXPtr?.Invoke(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) ?? default;
        private delegate uint glAsyncCopyBufferSubDataNVXDel(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  fenceValueArray, uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray);
        private static glAsyncCopyBufferSubDataNVXDel glAsyncCopyBufferSubDataNVXPtr;
        
        // glAsyncCopyImageSubDataNVX
        public static uint glAsyncCopyImageSubDataNVX(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  waitValueArray, uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray) => glAsyncCopyImageSubDataNVXPtr?.Invoke(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray) ?? default;
        private delegate uint glAsyncCopyImageSubDataNVXDel(uint  waitSemaphoreCount, uint[]  waitSemaphoreArray, ulong[]  waitValueArray, uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth, uint  signalSemaphoreCount, uint[]  signalSemaphoreArray, ulong[]  signalValueArray);
        private static glAsyncCopyImageSubDataNVXDel glAsyncCopyImageSubDataNVXPtr;
        
        // glAsyncMarkerSGIX
        public static void glAsyncMarkerSGIX(uint  marker) => glAsyncMarkerSGIXPtr?.Invoke(marker);
        private delegate void glAsyncMarkerSGIXDel(uint  marker);
        private static glAsyncMarkerSGIXDel glAsyncMarkerSGIXPtr;
        
        // glAttachObjectARB
        public static void glAttachObjectARB(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  obj) => glAttachObjectARBPtr?.Invoke(containerObj, obj);
        private delegate void glAttachObjectARBDel(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  obj);
        private static glAttachObjectARBDel glAttachObjectARBPtr;
        
        // glAttachShader
        public static void glAttachShader(uint  program, uint  shader) => glAttachShaderPtr?.Invoke(program, shader);
        private delegate void glAttachShaderDel(uint  program, uint  shader);
        private static glAttachShaderDel glAttachShaderPtr;
        
        // glBegin
        public static void glBegin(uint /*PrimitiveType*/  mode) => glBeginPtr?.Invoke(mode);
        private delegate void glBeginDel(uint /*PrimitiveType*/  mode);
        private static glBeginDel glBeginPtr;
        
        // glBeginConditionalRender
        public static void glBeginConditionalRender(uint  id, uint /*ConditionalRenderMode*/  mode) => glBeginConditionalRenderPtr?.Invoke(id, mode);
        private delegate void glBeginConditionalRenderDel(uint  id, uint /*ConditionalRenderMode*/  mode);
        private static glBeginConditionalRenderDel glBeginConditionalRenderPtr;
        
        // glBeginConditionalRenderNV
        public static void glBeginConditionalRenderNV(uint  id, uint /*ConditionalRenderMode*/  mode) => glBeginConditionalRenderNVPtr?.Invoke(id, mode);
        private delegate void glBeginConditionalRenderNVDel(uint  id, uint /*ConditionalRenderMode*/  mode);
        private static glBeginConditionalRenderNVDel glBeginConditionalRenderNVPtr;
        
        // glBeginConditionalRenderNVX
        public static void glBeginConditionalRenderNVX(uint  id) => glBeginConditionalRenderNVXPtr?.Invoke(id);
        private delegate void glBeginConditionalRenderNVXDel(uint  id);
        private static glBeginConditionalRenderNVXDel glBeginConditionalRenderNVXPtr;
        
        // glBeginFragmentShaderATI
        public static void glBeginFragmentShaderATI() => glBeginFragmentShaderATIPtr?.Invoke();
        private delegate void glBeginFragmentShaderATIDel();
        private static glBeginFragmentShaderATIDel glBeginFragmentShaderATIPtr;
        
        // glBeginOcclusionQueryNV
        public static void glBeginOcclusionQueryNV(uint  id) => glBeginOcclusionQueryNVPtr?.Invoke(id);
        private delegate void glBeginOcclusionQueryNVDel(uint  id);
        private static glBeginOcclusionQueryNVDel glBeginOcclusionQueryNVPtr;
        
        // glBeginPerfMonitorAMD
        public static void glBeginPerfMonitorAMD(uint  monitor) => glBeginPerfMonitorAMDPtr?.Invoke(monitor);
        private delegate void glBeginPerfMonitorAMDDel(uint  monitor);
        private static glBeginPerfMonitorAMDDel glBeginPerfMonitorAMDPtr;
        
        // glBeginPerfQueryINTEL
        public static void glBeginPerfQueryINTEL(uint  queryHandle) => glBeginPerfQueryINTELPtr?.Invoke(queryHandle);
        private delegate void glBeginPerfQueryINTELDel(uint  queryHandle);
        private static glBeginPerfQueryINTELDel glBeginPerfQueryINTELPtr;
        
        // glBeginQuery
        public static void glBeginQuery(uint /*QueryTarget*/  target, uint  id) => glBeginQueryPtr?.Invoke(target, id);
        private delegate void glBeginQueryDel(uint /*QueryTarget*/  target, uint  id);
        private static glBeginQueryDel glBeginQueryPtr;
        
        // glBeginQueryARB
        public static void glBeginQueryARB(uint  target, uint  id) => glBeginQueryARBPtr?.Invoke(target, id);
        private delegate void glBeginQueryARBDel(uint  target, uint  id);
        private static glBeginQueryARBDel glBeginQueryARBPtr;
        
        // glBeginQueryEXT
        public static void glBeginQueryEXT(uint /*QueryTarget*/  target, uint  id) => glBeginQueryEXTPtr?.Invoke(target, id);
        private delegate void glBeginQueryEXTDel(uint /*QueryTarget*/  target, uint  id);
        private static glBeginQueryEXTDel glBeginQueryEXTPtr;
        
        // glBeginQueryIndexed
        public static void glBeginQueryIndexed(uint /*QueryTarget*/  target, uint  index, uint  id) => glBeginQueryIndexedPtr?.Invoke(target, index, id);
        private delegate void glBeginQueryIndexedDel(uint /*QueryTarget*/  target, uint  index, uint  id);
        private static glBeginQueryIndexedDel glBeginQueryIndexedPtr;
        
        // glBeginTransformFeedback
        public static void glBeginTransformFeedback(uint /*PrimitiveType*/  primitiveMode) => glBeginTransformFeedbackPtr?.Invoke(primitiveMode);
        private delegate void glBeginTransformFeedbackDel(uint /*PrimitiveType*/  primitiveMode);
        private static glBeginTransformFeedbackDel glBeginTransformFeedbackPtr;
        
        // glBeginTransformFeedbackEXT
        public static void glBeginTransformFeedbackEXT(uint /*PrimitiveType*/  primitiveMode) => glBeginTransformFeedbackEXTPtr?.Invoke(primitiveMode);
        private delegate void glBeginTransformFeedbackEXTDel(uint /*PrimitiveType*/  primitiveMode);
        private static glBeginTransformFeedbackEXTDel glBeginTransformFeedbackEXTPtr;
        
        // glBeginTransformFeedbackNV
        public static void glBeginTransformFeedbackNV(uint /*PrimitiveType*/  primitiveMode) => glBeginTransformFeedbackNVPtr?.Invoke(primitiveMode);
        private delegate void glBeginTransformFeedbackNVDel(uint /*PrimitiveType*/  primitiveMode);
        private static glBeginTransformFeedbackNVDel glBeginTransformFeedbackNVPtr;
        
        // glBeginVertexShaderEXT
        public static void glBeginVertexShaderEXT() => glBeginVertexShaderEXTPtr?.Invoke();
        private delegate void glBeginVertexShaderEXTDel();
        private static glBeginVertexShaderEXTDel glBeginVertexShaderEXTPtr;
        
        // glBeginVideoCaptureNV
        public static void glBeginVideoCaptureNV(uint  video_capture_slot) => glBeginVideoCaptureNVPtr?.Invoke(video_capture_slot);
        private delegate void glBeginVideoCaptureNVDel(uint  video_capture_slot);
        private static glBeginVideoCaptureNVDel glBeginVideoCaptureNVPtr;
        
        // glBindAttribLocation
        public static void glBindAttribLocation(uint  program, uint  index, string  name) => glBindAttribLocationPtr?.Invoke(program, index, name);
        private delegate void glBindAttribLocationDel(uint  program, uint  index, string  name);
        private static glBindAttribLocationDel glBindAttribLocationPtr;
        
        // glBindAttribLocationARB
        public static void glBindAttribLocationARB(IntPtr /*handleARB*/  programObj, uint  index, string  name) => glBindAttribLocationARBPtr?.Invoke(programObj, index, name);
        private delegate void glBindAttribLocationARBDel(IntPtr /*handleARB*/  programObj, uint  index, string  name);
        private static glBindAttribLocationARBDel glBindAttribLocationARBPtr;
        
        // glBindBuffer
        public static void glBindBuffer(uint /*BufferTargetARB*/  target, uint  buffer) => glBindBufferPtr?.Invoke(target, buffer);
        private delegate void glBindBufferDel(uint /*BufferTargetARB*/  target, uint  buffer);
        private static glBindBufferDel glBindBufferPtr;
        
        // glBindBufferARB
        public static void glBindBufferARB(uint /*BufferTargetARB*/  target, uint  buffer) => glBindBufferARBPtr?.Invoke(target, buffer);
        private delegate void glBindBufferARBDel(uint /*BufferTargetARB*/  target, uint  buffer);
        private static glBindBufferARBDel glBindBufferARBPtr;
        
        // glBindBufferBase
        public static void glBindBufferBase(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => glBindBufferBasePtr?.Invoke(target, index, buffer);
        private delegate void glBindBufferBaseDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer);
        private static glBindBufferBaseDel glBindBufferBasePtr;
        
        // glBindBufferBaseEXT
        public static void glBindBufferBaseEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => glBindBufferBaseEXTPtr?.Invoke(target, index, buffer);
        private delegate void glBindBufferBaseEXTDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer);
        private static glBindBufferBaseEXTDel glBindBufferBaseEXTPtr;
        
        // glBindBufferBaseNV
        public static void glBindBufferBaseNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer) => glBindBufferBaseNVPtr?.Invoke(target, index, buffer);
        private delegate void glBindBufferBaseNVDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer);
        private static glBindBufferBaseNVDel glBindBufferBaseNVPtr;
        
        // glBindBufferOffsetEXT
        public static void glBindBufferOffsetEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset) => glBindBufferOffsetEXTPtr?.Invoke(target, index, buffer, offset);
        private delegate void glBindBufferOffsetEXTDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset);
        private static glBindBufferOffsetEXTDel glBindBufferOffsetEXTPtr;
        
        // glBindBufferOffsetNV
        public static void glBindBufferOffsetNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset) => glBindBufferOffsetNVPtr?.Invoke(target, index, buffer, offset);
        private delegate void glBindBufferOffsetNVDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset);
        private static glBindBufferOffsetNVDel glBindBufferOffsetNVPtr;
        
        // glBindBufferRange
        public static void glBindBufferRange(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glBindBufferRangePtr?.Invoke(target, index, buffer, offset, size);
        private delegate void glBindBufferRangeDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glBindBufferRangeDel glBindBufferRangePtr;
        
        // glBindBufferRangeEXT
        public static void glBindBufferRangeEXT(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glBindBufferRangeEXTPtr?.Invoke(target, index, buffer, offset, size);
        private delegate void glBindBufferRangeEXTDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glBindBufferRangeEXTDel glBindBufferRangeEXTPtr;
        
        // glBindBufferRangeNV
        public static void glBindBufferRangeNV(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glBindBufferRangeNVPtr?.Invoke(target, index, buffer, offset, size);
        private delegate void glBindBufferRangeNVDel(uint /*BufferTargetARB*/  target, uint  index, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glBindBufferRangeNVDel glBindBufferRangeNVPtr;
        
        // glBindBuffersBase
        public static void glBindBuffersBase(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers) => glBindBuffersBasePtr?.Invoke(target, first, count, buffers);
        private delegate void glBindBuffersBaseDel(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers);
        private static glBindBuffersBaseDel glBindBuffersBasePtr;
        
        // glBindBuffersRange
        public static void glBindBuffersRange(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, IntPtr[]  sizes) => glBindBuffersRangePtr?.Invoke(target, first, count, buffers, offsets, sizes);
        private delegate void glBindBuffersRangeDel(uint /*BufferTargetARB*/  target, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, IntPtr[]  sizes);
        private static glBindBuffersRangeDel glBindBuffersRangePtr;
        
        // glBindFragDataLocation
        public static void glBindFragDataLocation(uint  program, uint  color, string  name) => glBindFragDataLocationPtr?.Invoke(program, color, name);
        private delegate void glBindFragDataLocationDel(uint  program, uint  color, string  name);
        private static glBindFragDataLocationDel glBindFragDataLocationPtr;
        
        // glBindFragDataLocationEXT
        public static void glBindFragDataLocationEXT(uint  program, uint  color, string  name) => glBindFragDataLocationEXTPtr?.Invoke(program, color, name);
        private delegate void glBindFragDataLocationEXTDel(uint  program, uint  color, string  name);
        private static glBindFragDataLocationEXTDel glBindFragDataLocationEXTPtr;
        
        // glBindFragDataLocationIndexed
        public static void glBindFragDataLocationIndexed(uint  program, uint  colorNumber, uint  index, string  name) => glBindFragDataLocationIndexedPtr?.Invoke(program, colorNumber, index, name);
        private delegate void glBindFragDataLocationIndexedDel(uint  program, uint  colorNumber, uint  index, string  name);
        private static glBindFragDataLocationIndexedDel glBindFragDataLocationIndexedPtr;
        
        // glBindFragDataLocationIndexedEXT
        public static void glBindFragDataLocationIndexedEXT(uint  program, uint  colorNumber, uint  index, string  name) => glBindFragDataLocationIndexedEXTPtr?.Invoke(program, colorNumber, index, name);
        private delegate void glBindFragDataLocationIndexedEXTDel(uint  program, uint  colorNumber, uint  index, string  name);
        private static glBindFragDataLocationIndexedEXTDel glBindFragDataLocationIndexedEXTPtr;
        
        // glBindFragmentShaderATI
        public static void glBindFragmentShaderATI(uint  id) => glBindFragmentShaderATIPtr?.Invoke(id);
        private delegate void glBindFragmentShaderATIDel(uint  id);
        private static glBindFragmentShaderATIDel glBindFragmentShaderATIPtr;
        
        // glBindFramebuffer
        public static void glBindFramebuffer(uint /*FramebufferTarget*/  target, uint  framebuffer) => glBindFramebufferPtr?.Invoke(target, framebuffer);
        private delegate void glBindFramebufferDel(uint /*FramebufferTarget*/  target, uint  framebuffer);
        private static glBindFramebufferDel glBindFramebufferPtr;
        
        // glBindFramebufferEXT
        public static void glBindFramebufferEXT(uint /*FramebufferTarget*/  target, uint  framebuffer) => glBindFramebufferEXTPtr?.Invoke(target, framebuffer);
        private delegate void glBindFramebufferEXTDel(uint /*FramebufferTarget*/  target, uint  framebuffer);
        private static glBindFramebufferEXTDel glBindFramebufferEXTPtr;
        
        // glBindFramebufferOES
        public static void glBindFramebufferOES(uint /*FramebufferTarget*/  target, uint  framebuffer) => glBindFramebufferOESPtr?.Invoke(target, framebuffer);
        private delegate void glBindFramebufferOESDel(uint /*FramebufferTarget*/  target, uint  framebuffer);
        private static glBindFramebufferOESDel glBindFramebufferOESPtr;
        
        // glBindImageTexture
        public static void glBindImageTexture(uint  unit, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, uint /*InternalFormat*/  format) => glBindImageTexturePtr?.Invoke(unit, texture, level, layered, layer, access, format);
        private delegate void glBindImageTextureDel(uint  unit, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, uint /*InternalFormat*/  format);
        private static glBindImageTextureDel glBindImageTexturePtr;
        
        // glBindImageTextureEXT
        public static void glBindImageTextureEXT(uint  index, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, int  format) => glBindImageTextureEXTPtr?.Invoke(index, texture, level, layered, layer, access, format);
        private delegate void glBindImageTextureEXTDel(uint  index, uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*BufferAccessARB*/  access, int  format);
        private static glBindImageTextureEXTDel glBindImageTextureEXTPtr;
        
        // glBindImageTextures
        public static void glBindImageTextures(uint  first, uint  count, uint[]  textures) => glBindImageTexturesPtr?.Invoke(first, count, textures);
        private delegate void glBindImageTexturesDel(uint  first, uint  count, uint[]  textures);
        private static glBindImageTexturesDel glBindImageTexturesPtr;
        
        // glBindLightParameterEXT
        public static uint glBindLightParameterEXT(uint /*LightName*/  light, uint /*LightParameter*/  value) => glBindLightParameterEXTPtr?.Invoke(light, value) ?? default;
        private delegate uint glBindLightParameterEXTDel(uint /*LightName*/  light, uint /*LightParameter*/  value);
        private static glBindLightParameterEXTDel glBindLightParameterEXTPtr;
        
        // glBindMaterialParameterEXT
        public static uint glBindMaterialParameterEXT(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  value) => glBindMaterialParameterEXTPtr?.Invoke(face, value) ?? default;
        private delegate uint glBindMaterialParameterEXTDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  value);
        private static glBindMaterialParameterEXTDel glBindMaterialParameterEXTPtr;
        
        // glBindMultiTextureEXT
        public static void glBindMultiTextureEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*Texture*/  texture) => glBindMultiTextureEXTPtr?.Invoke(texunit, target, texture);
        private delegate void glBindMultiTextureEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*Texture*/  texture);
        private static glBindMultiTextureEXTDel glBindMultiTextureEXTPtr;
        
        // glBindParameterEXT
        public static uint glBindParameterEXT(uint /*VertexShaderParameterEXT*/  value) => glBindParameterEXTPtr?.Invoke(value) ?? default;
        private delegate uint glBindParameterEXTDel(uint /*VertexShaderParameterEXT*/  value);
        private static glBindParameterEXTDel glBindParameterEXTPtr;
        
        // glBindProgramARB
        public static void glBindProgramARB(uint /*ProgramTarget*/  target, uint  program) => glBindProgramARBPtr?.Invoke(target, program);
        private delegate void glBindProgramARBDel(uint /*ProgramTarget*/  target, uint  program);
        private static glBindProgramARBDel glBindProgramARBPtr;
        
        // glBindProgramNV
        public static void glBindProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id) => glBindProgramNVPtr?.Invoke(target, id);
        private delegate void glBindProgramNVDel(uint /*VertexAttribEnumNV*/  target, uint  id);
        private static glBindProgramNVDel glBindProgramNVPtr;
        
        // glBindProgramPipeline
        public static void glBindProgramPipeline(uint  pipeline) => glBindProgramPipelinePtr?.Invoke(pipeline);
        private delegate void glBindProgramPipelineDel(uint  pipeline);
        private static glBindProgramPipelineDel glBindProgramPipelinePtr;
        
        // glBindProgramPipelineEXT
        public static void glBindProgramPipelineEXT(uint  pipeline) => glBindProgramPipelineEXTPtr?.Invoke(pipeline);
        private delegate void glBindProgramPipelineEXTDel(uint  pipeline);
        private static glBindProgramPipelineEXTDel glBindProgramPipelineEXTPtr;
        
        // glBindRenderbuffer
        public static void glBindRenderbuffer(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => glBindRenderbufferPtr?.Invoke(target, renderbuffer);
        private delegate void glBindRenderbufferDel(uint /*RenderbufferTarget*/  target, uint  renderbuffer);
        private static glBindRenderbufferDel glBindRenderbufferPtr;
        
        // glBindRenderbufferEXT
        public static void glBindRenderbufferEXT(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => glBindRenderbufferEXTPtr?.Invoke(target, renderbuffer);
        private delegate void glBindRenderbufferEXTDel(uint /*RenderbufferTarget*/  target, uint  renderbuffer);
        private static glBindRenderbufferEXTDel glBindRenderbufferEXTPtr;
        
        // glBindRenderbufferOES
        public static void glBindRenderbufferOES(uint /*RenderbufferTarget*/  target, uint  renderbuffer) => glBindRenderbufferOESPtr?.Invoke(target, renderbuffer);
        private delegate void glBindRenderbufferOESDel(uint /*RenderbufferTarget*/  target, uint  renderbuffer);
        private static glBindRenderbufferOESDel glBindRenderbufferOESPtr;
        
        // glBindSampler
        public static void glBindSampler(uint  unit, uint  sampler) => glBindSamplerPtr?.Invoke(unit, sampler);
        private delegate void glBindSamplerDel(uint  unit, uint  sampler);
        private static glBindSamplerDel glBindSamplerPtr;
        
        // glBindSamplers
        public static void glBindSamplers(uint  first, uint  count, uint[]  samplers) => glBindSamplersPtr?.Invoke(first, count, samplers);
        private delegate void glBindSamplersDel(uint  first, uint  count, uint[]  samplers);
        private static glBindSamplersDel glBindSamplersPtr;
        
        // glBindShadingRateImageNV
        public static void glBindShadingRateImageNV(uint  texture) => glBindShadingRateImageNVPtr?.Invoke(texture);
        private delegate void glBindShadingRateImageNVDel(uint  texture);
        private static glBindShadingRateImageNVDel glBindShadingRateImageNVPtr;
        
        // glBindTexGenParameterEXT
        public static uint glBindTexGenParameterEXT(uint /*TextureUnit*/  unit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  value) => glBindTexGenParameterEXTPtr?.Invoke(unit, coord, value) ?? default;
        private delegate uint glBindTexGenParameterEXTDel(uint /*TextureUnit*/  unit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  value);
        private static glBindTexGenParameterEXTDel glBindTexGenParameterEXTPtr;
        
        // glBindTexture
        public static void glBindTexture(uint /*TextureTarget*/  target, uint /*Texture*/  texture) => glBindTexturePtr?.Invoke(target, texture);
        private delegate void glBindTextureDel(uint /*TextureTarget*/  target, uint /*Texture*/  texture);
        private static glBindTextureDel glBindTexturePtr;
        
        // glBindTextureEXT
        public static void glBindTextureEXT(uint /*TextureTarget*/  target, uint /*Texture*/  texture) => glBindTextureEXTPtr?.Invoke(target, texture);
        private delegate void glBindTextureEXTDel(uint /*TextureTarget*/  target, uint /*Texture*/  texture);
        private static glBindTextureEXTDel glBindTextureEXTPtr;
        
        // glBindTextureUnit
        public static void glBindTextureUnit(uint  unit, uint  texture) => glBindTextureUnitPtr?.Invoke(unit, texture);
        private delegate void glBindTextureUnitDel(uint  unit, uint  texture);
        private static glBindTextureUnitDel glBindTextureUnitPtr;
        
        // glBindTextureUnitParameterEXT
        public static uint glBindTextureUnitParameterEXT(uint /*TextureUnit*/  unit, uint /*VertexShaderTextureUnitParameter*/  value) => glBindTextureUnitParameterEXTPtr?.Invoke(unit, value) ?? default;
        private delegate uint glBindTextureUnitParameterEXTDel(uint /*TextureUnit*/  unit, uint /*VertexShaderTextureUnitParameter*/  value);
        private static glBindTextureUnitParameterEXTDel glBindTextureUnitParameterEXTPtr;
        
        // glBindTextures
        public static void glBindTextures(uint  first, uint  count, uint[]  textures) => glBindTexturesPtr?.Invoke(first, count, textures);
        private delegate void glBindTexturesDel(uint  first, uint  count, uint[]  textures);
        private static glBindTexturesDel glBindTexturesPtr;
        
        // glBindTransformFeedback
        public static void glBindTransformFeedback(uint /*BindTransformFeedbackTarget*/  target, uint  id) => glBindTransformFeedbackPtr?.Invoke(target, id);
        private delegate void glBindTransformFeedbackDel(uint /*BindTransformFeedbackTarget*/  target, uint  id);
        private static glBindTransformFeedbackDel glBindTransformFeedbackPtr;
        
        // glBindTransformFeedbackNV
        public static void glBindTransformFeedbackNV(uint /*BufferTargetARB*/  target, uint  id) => glBindTransformFeedbackNVPtr?.Invoke(target, id);
        private delegate void glBindTransformFeedbackNVDel(uint /*BufferTargetARB*/  target, uint  id);
        private static glBindTransformFeedbackNVDel glBindTransformFeedbackNVPtr;
        
        // glBindVertexArray
        public static void glBindVertexArray(uint  array) => glBindVertexArrayPtr?.Invoke(array);
        private delegate void glBindVertexArrayDel(uint  array);
        private static glBindVertexArrayDel glBindVertexArrayPtr;
        
        // glBindVertexArrayAPPLE
        public static void glBindVertexArrayAPPLE(uint  array) => glBindVertexArrayAPPLEPtr?.Invoke(array);
        private delegate void glBindVertexArrayAPPLEDel(uint  array);
        private static glBindVertexArrayAPPLEDel glBindVertexArrayAPPLEPtr;
        
        // glBindVertexArrayOES
        public static void glBindVertexArrayOES(uint  array) => glBindVertexArrayOESPtr?.Invoke(array);
        private delegate void glBindVertexArrayOESDel(uint  array);
        private static glBindVertexArrayOESDel glBindVertexArrayOESPtr;
        
        // glBindVertexBuffer
        public static void glBindVertexBuffer(uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride) => glBindVertexBufferPtr?.Invoke(bindingindex, buffer, offset, stride);
        private delegate void glBindVertexBufferDel(uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride);
        private static glBindVertexBufferDel glBindVertexBufferPtr;
        
        // glBindVertexBuffers
        public static void glBindVertexBuffers(uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides) => glBindVertexBuffersPtr?.Invoke(first, count, buffers, offsets, strides);
        private delegate void glBindVertexBuffersDel(uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides);
        private static glBindVertexBuffersDel glBindVertexBuffersPtr;
        
        // glBindVertexShaderEXT
        public static void glBindVertexShaderEXT(uint  id) => glBindVertexShaderEXTPtr?.Invoke(id);
        private delegate void glBindVertexShaderEXTDel(uint  id);
        private static glBindVertexShaderEXTDel glBindVertexShaderEXTPtr;
        
        // glBindVideoCaptureStreamBufferNV
        public static void glBindVideoCaptureStreamBufferNV(uint  video_capture_slot, uint  stream, uint  frame_region, IntPtr /*BufferOffsetARB*/  offset) => glBindVideoCaptureStreamBufferNVPtr?.Invoke(video_capture_slot, stream, frame_region, offset);
        private delegate void glBindVideoCaptureStreamBufferNVDel(uint  video_capture_slot, uint  stream, uint  frame_region, IntPtr /*BufferOffsetARB*/  offset);
        private static glBindVideoCaptureStreamBufferNVDel glBindVideoCaptureStreamBufferNVPtr;
        
        // glBindVideoCaptureStreamTextureNV
        public static void glBindVideoCaptureStreamTextureNV(uint  video_capture_slot, uint  stream, uint  frame_region, uint  target, uint  texture) => glBindVideoCaptureStreamTextureNVPtr?.Invoke(video_capture_slot, stream, frame_region, target, texture);
        private delegate void glBindVideoCaptureStreamTextureNVDel(uint  video_capture_slot, uint  stream, uint  frame_region, uint  target, uint  texture);
        private static glBindVideoCaptureStreamTextureNVDel glBindVideoCaptureStreamTextureNVPtr;
        
        // glBinormal3bEXT
        public static void glBinormal3bEXT(sbyte  bx, sbyte  by, sbyte  bz) => glBinormal3bEXTPtr?.Invoke(bx, by, bz);
        private delegate void glBinormal3bEXTDel(sbyte  bx, sbyte  by, sbyte  bz);
        private static glBinormal3bEXTDel glBinormal3bEXTPtr;
        
        // glBinormal3bvEXT
        public static void glBinormal3bvEXT(sbyte[]  v) => glBinormal3bvEXTPtr?.Invoke(v);
        private delegate void glBinormal3bvEXTDel(sbyte[]  v);
        private static glBinormal3bvEXTDel glBinormal3bvEXTPtr;
        
        // glBinormal3dEXT
        public static void glBinormal3dEXT(double /*CoordD*/  bx, double /*CoordD*/  by, double /*CoordD*/  bz) => glBinormal3dEXTPtr?.Invoke(bx, by, bz);
        private delegate void glBinormal3dEXTDel(double /*CoordD*/  bx, double /*CoordD*/  by, double /*CoordD*/  bz);
        private static glBinormal3dEXTDel glBinormal3dEXTPtr;
        
        // glBinormal3dvEXT
        public static void glBinormal3dvEXT(double[] /*CoordD*/  v) => glBinormal3dvEXTPtr?.Invoke(v);
        private delegate void glBinormal3dvEXTDel(double[] /*CoordD*/  v);
        private static glBinormal3dvEXTDel glBinormal3dvEXTPtr;
        
        // glBinormal3fEXT
        public static void glBinormal3fEXT(float /*CoordF*/  bx, float /*CoordF*/  by, float /*CoordF*/  bz) => glBinormal3fEXTPtr?.Invoke(bx, by, bz);
        private delegate void glBinormal3fEXTDel(float /*CoordF*/  bx, float /*CoordF*/  by, float /*CoordF*/  bz);
        private static glBinormal3fEXTDel glBinormal3fEXTPtr;
        
        // glBinormal3fvEXT
        public static void glBinormal3fvEXT(float[] /*CoordF*/  v) => glBinormal3fvEXTPtr?.Invoke(v);
        private delegate void glBinormal3fvEXTDel(float[] /*CoordF*/  v);
        private static glBinormal3fvEXTDel glBinormal3fvEXTPtr;
        
        // glBinormal3iEXT
        public static void glBinormal3iEXT(int  bx, int  by, int  bz) => glBinormal3iEXTPtr?.Invoke(bx, by, bz);
        private delegate void glBinormal3iEXTDel(int  bx, int  by, int  bz);
        private static glBinormal3iEXTDel glBinormal3iEXTPtr;
        
        // glBinormal3ivEXT
        public static void glBinormal3ivEXT(int[]  v) => glBinormal3ivEXTPtr?.Invoke(v);
        private delegate void glBinormal3ivEXTDel(int[]  v);
        private static glBinormal3ivEXTDel glBinormal3ivEXTPtr;
        
        // glBinormal3sEXT
        public static void glBinormal3sEXT(short  bx, short  by, short  bz) => glBinormal3sEXTPtr?.Invoke(bx, by, bz);
        private delegate void glBinormal3sEXTDel(short  bx, short  by, short  bz);
        private static glBinormal3sEXTDel glBinormal3sEXTPtr;
        
        // glBinormal3svEXT
        public static void glBinormal3svEXT(short[]  v) => glBinormal3svEXTPtr?.Invoke(v);
        private delegate void glBinormal3svEXTDel(short[]  v);
        private static glBinormal3svEXTDel glBinormal3svEXTPtr;
        
        // glBinormalPointerEXT
        public static void glBinormalPointerEXT(uint /*BinormalPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => glBinormalPointerEXTPtr?.Invoke(type, stride, pointer);
        private delegate void glBinormalPointerEXTDel(uint /*BinormalPointerTypeEXT*/  type, uint  stride, IntPtr  pointer);
        private static glBinormalPointerEXTDel glBinormalPointerEXTPtr;
        
        // glBitmap
        public static void glBitmap(uint  width, uint  height, float /*CoordF*/  xorig, float /*CoordF*/  yorig, float /*CoordF*/  xmove, float /*CoordF*/  ymove, byte[]  bitmap) => glBitmapPtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);
        private delegate void glBitmapDel(uint  width, uint  height, float /*CoordF*/  xorig, float /*CoordF*/  yorig, float /*CoordF*/  xmove, float /*CoordF*/  ymove, byte[]  bitmap);
        private static glBitmapDel glBitmapPtr;
        
        // glBitmapxOES
        public static void glBitmapxOES(uint  width, uint  height, int  xorig, int  yorig, int  xmove, int  ymove, byte[]  bitmap) => glBitmapxOESPtr?.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);
        private delegate void glBitmapxOESDel(uint  width, uint  height, int  xorig, int  yorig, int  xmove, int  ymove, byte[]  bitmap);
        private static glBitmapxOESDel glBitmapxOESPtr;
        
        // glBlendBarrier
        public static void glBlendBarrier() => glBlendBarrierPtr?.Invoke();
        private delegate void glBlendBarrierDel();
        private static glBlendBarrierDel glBlendBarrierPtr;
        
        // glBlendBarrierKHR
        public static void glBlendBarrierKHR() => glBlendBarrierKHRPtr?.Invoke();
        private delegate void glBlendBarrierKHRDel();
        private static glBlendBarrierKHRDel glBlendBarrierKHRPtr;
        
        // glBlendBarrierNV
        public static void glBlendBarrierNV() => glBlendBarrierNVPtr?.Invoke();
        private delegate void glBlendBarrierNVDel();
        private static glBlendBarrierNVDel glBlendBarrierNVPtr;
        
        // glBlendColor
        public static void glBlendColor(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => glBlendColorPtr?.Invoke(red, green, blue, alpha);
        private delegate void glBlendColorDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha);
        private static glBlendColorDel glBlendColorPtr;
        
        // glBlendColorEXT
        public static void glBlendColorEXT(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => glBlendColorEXTPtr?.Invoke(red, green, blue, alpha);
        private delegate void glBlendColorEXTDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha);
        private static glBlendColorEXTDel glBlendColorEXTPtr;
        
        // glBlendColorxOES
        public static void glBlendColorxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => glBlendColorxOESPtr?.Invoke(red, green, blue, alpha);
        private delegate void glBlendColorxOESDel(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha);
        private static glBlendColorxOESDel glBlendColorxOESPtr;
        
        // glBlendEquation
        public static void glBlendEquation(uint /*BlendEquationModeEXT*/  mode) => glBlendEquationPtr?.Invoke(mode);
        private delegate void glBlendEquationDel(uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationDel glBlendEquationPtr;
        
        // glBlendEquationEXT
        public static void glBlendEquationEXT(uint /*BlendEquationModeEXT*/  mode) => glBlendEquationEXTPtr?.Invoke(mode);
        private delegate void glBlendEquationEXTDel(uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationEXTDel glBlendEquationEXTPtr;
        
        // glBlendEquationIndexedAMD
        public static void glBlendEquationIndexedAMD(uint  buf, uint /*BlendEquationModeEXT*/  mode) => glBlendEquationIndexedAMDPtr?.Invoke(buf, mode);
        private delegate void glBlendEquationIndexedAMDDel(uint  buf, uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationIndexedAMDDel glBlendEquationIndexedAMDPtr;
        
        // glBlendEquationOES
        public static void glBlendEquationOES(uint /*BlendEquationModeEXT*/  mode) => glBlendEquationOESPtr?.Invoke(mode);
        private delegate void glBlendEquationOESDel(uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationOESDel glBlendEquationOESPtr;
        
        // glBlendEquationSeparate
        public static void glBlendEquationSeparate(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparatePtr?.Invoke(modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateDel(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateDel glBlendEquationSeparatePtr;
        
        // glBlendEquationSeparateEXT
        public static void glBlendEquationSeparateEXT(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateEXTPtr?.Invoke(modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateEXTDel(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateEXTDel glBlendEquationSeparateEXTPtr;
        
        // glBlendEquationSeparateIndexedAMD
        public static void glBlendEquationSeparateIndexedAMD(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateIndexedAMDPtr?.Invoke(buf, modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateIndexedAMDDel(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateIndexedAMDDel glBlendEquationSeparateIndexedAMDPtr;
        
        // glBlendEquationSeparateOES
        public static void glBlendEquationSeparateOES(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateOESPtr?.Invoke(modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateOESDel(uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateOESDel glBlendEquationSeparateOESPtr;
        
        // glBlendEquationSeparatei
        public static void glBlendEquationSeparatei(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateiPtr?.Invoke(buf, modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateiDel(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateiDel glBlendEquationSeparateiPtr;
        
        // glBlendEquationSeparateiARB
        public static void glBlendEquationSeparateiARB(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateiARBPtr?.Invoke(buf, modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateiARBDel(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateiARBDel glBlendEquationSeparateiARBPtr;
        
        // glBlendEquationSeparateiEXT
        public static void glBlendEquationSeparateiEXT(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateiEXTPtr?.Invoke(buf, modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateiEXTDel(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateiEXTDel glBlendEquationSeparateiEXTPtr;
        
        // glBlendEquationSeparateiOES
        public static void glBlendEquationSeparateiOES(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha) => glBlendEquationSeparateiOESPtr?.Invoke(buf, modeRGB, modeAlpha);
        private delegate void glBlendEquationSeparateiOESDel(uint  buf, uint /*BlendEquationModeEXT*/  modeRGB, uint /*BlendEquationModeEXT*/  modeAlpha);
        private static glBlendEquationSeparateiOESDel glBlendEquationSeparateiOESPtr;
        
        // glBlendEquationi
        public static void glBlendEquationi(uint  buf, uint /*BlendEquationModeEXT*/  mode) => glBlendEquationiPtr?.Invoke(buf, mode);
        private delegate void glBlendEquationiDel(uint  buf, uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationiDel glBlendEquationiPtr;
        
        // glBlendEquationiARB
        public static void glBlendEquationiARB(uint  buf, uint /*BlendEquationModeEXT*/  mode) => glBlendEquationiARBPtr?.Invoke(buf, mode);
        private delegate void glBlendEquationiARBDel(uint  buf, uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationiARBDel glBlendEquationiARBPtr;
        
        // glBlendEquationiEXT
        public static void glBlendEquationiEXT(uint  buf, uint /*BlendEquationModeEXT*/  mode) => glBlendEquationiEXTPtr?.Invoke(buf, mode);
        private delegate void glBlendEquationiEXTDel(uint  buf, uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationiEXTDel glBlendEquationiEXTPtr;
        
        // glBlendEquationiOES
        public static void glBlendEquationiOES(uint  buf, uint /*BlendEquationModeEXT*/  mode) => glBlendEquationiOESPtr?.Invoke(buf, mode);
        private delegate void glBlendEquationiOESDel(uint  buf, uint /*BlendEquationModeEXT*/  mode);
        private static glBlendEquationiOESDel glBlendEquationiOESPtr;
        
        // glBlendFunc
        public static void glBlendFunc(uint /*BlendingFactor*/  sfactor, uint /*BlendingFactor*/  dfactor) => glBlendFuncPtr?.Invoke(sfactor, dfactor);
        private delegate void glBlendFuncDel(uint /*BlendingFactor*/  sfactor, uint /*BlendingFactor*/  dfactor);
        private static glBlendFuncDel glBlendFuncPtr;
        
        // glBlendFuncIndexedAMD
        public static void glBlendFuncIndexedAMD(uint  buf, uint  src, uint  dst) => glBlendFuncIndexedAMDPtr?.Invoke(buf, src, dst);
        private delegate void glBlendFuncIndexedAMDDel(uint  buf, uint  src, uint  dst);
        private static glBlendFuncIndexedAMDDel glBlendFuncIndexedAMDPtr;
        
        // glBlendFuncSeparate
        public static void glBlendFuncSeparate(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => glBlendFuncSeparatePtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        private delegate void glBlendFuncSeparateDel(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha);
        private static glBlendFuncSeparateDel glBlendFuncSeparatePtr;
        
        // glBlendFuncSeparateEXT
        public static void glBlendFuncSeparateEXT(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => glBlendFuncSeparateEXTPtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        private delegate void glBlendFuncSeparateEXTDel(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha);
        private static glBlendFuncSeparateEXTDel glBlendFuncSeparateEXTPtr;
        
        // glBlendFuncSeparateINGR
        public static void glBlendFuncSeparateINGR(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha) => glBlendFuncSeparateINGRPtr?.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        private delegate void glBlendFuncSeparateINGRDel(uint /*BlendingFactor*/  sfactorRGB, uint /*BlendingFactor*/  dfactorRGB, uint /*BlendingFactor*/  sfactorAlpha, uint /*BlendingFactor*/  dfactorAlpha);
        private static glBlendFuncSeparateINGRDel glBlendFuncSeparateINGRPtr;
        
        // glBlendFuncSeparateIndexedAMD
        public static void glBlendFuncSeparateIndexedAMD(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateIndexedAMDPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateIndexedAMDDel(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateIndexedAMDDel glBlendFuncSeparateIndexedAMDPtr;
        
        // glBlendFuncSeparateOES
        public static void glBlendFuncSeparateOES(uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateOESPtr?.Invoke(srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateOESDel(uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateOESDel glBlendFuncSeparateOESPtr;
        
        // glBlendFuncSeparatei
        public static void glBlendFuncSeparatei(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateiPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateiDel(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateiDel glBlendFuncSeparateiPtr;
        
        // glBlendFuncSeparateiARB
        public static void glBlendFuncSeparateiARB(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateiARBPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateiARBDel(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateiARBDel glBlendFuncSeparateiARBPtr;
        
        // glBlendFuncSeparateiEXT
        public static void glBlendFuncSeparateiEXT(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateiEXTPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateiEXTDel(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateiEXTDel glBlendFuncSeparateiEXTPtr;
        
        // glBlendFuncSeparateiOES
        public static void glBlendFuncSeparateiOES(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha) => glBlendFuncSeparateiOESPtr?.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        private delegate void glBlendFuncSeparateiOESDel(uint  buf, uint /*BlendingFactor*/  srcRGB, uint /*BlendingFactor*/  dstRGB, uint /*BlendingFactor*/  srcAlpha, uint /*BlendingFactor*/  dstAlpha);
        private static glBlendFuncSeparateiOESDel glBlendFuncSeparateiOESPtr;
        
        // glBlendFunci
        public static void glBlendFunci(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => glBlendFunciPtr?.Invoke(buf, src, dst);
        private delegate void glBlendFunciDel(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst);
        private static glBlendFunciDel glBlendFunciPtr;
        
        // glBlendFunciARB
        public static void glBlendFunciARB(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => glBlendFunciARBPtr?.Invoke(buf, src, dst);
        private delegate void glBlendFunciARBDel(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst);
        private static glBlendFunciARBDel glBlendFunciARBPtr;
        
        // glBlendFunciEXT
        public static void glBlendFunciEXT(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => glBlendFunciEXTPtr?.Invoke(buf, src, dst);
        private delegate void glBlendFunciEXTDel(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst);
        private static glBlendFunciEXTDel glBlendFunciEXTPtr;
        
        // glBlendFunciOES
        public static void glBlendFunciOES(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst) => glBlendFunciOESPtr?.Invoke(buf, src, dst);
        private delegate void glBlendFunciOESDel(uint  buf, uint /*BlendingFactor*/  src, uint /*BlendingFactor*/  dst);
        private static glBlendFunciOESDel glBlendFunciOESPtr;
        
        // glBlendParameteriNV
        public static void glBlendParameteriNV(uint  pname, int  value) => glBlendParameteriNVPtr?.Invoke(pname, value);
        private delegate void glBlendParameteriNVDel(uint  pname, int  value);
        private static glBlendParameteriNVDel glBlendParameteriNVPtr;
        
        // glBlitFramebuffer
        public static void glBlitFramebuffer(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => glBlitFramebufferPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glBlitFramebufferDel(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter);
        private static glBlitFramebufferDel glBlitFramebufferPtr;
        
        // glBlitFramebufferANGLE
        public static void glBlitFramebufferANGLE(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => glBlitFramebufferANGLEPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glBlitFramebufferANGLEDel(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter);
        private static glBlitFramebufferANGLEDel glBlitFramebufferANGLEPtr;
        
        // glBlitFramebufferEXT
        public static void glBlitFramebufferEXT(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => glBlitFramebufferEXTPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glBlitFramebufferEXTDel(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter);
        private static glBlitFramebufferEXTDel glBlitFramebufferEXTPtr;
        
        // glBlitFramebufferNV
        public static void glBlitFramebufferNV(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => glBlitFramebufferNVPtr?.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glBlitFramebufferNVDel(int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter);
        private static glBlitFramebufferNVDel glBlitFramebufferNVPtr;
        
        // glBlitNamedFramebuffer
        public static void glBlitNamedFramebuffer(uint  readFramebuffer, uint  drawFramebuffer, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter) => glBlitNamedFramebufferPtr?.Invoke(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glBlitNamedFramebufferDel(uint  readFramebuffer, uint  drawFramebuffer, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint /*BlitFramebufferFilter*/  filter);
        private static glBlitNamedFramebufferDel glBlitNamedFramebufferPtr;
        
        // glBufferAddressRangeNV
        public static void glBufferAddressRangeNV(uint  pname, uint  index, ulong  address, IntPtr /*BufferSize*/  length) => glBufferAddressRangeNVPtr?.Invoke(pname, index, address, length);
        private delegate void glBufferAddressRangeNVDel(uint  pname, uint  index, ulong  address, IntPtr /*BufferSize*/  length);
        private static glBufferAddressRangeNVDel glBufferAddressRangeNVPtr;
        
        // glBufferAttachMemoryNV
        public static void glBufferAttachMemoryNV(uint /*BufferTargetARB*/  target, uint  memory, ulong  offset) => glBufferAttachMemoryNVPtr?.Invoke(target, memory, offset);
        private delegate void glBufferAttachMemoryNVDel(uint /*BufferTargetARB*/  target, uint  memory, ulong  offset);
        private static glBufferAttachMemoryNVDel glBufferAttachMemoryNVPtr;
        
        // glBufferData
        public static void glBufferData(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage) => glBufferDataPtr?.Invoke(target, size, data, usage);
        private delegate void glBufferDataDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage);
        private static glBufferDataDel glBufferDataPtr;
        
        // glBufferDataARB
        public static void glBufferDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferSizeARB*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage) => glBufferDataARBPtr?.Invoke(target, size, data, usage);
        private delegate void glBufferDataARBDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferSizeARB*/  size, IntPtr  data, uint /*BufferUsageARB*/  usage);
        private static glBufferDataARBDel glBufferDataARBPtr;
        
        // glBufferPageCommitmentARB
        public static void glBufferPageCommitmentARB(uint  target, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => glBufferPageCommitmentARBPtr?.Invoke(target, offset, size, commit);
        private delegate void glBufferPageCommitmentARBDel(uint  target, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit);
        private static glBufferPageCommitmentARBDel glBufferPageCommitmentARBPtr;
        
        // glBufferParameteriAPPLE
        public static void glBufferParameteriAPPLE(uint  target, uint  pname, int  param) => glBufferParameteriAPPLEPtr?.Invoke(target, pname, param);
        private delegate void glBufferParameteriAPPLEDel(uint  target, uint  pname, int  param);
        private static glBufferParameteriAPPLEDel glBufferParameteriAPPLEPtr;
        
        // glBufferStorage
        public static void glBufferStorage(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => glBufferStoragePtr?.Invoke(target, size, data, flags);
        private delegate void glBufferStorageDel(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags);
        private static glBufferStorageDel glBufferStoragePtr;
        
        // glBufferStorageEXT
        public static void glBufferStorageEXT(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => glBufferStorageEXTPtr?.Invoke(target, size, data, flags);
        private delegate void glBufferStorageEXTDel(uint /*BufferStorageTarget*/  target, IntPtr  size, IntPtr  data, uint /*BufferStorageMask*/  flags);
        private static glBufferStorageEXTDel glBufferStorageEXTPtr;
        
        // glBufferStorageExternalEXT
        public static void glBufferStorageExternalEXT(uint  target, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags) => glBufferStorageExternalEXTPtr?.Invoke(target, offset, size, clientBuffer, flags);
        private delegate void glBufferStorageExternalEXTDel(uint  target, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags);
        private static glBufferStorageExternalEXTDel glBufferStorageExternalEXTPtr;
        
        // glBufferStorageMemEXT
        public static void glBufferStorageMemEXT(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset) => glBufferStorageMemEXTPtr?.Invoke(target, size, memory, offset);
        private delegate void glBufferStorageMemEXTDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset);
        private static glBufferStorageMemEXTDel glBufferStorageMemEXTPtr;
        
        // glBufferSubData
        public static void glBufferSubData(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => glBufferSubDataPtr?.Invoke(target, offset, size, data);
        private delegate void glBufferSubDataDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data);
        private static glBufferSubDataDel glBufferSubDataPtr;
        
        // glBufferSubDataARB
        public static void glBufferSubDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data) => glBufferSubDataARBPtr?.Invoke(target, offset, size, data);
        private delegate void glBufferSubDataARBDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data);
        private static glBufferSubDataARBDel glBufferSubDataARBPtr;
        
        // glCallCommandListNV
        public static void glCallCommandListNV(uint  list) => glCallCommandListNVPtr?.Invoke(list);
        private delegate void glCallCommandListNVDel(uint  list);
        private static glCallCommandListNVDel glCallCommandListNVPtr;
        
        // glCallList
        public static void glCallList(uint /*List*/  list) => glCallListPtr?.Invoke(list);
        private delegate void glCallListDel(uint /*List*/  list);
        private static glCallListDel glCallListPtr;
        
        // glCallLists
        public static void glCallLists(uint  n, uint /*ListNameType*/  type, IntPtr  lists) => glCallListsPtr?.Invoke(n, type, lists);
        private delegate void glCallListsDel(uint  n, uint /*ListNameType*/  type, IntPtr  lists);
        private static glCallListsDel glCallListsPtr;
        
        // glCheckFramebufferStatus
        public static uint /*FramebufferStatus*/ glCheckFramebufferStatus(uint /*FramebufferTarget*/  target) => glCheckFramebufferStatusPtr?.Invoke(target) ?? default;
        private delegate uint /*FramebufferStatus*/ glCheckFramebufferStatusDel(uint /*FramebufferTarget*/  target);
        private static glCheckFramebufferStatusDel glCheckFramebufferStatusPtr;
        
        // glCheckFramebufferStatusEXT
        public static uint /*FramebufferStatus*/ glCheckFramebufferStatusEXT(uint /*FramebufferTarget*/  target) => glCheckFramebufferStatusEXTPtr?.Invoke(target) ?? default;
        private delegate uint /*FramebufferStatus*/ glCheckFramebufferStatusEXTDel(uint /*FramebufferTarget*/  target);
        private static glCheckFramebufferStatusEXTDel glCheckFramebufferStatusEXTPtr;
        
        // glCheckFramebufferStatusOES
        public static uint /*FramebufferStatus*/ glCheckFramebufferStatusOES(uint /*FramebufferTarget*/  target) => glCheckFramebufferStatusOESPtr?.Invoke(target) ?? default;
        private delegate uint /*FramebufferStatus*/ glCheckFramebufferStatusOESDel(uint /*FramebufferTarget*/  target);
        private static glCheckFramebufferStatusOESDel glCheckFramebufferStatusOESPtr;
        
        // glCheckNamedFramebufferStatus
        public static uint /*FramebufferStatus*/ glCheckNamedFramebufferStatus(uint  framebuffer, uint /*FramebufferTarget*/  target) => glCheckNamedFramebufferStatusPtr?.Invoke(framebuffer, target) ?? default;
        private delegate uint /*FramebufferStatus*/ glCheckNamedFramebufferStatusDel(uint  framebuffer, uint /*FramebufferTarget*/  target);
        private static glCheckNamedFramebufferStatusDel glCheckNamedFramebufferStatusPtr;
        
        // glCheckNamedFramebufferStatusEXT
        public static uint /*FramebufferStatus*/ glCheckNamedFramebufferStatusEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferTarget*/  target) => glCheckNamedFramebufferStatusEXTPtr?.Invoke(framebuffer, target) ?? default;
        private delegate uint /*FramebufferStatus*/ glCheckNamedFramebufferStatusEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferTarget*/  target);
        private static glCheckNamedFramebufferStatusEXTDel glCheckNamedFramebufferStatusEXTPtr;
        
        // glClampColor
        public static void glClampColor(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp) => glClampColorPtr?.Invoke(target, clamp);
        private delegate void glClampColorDel(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp);
        private static glClampColorDel glClampColorPtr;
        
        // glClampColorARB
        public static void glClampColorARB(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp) => glClampColorARBPtr?.Invoke(target, clamp);
        private delegate void glClampColorARBDel(uint /*ClampColorTargetARB*/  target, uint /*ClampColorModeARB*/  clamp);
        private static glClampColorARBDel glClampColorARBPtr;
        
        // glClear
        public static void glClear(uint /*ClearBufferMask*/  mask) => glClearPtr?.Invoke(mask);
        private delegate void glClearDel(uint /*ClearBufferMask*/  mask);
        private static glClearDel glClearPtr;
        
        // glClearAccum
        public static void glClearAccum(float  red, float  green, float  blue, float  alpha) => glClearAccumPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearAccumDel(float  red, float  green, float  blue, float  alpha);
        private static glClearAccumDel glClearAccumPtr;
        
        // glClearAccumxOES
        public static void glClearAccumxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => glClearAccumxOESPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearAccumxOESDel(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha);
        private static glClearAccumxOESDel glClearAccumxOESPtr;
        
        // glClearBufferData
        public static void glClearBufferData(uint /*BufferStorageTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearBufferDataPtr?.Invoke(target, internalformat, format, type, data);
        private delegate void glClearBufferDataDel(uint /*BufferStorageTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearBufferDataDel glClearBufferDataPtr;
        
        // glClearBufferSubData
        public static void glClearBufferSubData(uint /*BufferTargetARB*/  target, uint /*InternalFormat*/  internalformat, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearBufferSubDataPtr?.Invoke(target, internalformat, offset, size, format, type, data);
        private delegate void glClearBufferSubDataDel(uint /*BufferTargetARB*/  target, uint /*InternalFormat*/  internalformat, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearBufferSubDataDel glClearBufferSubDataPtr;
        
        // glClearBufferfi
        public static void glClearBufferfi(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float  depth, int  stencil) => glClearBufferfiPtr?.Invoke(buffer, drawbuffer, depth, stencil);
        private delegate void glClearBufferfiDel(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float  depth, int  stencil);
        private static glClearBufferfiDel glClearBufferfiPtr;
        
        // glClearBufferfv
        public static void glClearBufferfv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float[]  value) => glClearBufferfvPtr?.Invoke(buffer, drawbuffer, value);
        private delegate void glClearBufferfvDel(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, float[]  value);
        private static glClearBufferfvDel glClearBufferfvPtr;
        
        // glClearBufferiv
        public static void glClearBufferiv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, int[]  value) => glClearBufferivPtr?.Invoke(buffer, drawbuffer, value);
        private delegate void glClearBufferivDel(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, int[]  value);
        private static glClearBufferivDel glClearBufferivPtr;
        
        // glClearBufferuiv
        public static void glClearBufferuiv(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, uint[]  value) => glClearBufferuivPtr?.Invoke(buffer, drawbuffer, value);
        private delegate void glClearBufferuivDel(uint /*Buffer*/  buffer, int /*DrawBufferName*/  drawbuffer, uint[]  value);
        private static glClearBufferuivDel glClearBufferuivPtr;
        
        // glClearColor
        public static void glClearColor(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => glClearColorPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearColorDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha);
        private static glClearColorDel glClearColorPtr;
        
        // glClearColorIiEXT
        public static void glClearColorIiEXT(int  red, int  green, int  blue, int  alpha) => glClearColorIiEXTPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearColorIiEXTDel(int  red, int  green, int  blue, int  alpha);
        private static glClearColorIiEXTDel glClearColorIiEXTPtr;
        
        // glClearColorIuiEXT
        public static void glClearColorIuiEXT(uint  red, uint  green, uint  blue, uint  alpha) => glClearColorIuiEXTPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearColorIuiEXTDel(uint  red, uint  green, uint  blue, uint  alpha);
        private static glClearColorIuiEXTDel glClearColorIuiEXTPtr;
        
        // glClearColorx
        public static void glClearColorx(int  red, int  green, int  blue, int  alpha) => glClearColorxPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearColorxDel(int  red, int  green, int  blue, int  alpha);
        private static glClearColorxDel glClearColorxPtr;
        
        // glClearColorxOES
        public static void glClearColorxOES(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha) => glClearColorxOESPtr?.Invoke(red, green, blue, alpha);
        private delegate void glClearColorxOESDel(int /*ClampedFixed*/  red, int /*ClampedFixed*/  green, int /*ClampedFixed*/  blue, int /*ClampedFixed*/  alpha);
        private static glClearColorxOESDel glClearColorxOESPtr;
        
        // glClearDepth
        public static void glClearDepth(double  depth) => glClearDepthPtr?.Invoke(depth);
        private delegate void glClearDepthDel(double  depth);
        private static glClearDepthDel glClearDepthPtr;
        
        // glClearDepthdNV
        public static void glClearDepthdNV(double  depth) => glClearDepthdNVPtr?.Invoke(depth);
        private delegate void glClearDepthdNVDel(double  depth);
        private static glClearDepthdNVDel glClearDepthdNVPtr;
        
        // glClearDepthf
        public static void glClearDepthf(float  d) => glClearDepthfPtr?.Invoke(d);
        private delegate void glClearDepthfDel(float  d);
        private static glClearDepthfDel glClearDepthfPtr;
        
        // glClearDepthfOES
        public static void glClearDepthfOES(float /*ClampedFloat32*/  depth) => glClearDepthfOESPtr?.Invoke(depth);
        private delegate void glClearDepthfOESDel(float /*ClampedFloat32*/  depth);
        private static glClearDepthfOESDel glClearDepthfOESPtr;
        
        // glClearDepthx
        public static void glClearDepthx(int  depth) => glClearDepthxPtr?.Invoke(depth);
        private delegate void glClearDepthxDel(int  depth);
        private static glClearDepthxDel glClearDepthxPtr;
        
        // glClearDepthxOES
        public static void glClearDepthxOES(int /*ClampedFixed*/  depth) => glClearDepthxOESPtr?.Invoke(depth);
        private delegate void glClearDepthxOESDel(int /*ClampedFixed*/  depth);
        private static glClearDepthxOESDel glClearDepthxOESPtr;
        
        // glClearIndex
        public static void glClearIndex(float /*MaskedColorIndexValueF*/  c) => glClearIndexPtr?.Invoke(c);
        private delegate void glClearIndexDel(float /*MaskedColorIndexValueF*/  c);
        private static glClearIndexDel glClearIndexPtr;
        
        // glClearNamedBufferData
        public static void glClearNamedBufferData(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearNamedBufferDataPtr?.Invoke(buffer, internalformat, format, type, data);
        private delegate void glClearNamedBufferDataDel(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearNamedBufferDataDel glClearNamedBufferDataPtr;
        
        // glClearNamedBufferDataEXT
        public static void glClearNamedBufferDataEXT(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearNamedBufferDataEXTPtr?.Invoke(buffer, internalformat, format, type, data);
        private delegate void glClearNamedBufferDataEXTDel(uint  buffer, uint /*InternalFormat*/  internalformat, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearNamedBufferDataEXTDel glClearNamedBufferDataEXTPtr;
        
        // glClearNamedBufferSubData
        public static void glClearNamedBufferSubData(uint  buffer, uint /*InternalFormat*/  internalformat, IntPtr  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearNamedBufferSubDataPtr?.Invoke(buffer, internalformat, offset, size, format, type, data);
        private delegate void glClearNamedBufferSubDataDel(uint  buffer, uint /*InternalFormat*/  internalformat, IntPtr  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearNamedBufferSubDataDel glClearNamedBufferSubDataPtr;
        
        // glClearNamedBufferSubDataEXT
        public static void glClearNamedBufferSubDataEXT(uint  buffer, uint  internalformat, IntPtr /*BufferSize*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearNamedBufferSubDataEXTPtr?.Invoke(buffer, internalformat, offset, size, format, type, data);
        private delegate void glClearNamedBufferSubDataEXTDel(uint  buffer, uint  internalformat, IntPtr /*BufferSize*/  offset, IntPtr /*BufferSize*/  size, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearNamedBufferSubDataEXTDel glClearNamedBufferSubDataEXTPtr;
        
        // glClearNamedFramebufferfi
        public static void glClearNamedFramebufferfi(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float  depth, int  stencil) => glClearNamedFramebufferfiPtr?.Invoke(framebuffer, buffer, drawbuffer, depth, stencil);
        private delegate void glClearNamedFramebufferfiDel(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float  depth, int  stencil);
        private static glClearNamedFramebufferfiDel glClearNamedFramebufferfiPtr;
        
        // glClearNamedFramebufferfv
        public static void glClearNamedFramebufferfv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float[]  value) => glClearNamedFramebufferfvPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        private delegate void glClearNamedFramebufferfvDel(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, float[]  value);
        private static glClearNamedFramebufferfvDel glClearNamedFramebufferfvPtr;
        
        // glClearNamedFramebufferiv
        public static void glClearNamedFramebufferiv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, int[]  value) => glClearNamedFramebufferivPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        private delegate void glClearNamedFramebufferivDel(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, int[]  value);
        private static glClearNamedFramebufferivDel glClearNamedFramebufferivPtr;
        
        // glClearNamedFramebufferuiv
        public static void glClearNamedFramebufferuiv(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, uint[]  value) => glClearNamedFramebufferuivPtr?.Invoke(framebuffer, buffer, drawbuffer, value);
        private delegate void glClearNamedFramebufferuivDel(uint  framebuffer, uint /*Buffer*/  buffer, int  drawbuffer, uint[]  value);
        private static glClearNamedFramebufferuivDel glClearNamedFramebufferuivPtr;
        
        // glClearPixelLocalStorageuiEXT
        public static void glClearPixelLocalStorageuiEXT(uint  offset, uint  n, uint[]  values) => glClearPixelLocalStorageuiEXTPtr?.Invoke(offset, n, values);
        private delegate void glClearPixelLocalStorageuiEXTDel(uint  offset, uint  n, uint[]  values);
        private static glClearPixelLocalStorageuiEXTDel glClearPixelLocalStorageuiEXTPtr;
        
        // glClearStencil
        public static void glClearStencil(int /*StencilValue*/  s) => glClearStencilPtr?.Invoke(s);
        private delegate void glClearStencilDel(int /*StencilValue*/  s);
        private static glClearStencilDel glClearStencilPtr;
        
        // glClearTexImage
        public static void glClearTexImage(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearTexImagePtr?.Invoke(texture, level, format, type, data);
        private delegate void glClearTexImageDel(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearTexImageDel glClearTexImagePtr;
        
        // glClearTexImageEXT
        public static void glClearTexImageEXT(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearTexImageEXTPtr?.Invoke(texture, level, format, type, data);
        private delegate void glClearTexImageEXTDel(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearTexImageEXTDel glClearTexImageEXTPtr;
        
        // glClearTexSubImage
        public static void glClearTexSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearTexSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        private delegate void glClearTexSubImageDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearTexSubImageDel glClearTexSubImagePtr;
        
        // glClearTexSubImageEXT
        public static void glClearTexSubImageEXT(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glClearTexSubImageEXTPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        private delegate void glClearTexSubImageEXTDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glClearTexSubImageEXTDel glClearTexSubImageEXTPtr;
        
        // glClientActiveTexture
        public static void glClientActiveTexture(uint /*TextureUnit*/  texture) => glClientActiveTexturePtr?.Invoke(texture);
        private delegate void glClientActiveTextureDel(uint /*TextureUnit*/  texture);
        private static glClientActiveTextureDel glClientActiveTexturePtr;
        
        // glClientActiveTextureARB
        public static void glClientActiveTextureARB(uint /*TextureUnit*/  texture) => glClientActiveTextureARBPtr?.Invoke(texture);
        private delegate void glClientActiveTextureARBDel(uint /*TextureUnit*/  texture);
        private static glClientActiveTextureARBDel glClientActiveTextureARBPtr;
        
        // glClientActiveVertexStreamATI
        public static void glClientActiveVertexStreamATI(uint /*VertexStreamATI*/  stream) => glClientActiveVertexStreamATIPtr?.Invoke(stream);
        private delegate void glClientActiveVertexStreamATIDel(uint /*VertexStreamATI*/  stream);
        private static glClientActiveVertexStreamATIDel glClientActiveVertexStreamATIPtr;
        
        // glClientAttribDefaultEXT
        public static void glClientAttribDefaultEXT(uint /*ClientAttribMask*/  mask) => glClientAttribDefaultEXTPtr?.Invoke(mask);
        private delegate void glClientAttribDefaultEXTDel(uint /*ClientAttribMask*/  mask);
        private static glClientAttribDefaultEXTDel glClientAttribDefaultEXTPtr;
        
        // glClientWaitSemaphoreui64NVX
        public static void glClientWaitSemaphoreui64NVX(uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => glClientWaitSemaphoreui64NVXPtr?.Invoke(fenceObjectCount, semaphoreArray, fenceValueArray);
        private delegate void glClientWaitSemaphoreui64NVXDel(uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray);
        private static glClientWaitSemaphoreui64NVXDel glClientWaitSemaphoreui64NVXPtr;
        
        // glClientWaitSync
        public static uint /*SyncStatus*/ glClientWaitSync(IntPtr /*sync*/  sync, uint /*SyncObjectMask*/  flags, ulong  timeout) => glClientWaitSyncPtr?.Invoke(sync, flags, timeout) ?? default;
        private delegate uint /*SyncStatus*/ glClientWaitSyncDel(IntPtr /*sync*/  sync, uint /*SyncObjectMask*/  flags, ulong  timeout);
        private static glClientWaitSyncDel glClientWaitSyncPtr;
        
        // glClientWaitSyncAPPLE
        public static uint /*SyncStatus*/ glClientWaitSyncAPPLE(IntPtr  sync, uint /*SyncObjectMask*/  flags, ulong  timeout) => glClientWaitSyncAPPLEPtr?.Invoke(sync, flags, timeout) ?? default;
        private delegate uint /*SyncStatus*/ glClientWaitSyncAPPLEDel(IntPtr  sync, uint /*SyncObjectMask*/  flags, ulong  timeout);
        private static glClientWaitSyncAPPLEDel glClientWaitSyncAPPLEPtr;
        
        // glClipControl
        public static void glClipControl(uint /*ClipControlOrigin*/  origin, uint /*ClipControlDepth*/  depth) => glClipControlPtr?.Invoke(origin, depth);
        private delegate void glClipControlDel(uint /*ClipControlOrigin*/  origin, uint /*ClipControlDepth*/  depth);
        private static glClipControlDel glClipControlPtr;
        
        // glClipControlEXT
        public static void glClipControlEXT(uint  origin, uint  depth) => glClipControlEXTPtr?.Invoke(origin, depth);
        private delegate void glClipControlEXTDel(uint  origin, uint  depth);
        private static glClipControlEXTDel glClipControlEXTPtr;
        
        // glClipPlane
        public static void glClipPlane(uint /*ClipPlaneName*/  plane, double[]  equation) => glClipPlanePtr?.Invoke(plane, equation);
        private delegate void glClipPlaneDel(uint /*ClipPlaneName*/  plane, double[]  equation);
        private static glClipPlaneDel glClipPlanePtr;
        
        // glClipPlanef
        public static void glClipPlanef(uint /*ClipPlaneName*/  p, float[]  eqn) => glClipPlanefPtr?.Invoke(p, eqn);
        private delegate void glClipPlanefDel(uint /*ClipPlaneName*/  p, float[]  eqn);
        private static glClipPlanefDel glClipPlanefPtr;
        
        // glClipPlanefIMG
        public static void glClipPlanefIMG(uint /*ClipPlaneName*/  p, float[]  eqn) => glClipPlanefIMGPtr?.Invoke(p, eqn);
        private delegate void glClipPlanefIMGDel(uint /*ClipPlaneName*/  p, float[]  eqn);
        private static glClipPlanefIMGDel glClipPlanefIMGPtr;
        
        // glClipPlanefOES
        public static void glClipPlanefOES(uint /*ClipPlaneName*/  plane, float[]  equation) => glClipPlanefOESPtr?.Invoke(plane, equation);
        private delegate void glClipPlanefOESDel(uint /*ClipPlaneName*/  plane, float[]  equation);
        private static glClipPlanefOESDel glClipPlanefOESPtr;
        
        // glClipPlanex
        public static void glClipPlanex(uint /*ClipPlaneName*/  plane, int[]  equation) => glClipPlanexPtr?.Invoke(plane, equation);
        private delegate void glClipPlanexDel(uint /*ClipPlaneName*/  plane, int[]  equation);
        private static glClipPlanexDel glClipPlanexPtr;
        
        // glClipPlanexIMG
        public static void glClipPlanexIMG(uint /*ClipPlaneName*/  p, int[]  eqn) => glClipPlanexIMGPtr?.Invoke(p, eqn);
        private delegate void glClipPlanexIMGDel(uint /*ClipPlaneName*/  p, int[]  eqn);
        private static glClipPlanexIMGDel glClipPlanexIMGPtr;
        
        // glClipPlanexOES
        public static void glClipPlanexOES(uint /*ClipPlaneName*/  plane, int[]  equation) => glClipPlanexOESPtr?.Invoke(plane, equation);
        private delegate void glClipPlanexOESDel(uint /*ClipPlaneName*/  plane, int[]  equation);
        private static glClipPlanexOESDel glClipPlanexOESPtr;
        
        // glColor3b
        public static void glColor3b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => glColor3bPtr?.Invoke(red, green, blue);
        private delegate void glColor3bDel(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue);
        private static glColor3bDel glColor3bPtr;
        
        // glColor3bv
        public static void glColor3bv(sbyte[] /*ColorB*/  v) => glColor3bvPtr?.Invoke(v);
        private delegate void glColor3bvDel(sbyte[] /*ColorB*/  v);
        private static glColor3bvDel glColor3bvPtr;
        
        // glColor3d
        public static void glColor3d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => glColor3dPtr?.Invoke(red, green, blue);
        private delegate void glColor3dDel(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue);
        private static glColor3dDel glColor3dPtr;
        
        // glColor3dv
        public static void glColor3dv(double[] /*ColorD*/  v) => glColor3dvPtr?.Invoke(v);
        private delegate void glColor3dvDel(double[] /*ColorD*/  v);
        private static glColor3dvDel glColor3dvPtr;
        
        // glColor3f
        public static void glColor3f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => glColor3fPtr?.Invoke(red, green, blue);
        private delegate void glColor3fDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue);
        private static glColor3fDel glColor3fPtr;
        
        // glColor3fVertex3fSUN
        public static void glColor3fVertex3fSUN(float  r, float  g, float  b, float  x, float  y, float  z) => glColor3fVertex3fSUNPtr?.Invoke(r, g, b, x, y, z);
        private delegate void glColor3fVertex3fSUNDel(float  r, float  g, float  b, float  x, float  y, float  z);
        private static glColor3fVertex3fSUNDel glColor3fVertex3fSUNPtr;
        
        // glColor3fVertex3fvSUN
        public static void glColor3fVertex3fvSUN(float[]  c, float[]  v) => glColor3fVertex3fvSUNPtr?.Invoke(c, v);
        private delegate void glColor3fVertex3fvSUNDel(float[]  c, float[]  v);
        private static glColor3fVertex3fvSUNDel glColor3fVertex3fvSUNPtr;
        
        // glColor3fv
        public static void glColor3fv(float[] /*ColorF*/  v) => glColor3fvPtr?.Invoke(v);
        private delegate void glColor3fvDel(float[] /*ColorF*/  v);
        private static glColor3fvDel glColor3fvPtr;
        
        // glColor3hNV
        public static void glColor3hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue) => glColor3hNVPtr?.Invoke(red, green, blue);
        private delegate void glColor3hNVDel(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue);
        private static glColor3hNVDel glColor3hNVPtr;
        
        // glColor3hvNV
        public static void glColor3hvNV(ushort[] /*Half16NV*/  v) => glColor3hvNVPtr?.Invoke(v);
        private delegate void glColor3hvNVDel(ushort[] /*Half16NV*/  v);
        private static glColor3hvNVDel glColor3hvNVPtr;
        
        // glColor3i
        public static void glColor3i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => glColor3iPtr?.Invoke(red, green, blue);
        private delegate void glColor3iDel(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue);
        private static glColor3iDel glColor3iPtr;
        
        // glColor3iv
        public static void glColor3iv(int[] /*ColorI*/  v) => glColor3ivPtr?.Invoke(v);
        private delegate void glColor3ivDel(int[] /*ColorI*/  v);
        private static glColor3ivDel glColor3ivPtr;
        
        // glColor3s
        public static void glColor3s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => glColor3sPtr?.Invoke(red, green, blue);
        private delegate void glColor3sDel(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue);
        private static glColor3sDel glColor3sPtr;
        
        // glColor3sv
        public static void glColor3sv(short[] /*ColorS*/  v) => glColor3svPtr?.Invoke(v);
        private delegate void glColor3svDel(short[] /*ColorS*/  v);
        private static glColor3svDel glColor3svPtr;
        
        // glColor3ub
        public static void glColor3ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => glColor3ubPtr?.Invoke(red, green, blue);
        private delegate void glColor3ubDel(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue);
        private static glColor3ubDel glColor3ubPtr;
        
        // glColor3ubv
        public static void glColor3ubv(byte[] /*ColorUB*/  v) => glColor3ubvPtr?.Invoke(v);
        private delegate void glColor3ubvDel(byte[] /*ColorUB*/  v);
        private static glColor3ubvDel glColor3ubvPtr;
        
        // glColor3ui
        public static void glColor3ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => glColor3uiPtr?.Invoke(red, green, blue);
        private delegate void glColor3uiDel(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue);
        private static glColor3uiDel glColor3uiPtr;
        
        // glColor3uiv
        public static void glColor3uiv(uint[] /*ColorUI*/  v) => glColor3uivPtr?.Invoke(v);
        private delegate void glColor3uivDel(uint[] /*ColorUI*/  v);
        private static glColor3uivDel glColor3uivPtr;
        
        // glColor3us
        public static void glColor3us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => glColor3usPtr?.Invoke(red, green, blue);
        private delegate void glColor3usDel(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue);
        private static glColor3usDel glColor3usPtr;
        
        // glColor3usv
        public static void glColor3usv(ushort[] /*ColorUS*/  v) => glColor3usvPtr?.Invoke(v);
        private delegate void glColor3usvDel(ushort[] /*ColorUS*/  v);
        private static glColor3usvDel glColor3usvPtr;
        
        // glColor3xOES
        public static void glColor3xOES(int  red, int  green, int  blue) => glColor3xOESPtr?.Invoke(red, green, blue);
        private delegate void glColor3xOESDel(int  red, int  green, int  blue);
        private static glColor3xOESDel glColor3xOESPtr;
        
        // glColor3xvOES
        public static void glColor3xvOES(int[]  components) => glColor3xvOESPtr?.Invoke(components);
        private delegate void glColor3xvOESDel(int[]  components);
        private static glColor3xvOESDel glColor3xvOESPtr;
        
        // glColor4b
        public static void glColor4b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue, sbyte /*ColorB*/  alpha) => glColor4bPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4bDel(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue, sbyte /*ColorB*/  alpha);
        private static glColor4bDel glColor4bPtr;
        
        // glColor4bv
        public static void glColor4bv(sbyte[] /*ColorB*/  v) => glColor4bvPtr?.Invoke(v);
        private delegate void glColor4bvDel(sbyte[] /*ColorB*/  v);
        private static glColor4bvDel glColor4bvPtr;
        
        // glColor4d
        public static void glColor4d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue, double /*ColorD*/  alpha) => glColor4dPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4dDel(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue, double /*ColorD*/  alpha);
        private static glColor4dDel glColor4dPtr;
        
        // glColor4dv
        public static void glColor4dv(double[] /*ColorD*/  v) => glColor4dvPtr?.Invoke(v);
        private delegate void glColor4dvDel(double[] /*ColorD*/  v);
        private static glColor4dvDel glColor4dvPtr;
        
        // glColor4f
        public static void glColor4f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha) => glColor4fPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4fDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue, float /*ColorF*/  alpha);
        private static glColor4fDel glColor4fPtr;
        
        // glColor4fNormal3fVertex3fSUN
        public static void glColor4fNormal3fVertex3fSUN(float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glColor4fNormal3fVertex3fSUNPtr?.Invoke(r, g, b, a, nx, ny, nz, x, y, z);
        private delegate void glColor4fNormal3fVertex3fSUNDel(float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glColor4fNormal3fVertex3fSUNDel glColor4fNormal3fVertex3fSUNPtr;
        
        // glColor4fNormal3fVertex3fvSUN
        public static void glColor4fNormal3fVertex3fvSUN(float[]  c, float[]  n, float[]  v) => glColor4fNormal3fVertex3fvSUNPtr?.Invoke(c, n, v);
        private delegate void glColor4fNormal3fVertex3fvSUNDel(float[]  c, float[]  n, float[]  v);
        private static glColor4fNormal3fVertex3fvSUNDel glColor4fNormal3fVertex3fvSUNPtr;
        
        // glColor4fv
        public static void glColor4fv(float[] /*ColorF*/  v) => glColor4fvPtr?.Invoke(v);
        private delegate void glColor4fvDel(float[] /*ColorF*/  v);
        private static glColor4fvDel glColor4fvPtr;
        
        // glColor4hNV
        public static void glColor4hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue, ushort /*Half16NV*/  alpha) => glColor4hNVPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4hNVDel(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue, ushort /*Half16NV*/  alpha);
        private static glColor4hNVDel glColor4hNVPtr;
        
        // glColor4hvNV
        public static void glColor4hvNV(ushort[] /*Half16NV*/  v) => glColor4hvNVPtr?.Invoke(v);
        private delegate void glColor4hvNVDel(ushort[] /*Half16NV*/  v);
        private static glColor4hvNVDel glColor4hvNVPtr;
        
        // glColor4i
        public static void glColor4i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue, int /*ColorI*/  alpha) => glColor4iPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4iDel(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue, int /*ColorI*/  alpha);
        private static glColor4iDel glColor4iPtr;
        
        // glColor4iv
        public static void glColor4iv(int[] /*ColorI*/  v) => glColor4ivPtr?.Invoke(v);
        private delegate void glColor4ivDel(int[] /*ColorI*/  v);
        private static glColor4ivDel glColor4ivPtr;
        
        // glColor4s
        public static void glColor4s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue, short /*ColorS*/  alpha) => glColor4sPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4sDel(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue, short /*ColorS*/  alpha);
        private static glColor4sDel glColor4sPtr;
        
        // glColor4sv
        public static void glColor4sv(short[] /*ColorS*/  v) => glColor4svPtr?.Invoke(v);
        private delegate void glColor4svDel(short[] /*ColorS*/  v);
        private static glColor4svDel glColor4svPtr;
        
        // glColor4ub
        public static void glColor4ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue, byte /*ColorUB*/  alpha) => glColor4ubPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4ubDel(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue, byte /*ColorUB*/  alpha);
        private static glColor4ubDel glColor4ubPtr;
        
        // glColor4ubVertex2fSUN
        public static void glColor4ubVertex2fSUN(byte  r, byte  g, byte  b, byte  a, float  x, float  y) => glColor4ubVertex2fSUNPtr?.Invoke(r, g, b, a, x, y);
        private delegate void glColor4ubVertex2fSUNDel(byte  r, byte  g, byte  b, byte  a, float  x, float  y);
        private static glColor4ubVertex2fSUNDel glColor4ubVertex2fSUNPtr;
        
        // glColor4ubVertex2fvSUN
        public static void glColor4ubVertex2fvSUN(byte[]  c, float[]  v) => glColor4ubVertex2fvSUNPtr?.Invoke(c, v);
        private delegate void glColor4ubVertex2fvSUNDel(byte[]  c, float[]  v);
        private static glColor4ubVertex2fvSUNDel glColor4ubVertex2fvSUNPtr;
        
        // glColor4ubVertex3fSUN
        public static void glColor4ubVertex3fSUN(byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => glColor4ubVertex3fSUNPtr?.Invoke(r, g, b, a, x, y, z);
        private delegate void glColor4ubVertex3fSUNDel(byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z);
        private static glColor4ubVertex3fSUNDel glColor4ubVertex3fSUNPtr;
        
        // glColor4ubVertex3fvSUN
        public static void glColor4ubVertex3fvSUN(byte[]  c, float[]  v) => glColor4ubVertex3fvSUNPtr?.Invoke(c, v);
        private delegate void glColor4ubVertex3fvSUNDel(byte[]  c, float[]  v);
        private static glColor4ubVertex3fvSUNDel glColor4ubVertex3fvSUNPtr;
        
        // glColor4ubv
        public static void glColor4ubv(byte[] /*ColorUB*/  v) => glColor4ubvPtr?.Invoke(v);
        private delegate void glColor4ubvDel(byte[] /*ColorUB*/  v);
        private static glColor4ubvDel glColor4ubvPtr;
        
        // glColor4ui
        public static void glColor4ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue, uint /*ColorUI*/  alpha) => glColor4uiPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4uiDel(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue, uint /*ColorUI*/  alpha);
        private static glColor4uiDel glColor4uiPtr;
        
        // glColor4uiv
        public static void glColor4uiv(uint[] /*ColorUI*/  v) => glColor4uivPtr?.Invoke(v);
        private delegate void glColor4uivDel(uint[] /*ColorUI*/  v);
        private static glColor4uivDel glColor4uivPtr;
        
        // glColor4us
        public static void glColor4us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue, ushort /*ColorUS*/  alpha) => glColor4usPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4usDel(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue, ushort /*ColorUS*/  alpha);
        private static glColor4usDel glColor4usPtr;
        
        // glColor4usv
        public static void glColor4usv(ushort[] /*ColorUS*/  v) => glColor4usvPtr?.Invoke(v);
        private delegate void glColor4usvDel(ushort[] /*ColorUS*/  v);
        private static glColor4usvDel glColor4usvPtr;
        
        // glColor4x
        public static void glColor4x(int  red, int  green, int  blue, int  alpha) => glColor4xPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4xDel(int  red, int  green, int  blue, int  alpha);
        private static glColor4xDel glColor4xPtr;
        
        // glColor4xOES
        public static void glColor4xOES(int  red, int  green, int  blue, int  alpha) => glColor4xOESPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColor4xOESDel(int  red, int  green, int  blue, int  alpha);
        private static glColor4xOESDel glColor4xOESPtr;
        
        // glColor4xvOES
        public static void glColor4xvOES(int[]  components) => glColor4xvOESPtr?.Invoke(components);
        private delegate void glColor4xvOESDel(int[]  components);
        private static glColor4xvOESDel glColor4xvOESPtr;
        
        // glColorFormatNV
        public static void glColorFormatNV(int  size, uint  type, uint  stride) => glColorFormatNVPtr?.Invoke(size, type, stride);
        private delegate void glColorFormatNVDel(int  size, uint  type, uint  stride);
        private static glColorFormatNVDel glColorFormatNVPtr;
        
        // glColorFragmentOp1ATI
        public static void glColorFragmentOp1ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod) => glColorFragmentOp1ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        private delegate void glColorFragmentOp1ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod);
        private static glColorFragmentOp1ATIDel glColorFragmentOp1ATIPtr;
        
        // glColorFragmentOp2ATI
        public static void glColorFragmentOp2ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod) => glColorFragmentOp2ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        private delegate void glColorFragmentOp2ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod);
        private static glColorFragmentOp2ATIDel glColorFragmentOp2ATIPtr;
        
        // glColorFragmentOp3ATI
        public static void glColorFragmentOp3ATI(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod) => glColorFragmentOp3ATIPtr?.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        private delegate void glColorFragmentOp3ATIDel(uint /*FragmentOpATI*/  op, uint  dst, uint  dstMask, uint  dstMod, uint  arg1, uint  arg1Rep, uint  arg1Mod, uint  arg2, uint  arg2Rep, uint  arg2Mod, uint  arg3, uint  arg3Rep, uint  arg3Mod);
        private static glColorFragmentOp3ATIDel glColorFragmentOp3ATIPtr;
        
        // glColorMask
        public static void glColorMask(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha) => glColorMaskPtr?.Invoke(red, green, blue, alpha);
        private delegate void glColorMaskDel(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha);
        private static glColorMaskDel glColorMaskPtr;
        
        // glColorMaskIndexedEXT
        public static void glColorMaskIndexedEXT(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => glColorMaskIndexedEXTPtr?.Invoke(index, r, g, b, a);
        private delegate void glColorMaskIndexedEXTDel(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a);
        private static glColorMaskIndexedEXTDel glColorMaskIndexedEXTPtr;
        
        // glColorMaski
        public static void glColorMaski(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => glColorMaskiPtr?.Invoke(index, r, g, b, a);
        private delegate void glColorMaskiDel(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a);
        private static glColorMaskiDel glColorMaskiPtr;
        
        // glColorMaskiEXT
        public static void glColorMaskiEXT(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => glColorMaskiEXTPtr?.Invoke(index, r, g, b, a);
        private delegate void glColorMaskiEXTDel(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a);
        private static glColorMaskiEXTDel glColorMaskiEXTPtr;
        
        // glColorMaskiOES
        public static void glColorMaskiOES(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a) => glColorMaskiOESPtr?.Invoke(index, r, g, b, a);
        private delegate void glColorMaskiOESDel(uint  index, bool /*Boolean*/  r, bool /*Boolean*/  g, bool /*Boolean*/  b, bool /*Boolean*/  a);
        private static glColorMaskiOESDel glColorMaskiOESPtr;
        
        // glColorMaterial
        public static void glColorMaterial(uint /*MaterialFace*/  face, uint /*ColorMaterialParameter*/  mode) => glColorMaterialPtr?.Invoke(face, mode);
        private delegate void glColorMaterialDel(uint /*MaterialFace*/  face, uint /*ColorMaterialParameter*/  mode);
        private static glColorMaterialDel glColorMaterialPtr;
        
        // glColorP3ui
        public static void glColorP3ui(uint /*ColorPointerType*/  type, uint  color) => glColorP3uiPtr?.Invoke(type, color);
        private delegate void glColorP3uiDel(uint /*ColorPointerType*/  type, uint  color);
        private static glColorP3uiDel glColorP3uiPtr;
        
        // glColorP3uiv
        public static void glColorP3uiv(uint /*ColorPointerType*/  type, uint[]  color) => glColorP3uivPtr?.Invoke(type, color);
        private delegate void glColorP3uivDel(uint /*ColorPointerType*/  type, uint[]  color);
        private static glColorP3uivDel glColorP3uivPtr;
        
        // glColorP4ui
        public static void glColorP4ui(uint /*ColorPointerType*/  type, uint  color) => glColorP4uiPtr?.Invoke(type, color);
        private delegate void glColorP4uiDel(uint /*ColorPointerType*/  type, uint  color);
        private static glColorP4uiDel glColorP4uiPtr;
        
        // glColorP4uiv
        public static void glColorP4uiv(uint /*ColorPointerType*/  type, uint[]  color) => glColorP4uivPtr?.Invoke(type, color);
        private delegate void glColorP4uivDel(uint /*ColorPointerType*/  type, uint[]  color);
        private static glColorP4uivDel glColorP4uivPtr;
        
        // glColorPointer
        public static void glColorPointer(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => glColorPointerPtr?.Invoke(size, type, stride, pointer);
        private delegate void glColorPointerDel(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glColorPointerDel glColorPointerPtr;
        
        // glColorPointerEXT
        public static void glColorPointerEXT(int  size, uint /*ColorPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => glColorPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        private delegate void glColorPointerEXTDel(int  size, uint /*ColorPointerType*/  type, uint  stride, uint  count, IntPtr  pointer);
        private static glColorPointerEXTDel glColorPointerEXTPtr;
        
        // glColorPointerListIBM
        public static void glColorPointerListIBM(int  size, uint /*ColorPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glColorPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        private delegate void glColorPointerListIBMDel(int  size, uint /*ColorPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glColorPointerListIBMDel glColorPointerListIBMPtr;
        
        // glColorPointervINTEL
        public static void glColorPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => glColorPointervINTELPtr?.Invoke(size, type, pointer);
        private delegate void glColorPointervINTELDel(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer);
        private static glColorPointervINTELDel glColorPointervINTELPtr;
        
        // glColorSubTable
        public static void glColorSubTable(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glColorSubTablePtr?.Invoke(target, start, count, format, type, data);
        private delegate void glColorSubTableDel(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glColorSubTableDel glColorSubTablePtr;
        
        // glColorSubTableEXT
        public static void glColorSubTableEXT(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glColorSubTableEXTPtr?.Invoke(target, start, count, format, type, data);
        private delegate void glColorSubTableEXTDel(uint /*ColorTableTarget*/  target, uint  start, uint  count, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glColorSubTableEXTDel glColorSubTableEXTPtr;
        
        // glColorTable
        public static void glColorTable(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => glColorTablePtr?.Invoke(target, internalformat, width, format, type, table);
        private delegate void glColorTableDel(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table);
        private static glColorTableDel glColorTablePtr;
        
        // glColorTableEXT
        public static void glColorTableEXT(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => glColorTableEXTPtr?.Invoke(target, internalFormat, width, format, type, table);
        private delegate void glColorTableEXTDel(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table);
        private static glColorTableEXTDel glColorTableEXTPtr;
        
        // glColorTableParameterfv
        public static void glColorTableParameterfv(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters) => glColorTableParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glColorTableParameterfvDel(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glColorTableParameterfvDel glColorTableParameterfvPtr;
        
        // glColorTableParameterfvSGI
        public static void glColorTableParameterfvSGI(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters) => glColorTableParameterfvSGIPtr?.Invoke(target, pname, parameters);
        private delegate void glColorTableParameterfvSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glColorTableParameterfvSGIDel glColorTableParameterfvSGIPtr;
        
        // glColorTableParameteriv
        public static void glColorTableParameteriv(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters) => glColorTableParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glColorTableParameterivDel(uint /*ColorTableTarget*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glColorTableParameterivDel glColorTableParameterivPtr;
        
        // glColorTableParameterivSGI
        public static void glColorTableParameterivSGI(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters) => glColorTableParameterivSGIPtr?.Invoke(target, pname, parameters);
        private delegate void glColorTableParameterivSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*ColorTableParameterPNameSGI*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glColorTableParameterivSGIDel glColorTableParameterivSGIPtr;
        
        // glColorTableSGI
        public static void glColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => glColorTableSGIPtr?.Invoke(target, internalformat, width, format, type, table);
        private delegate void glColorTableSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table);
        private static glColorTableSGIDel glColorTableSGIPtr;
        
        // glCombinerInputNV
        public static void glCombinerInputNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage) => glCombinerInputNVPtr?.Invoke(stage, portion, variable, input, mapping, componentUsage);
        private delegate void glCombinerInputNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage);
        private static glCombinerInputNVDel glCombinerInputNVPtr;
        
        // glCombinerOutputNV
        public static void glCombinerOutputNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerRegisterNV*/  abOutput, uint /*CombinerRegisterNV*/  cdOutput, uint /*CombinerRegisterNV*/  sumOutput, uint /*CombinerScaleNV*/  scale, uint /*CombinerBiasNV*/  bias, bool /*Boolean*/  abDotProduct, bool /*Boolean*/  cdDotProduct, bool /*Boolean*/  muxSum) => glCombinerOutputNVPtr?.Invoke(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        private delegate void glCombinerOutputNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerRegisterNV*/  abOutput, uint /*CombinerRegisterNV*/  cdOutput, uint /*CombinerRegisterNV*/  sumOutput, uint /*CombinerScaleNV*/  scale, uint /*CombinerBiasNV*/  bias, bool /*Boolean*/  abDotProduct, bool /*Boolean*/  cdDotProduct, bool /*Boolean*/  muxSum);
        private static glCombinerOutputNVDel glCombinerOutputNVPtr;
        
        // glCombinerParameterfNV
        public static void glCombinerParameterfNV(uint /*CombinerParameterNV*/  pname, float  param) => glCombinerParameterfNVPtr?.Invoke(pname, param);
        private delegate void glCombinerParameterfNVDel(uint /*CombinerParameterNV*/  pname, float  param);
        private static glCombinerParameterfNVDel glCombinerParameterfNVPtr;
        
        // glCombinerParameterfvNV
        public static void glCombinerParameterfvNV(uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => glCombinerParameterfvNVPtr?.Invoke(pname, parameters);
        private delegate void glCombinerParameterfvNVDel(uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glCombinerParameterfvNVDel glCombinerParameterfvNVPtr;
        
        // glCombinerParameteriNV
        public static void glCombinerParameteriNV(uint /*CombinerParameterNV*/  pname, int  param) => glCombinerParameteriNVPtr?.Invoke(pname, param);
        private delegate void glCombinerParameteriNVDel(uint /*CombinerParameterNV*/  pname, int  param);
        private static glCombinerParameteriNVDel glCombinerParameteriNVPtr;
        
        // glCombinerParameterivNV
        public static void glCombinerParameterivNV(uint /*CombinerParameterNV*/  pname, int[] /*CheckedInt32*/  parameters) => glCombinerParameterivNVPtr?.Invoke(pname, parameters);
        private delegate void glCombinerParameterivNVDel(uint /*CombinerParameterNV*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glCombinerParameterivNVDel glCombinerParameterivNVPtr;
        
        // glCombinerStageParameterfvNV
        public static void glCombinerStageParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => glCombinerStageParameterfvNVPtr?.Invoke(stage, pname, parameters);
        private delegate void glCombinerStageParameterfvNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glCombinerStageParameterfvNVDel glCombinerStageParameterfvNVPtr;
        
        // glCommandListSegmentsNV
        public static void glCommandListSegmentsNV(uint  list, uint  segments) => glCommandListSegmentsNVPtr?.Invoke(list, segments);
        private delegate void glCommandListSegmentsNVDel(uint  list, uint  segments);
        private static glCommandListSegmentsNVDel glCommandListSegmentsNVPtr;
        
        // glCompileCommandListNV
        public static void glCompileCommandListNV(uint  list) => glCompileCommandListNVPtr?.Invoke(list);
        private delegate void glCompileCommandListNVDel(uint  list);
        private static glCompileCommandListNVDel glCompileCommandListNVPtr;
        
        // glCompileShader
        public static void glCompileShader(uint  shader) => glCompileShaderPtr?.Invoke(shader);
        private delegate void glCompileShaderDel(uint  shader);
        private static glCompileShaderDel glCompileShaderPtr;
        
        // glCompileShaderARB
        public static void glCompileShaderARB(IntPtr /*handleARB*/  shaderObj) => glCompileShaderARBPtr?.Invoke(shaderObj);
        private delegate void glCompileShaderARBDel(IntPtr /*handleARB*/  shaderObj);
        private static glCompileShaderARBDel glCompileShaderARBPtr;
        
        // glCompileShaderIncludeARB
        public static void glCompileShaderIncludeARB(uint  shader, uint  count, string  path, int[]  length) => glCompileShaderIncludeARBPtr?.Invoke(shader, count, path, length);
        private delegate void glCompileShaderIncludeARBDel(uint  shader, uint  count, string  path, int[]  length);
        private static glCompileShaderIncludeARBDel glCompileShaderIncludeARBPtr;
        
        // glCompressedMultiTexImage1DEXT
        public static void glCompressedMultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedMultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, width, border, imageSize, bits);
        private delegate void glCompressedMultiTexImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexImage1DEXTDel glCompressedMultiTexImage1DEXTPtr;
        
        // glCompressedMultiTexImage2DEXT
        public static void glCompressedMultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedMultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, border, imageSize, bits);
        private delegate void glCompressedMultiTexImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexImage2DEXTDel glCompressedMultiTexImage2DEXTPtr;
        
        // glCompressedMultiTexImage3DEXT
        public static void glCompressedMultiTexImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedMultiTexImage3DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
        private delegate void glCompressedMultiTexImage3DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexImage3DEXTDel glCompressedMultiTexImage3DEXTPtr;
        
        // glCompressedMultiTexSubImage1DEXT
        public static void glCompressedMultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedMultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, width, format, imageSize, bits);
        private delegate void glCompressedMultiTexSubImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexSubImage1DEXTDel glCompressedMultiTexSubImage1DEXTPtr;
        
        // glCompressedMultiTexSubImage2DEXT
        public static void glCompressedMultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedMultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        private delegate void glCompressedMultiTexSubImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexSubImage2DEXTDel glCompressedMultiTexSubImage2DEXTPtr;
        
        // glCompressedMultiTexSubImage3DEXT
        public static void glCompressedMultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedMultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        private delegate void glCompressedMultiTexSubImage3DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedMultiTexSubImage3DEXTDel glCompressedMultiTexSubImage3DEXTPtr;
        
        // glCompressedTexImage1D
        public static void glCompressedTexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage1DPtr?.Invoke(target, level, internalformat, width, border, imageSize, data);
        private delegate void glCompressedTexImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage1DDel glCompressedTexImage1DPtr;
        
        // glCompressedTexImage1DARB
        public static void glCompressedTexImage1DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage1DARBPtr?.Invoke(target, level, internalformat, width, border, imageSize, data);
        private delegate void glCompressedTexImage1DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage1DARBDel glCompressedTexImage1DARBPtr;
        
        // glCompressedTexImage2D
        public static void glCompressedTexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage2DPtr?.Invoke(target, level, internalformat, width, height, border, imageSize, data);
        private delegate void glCompressedTexImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage2DDel glCompressedTexImage2DPtr;
        
        // glCompressedTexImage2DARB
        public static void glCompressedTexImage2DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage2DARBPtr?.Invoke(target, level, internalformat, width, height, border, imageSize, data);
        private delegate void glCompressedTexImage2DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage2DARBDel glCompressedTexImage2DARBPtr;
        
        // glCompressedTexImage3D
        public static void glCompressedTexImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage3DPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        private delegate void glCompressedTexImage3DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage3DDel glCompressedTexImage3DPtr;
        
        // glCompressedTexImage3DARB
        public static void glCompressedTexImage3DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexImage3DARBPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        private delegate void glCompressedTexImage3DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexImage3DARBDel glCompressedTexImage3DARBPtr;
        
        // glCompressedTexImage3DOES
        public static void glCompressedTexImage3DOES(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint  imageSize, IntPtr  data) => glCompressedTexImage3DOESPtr?.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);
        private delegate void glCompressedTexImage3DOESDel(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint  imageSize, IntPtr  data);
        private static glCompressedTexImage3DOESDel glCompressedTexImage3DOESPtr;
        
        // glCompressedTexSubImage1D
        public static void glCompressedTexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage1DPtr?.Invoke(target, level, xoffset, width, format, imageSize, data);
        private delegate void glCompressedTexSubImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage1DDel glCompressedTexSubImage1DPtr;
        
        // glCompressedTexSubImage1DARB
        public static void glCompressedTexSubImage1DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage1DARBPtr?.Invoke(target, level, xoffset, width, format, imageSize, data);
        private delegate void glCompressedTexSubImage1DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage1DARBDel glCompressedTexSubImage1DARBPtr;
        
        // glCompressedTexSubImage2D
        public static void glCompressedTexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        private delegate void glCompressedTexSubImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage2DDel glCompressedTexSubImage2DPtr;
        
        // glCompressedTexSubImage2DARB
        public static void glCompressedTexSubImage2DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage2DARBPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        private delegate void glCompressedTexSubImage2DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage2DARBDel glCompressedTexSubImage2DARBPtr;
        
        // glCompressedTexSubImage3D
        public static void glCompressedTexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        private delegate void glCompressedTexSubImage3DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage3DDel glCompressedTexSubImage3DPtr;
        
        // glCompressedTexSubImage3DARB
        public static void glCompressedTexSubImage3DARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data) => glCompressedTexSubImage3DARBPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        private delegate void glCompressedTexSubImage3DARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr /*CompressedTextureARB*/  data);
        private static glCompressedTexSubImage3DARBDel glCompressedTexSubImage3DARBPtr;
        
        // glCompressedTexSubImage3DOES
        public static void glCompressedTexSubImage3DOES(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => glCompressedTexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        private delegate void glCompressedTexSubImage3DOESDel(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data);
        private static glCompressedTexSubImage3DOESDel glCompressedTexSubImage3DOESPtr;
        
        // glCompressedTextureImage1DEXT
        public static void glCompressedTextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedTextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, width, border, imageSize, bits);
        private delegate void glCompressedTextureImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureImage1DEXTDel glCompressedTextureImage1DEXTPtr;
        
        // glCompressedTextureImage2DEXT
        public static void glCompressedTextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedTextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, border, imageSize, bits);
        private delegate void glCompressedTextureImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureImage2DEXTDel glCompressedTextureImage2DEXTPtr;
        
        // glCompressedTextureImage3DEXT
        public static void glCompressedTextureImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits) => glCompressedTextureImage3DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
        private delegate void glCompressedTextureImage3DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureImage3DEXTDel glCompressedTextureImage3DEXTPtr;
        
        // glCompressedTextureSubImage1D
        public static void glCompressedTextureSubImage1D(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => glCompressedTextureSubImage1DPtr?.Invoke(texture, level, xoffset, width, format, imageSize, data);
        private delegate void glCompressedTextureSubImage1DDel(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data);
        private static glCompressedTextureSubImage1DDel glCompressedTextureSubImage1DPtr;
        
        // glCompressedTextureSubImage1DEXT
        public static void glCompressedTextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedTextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, width, format, imageSize, bits);
        private delegate void glCompressedTextureSubImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureSubImage1DEXTDel glCompressedTextureSubImage1DEXTPtr;
        
        // glCompressedTextureSubImage2D
        public static void glCompressedTextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => glCompressedTextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        private delegate void glCompressedTextureSubImage2DDel(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data);
        private static glCompressedTextureSubImage2DDel glCompressedTextureSubImage2DPtr;
        
        // glCompressedTextureSubImage2DEXT
        public static void glCompressedTextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedTextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
        private delegate void glCompressedTextureSubImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureSubImage2DEXTDel glCompressedTextureSubImage2DEXTPtr;
        
        // glCompressedTextureSubImage3D
        public static void glCompressedTextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data) => glCompressedTextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        private delegate void glCompressedTextureSubImage3DDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  data);
        private static glCompressedTextureSubImage3DDel glCompressedTextureSubImage3DPtr;
        
        // glCompressedTextureSubImage3DEXT
        public static void glCompressedTextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits) => glCompressedTextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
        private delegate void glCompressedTextureSubImage3DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint  imageSize, IntPtr  bits);
        private static glCompressedTextureSubImage3DEXTDel glCompressedTextureSubImage3DEXTPtr;
        
        // glConservativeRasterParameterfNV
        public static void glConservativeRasterParameterfNV(uint  pname, float  value) => glConservativeRasterParameterfNVPtr?.Invoke(pname, value);
        private delegate void glConservativeRasterParameterfNVDel(uint  pname, float  value);
        private static glConservativeRasterParameterfNVDel glConservativeRasterParameterfNVPtr;
        
        // glConservativeRasterParameteriNV
        public static void glConservativeRasterParameteriNV(uint  pname, int  param) => glConservativeRasterParameteriNVPtr?.Invoke(pname, param);
        private delegate void glConservativeRasterParameteriNVDel(uint  pname, int  param);
        private static glConservativeRasterParameteriNVDel glConservativeRasterParameteriNVPtr;
        
        // glConvolutionFilter1D
        public static void glConvolutionFilter1D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glConvolutionFilter1DPtr?.Invoke(target, internalformat, width, format, type, image);
        private delegate void glConvolutionFilter1DDel(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glConvolutionFilter1DDel glConvolutionFilter1DPtr;
        
        // glConvolutionFilter1DEXT
        public static void glConvolutionFilter1DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glConvolutionFilter1DEXTPtr?.Invoke(target, internalformat, width, format, type, image);
        private delegate void glConvolutionFilter1DEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glConvolutionFilter1DEXTDel glConvolutionFilter1DEXTPtr;
        
        // glConvolutionFilter2D
        public static void glConvolutionFilter2D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glConvolutionFilter2DPtr?.Invoke(target, internalformat, width, height, format, type, image);
        private delegate void glConvolutionFilter2DDel(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glConvolutionFilter2DDel glConvolutionFilter2DPtr;
        
        // glConvolutionFilter2DEXT
        public static void glConvolutionFilter2DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glConvolutionFilter2DEXTPtr?.Invoke(target, internalformat, width, height, format, type, image);
        private delegate void glConvolutionFilter2DEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glConvolutionFilter2DEXTDel glConvolutionFilter2DEXTPtr;
        
        // glConvolutionParameterf
        public static void glConvolutionParameterf(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters) => glConvolutionParameterfPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterfDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters);
        private static glConvolutionParameterfDel glConvolutionParameterfPtr;
        
        // glConvolutionParameterfEXT
        public static void glConvolutionParameterfEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters) => glConvolutionParameterfEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterfEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float /*CheckedFloat32*/  parameters);
        private static glConvolutionParameterfEXTDel glConvolutionParameterfEXTPtr;
        
        // glConvolutionParameterfv
        public static void glConvolutionParameterfv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters) => glConvolutionParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterfvDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glConvolutionParameterfvDel glConvolutionParameterfvPtr;
        
        // glConvolutionParameterfvEXT
        public static void glConvolutionParameterfvEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters) => glConvolutionParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterfvEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glConvolutionParameterfvEXTDel glConvolutionParameterfvEXTPtr;
        
        // glConvolutionParameteri
        public static void glConvolutionParameteri(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters) => glConvolutionParameteriPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameteriDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters);
        private static glConvolutionParameteriDel glConvolutionParameteriPtr;
        
        // glConvolutionParameteriEXT
        public static void glConvolutionParameteriEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters) => glConvolutionParameteriEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameteriEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int /*CheckedInt32*/  parameters);
        private static glConvolutionParameteriEXTDel glConvolutionParameteriEXTPtr;
        
        // glConvolutionParameteriv
        public static void glConvolutionParameteriv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters) => glConvolutionParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterivDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glConvolutionParameterivDel glConvolutionParameterivPtr;
        
        // glConvolutionParameterivEXT
        public static void glConvolutionParameterivEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters) => glConvolutionParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterivEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glConvolutionParameterivEXTDel glConvolutionParameterivEXTPtr;
        
        // glConvolutionParameterxOES
        public static void glConvolutionParameterxOES(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int  param) => glConvolutionParameterxOESPtr?.Invoke(target, pname, param);
        private delegate void glConvolutionParameterxOESDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int  param);
        private static glConvolutionParameterxOESDel glConvolutionParameterxOESPtr;
        
        // glConvolutionParameterxvOES
        public static void glConvolutionParameterxvOES(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => glConvolutionParameterxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glConvolutionParameterxvOESDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters);
        private static glConvolutionParameterxvOESDel glConvolutionParameterxvOESPtr;
        
        // glCopyBufferSubData
        public static void glCopyBufferSubData(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size) => glCopyBufferSubDataPtr?.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);
        private delegate void glCopyBufferSubDataDel(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size);
        private static glCopyBufferSubDataDel glCopyBufferSubDataPtr;
        
        // glCopyBufferSubDataNV
        public static void glCopyBufferSubDataNV(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size) => glCopyBufferSubDataNVPtr?.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);
        private delegate void glCopyBufferSubDataNVDel(uint /*CopyBufferSubDataTarget*/  readTarget, uint /*CopyBufferSubDataTarget*/  writeTarget, IntPtr /*BufferOffset*/  readOffset, IntPtr /*BufferOffset*/  writeOffset, IntPtr /*BufferSize*/  size);
        private static glCopyBufferSubDataNVDel glCopyBufferSubDataNVPtr;
        
        // glCopyColorSubTable
        public static void glCopyColorSubTable(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyColorSubTablePtr?.Invoke(target, start, x, y, width);
        private delegate void glCopyColorSubTableDel(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyColorSubTableDel glCopyColorSubTablePtr;
        
        // glCopyColorSubTableEXT
        public static void glCopyColorSubTableEXT(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyColorSubTableEXTPtr?.Invoke(target, start, x, y, width);
        private delegate void glCopyColorSubTableEXTDel(uint /*ColorTableTarget*/  target, uint  start, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyColorSubTableEXTDel glCopyColorSubTableEXTPtr;
        
        // glCopyColorTable
        public static void glCopyColorTable(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyColorTablePtr?.Invoke(target, internalformat, x, y, width);
        private delegate void glCopyColorTableDel(uint /*ColorTableTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyColorTableDel glCopyColorTablePtr;
        
        // glCopyColorTableSGI
        public static void glCopyColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyColorTableSGIPtr?.Invoke(target, internalformat, x, y, width);
        private delegate void glCopyColorTableSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyColorTableSGIDel glCopyColorTableSGIPtr;
        
        // glCopyConvolutionFilter1D
        public static void glCopyConvolutionFilter1D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyConvolutionFilter1DPtr?.Invoke(target, internalformat, x, y, width);
        private delegate void glCopyConvolutionFilter1DDel(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyConvolutionFilter1DDel glCopyConvolutionFilter1DPtr;
        
        // glCopyConvolutionFilter1DEXT
        public static void glCopyConvolutionFilter1DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyConvolutionFilter1DEXTPtr?.Invoke(target, internalformat, x, y, width);
        private delegate void glCopyConvolutionFilter1DEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyConvolutionFilter1DEXTDel glCopyConvolutionFilter1DEXTPtr;
        
        // glCopyConvolutionFilter2D
        public static void glCopyConvolutionFilter2D(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyConvolutionFilter2DPtr?.Invoke(target, internalformat, x, y, width, height);
        private delegate void glCopyConvolutionFilter2DDel(uint /*ConvolutionTarget*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyConvolutionFilter2DDel glCopyConvolutionFilter2DPtr;
        
        // glCopyConvolutionFilter2DEXT
        public static void glCopyConvolutionFilter2DEXT(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyConvolutionFilter2DEXTPtr?.Invoke(target, internalformat, x, y, width, height);
        private delegate void glCopyConvolutionFilter2DEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyConvolutionFilter2DEXTDel glCopyConvolutionFilter2DEXTPtr;
        
        // glCopyImageSubData
        public static void glCopyImageSubData(uint  srcName, uint /*CopyImageSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyImageSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => glCopyImageSubDataPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        private delegate void glCopyImageSubDataDel(uint  srcName, uint /*CopyImageSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyImageSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth);
        private static glCopyImageSubDataDel glCopyImageSubDataPtr;
        
        // glCopyImageSubDataEXT
        public static void glCopyImageSubDataEXT(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => glCopyImageSubDataEXTPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        private delegate void glCopyImageSubDataEXTDel(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth);
        private static glCopyImageSubDataEXTDel glCopyImageSubDataEXTPtr;
        
        // glCopyImageSubDataNV
        public static void glCopyImageSubDataNV(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth) => glCopyImageSubDataNVPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        private delegate void glCopyImageSubDataNVDel(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth);
        private static glCopyImageSubDataNVDel glCopyImageSubDataNVPtr;
        
        // glCopyImageSubDataOES
        public static void glCopyImageSubDataOES(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => glCopyImageSubDataOESPtr?.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        private delegate void glCopyImageSubDataOESDel(uint  srcName, uint /*CopyBufferSubDataTarget*/  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint /*CopyBufferSubDataTarget*/  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth);
        private static glCopyImageSubDataOESDel glCopyImageSubDataOESPtr;
        
        // glCopyMultiTexImage1DEXT
        public static void glCopyMultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => glCopyMultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, x, y, width, border);
        private delegate void glCopyMultiTexImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border);
        private static glCopyMultiTexImage1DEXTDel glCopyMultiTexImage1DEXTPtr;
        
        // glCopyMultiTexImage2DEXT
        public static void glCopyMultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => glCopyMultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, x, y, width, height, border);
        private delegate void glCopyMultiTexImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border);
        private static glCopyMultiTexImage2DEXTDel glCopyMultiTexImage2DEXTPtr;
        
        // glCopyMultiTexSubImage1DEXT
        public static void glCopyMultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyMultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, x, y, width);
        private delegate void glCopyMultiTexSubImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyMultiTexSubImage1DEXTDel glCopyMultiTexSubImage1DEXTPtr;
        
        // glCopyMultiTexSubImage2DEXT
        public static void glCopyMultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyMultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, x, y, width, height);
        private delegate void glCopyMultiTexSubImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyMultiTexSubImage2DEXTDel glCopyMultiTexSubImage2DEXTPtr;
        
        // glCopyMultiTexSubImage3DEXT
        public static void glCopyMultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyMultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyMultiTexSubImage3DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyMultiTexSubImage3DEXTDel glCopyMultiTexSubImage3DEXTPtr;
        
        // glCopyNamedBufferSubData
        public static void glCopyNamedBufferSubData(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr /*BufferSize*/  size) => glCopyNamedBufferSubDataPtr?.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);
        private delegate void glCopyNamedBufferSubDataDel(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr /*BufferSize*/  size);
        private static glCopyNamedBufferSubDataDel glCopyNamedBufferSubDataPtr;
        
        // glCopyPathNV
        public static void glCopyPathNV(uint /*Path*/  resultPath, uint /*Path*/  srcPath) => glCopyPathNVPtr?.Invoke(resultPath, srcPath);
        private delegate void glCopyPathNVDel(uint /*Path*/  resultPath, uint /*Path*/  srcPath);
        private static glCopyPathNVDel glCopyPathNVPtr;
        
        // glCopyPixels
        public static void glCopyPixels(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelCopyType*/  type) => glCopyPixelsPtr?.Invoke(x, y, width, height, type);
        private delegate void glCopyPixelsDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelCopyType*/  type);
        private static glCopyPixelsDel glCopyPixelsPtr;
        
        // glCopyTexImage1D
        public static void glCopyTexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => glCopyTexImage1DPtr?.Invoke(target, level, internalformat, x, y, width, border);
        private delegate void glCopyTexImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border);
        private static glCopyTexImage1DDel glCopyTexImage1DPtr;
        
        // glCopyTexImage1DEXT
        public static void glCopyTexImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => glCopyTexImage1DEXTPtr?.Invoke(target, level, internalformat, x, y, width, border);
        private delegate void glCopyTexImage1DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border);
        private static glCopyTexImage1DEXTDel glCopyTexImage1DEXTPtr;
        
        // glCopyTexImage2D
        public static void glCopyTexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => glCopyTexImage2DPtr?.Invoke(target, level, internalformat, x, y, width, height, border);
        private delegate void glCopyTexImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border);
        private static glCopyTexImage2DDel glCopyTexImage2DPtr;
        
        // glCopyTexImage2DEXT
        public static void glCopyTexImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => glCopyTexImage2DEXTPtr?.Invoke(target, level, internalformat, x, y, width, height, border);
        private delegate void glCopyTexImage2DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border);
        private static glCopyTexImage2DEXTDel glCopyTexImage2DEXTPtr;
        
        // glCopyTexSubImage1D
        public static void glCopyTexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyTexSubImage1DPtr?.Invoke(target, level, xoffset, x, y, width);
        private delegate void glCopyTexSubImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyTexSubImage1DDel glCopyTexSubImage1DPtr;
        
        // glCopyTexSubImage1DEXT
        public static void glCopyTexSubImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyTexSubImage1DEXTPtr?.Invoke(target, level, xoffset, x, y, width);
        private delegate void glCopyTexSubImage1DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyTexSubImage1DEXTDel glCopyTexSubImage1DEXTPtr;
        
        // glCopyTexSubImage2D
        public static void glCopyTexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, x, y, width, height);
        private delegate void glCopyTexSubImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTexSubImage2DDel glCopyTexSubImage2DPtr;
        
        // glCopyTexSubImage2DEXT
        public static void glCopyTexSubImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTexSubImage2DEXTPtr?.Invoke(target, level, xoffset, yoffset, x, y, width, height);
        private delegate void glCopyTexSubImage2DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTexSubImage2DEXTDel glCopyTexSubImage2DEXTPtr;
        
        // glCopyTexSubImage3D
        public static void glCopyTexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyTexSubImage3DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTexSubImage3DDel glCopyTexSubImage3DPtr;
        
        // glCopyTexSubImage3DEXT
        public static void glCopyTexSubImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTexSubImage3DEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyTexSubImage3DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTexSubImage3DEXTDel glCopyTexSubImage3DEXTPtr;
        
        // glCopyTexSubImage3DOES
        public static void glCopyTexSubImage3DOES(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height) => glCopyTexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyTexSubImage3DOESDel(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height);
        private static glCopyTexSubImage3DOESDel glCopyTexSubImage3DOESPtr;
        
        // glCopyTextureImage1DEXT
        public static void glCopyTextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border) => glCopyTextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, x, y, width, border);
        private delegate void glCopyTextureImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, int /*CheckedInt32*/  border);
        private static glCopyTextureImage1DEXTDel glCopyTextureImage1DEXTPtr;
        
        // glCopyTextureImage2DEXT
        public static void glCopyTextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border) => glCopyTextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, x, y, width, height, border);
        private delegate void glCopyTextureImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, int /*CheckedInt32*/  border);
        private static glCopyTextureImage2DEXTDel glCopyTextureImage2DEXTPtr;
        
        // glCopyTextureLevelsAPPLE
        public static void glCopyTextureLevelsAPPLE(uint  destinationTexture, uint  sourceTexture, int  sourceBaseLevel, uint  sourceLevelCount) => glCopyTextureLevelsAPPLEPtr?.Invoke(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        private delegate void glCopyTextureLevelsAPPLEDel(uint  destinationTexture, uint  sourceTexture, int  sourceBaseLevel, uint  sourceLevelCount);
        private static glCopyTextureLevelsAPPLEDel glCopyTextureLevelsAPPLEPtr;
        
        // glCopyTextureSubImage1D
        public static void glCopyTextureSubImage1D(uint  texture, int  level, int  xoffset, int  x, int  y, uint  width) => glCopyTextureSubImage1DPtr?.Invoke(texture, level, xoffset, x, y, width);
        private delegate void glCopyTextureSubImage1DDel(uint  texture, int  level, int  xoffset, int  x, int  y, uint  width);
        private static glCopyTextureSubImage1DDel glCopyTextureSubImage1DPtr;
        
        // glCopyTextureSubImage1DEXT
        public static void glCopyTextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width) => glCopyTextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, x, y, width);
        private delegate void glCopyTextureSubImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width);
        private static glCopyTextureSubImage1DEXTDel glCopyTextureSubImage1DEXTPtr;
        
        // glCopyTextureSubImage2D
        public static void glCopyTextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, int  x, int  y, uint  width, uint  height) => glCopyTextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, x, y, width, height);
        private delegate void glCopyTextureSubImage2DDel(uint  texture, int  level, int  xoffset, int  yoffset, int  x, int  y, uint  width, uint  height);
        private static glCopyTextureSubImage2DDel glCopyTextureSubImage2DPtr;
        
        // glCopyTextureSubImage2DEXT
        public static void glCopyTextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, x, y, width, height);
        private delegate void glCopyTextureSubImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTextureSubImage2DEXTDel glCopyTextureSubImage2DEXTPtr;
        
        // glCopyTextureSubImage3D
        public static void glCopyTextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height) => glCopyTextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyTextureSubImage3DDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, int  x, int  y, uint  width, uint  height);
        private static glCopyTextureSubImage3DDel glCopyTextureSubImage3DPtr;
        
        // glCopyTextureSubImage3DEXT
        public static void glCopyTextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glCopyTextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        private delegate void glCopyTextureSubImage3DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glCopyTextureSubImage3DEXTDel glCopyTextureSubImage3DEXTPtr;
        
        // glCoverFillPathInstancedNV
        public static void glCoverFillPathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues) => glCoverFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        private delegate void glCoverFillPathInstancedNVDel(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues);
        private static glCoverFillPathInstancedNVDel glCoverFillPathInstancedNVPtr;
        
        // glCoverFillPathNV
        public static void glCoverFillPathNV(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode) => glCoverFillPathNVPtr?.Invoke(path, coverMode);
        private delegate void glCoverFillPathNVDel(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode);
        private static glCoverFillPathNVDel glCoverFillPathNVPtr;
        
        // glCoverStrokePathInstancedNV
        public static void glCoverStrokePathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues) => glCoverStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
        private delegate void glCoverStrokePathInstancedNVDel(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathCoverMode*/  coverMode, uint /*PathTransformType*/  transformType, float[]  transformValues);
        private static glCoverStrokePathInstancedNVDel glCoverStrokePathInstancedNVPtr;
        
        // glCoverStrokePathNV
        public static void glCoverStrokePathNV(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode) => glCoverStrokePathNVPtr?.Invoke(path, coverMode);
        private delegate void glCoverStrokePathNVDel(uint /*Path*/  path, uint /*PathCoverMode*/  coverMode);
        private static glCoverStrokePathNVDel glCoverStrokePathNVPtr;
        
        // glCoverageMaskNV
        public static void glCoverageMaskNV(bool /*Boolean*/  mask) => glCoverageMaskNVPtr?.Invoke(mask);
        private delegate void glCoverageMaskNVDel(bool /*Boolean*/  mask);
        private static glCoverageMaskNVDel glCoverageMaskNVPtr;
        
        // glCoverageModulationNV
        public static void glCoverageModulationNV(uint  components) => glCoverageModulationNVPtr?.Invoke(components);
        private delegate void glCoverageModulationNVDel(uint  components);
        private static glCoverageModulationNVDel glCoverageModulationNVPtr;
        
        // glCoverageModulationTableNV
        public static void glCoverageModulationTableNV(uint  n, float[]  v) => glCoverageModulationTableNVPtr?.Invoke(n, v);
        private delegate void glCoverageModulationTableNVDel(uint  n, float[]  v);
        private static glCoverageModulationTableNVDel glCoverageModulationTableNVPtr;
        
        // glCoverageOperationNV
        public static void glCoverageOperationNV(uint  operation) => glCoverageOperationNVPtr?.Invoke(operation);
        private delegate void glCoverageOperationNVDel(uint  operation);
        private static glCoverageOperationNVDel glCoverageOperationNVPtr;
        
        // glCreateBuffers
        public static void glCreateBuffers(uint  n, uint[]  buffers) => glCreateBuffersPtr?.Invoke(n, buffers);
        private delegate void glCreateBuffersDel(uint  n, uint[]  buffers);
        private static glCreateBuffersDel glCreateBuffersPtr;
        
        // glCreateCommandListsNV
        public static void glCreateCommandListsNV(uint  n, uint[]  lists) => glCreateCommandListsNVPtr?.Invoke(n, lists);
        private delegate void glCreateCommandListsNVDel(uint  n, uint[]  lists);
        private static glCreateCommandListsNVDel glCreateCommandListsNVPtr;
        
        // glCreateFramebuffers
        public static void glCreateFramebuffers(uint  n, uint[]  framebuffers) => glCreateFramebuffersPtr?.Invoke(n, framebuffers);
        private delegate void glCreateFramebuffersDel(uint  n, uint[]  framebuffers);
        private static glCreateFramebuffersDel glCreateFramebuffersPtr;
        
        // glCreateMemoryObjectsEXT
        public static void glCreateMemoryObjectsEXT(uint  n, uint[]  memoryObjects) => glCreateMemoryObjectsEXTPtr?.Invoke(n, memoryObjects);
        private delegate void glCreateMemoryObjectsEXTDel(uint  n, uint[]  memoryObjects);
        private static glCreateMemoryObjectsEXTDel glCreateMemoryObjectsEXTPtr;
        
        // glCreatePerfQueryINTEL
        public static void glCreatePerfQueryINTEL(uint  queryId, uint[]  queryHandle) => glCreatePerfQueryINTELPtr?.Invoke(queryId, queryHandle);
        private delegate void glCreatePerfQueryINTELDel(uint  queryId, uint[]  queryHandle);
        private static glCreatePerfQueryINTELDel glCreatePerfQueryINTELPtr;
        
        // glCreateProgram
        public static uint glCreateProgram() => glCreateProgramPtr?.Invoke() ?? default;
        private delegate uint glCreateProgramDel();
        private static glCreateProgramDel glCreateProgramPtr;
        
        // glCreateProgramObjectARB
        public static IntPtr /*handleARB*/ glCreateProgramObjectARB() => glCreateProgramObjectARBPtr?.Invoke() ?? default;
        private delegate IntPtr /*handleARB*/ glCreateProgramObjectARBDel();
        private static glCreateProgramObjectARBDel glCreateProgramObjectARBPtr;
        
        // glCreateProgramPipelines
        public static void glCreateProgramPipelines(uint  n, uint[]  pipelines) => glCreateProgramPipelinesPtr?.Invoke(n, pipelines);
        private delegate void glCreateProgramPipelinesDel(uint  n, uint[]  pipelines);
        private static glCreateProgramPipelinesDel glCreateProgramPipelinesPtr;
        
        // glCreateProgressFenceNVX
        public static uint glCreateProgressFenceNVX() => glCreateProgressFenceNVXPtr?.Invoke() ?? default;
        private delegate uint glCreateProgressFenceNVXDel();
        private static glCreateProgressFenceNVXDel glCreateProgressFenceNVXPtr;
        
        // glCreateQueries
        public static void glCreateQueries(uint /*QueryTarget*/  target, uint  n, uint[]  ids) => glCreateQueriesPtr?.Invoke(target, n, ids);
        private delegate void glCreateQueriesDel(uint /*QueryTarget*/  target, uint  n, uint[]  ids);
        private static glCreateQueriesDel glCreateQueriesPtr;
        
        // glCreateRenderbuffers
        public static void glCreateRenderbuffers(uint  n, uint[]  renderbuffers) => glCreateRenderbuffersPtr?.Invoke(n, renderbuffers);
        private delegate void glCreateRenderbuffersDel(uint  n, uint[]  renderbuffers);
        private static glCreateRenderbuffersDel glCreateRenderbuffersPtr;
        
        // glCreateSamplers
        public static void glCreateSamplers(uint  n, uint[]  samplers) => glCreateSamplersPtr?.Invoke(n, samplers);
        private delegate void glCreateSamplersDel(uint  n, uint[]  samplers);
        private static glCreateSamplersDel glCreateSamplersPtr;
        
        // glCreateShader
        public static uint glCreateShader(uint /*ShaderType*/  type) => glCreateShaderPtr?.Invoke(type) ?? default;
        private delegate uint glCreateShaderDel(uint /*ShaderType*/  type);
        private static glCreateShaderDel glCreateShaderPtr;
        
        // glCreateShaderObjectARB
        public static IntPtr /*handleARB*/ glCreateShaderObjectARB(uint /*ShaderType*/  shaderType) => glCreateShaderObjectARBPtr?.Invoke(shaderType) ?? default;
        private delegate IntPtr /*handleARB*/ glCreateShaderObjectARBDel(uint /*ShaderType*/  shaderType);
        private static glCreateShaderObjectARBDel glCreateShaderObjectARBPtr;
        
        // glCreateShaderProgramEXT
        public static uint glCreateShaderProgramEXT(uint /*ShaderType*/  type, string  str) => glCreateShaderProgramEXTPtr?.Invoke(type, str) ?? default;
        private delegate uint glCreateShaderProgramEXTDel(uint /*ShaderType*/  type, string  str);
        private static glCreateShaderProgramEXTDel glCreateShaderProgramEXTPtr;
        
        // glCreateShaderProgramv
        public static uint glCreateShaderProgramv(uint /*ShaderType*/  type, uint  count, string  strings) => glCreateShaderProgramvPtr?.Invoke(type, count, strings) ?? default;
        private delegate uint glCreateShaderProgramvDel(uint /*ShaderType*/  type, uint  count, string  strings);
        private static glCreateShaderProgramvDel glCreateShaderProgramvPtr;
        
        // glCreateShaderProgramvEXT
        public static uint glCreateShaderProgramvEXT(uint /*ShaderType*/  type, uint  count, string  strings) => glCreateShaderProgramvEXTPtr?.Invoke(type, count, strings) ?? default;
        private delegate uint glCreateShaderProgramvEXTDel(uint /*ShaderType*/  type, uint  count, string  strings);
        private static glCreateShaderProgramvEXTDel glCreateShaderProgramvEXTPtr;
        
        // glCreateStatesNV
        public static void glCreateStatesNV(uint  n, uint[]  states) => glCreateStatesNVPtr?.Invoke(n, states);
        private delegate void glCreateStatesNVDel(uint  n, uint[]  states);
        private static glCreateStatesNVDel glCreateStatesNVPtr;
        
        // glCreateSyncFromCLeventARB
        public static IntPtr /*sync*/ glCreateSyncFromCLeventARB(IntPtr /*cl_context*/  context, IntPtr /*cl_event*/  evnt, uint  flags) => glCreateSyncFromCLeventARBPtr?.Invoke(context, evnt, flags) ?? default;
        private delegate IntPtr /*sync*/ glCreateSyncFromCLeventARBDel(IntPtr /*cl_context*/  context, IntPtr /*cl_event*/  evnt, uint  flags);
        private static glCreateSyncFromCLeventARBDel glCreateSyncFromCLeventARBPtr;
        
        // glCreateTextures
        public static void glCreateTextures(uint /*TextureTarget*/  target, uint  n, uint[]  textures) => glCreateTexturesPtr?.Invoke(target, n, textures);
        private delegate void glCreateTexturesDel(uint /*TextureTarget*/  target, uint  n, uint[]  textures);
        private static glCreateTexturesDel glCreateTexturesPtr;
        
        // glCreateTransformFeedbacks
        public static void glCreateTransformFeedbacks(uint  n, uint[]  ids) => glCreateTransformFeedbacksPtr?.Invoke(n, ids);
        private delegate void glCreateTransformFeedbacksDel(uint  n, uint[]  ids);
        private static glCreateTransformFeedbacksDel glCreateTransformFeedbacksPtr;
        
        // glCreateVertexArrays
        public static void glCreateVertexArrays(uint  n, uint[]  arrays) => glCreateVertexArraysPtr?.Invoke(n, arrays);
        private delegate void glCreateVertexArraysDel(uint  n, uint[]  arrays);
        private static glCreateVertexArraysDel glCreateVertexArraysPtr;
        
        // glCullFace
        public static void glCullFace(uint /*CullFaceMode*/  mode) => glCullFacePtr?.Invoke(mode);
        private delegate void glCullFaceDel(uint /*CullFaceMode*/  mode);
        private static glCullFaceDel glCullFacePtr;
        
        // glCullParameterdvEXT
        public static void glCullParameterdvEXT(uint /*CullParameterEXT*/  pname, double[]  parameters) => glCullParameterdvEXTPtr?.Invoke(pname, parameters);
        private delegate void glCullParameterdvEXTDel(uint /*CullParameterEXT*/  pname, double[]  parameters);
        private static glCullParameterdvEXTDel glCullParameterdvEXTPtr;
        
        // glCullParameterfvEXT
        public static void glCullParameterfvEXT(uint /*CullParameterEXT*/  pname, float[]  parameters) => glCullParameterfvEXTPtr?.Invoke(pname, parameters);
        private delegate void glCullParameterfvEXTDel(uint /*CullParameterEXT*/  pname, float[]  parameters);
        private static glCullParameterfvEXTDel glCullParameterfvEXTPtr;
        
        // glCurrentPaletteMatrixARB
        public static void glCurrentPaletteMatrixARB(int  index) => glCurrentPaletteMatrixARBPtr?.Invoke(index);
        private delegate void glCurrentPaletteMatrixARBDel(int  index);
        private static glCurrentPaletteMatrixARBDel glCurrentPaletteMatrixARBPtr;
        
        // glCurrentPaletteMatrixOES
        public static void glCurrentPaletteMatrixOES(uint  matrixpaletteindex) => glCurrentPaletteMatrixOESPtr?.Invoke(matrixpaletteindex);
        private delegate void glCurrentPaletteMatrixOESDel(uint  matrixpaletteindex);
        private static glCurrentPaletteMatrixOESDel glCurrentPaletteMatrixOESPtr;
        
        // glDebugMessageCallback
        public static void glDebugMessageCallback(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => glDebugMessageCallbackPtr?.Invoke(callback, userParam);
        private delegate void glDebugMessageCallbackDel(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam);
        private static glDebugMessageCallbackDel glDebugMessageCallbackPtr;
        
        // glDebugMessageCallbackAMD
        public static void glDebugMessageCallbackAMD(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => glDebugMessageCallbackAMDPtr?.Invoke(callback, userParam);
        private delegate void glDebugMessageCallbackAMDDel(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam);
        private static glDebugMessageCallbackAMDDel glDebugMessageCallbackAMDPtr;
        
        // glDebugMessageCallbackARB
        public static void glDebugMessageCallbackARB(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => glDebugMessageCallbackARBPtr?.Invoke(callback, userParam);
        private delegate void glDebugMessageCallbackARBDel(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam);
        private static glDebugMessageCallbackARBDel glDebugMessageCallbackARBPtr;
        
        // glDebugMessageCallbackKHR
        public static void glDebugMessageCallbackKHR(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam) => glDebugMessageCallbackKHRPtr?.Invoke(callback, userParam);
        private delegate void glDebugMessageCallbackKHRDel(IntPtr /*GLDEBUGPROC*/  callback, IntPtr  userParam);
        private static glDebugMessageCallbackKHRDel glDebugMessageCallbackKHRPtr;
        
        // glDebugMessageControl
        public static void glDebugMessageControl(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => glDebugMessageControlPtr?.Invoke(source, type, severity, count, ids, enabled);
        private delegate void glDebugMessageControlDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled);
        private static glDebugMessageControlDel glDebugMessageControlPtr;
        
        // glDebugMessageControlARB
        public static void glDebugMessageControlARB(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => glDebugMessageControlARBPtr?.Invoke(source, type, severity, count, ids, enabled);
        private delegate void glDebugMessageControlARBDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled);
        private static glDebugMessageControlARBDel glDebugMessageControlARBPtr;
        
        // glDebugMessageControlKHR
        public static void glDebugMessageControlKHR(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => glDebugMessageControlKHRPtr?.Invoke(source, type, severity, count, ids, enabled);
        private delegate void glDebugMessageControlKHRDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled);
        private static glDebugMessageControlKHRDel glDebugMessageControlKHRPtr;
        
        // glDebugMessageEnableAMD
        public static void glDebugMessageEnableAMD(uint  category, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled) => glDebugMessageEnableAMDPtr?.Invoke(category, severity, count, ids, enabled);
        private delegate void glDebugMessageEnableAMDDel(uint  category, uint /*DebugSeverity*/  severity, uint  count, uint[]  ids, bool /*Boolean*/  enabled);
        private static glDebugMessageEnableAMDDel glDebugMessageEnableAMDPtr;
        
        // glDebugMessageInsert
        public static void glDebugMessageInsert(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => glDebugMessageInsertPtr?.Invoke(source, type, id, severity, length, buf);
        private delegate void glDebugMessageInsertDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf);
        private static glDebugMessageInsertDel glDebugMessageInsertPtr;
        
        // glDebugMessageInsertAMD
        public static void glDebugMessageInsertAMD(uint  category, uint /*DebugSeverity*/  severity, uint  id, uint  length, string  buf) => glDebugMessageInsertAMDPtr?.Invoke(category, severity, id, length, buf);
        private delegate void glDebugMessageInsertAMDDel(uint  category, uint /*DebugSeverity*/  severity, uint  id, uint  length, string  buf);
        private static glDebugMessageInsertAMDDel glDebugMessageInsertAMDPtr;
        
        // glDebugMessageInsertARB
        public static void glDebugMessageInsertARB(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => glDebugMessageInsertARBPtr?.Invoke(source, type, id, severity, length, buf);
        private delegate void glDebugMessageInsertARBDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf);
        private static glDebugMessageInsertARBDel glDebugMessageInsertARBPtr;
        
        // glDebugMessageInsertKHR
        public static void glDebugMessageInsertKHR(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf) => glDebugMessageInsertKHRPtr?.Invoke(source, type, id, severity, length, buf);
        private delegate void glDebugMessageInsertKHRDel(uint /*DebugSource*/  source, uint /*DebugType*/  type, uint  id, uint /*DebugSeverity*/  severity, uint  length, string  buf);
        private static glDebugMessageInsertKHRDel glDebugMessageInsertKHRPtr;
        
        // glDeformSGIX
        public static void glDeformSGIX(uint /*FfdMaskSGIX*/  mask) => glDeformSGIXPtr?.Invoke(mask);
        private delegate void glDeformSGIXDel(uint /*FfdMaskSGIX*/  mask);
        private static glDeformSGIXDel glDeformSGIXPtr;
        
        // glDeformationMap3dSGIX
        public static void glDeformationMap3dSGIX(uint /*FfdTargetSGIX*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double /*CoordD*/  w1, double /*CoordD*/  w2, int  wstride, int /*CheckedInt32*/  worder, double[] /*CoordD*/  points) => glDeformationMap3dSGIXPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        private delegate void glDeformationMap3dSGIXDel(uint /*FfdTargetSGIX*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double /*CoordD*/  w1, double /*CoordD*/  w2, int  wstride, int /*CheckedInt32*/  worder, double[] /*CoordD*/  points);
        private static glDeformationMap3dSGIXDel glDeformationMap3dSGIXPtr;
        
        // glDeformationMap3fSGIX
        public static void glDeformationMap3fSGIX(uint /*FfdTargetSGIX*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float /*CoordF*/  w1, float /*CoordF*/  w2, int  wstride, int /*CheckedInt32*/  worder, float[] /*CoordF*/  points) => glDeformationMap3fSGIXPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        private delegate void glDeformationMap3fSGIXDel(uint /*FfdTargetSGIX*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float /*CoordF*/  w1, float /*CoordF*/  w2, int  wstride, int /*CheckedInt32*/  worder, float[] /*CoordF*/  points);
        private static glDeformationMap3fSGIXDel glDeformationMap3fSGIXPtr;
        
        // glDeleteAsyncMarkersSGIX
        public static void glDeleteAsyncMarkersSGIX(uint  marker, uint  range) => glDeleteAsyncMarkersSGIXPtr?.Invoke(marker, range);
        private delegate void glDeleteAsyncMarkersSGIXDel(uint  marker, uint  range);
        private static glDeleteAsyncMarkersSGIXDel glDeleteAsyncMarkersSGIXPtr;
        
        // glDeleteBuffers
        public static void glDeleteBuffers(uint  n, uint[]  buffers) => glDeleteBuffersPtr?.Invoke(n, buffers);
        private delegate void glDeleteBuffersDel(uint  n, uint[]  buffers);
        private static glDeleteBuffersDel glDeleteBuffersPtr;
        
        // glDeleteBuffersARB
        public static void glDeleteBuffersARB(uint  n, uint[]  buffers) => glDeleteBuffersARBPtr?.Invoke(n, buffers);
        private delegate void glDeleteBuffersARBDel(uint  n, uint[]  buffers);
        private static glDeleteBuffersARBDel glDeleteBuffersARBPtr;
        
        // glDeleteCommandListsNV
        public static void glDeleteCommandListsNV(uint  n, uint[]  lists) => glDeleteCommandListsNVPtr?.Invoke(n, lists);
        private delegate void glDeleteCommandListsNVDel(uint  n, uint[]  lists);
        private static glDeleteCommandListsNVDel glDeleteCommandListsNVPtr;
        
        // glDeleteFencesAPPLE
        public static void glDeleteFencesAPPLE(uint  n, uint[] /*FenceNV*/  fences) => glDeleteFencesAPPLEPtr?.Invoke(n, fences);
        private delegate void glDeleteFencesAPPLEDel(uint  n, uint[] /*FenceNV*/  fences);
        private static glDeleteFencesAPPLEDel glDeleteFencesAPPLEPtr;
        
        // glDeleteFencesNV
        public static void glDeleteFencesNV(uint  n, uint[] /*FenceNV*/  fences) => glDeleteFencesNVPtr?.Invoke(n, fences);
        private delegate void glDeleteFencesNVDel(uint  n, uint[] /*FenceNV*/  fences);
        private static glDeleteFencesNVDel glDeleteFencesNVPtr;
        
        // glDeleteFragmentShaderATI
        public static void glDeleteFragmentShaderATI(uint  id) => glDeleteFragmentShaderATIPtr?.Invoke(id);
        private delegate void glDeleteFragmentShaderATIDel(uint  id);
        private static glDeleteFragmentShaderATIDel glDeleteFragmentShaderATIPtr;
        
        // glDeleteFramebuffers
        public static void glDeleteFramebuffers(uint  n, uint[]  framebuffers) => glDeleteFramebuffersPtr?.Invoke(n, framebuffers);
        private delegate void glDeleteFramebuffersDel(uint  n, uint[]  framebuffers);
        private static glDeleteFramebuffersDel glDeleteFramebuffersPtr;
        
        // glDeleteFramebuffersEXT
        public static void glDeleteFramebuffersEXT(uint  n, uint[]  framebuffers) => glDeleteFramebuffersEXTPtr?.Invoke(n, framebuffers);
        private delegate void glDeleteFramebuffersEXTDel(uint  n, uint[]  framebuffers);
        private static glDeleteFramebuffersEXTDel glDeleteFramebuffersEXTPtr;
        
        // glDeleteFramebuffersOES
        public static void glDeleteFramebuffersOES(uint  n, uint[]  framebuffers) => glDeleteFramebuffersOESPtr?.Invoke(n, framebuffers);
        private delegate void glDeleteFramebuffersOESDel(uint  n, uint[]  framebuffers);
        private static glDeleteFramebuffersOESDel glDeleteFramebuffersOESPtr;
        
        // glDeleteLists
        public static void glDeleteLists(uint /*List*/  list, uint  range) => glDeleteListsPtr?.Invoke(list, range);
        private delegate void glDeleteListsDel(uint /*List*/  list, uint  range);
        private static glDeleteListsDel glDeleteListsPtr;
        
        // glDeleteMemoryObjectsEXT
        public static void glDeleteMemoryObjectsEXT(uint  n, uint[]  memoryObjects) => glDeleteMemoryObjectsEXTPtr?.Invoke(n, memoryObjects);
        private delegate void glDeleteMemoryObjectsEXTDel(uint  n, uint[]  memoryObjects);
        private static glDeleteMemoryObjectsEXTDel glDeleteMemoryObjectsEXTPtr;
        
        // glDeleteNamedStringARB
        public static void glDeleteNamedStringARB(int  namelen, string  name) => glDeleteNamedStringARBPtr?.Invoke(namelen, name);
        private delegate void glDeleteNamedStringARBDel(int  namelen, string  name);
        private static glDeleteNamedStringARBDel glDeleteNamedStringARBPtr;
        
        // glDeleteNamesAMD
        public static void glDeleteNamesAMD(uint  identifier, uint  num, uint[]  names) => glDeleteNamesAMDPtr?.Invoke(identifier, num, names);
        private delegate void glDeleteNamesAMDDel(uint  identifier, uint  num, uint[]  names);
        private static glDeleteNamesAMDDel glDeleteNamesAMDPtr;
        
        // glDeleteObjectARB
        public static void glDeleteObjectARB(IntPtr /*handleARB*/  obj) => glDeleteObjectARBPtr?.Invoke(obj);
        private delegate void glDeleteObjectARBDel(IntPtr /*handleARB*/  obj);
        private static glDeleteObjectARBDel glDeleteObjectARBPtr;
        
        // glDeleteOcclusionQueriesNV
        public static void glDeleteOcclusionQueriesNV(uint  n, uint[]  ids) => glDeleteOcclusionQueriesNVPtr?.Invoke(n, ids);
        private delegate void glDeleteOcclusionQueriesNVDel(uint  n, uint[]  ids);
        private static glDeleteOcclusionQueriesNVDel glDeleteOcclusionQueriesNVPtr;
        
        // glDeletePathsNV
        public static void glDeletePathsNV(uint /*Path*/  path, uint  range) => glDeletePathsNVPtr?.Invoke(path, range);
        private delegate void glDeletePathsNVDel(uint /*Path*/  path, uint  range);
        private static glDeletePathsNVDel glDeletePathsNVPtr;
        
        // glDeletePerfMonitorsAMD
        public static void glDeletePerfMonitorsAMD(uint  n, uint[]  monitors) => glDeletePerfMonitorsAMDPtr?.Invoke(n, monitors);
        private delegate void glDeletePerfMonitorsAMDDel(uint  n, uint[]  monitors);
        private static glDeletePerfMonitorsAMDDel glDeletePerfMonitorsAMDPtr;
        
        // glDeletePerfQueryINTEL
        public static void glDeletePerfQueryINTEL(uint  queryHandle) => glDeletePerfQueryINTELPtr?.Invoke(queryHandle);
        private delegate void glDeletePerfQueryINTELDel(uint  queryHandle);
        private static glDeletePerfQueryINTELDel glDeletePerfQueryINTELPtr;
        
        // glDeleteProgram
        public static void glDeleteProgram(uint  program) => glDeleteProgramPtr?.Invoke(program);
        private delegate void glDeleteProgramDel(uint  program);
        private static glDeleteProgramDel glDeleteProgramPtr;
        
        // glDeleteProgramPipelines
        public static void glDeleteProgramPipelines(uint  n, uint[]  pipelines) => glDeleteProgramPipelinesPtr?.Invoke(n, pipelines);
        private delegate void glDeleteProgramPipelinesDel(uint  n, uint[]  pipelines);
        private static glDeleteProgramPipelinesDel glDeleteProgramPipelinesPtr;
        
        // glDeleteProgramPipelinesEXT
        public static void glDeleteProgramPipelinesEXT(uint  n, uint[]  pipelines) => glDeleteProgramPipelinesEXTPtr?.Invoke(n, pipelines);
        private delegate void glDeleteProgramPipelinesEXTDel(uint  n, uint[]  pipelines);
        private static glDeleteProgramPipelinesEXTDel glDeleteProgramPipelinesEXTPtr;
        
        // glDeleteProgramsARB
        public static void glDeleteProgramsARB(uint  n, uint[]  programs) => glDeleteProgramsARBPtr?.Invoke(n, programs);
        private delegate void glDeleteProgramsARBDel(uint  n, uint[]  programs);
        private static glDeleteProgramsARBDel glDeleteProgramsARBPtr;
        
        // glDeleteProgramsNV
        public static void glDeleteProgramsNV(uint  n, uint[]  programs) => glDeleteProgramsNVPtr?.Invoke(n, programs);
        private delegate void glDeleteProgramsNVDel(uint  n, uint[]  programs);
        private static glDeleteProgramsNVDel glDeleteProgramsNVPtr;
        
        // glDeleteQueries
        public static void glDeleteQueries(uint  n, uint[]  ids) => glDeleteQueriesPtr?.Invoke(n, ids);
        private delegate void glDeleteQueriesDel(uint  n, uint[]  ids);
        private static glDeleteQueriesDel glDeleteQueriesPtr;
        
        // glDeleteQueriesARB
        public static void glDeleteQueriesARB(uint  n, uint[]  ids) => glDeleteQueriesARBPtr?.Invoke(n, ids);
        private delegate void glDeleteQueriesARBDel(uint  n, uint[]  ids);
        private static glDeleteQueriesARBDel glDeleteQueriesARBPtr;
        
        // glDeleteQueriesEXT
        public static void glDeleteQueriesEXT(uint  n, uint[]  ids) => glDeleteQueriesEXTPtr?.Invoke(n, ids);
        private delegate void glDeleteQueriesEXTDel(uint  n, uint[]  ids);
        private static glDeleteQueriesEXTDel glDeleteQueriesEXTPtr;
        
        // glDeleteQueryResourceTagNV
        public static void glDeleteQueryResourceTagNV(uint  n, int[]  tagIds) => glDeleteQueryResourceTagNVPtr?.Invoke(n, tagIds);
        private delegate void glDeleteQueryResourceTagNVDel(uint  n, int[]  tagIds);
        private static glDeleteQueryResourceTagNVDel glDeleteQueryResourceTagNVPtr;
        
        // glDeleteRenderbuffers
        public static void glDeleteRenderbuffers(uint  n, uint[]  renderbuffers) => glDeleteRenderbuffersPtr?.Invoke(n, renderbuffers);
        private delegate void glDeleteRenderbuffersDel(uint  n, uint[]  renderbuffers);
        private static glDeleteRenderbuffersDel glDeleteRenderbuffersPtr;
        
        // glDeleteRenderbuffersEXT
        public static void glDeleteRenderbuffersEXT(uint  n, uint[]  renderbuffers) => glDeleteRenderbuffersEXTPtr?.Invoke(n, renderbuffers);
        private delegate void glDeleteRenderbuffersEXTDel(uint  n, uint[]  renderbuffers);
        private static glDeleteRenderbuffersEXTDel glDeleteRenderbuffersEXTPtr;
        
        // glDeleteRenderbuffersOES
        public static void glDeleteRenderbuffersOES(uint  n, uint[]  renderbuffers) => glDeleteRenderbuffersOESPtr?.Invoke(n, renderbuffers);
        private delegate void glDeleteRenderbuffersOESDel(uint  n, uint[]  renderbuffers);
        private static glDeleteRenderbuffersOESDel glDeleteRenderbuffersOESPtr;
        
        // glDeleteSamplers
        public static void glDeleteSamplers(uint  count, uint[]  samplers) => glDeleteSamplersPtr?.Invoke(count, samplers);
        private delegate void glDeleteSamplersDel(uint  count, uint[]  samplers);
        private static glDeleteSamplersDel glDeleteSamplersPtr;
        
        // glDeleteSemaphoresEXT
        public static void glDeleteSemaphoresEXT(uint  n, uint[]  semaphores) => glDeleteSemaphoresEXTPtr?.Invoke(n, semaphores);
        private delegate void glDeleteSemaphoresEXTDel(uint  n, uint[]  semaphores);
        private static glDeleteSemaphoresEXTDel glDeleteSemaphoresEXTPtr;
        
        // glDeleteShader
        public static void glDeleteShader(uint  shader) => glDeleteShaderPtr?.Invoke(shader);
        private delegate void glDeleteShaderDel(uint  shader);
        private static glDeleteShaderDel glDeleteShaderPtr;
        
        // glDeleteStatesNV
        public static void glDeleteStatesNV(uint  n, uint[]  states) => glDeleteStatesNVPtr?.Invoke(n, states);
        private delegate void glDeleteStatesNVDel(uint  n, uint[]  states);
        private static glDeleteStatesNVDel glDeleteStatesNVPtr;
        
        // glDeleteSync
        public static void glDeleteSync(IntPtr /*sync*/  sync) => glDeleteSyncPtr?.Invoke(sync);
        private delegate void glDeleteSyncDel(IntPtr /*sync*/  sync);
        private static glDeleteSyncDel glDeleteSyncPtr;
        
        // glDeleteSyncAPPLE
        public static void glDeleteSyncAPPLE(IntPtr  sync) => glDeleteSyncAPPLEPtr?.Invoke(sync);
        private delegate void glDeleteSyncAPPLEDel(IntPtr  sync);
        private static glDeleteSyncAPPLEDel glDeleteSyncAPPLEPtr;
        
        // glDeleteTextures
        public static void glDeleteTextures(uint  n, uint[] /*Texture*/  textures) => glDeleteTexturesPtr?.Invoke(n, textures);
        private delegate void glDeleteTexturesDel(uint  n, uint[] /*Texture*/  textures);
        private static glDeleteTexturesDel glDeleteTexturesPtr;
        
        // glDeleteTexturesEXT
        public static void glDeleteTexturesEXT(uint  n, uint[] /*Texture*/  textures) => glDeleteTexturesEXTPtr?.Invoke(n, textures);
        private delegate void glDeleteTexturesEXTDel(uint  n, uint[] /*Texture*/  textures);
        private static glDeleteTexturesEXTDel glDeleteTexturesEXTPtr;
        
        // glDeleteTransformFeedbacks
        public static void glDeleteTransformFeedbacks(uint  n, uint[]  ids) => glDeleteTransformFeedbacksPtr?.Invoke(n, ids);
        private delegate void glDeleteTransformFeedbacksDel(uint  n, uint[]  ids);
        private static glDeleteTransformFeedbacksDel glDeleteTransformFeedbacksPtr;
        
        // glDeleteTransformFeedbacksNV
        public static void glDeleteTransformFeedbacksNV(uint  n, uint[]  ids) => glDeleteTransformFeedbacksNVPtr?.Invoke(n, ids);
        private delegate void glDeleteTransformFeedbacksNVDel(uint  n, uint[]  ids);
        private static glDeleteTransformFeedbacksNVDel glDeleteTransformFeedbacksNVPtr;
        
        // glDeleteVertexArrays
        public static void glDeleteVertexArrays(uint  n, uint[]  arrays) => glDeleteVertexArraysPtr?.Invoke(n, arrays);
        private delegate void glDeleteVertexArraysDel(uint  n, uint[]  arrays);
        private static glDeleteVertexArraysDel glDeleteVertexArraysPtr;
        
        // glDeleteVertexArraysAPPLE
        public static void glDeleteVertexArraysAPPLE(uint  n, uint[]  arrays) => glDeleteVertexArraysAPPLEPtr?.Invoke(n, arrays);
        private delegate void glDeleteVertexArraysAPPLEDel(uint  n, uint[]  arrays);
        private static glDeleteVertexArraysAPPLEDel glDeleteVertexArraysAPPLEPtr;
        
        // glDeleteVertexArraysOES
        public static void glDeleteVertexArraysOES(uint  n, uint[]  arrays) => glDeleteVertexArraysOESPtr?.Invoke(n, arrays);
        private delegate void glDeleteVertexArraysOESDel(uint  n, uint[]  arrays);
        private static glDeleteVertexArraysOESDel glDeleteVertexArraysOESPtr;
        
        // glDeleteVertexShaderEXT
        public static void glDeleteVertexShaderEXT(uint  id) => glDeleteVertexShaderEXTPtr?.Invoke(id);
        private delegate void glDeleteVertexShaderEXTDel(uint  id);
        private static glDeleteVertexShaderEXTDel glDeleteVertexShaderEXTPtr;
        
        // glDepthBoundsEXT
        public static void glDepthBoundsEXT(double /*ClampedFloat64*/  zmin, double /*ClampedFloat64*/  zmax) => glDepthBoundsEXTPtr?.Invoke(zmin, zmax);
        private delegate void glDepthBoundsEXTDel(double /*ClampedFloat64*/  zmin, double /*ClampedFloat64*/  zmax);
        private static glDepthBoundsEXTDel glDepthBoundsEXTPtr;
        
        // glDepthBoundsdNV
        public static void glDepthBoundsdNV(double  zmin, double  zmax) => glDepthBoundsdNVPtr?.Invoke(zmin, zmax);
        private delegate void glDepthBoundsdNVDel(double  zmin, double  zmax);
        private static glDepthBoundsdNVDel glDepthBoundsdNVPtr;
        
        // glDepthFunc
        public static void glDepthFunc(uint /*DepthFunction*/  func) => glDepthFuncPtr?.Invoke(func);
        private delegate void glDepthFuncDel(uint /*DepthFunction*/  func);
        private static glDepthFuncDel glDepthFuncPtr;
        
        // glDepthMask
        public static void glDepthMask(bool /*Boolean*/  flag) => glDepthMaskPtr?.Invoke(flag);
        private delegate void glDepthMaskDel(bool /*Boolean*/  flag);
        private static glDepthMaskDel glDepthMaskPtr;
        
        // glDepthRange
        public static void glDepthRange(double  n, double  f) => glDepthRangePtr?.Invoke(n, f);
        private delegate void glDepthRangeDel(double  n, double  f);
        private static glDepthRangeDel glDepthRangePtr;
        
        // glDepthRangeArraydvNV
        public static void glDepthRangeArraydvNV(uint  first, uint  count, double[]  v) => glDepthRangeArraydvNVPtr?.Invoke(first, count, v);
        private delegate void glDepthRangeArraydvNVDel(uint  first, uint  count, double[]  v);
        private static glDepthRangeArraydvNVDel glDepthRangeArraydvNVPtr;
        
        // glDepthRangeArrayfvNV
        public static void glDepthRangeArrayfvNV(uint  first, uint  count, float[]  v) => glDepthRangeArrayfvNVPtr?.Invoke(first, count, v);
        private delegate void glDepthRangeArrayfvNVDel(uint  first, uint  count, float[]  v);
        private static glDepthRangeArrayfvNVDel glDepthRangeArrayfvNVPtr;
        
        // glDepthRangeArrayfvOES
        public static void glDepthRangeArrayfvOES(uint  first, uint  count, float[]  v) => glDepthRangeArrayfvOESPtr?.Invoke(first, count, v);
        private delegate void glDepthRangeArrayfvOESDel(uint  first, uint  count, float[]  v);
        private static glDepthRangeArrayfvOESDel glDepthRangeArrayfvOESPtr;
        
        // glDepthRangeArrayv
        public static void glDepthRangeArrayv(uint  first, uint  count, double[]  v) => glDepthRangeArrayvPtr?.Invoke(first, count, v);
        private delegate void glDepthRangeArrayvDel(uint  first, uint  count, double[]  v);
        private static glDepthRangeArrayvDel glDepthRangeArrayvPtr;
        
        // glDepthRangeIndexed
        public static void glDepthRangeIndexed(uint  index, double  n, double  f) => glDepthRangeIndexedPtr?.Invoke(index, n, f);
        private delegate void glDepthRangeIndexedDel(uint  index, double  n, double  f);
        private static glDepthRangeIndexedDel glDepthRangeIndexedPtr;
        
        // glDepthRangeIndexeddNV
        public static void glDepthRangeIndexeddNV(uint  index, double  n, double  f) => glDepthRangeIndexeddNVPtr?.Invoke(index, n, f);
        private delegate void glDepthRangeIndexeddNVDel(uint  index, double  n, double  f);
        private static glDepthRangeIndexeddNVDel glDepthRangeIndexeddNVPtr;
        
        // glDepthRangeIndexedfNV
        public static void glDepthRangeIndexedfNV(uint  index, float  n, float  f) => glDepthRangeIndexedfNVPtr?.Invoke(index, n, f);
        private delegate void glDepthRangeIndexedfNVDel(uint  index, float  n, float  f);
        private static glDepthRangeIndexedfNVDel glDepthRangeIndexedfNVPtr;
        
        // glDepthRangeIndexedfOES
        public static void glDepthRangeIndexedfOES(uint  index, float  n, float  f) => glDepthRangeIndexedfOESPtr?.Invoke(index, n, f);
        private delegate void glDepthRangeIndexedfOESDel(uint  index, float  n, float  f);
        private static glDepthRangeIndexedfOESDel glDepthRangeIndexedfOESPtr;
        
        // glDepthRangedNV
        public static void glDepthRangedNV(double  zNear, double  zFar) => glDepthRangedNVPtr?.Invoke(zNear, zFar);
        private delegate void glDepthRangedNVDel(double  zNear, double  zFar);
        private static glDepthRangedNVDel glDepthRangedNVPtr;
        
        // glDepthRangef
        public static void glDepthRangef(float  n, float  f) => glDepthRangefPtr?.Invoke(n, f);
        private delegate void glDepthRangefDel(float  n, float  f);
        private static glDepthRangefDel glDepthRangefPtr;
        
        // glDepthRangefOES
        public static void glDepthRangefOES(float /*ClampedFloat32*/  n, float /*ClampedFloat32*/  f) => glDepthRangefOESPtr?.Invoke(n, f);
        private delegate void glDepthRangefOESDel(float /*ClampedFloat32*/  n, float /*ClampedFloat32*/  f);
        private static glDepthRangefOESDel glDepthRangefOESPtr;
        
        // glDepthRangex
        public static void glDepthRangex(int  n, int  f) => glDepthRangexPtr?.Invoke(n, f);
        private delegate void glDepthRangexDel(int  n, int  f);
        private static glDepthRangexDel glDepthRangexPtr;
        
        // glDepthRangexOES
        public static void glDepthRangexOES(int /*ClampedFixed*/  n, int /*ClampedFixed*/  f) => glDepthRangexOESPtr?.Invoke(n, f);
        private delegate void glDepthRangexOESDel(int /*ClampedFixed*/  n, int /*ClampedFixed*/  f);
        private static glDepthRangexOESDel glDepthRangexOESPtr;
        
        // glDetachObjectARB
        public static void glDetachObjectARB(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  attachedObj) => glDetachObjectARBPtr?.Invoke(containerObj, attachedObj);
        private delegate void glDetachObjectARBDel(IntPtr /*handleARB*/  containerObj, IntPtr /*handleARB*/  attachedObj);
        private static glDetachObjectARBDel glDetachObjectARBPtr;
        
        // glDetachShader
        public static void glDetachShader(uint  program, uint  shader) => glDetachShaderPtr?.Invoke(program, shader);
        private delegate void glDetachShaderDel(uint  program, uint  shader);
        private static glDetachShaderDel glDetachShaderPtr;
        
        // glDetailTexFuncSGIS
        public static void glDetailTexFuncSGIS(uint /*TextureTarget*/  target, uint  n, float[]  points) => glDetailTexFuncSGISPtr?.Invoke(target, n, points);
        private delegate void glDetailTexFuncSGISDel(uint /*TextureTarget*/  target, uint  n, float[]  points);
        private static glDetailTexFuncSGISDel glDetailTexFuncSGISPtr;
        
        // glDisable
        public static void glDisable(uint /*EnableCap*/  cap) => glDisablePtr?.Invoke(cap);
        private delegate void glDisableDel(uint /*EnableCap*/  cap);
        private static glDisableDel glDisablePtr;
        
        // glDisableClientState
        public static void glDisableClientState(uint /*EnableCap*/  array) => glDisableClientStatePtr?.Invoke(array);
        private delegate void glDisableClientStateDel(uint /*EnableCap*/  array);
        private static glDisableClientStateDel glDisableClientStatePtr;
        
        // glDisableClientStateIndexedEXT
        public static void glDisableClientStateIndexedEXT(uint /*EnableCap*/  array, uint  index) => glDisableClientStateIndexedEXTPtr?.Invoke(array, index);
        private delegate void glDisableClientStateIndexedEXTDel(uint /*EnableCap*/  array, uint  index);
        private static glDisableClientStateIndexedEXTDel glDisableClientStateIndexedEXTPtr;
        
        // glDisableClientStateiEXT
        public static void glDisableClientStateiEXT(uint /*EnableCap*/  array, uint  index) => glDisableClientStateiEXTPtr?.Invoke(array, index);
        private delegate void glDisableClientStateiEXTDel(uint /*EnableCap*/  array, uint  index);
        private static glDisableClientStateiEXTDel glDisableClientStateiEXTPtr;
        
        // glDisableDriverControlQCOM
        public static void glDisableDriverControlQCOM(uint  driverControl) => glDisableDriverControlQCOMPtr?.Invoke(driverControl);
        private delegate void glDisableDriverControlQCOMDel(uint  driverControl);
        private static glDisableDriverControlQCOMDel glDisableDriverControlQCOMPtr;
        
        // glDisableIndexedEXT
        public static void glDisableIndexedEXT(uint /*EnableCap*/  target, uint  index) => glDisableIndexedEXTPtr?.Invoke(target, index);
        private delegate void glDisableIndexedEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glDisableIndexedEXTDel glDisableIndexedEXTPtr;
        
        // glDisableVariantClientStateEXT
        public static void glDisableVariantClientStateEXT(uint  id) => glDisableVariantClientStateEXTPtr?.Invoke(id);
        private delegate void glDisableVariantClientStateEXTDel(uint  id);
        private static glDisableVariantClientStateEXTDel glDisableVariantClientStateEXTPtr;
        
        // glDisableVertexArrayAttrib
        public static void glDisableVertexArrayAttrib(uint  vaobj, uint  index) => glDisableVertexArrayAttribPtr?.Invoke(vaobj, index);
        private delegate void glDisableVertexArrayAttribDel(uint  vaobj, uint  index);
        private static glDisableVertexArrayAttribDel glDisableVertexArrayAttribPtr;
        
        // glDisableVertexArrayAttribEXT
        public static void glDisableVertexArrayAttribEXT(uint  vaobj, uint  index) => glDisableVertexArrayAttribEXTPtr?.Invoke(vaobj, index);
        private delegate void glDisableVertexArrayAttribEXTDel(uint  vaobj, uint  index);
        private static glDisableVertexArrayAttribEXTDel glDisableVertexArrayAttribEXTPtr;
        
        // glDisableVertexArrayEXT
        public static void glDisableVertexArrayEXT(uint  vaobj, uint /*EnableCap*/  array) => glDisableVertexArrayEXTPtr?.Invoke(vaobj, array);
        private delegate void glDisableVertexArrayEXTDel(uint  vaobj, uint /*EnableCap*/  array);
        private static glDisableVertexArrayEXTDel glDisableVertexArrayEXTPtr;
        
        // glDisableVertexAttribAPPLE
        public static void glDisableVertexAttribAPPLE(uint  index, uint  pname) => glDisableVertexAttribAPPLEPtr?.Invoke(index, pname);
        private delegate void glDisableVertexAttribAPPLEDel(uint  index, uint  pname);
        private static glDisableVertexAttribAPPLEDel glDisableVertexAttribAPPLEPtr;
        
        // glDisableVertexAttribArray
        public static void glDisableVertexAttribArray(uint  index) => glDisableVertexAttribArrayPtr?.Invoke(index);
        private delegate void glDisableVertexAttribArrayDel(uint  index);
        private static glDisableVertexAttribArrayDel glDisableVertexAttribArrayPtr;
        
        // glDisableVertexAttribArrayARB
        public static void glDisableVertexAttribArrayARB(uint  index) => glDisableVertexAttribArrayARBPtr?.Invoke(index);
        private delegate void glDisableVertexAttribArrayARBDel(uint  index);
        private static glDisableVertexAttribArrayARBDel glDisableVertexAttribArrayARBPtr;
        
        // glDisablei
        public static void glDisablei(uint /*EnableCap*/  target, uint  index) => glDisableiPtr?.Invoke(target, index);
        private delegate void glDisableiDel(uint /*EnableCap*/  target, uint  index);
        private static glDisableiDel glDisableiPtr;
        
        // glDisableiEXT
        public static void glDisableiEXT(uint /*EnableCap*/  target, uint  index) => glDisableiEXTPtr?.Invoke(target, index);
        private delegate void glDisableiEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glDisableiEXTDel glDisableiEXTPtr;
        
        // glDisableiNV
        public static void glDisableiNV(uint /*EnableCap*/  target, uint  index) => glDisableiNVPtr?.Invoke(target, index);
        private delegate void glDisableiNVDel(uint /*EnableCap*/  target, uint  index);
        private static glDisableiNVDel glDisableiNVPtr;
        
        // glDisableiOES
        public static void glDisableiOES(uint /*EnableCap*/  target, uint  index) => glDisableiOESPtr?.Invoke(target, index);
        private delegate void glDisableiOESDel(uint /*EnableCap*/  target, uint  index);
        private static glDisableiOESDel glDisableiOESPtr;
        
        // glDiscardFramebufferEXT
        public static void glDiscardFramebufferEXT(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments) => glDiscardFramebufferEXTPtr?.Invoke(target, numAttachments, attachments);
        private delegate void glDiscardFramebufferEXTDel(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments);
        private static glDiscardFramebufferEXTDel glDiscardFramebufferEXTPtr;
        
        // glDispatchCompute
        public static void glDispatchCompute(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z) => glDispatchComputePtr?.Invoke(num_groups_x, num_groups_y, num_groups_z);
        private delegate void glDispatchComputeDel(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z);
        private static glDispatchComputeDel glDispatchComputePtr;
        
        // glDispatchComputeGroupSizeARB
        public static void glDispatchComputeGroupSizeARB(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z, uint  group_size_x, uint  group_size_y, uint  group_size_z) => glDispatchComputeGroupSizeARBPtr?.Invoke(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        private delegate void glDispatchComputeGroupSizeARBDel(uint  num_groups_x, uint  num_groups_y, uint  num_groups_z, uint  group_size_x, uint  group_size_y, uint  group_size_z);
        private static glDispatchComputeGroupSizeARBDel glDispatchComputeGroupSizeARBPtr;
        
        // glDispatchComputeIndirect
        public static void glDispatchComputeIndirect(IntPtr /*BufferOffset*/  indirect) => glDispatchComputeIndirectPtr?.Invoke(indirect);
        private delegate void glDispatchComputeIndirectDel(IntPtr /*BufferOffset*/  indirect);
        private static glDispatchComputeIndirectDel glDispatchComputeIndirectPtr;
        
        // glDrawArrays
        public static void glDrawArrays(uint /*PrimitiveType*/  mode, int  first, uint  count) => glDrawArraysPtr?.Invoke(mode, first, count);
        private delegate void glDrawArraysDel(uint /*PrimitiveType*/  mode, int  first, uint  count);
        private static glDrawArraysDel glDrawArraysPtr;
        
        // glDrawArraysEXT
        public static void glDrawArraysEXT(uint /*PrimitiveType*/  mode, int  first, uint  count) => glDrawArraysEXTPtr?.Invoke(mode, first, count);
        private delegate void glDrawArraysEXTDel(uint /*PrimitiveType*/  mode, int  first, uint  count);
        private static glDrawArraysEXTDel glDrawArraysEXTPtr;
        
        // glDrawArraysIndirect
        public static void glDrawArraysIndirect(uint /*PrimitiveType*/  mode, IntPtr  indirect) => glDrawArraysIndirectPtr?.Invoke(mode, indirect);
        private delegate void glDrawArraysIndirectDel(uint /*PrimitiveType*/  mode, IntPtr  indirect);
        private static glDrawArraysIndirectDel glDrawArraysIndirectPtr;
        
        // glDrawArraysInstanced
        public static void glDrawArraysInstanced(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount) => glDrawArraysInstancedPtr?.Invoke(mode, first, count, instancecount);
        private delegate void glDrawArraysInstancedDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount);
        private static glDrawArraysInstancedDel glDrawArraysInstancedPtr;
        
        // glDrawArraysInstancedANGLE
        public static void glDrawArraysInstancedANGLE(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => glDrawArraysInstancedANGLEPtr?.Invoke(mode, first, count, primcount);
        private delegate void glDrawArraysInstancedANGLEDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount);
        private static glDrawArraysInstancedANGLEDel glDrawArraysInstancedANGLEPtr;
        
        // glDrawArraysInstancedARB
        public static void glDrawArraysInstancedARB(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => glDrawArraysInstancedARBPtr?.Invoke(mode, first, count, primcount);
        private delegate void glDrawArraysInstancedARBDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount);
        private static glDrawArraysInstancedARBDel glDrawArraysInstancedARBPtr;
        
        // glDrawArraysInstancedBaseInstance
        public static void glDrawArraysInstancedBaseInstance(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance) => glDrawArraysInstancedBaseInstancePtr?.Invoke(mode, first, count, instancecount, baseinstance);
        private delegate void glDrawArraysInstancedBaseInstanceDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance);
        private static glDrawArraysInstancedBaseInstanceDel glDrawArraysInstancedBaseInstancePtr;
        
        // glDrawArraysInstancedBaseInstanceEXT
        public static void glDrawArraysInstancedBaseInstanceEXT(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance) => glDrawArraysInstancedBaseInstanceEXTPtr?.Invoke(mode, first, count, instancecount, baseinstance);
        private delegate void glDrawArraysInstancedBaseInstanceEXTDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  instancecount, uint  baseinstance);
        private static glDrawArraysInstancedBaseInstanceEXTDel glDrawArraysInstancedBaseInstanceEXTPtr;
        
        // glDrawArraysInstancedEXT
        // primcount should be renamed to instanceCount for OpenGL ES
        public static void glDrawArraysInstancedEXT(uint /*PrimitiveType*/  mode, int  start, uint  count, uint  primcount) => glDrawArraysInstancedEXTPtr?.Invoke(mode, start, count, primcount);
        private delegate void glDrawArraysInstancedEXTDel(uint /*PrimitiveType*/  mode, int  start, uint  count, uint  primcount);
        private static glDrawArraysInstancedEXTDel glDrawArraysInstancedEXTPtr;
        
        // glDrawArraysInstancedNV
        public static void glDrawArraysInstancedNV(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount) => glDrawArraysInstancedNVPtr?.Invoke(mode, first, count, primcount);
        private delegate void glDrawArraysInstancedNVDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  primcount);
        private static glDrawArraysInstancedNVDel glDrawArraysInstancedNVPtr;
        
        // glDrawBuffer
        public static void glDrawBuffer(uint /*DrawBufferMode*/  buf) => glDrawBufferPtr?.Invoke(buf);
        private delegate void glDrawBufferDel(uint /*DrawBufferMode*/  buf);
        private static glDrawBufferDel glDrawBufferPtr;
        
        // glDrawBuffers
        public static void glDrawBuffers(uint  n, uint[] /*DrawBufferMode*/  bufs) => glDrawBuffersPtr?.Invoke(n, bufs);
        private delegate void glDrawBuffersDel(uint  n, uint[] /*DrawBufferMode*/  bufs);
        private static glDrawBuffersDel glDrawBuffersPtr;
        
        // glDrawBuffersARB
        public static void glDrawBuffersARB(uint  n, uint[] /*DrawBufferMode*/  bufs) => glDrawBuffersARBPtr?.Invoke(n, bufs);
        private delegate void glDrawBuffersARBDel(uint  n, uint[] /*DrawBufferMode*/  bufs);
        private static glDrawBuffersARBDel glDrawBuffersARBPtr;
        
        // glDrawBuffersATI
        public static void glDrawBuffersATI(uint  n, uint[] /*DrawBufferMode*/  bufs) => glDrawBuffersATIPtr?.Invoke(n, bufs);
        private delegate void glDrawBuffersATIDel(uint  n, uint[] /*DrawBufferMode*/  bufs);
        private static glDrawBuffersATIDel glDrawBuffersATIPtr;
        
        // glDrawBuffersEXT
        public static void glDrawBuffersEXT(uint  n, uint[]  bufs) => glDrawBuffersEXTPtr?.Invoke(n, bufs);
        private delegate void glDrawBuffersEXTDel(uint  n, uint[]  bufs);
        private static glDrawBuffersEXTDel glDrawBuffersEXTPtr;
        
        // glDrawBuffersIndexedEXT
        public static void glDrawBuffersIndexedEXT(int  n, uint[]  location, int[]  indices) => glDrawBuffersIndexedEXTPtr?.Invoke(n, location, indices);
        private delegate void glDrawBuffersIndexedEXTDel(int  n, uint[]  location, int[]  indices);
        private static glDrawBuffersIndexedEXTDel glDrawBuffersIndexedEXTPtr;
        
        // glDrawBuffersNV
        public static void glDrawBuffersNV(uint  n, uint[]  bufs) => glDrawBuffersNVPtr?.Invoke(n, bufs);
        private delegate void glDrawBuffersNVDel(uint  n, uint[]  bufs);
        private static glDrawBuffersNVDel glDrawBuffersNVPtr;
        
        // glDrawCommandsAddressNV
        public static void glDrawCommandsAddressNV(uint  primitiveMode, ulong[]  indirects, uint[]  sizes, uint  count) => glDrawCommandsAddressNVPtr?.Invoke(primitiveMode, indirects, sizes, count);
        private delegate void glDrawCommandsAddressNVDel(uint  primitiveMode, ulong[]  indirects, uint[]  sizes, uint  count);
        private static glDrawCommandsAddressNVDel glDrawCommandsAddressNVPtr;
        
        // glDrawCommandsNV
        public static void glDrawCommandsNV(uint  primitiveMode, uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint  count) => glDrawCommandsNVPtr?.Invoke(primitiveMode, buffer, indirects, sizes, count);
        private delegate void glDrawCommandsNVDel(uint  primitiveMode, uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint  count);
        private static glDrawCommandsNVDel glDrawCommandsNVPtr;
        
        // glDrawCommandsStatesAddressNV
        public static void glDrawCommandsStatesAddressNV(ulong[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => glDrawCommandsStatesAddressNVPtr?.Invoke(indirects, sizes, states, fbos, count);
        private delegate void glDrawCommandsStatesAddressNVDel(ulong[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count);
        private static glDrawCommandsStatesAddressNVDel glDrawCommandsStatesAddressNVPtr;
        
        // glDrawCommandsStatesNV
        public static void glDrawCommandsStatesNV(uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => glDrawCommandsStatesNVPtr?.Invoke(buffer, indirects, sizes, states, fbos, count);
        private delegate void glDrawCommandsStatesNVDel(uint  buffer, IntPtr[]  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count);
        private static glDrawCommandsStatesNVDel glDrawCommandsStatesNVPtr;
        
        // glDrawElementArrayAPPLE
        public static void glDrawElementArrayAPPLE(uint /*PrimitiveType*/  mode, int  first, uint  count) => glDrawElementArrayAPPLEPtr?.Invoke(mode, first, count);
        private delegate void glDrawElementArrayAPPLEDel(uint /*PrimitiveType*/  mode, int  first, uint  count);
        private static glDrawElementArrayAPPLEDel glDrawElementArrayAPPLEPtr;
        
        // glDrawElementArrayATI
        public static void glDrawElementArrayATI(uint /*PrimitiveType*/  mode, uint  count) => glDrawElementArrayATIPtr?.Invoke(mode, count);
        private delegate void glDrawElementArrayATIDel(uint /*PrimitiveType*/  mode, uint  count);
        private static glDrawElementArrayATIDel glDrawElementArrayATIPtr;
        
        // glDrawElements
        public static void glDrawElements(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => glDrawElementsPtr?.Invoke(mode, count, type, indices);
        private delegate void glDrawElementsDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices);
        private static glDrawElementsDel glDrawElementsPtr;
        
        // glDrawElementsBaseVertex
        public static void glDrawElementsBaseVertex(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawElementsBaseVertexPtr?.Invoke(mode, count, type, indices, basevertex);
        private delegate void glDrawElementsBaseVertexDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawElementsBaseVertexDel glDrawElementsBaseVertexPtr;
        
        // glDrawElementsBaseVertexEXT
        public static void glDrawElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawElementsBaseVertexEXTPtr?.Invoke(mode, count, type, indices, basevertex);
        private delegate void glDrawElementsBaseVertexEXTDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawElementsBaseVertexEXTDel glDrawElementsBaseVertexEXTPtr;
        
        // glDrawElementsBaseVertexOES
        public static void glDrawElementsBaseVertexOES(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawElementsBaseVertexOESPtr?.Invoke(mode, count, type, indices, basevertex);
        private delegate void glDrawElementsBaseVertexOESDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawElementsBaseVertexOESDel glDrawElementsBaseVertexOESPtr;
        
        // glDrawElementsIndirect
        public static void glDrawElementsIndirect(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect) => glDrawElementsIndirectPtr?.Invoke(mode, type, indirect);
        private delegate void glDrawElementsIndirectDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect);
        private static glDrawElementsIndirectDel glDrawElementsIndirectPtr;
        
        // glDrawElementsInstanced
        public static void glDrawElementsInstanced(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount) => glDrawElementsInstancedPtr?.Invoke(mode, count, type, indices, instancecount);
        private delegate void glDrawElementsInstancedDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount);
        private static glDrawElementsInstancedDel glDrawElementsInstancedPtr;
        
        // glDrawElementsInstancedANGLE
        public static void glDrawElementsInstancedANGLE(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount) => glDrawElementsInstancedANGLEPtr?.Invoke(mode, count, type, indices, primcount);
        private delegate void glDrawElementsInstancedANGLEDel(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount);
        private static glDrawElementsInstancedANGLEDel glDrawElementsInstancedANGLEPtr;
        
        // glDrawElementsInstancedARB
        public static void glDrawElementsInstancedARB(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => glDrawElementsInstancedARBPtr?.Invoke(mode, count, type, indices, primcount);
        private delegate void glDrawElementsInstancedARBDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount);
        private static glDrawElementsInstancedARBDel glDrawElementsInstancedARBPtr;
        
        // glDrawElementsInstancedBaseInstance
        public static void glDrawElementsInstancedBaseInstance(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance) => glDrawElementsInstancedBaseInstancePtr?.Invoke(mode, count, type, indices, instancecount, baseinstance);
        private delegate void glDrawElementsInstancedBaseInstanceDel(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance);
        private static glDrawElementsInstancedBaseInstanceDel glDrawElementsInstancedBaseInstancePtr;
        
        // glDrawElementsInstancedBaseInstanceEXT
        public static void glDrawElementsInstancedBaseInstanceEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance) => glDrawElementsInstancedBaseInstanceEXTPtr?.Invoke(mode, count, type, indices, instancecount, baseinstance);
        private delegate void glDrawElementsInstancedBaseInstanceEXTDel(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  instancecount, uint  baseinstance);
        private static glDrawElementsInstancedBaseInstanceEXTDel glDrawElementsInstancedBaseInstanceEXTPtr;
        
        // glDrawElementsInstancedBaseVertex
        public static void glDrawElementsInstancedBaseVertex(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => glDrawElementsInstancedBaseVertexPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        private delegate void glDrawElementsInstancedBaseVertexDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex);
        private static glDrawElementsInstancedBaseVertexDel glDrawElementsInstancedBaseVertexPtr;
        
        // glDrawElementsInstancedBaseVertexBaseInstance
        public static void glDrawElementsInstancedBaseVertexBaseInstance(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance) => glDrawElementsInstancedBaseVertexBaseInstancePtr?.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);
        private delegate void glDrawElementsInstancedBaseVertexBaseInstanceDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance);
        private static glDrawElementsInstancedBaseVertexBaseInstanceDel glDrawElementsInstancedBaseVertexBaseInstancePtr;
        
        // glDrawElementsInstancedBaseVertexBaseInstanceEXT
        public static void glDrawElementsInstancedBaseVertexBaseInstanceEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance) => glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr?.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);
        private delegate void glDrawElementsInstancedBaseVertexBaseInstanceEXTDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex, uint  baseinstance);
        private static glDrawElementsInstancedBaseVertexBaseInstanceEXTDel glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr;
        
        // glDrawElementsInstancedBaseVertexEXT
        public static void glDrawElementsInstancedBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => glDrawElementsInstancedBaseVertexEXTPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        private delegate void glDrawElementsInstancedBaseVertexEXTDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex);
        private static glDrawElementsInstancedBaseVertexEXTDel glDrawElementsInstancedBaseVertexEXTPtr;
        
        // glDrawElementsInstancedBaseVertexOES
        public static void glDrawElementsInstancedBaseVertexOES(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex) => glDrawElementsInstancedBaseVertexOESPtr?.Invoke(mode, count, type, indices, instancecount, basevertex);
        private delegate void glDrawElementsInstancedBaseVertexOESDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  instancecount, int  basevertex);
        private static glDrawElementsInstancedBaseVertexOESDel glDrawElementsInstancedBaseVertexOESPtr;
        
        // glDrawElementsInstancedEXT
        // primcount should be renamed to instanceCount for OpenGL ES
        public static void glDrawElementsInstancedEXT(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => glDrawElementsInstancedEXTPtr?.Invoke(mode, count, type, indices, primcount);
        private delegate void glDrawElementsInstancedEXTDel(uint /*PrimitiveType*/  mode, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount);
        private static glDrawElementsInstancedEXTDel glDrawElementsInstancedEXTPtr;
        
        // glDrawElementsInstancedNV
        public static void glDrawElementsInstancedNV(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount) => glDrawElementsInstancedNVPtr?.Invoke(mode, count, type, indices, primcount);
        private delegate void glDrawElementsInstancedNVDel(uint /*PrimitiveType*/  mode, uint  count, uint /*PrimitiveType*/  type, IntPtr  indices, uint  primcount);
        private static glDrawElementsInstancedNVDel glDrawElementsInstancedNVPtr;
        
        // glDrawMeshArraysSUN
        public static void glDrawMeshArraysSUN(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  width) => glDrawMeshArraysSUNPtr?.Invoke(mode, first, count, width);
        private delegate void glDrawMeshArraysSUNDel(uint /*PrimitiveType*/  mode, int  first, uint  count, uint  width);
        private static glDrawMeshArraysSUNDel glDrawMeshArraysSUNPtr;
        
        // glDrawMeshTasksNV
        public static void glDrawMeshTasksNV(uint  first, uint  count) => glDrawMeshTasksNVPtr?.Invoke(first, count);
        private delegate void glDrawMeshTasksNVDel(uint  first, uint  count);
        private static glDrawMeshTasksNVDel glDrawMeshTasksNVPtr;
        
        // glDrawMeshTasksIndirectNV
        public static void glDrawMeshTasksIndirectNV(IntPtr  indirect) => glDrawMeshTasksIndirectNVPtr?.Invoke(indirect);
        private delegate void glDrawMeshTasksIndirectNVDel(IntPtr  indirect);
        private static glDrawMeshTasksIndirectNVDel glDrawMeshTasksIndirectNVPtr;
        
        // glDrawPixels
        public static void glDrawPixels(uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glDrawPixelsPtr?.Invoke(width, height, format, type, pixels);
        private delegate void glDrawPixelsDel(uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glDrawPixelsDel glDrawPixelsPtr;
        
        // glDrawRangeElementArrayAPPLE
        public static void glDrawRangeElementArrayAPPLE(uint /*PrimitiveType*/  mode, uint  start, uint  end, int  first, uint  count) => glDrawRangeElementArrayAPPLEPtr?.Invoke(mode, start, end, first, count);
        private delegate void glDrawRangeElementArrayAPPLEDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, int  first, uint  count);
        private static glDrawRangeElementArrayAPPLEDel glDrawRangeElementArrayAPPLEPtr;
        
        // glDrawRangeElementArrayATI
        public static void glDrawRangeElementArrayATI(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count) => glDrawRangeElementArrayATIPtr?.Invoke(mode, start, end, count);
        private delegate void glDrawRangeElementArrayATIDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count);
        private static glDrawRangeElementArrayATIDel glDrawRangeElementArrayATIPtr;
        
        // glDrawRangeElements
        public static void glDrawRangeElements(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => glDrawRangeElementsPtr?.Invoke(mode, start, end, count, type, indices);
        private delegate void glDrawRangeElementsDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices);
        private static glDrawRangeElementsDel glDrawRangeElementsPtr;
        
        // glDrawRangeElementsBaseVertex
        public static void glDrawRangeElementsBaseVertex(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawRangeElementsBaseVertexPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        private delegate void glDrawRangeElementsBaseVertexDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawRangeElementsBaseVertexDel glDrawRangeElementsBaseVertexPtr;
        
        // glDrawRangeElementsBaseVertexEXT
        public static void glDrawRangeElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawRangeElementsBaseVertexEXTPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        private delegate void glDrawRangeElementsBaseVertexEXTDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawRangeElementsBaseVertexEXTDel glDrawRangeElementsBaseVertexEXTPtr;
        
        // glDrawRangeElementsBaseVertexOES
        public static void glDrawRangeElementsBaseVertexOES(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex) => glDrawRangeElementsBaseVertexOESPtr?.Invoke(mode, start, end, count, type, indices, basevertex);
        private delegate void glDrawRangeElementsBaseVertexOESDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices, int  basevertex);
        private static glDrawRangeElementsBaseVertexOESDel glDrawRangeElementsBaseVertexOESPtr;
        
        // glDrawRangeElementsEXT
        public static void glDrawRangeElementsEXT(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices) => glDrawRangeElementsEXTPtr?.Invoke(mode, start, end, count, type, indices);
        private delegate void glDrawRangeElementsEXTDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, uint  count, uint /*DrawElementsType*/  type, IntPtr  indices);
        private static glDrawRangeElementsEXTDel glDrawRangeElementsEXTPtr;
        
        // glDrawTexfOES
        public static void glDrawTexfOES(float  x, float  y, float  z, float  width, float  height) => glDrawTexfOESPtr?.Invoke(x, y, z, width, height);
        private delegate void glDrawTexfOESDel(float  x, float  y, float  z, float  width, float  height);
        private static glDrawTexfOESDel glDrawTexfOESPtr;
        
        // glDrawTexfvOES
        public static void glDrawTexfvOES(float[]  coords) => glDrawTexfvOESPtr?.Invoke(coords);
        private delegate void glDrawTexfvOESDel(float[]  coords);
        private static glDrawTexfvOESDel glDrawTexfvOESPtr;
        
        // glDrawTexiOES
        public static void glDrawTexiOES(int  x, int  y, int  z, int  width, int  height) => glDrawTexiOESPtr?.Invoke(x, y, z, width, height);
        private delegate void glDrawTexiOESDel(int  x, int  y, int  z, int  width, int  height);
        private static glDrawTexiOESDel glDrawTexiOESPtr;
        
        // glDrawTexivOES
        public static void glDrawTexivOES(int[]  coords) => glDrawTexivOESPtr?.Invoke(coords);
        private delegate void glDrawTexivOESDel(int[]  coords);
        private static glDrawTexivOESDel glDrawTexivOESPtr;
        
        // glDrawTexsOES
        public static void glDrawTexsOES(short  x, short  y, short  z, short  width, short  height) => glDrawTexsOESPtr?.Invoke(x, y, z, width, height);
        private delegate void glDrawTexsOESDel(short  x, short  y, short  z, short  width, short  height);
        private static glDrawTexsOESDel glDrawTexsOESPtr;
        
        // glDrawTexsvOES
        public static void glDrawTexsvOES(short[]  coords) => glDrawTexsvOESPtr?.Invoke(coords);
        private delegate void glDrawTexsvOESDel(short[]  coords);
        private static glDrawTexsvOESDel glDrawTexsvOESPtr;
        
        // glDrawTextureNV
        public static void glDrawTextureNV(uint  texture, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1) => glDrawTextureNVPtr?.Invoke(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        private delegate void glDrawTextureNVDel(uint  texture, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1);
        private static glDrawTextureNVDel glDrawTextureNVPtr;
        
        // glDrawTexxOES
        public static void glDrawTexxOES(int  x, int  y, int  z, int  width, int  height) => glDrawTexxOESPtr?.Invoke(x, y, z, width, height);
        private delegate void glDrawTexxOESDel(int  x, int  y, int  z, int  width, int  height);
        private static glDrawTexxOESDel glDrawTexxOESPtr;
        
        // glDrawTexxvOES
        public static void glDrawTexxvOES(int[]  coords) => glDrawTexxvOESPtr?.Invoke(coords);
        private delegate void glDrawTexxvOESDel(int[]  coords);
        private static glDrawTexxvOESDel glDrawTexxvOESPtr;
        
        // glDrawTransformFeedback
        public static void glDrawTransformFeedback(uint /*PrimitiveType*/  mode, uint  id) => glDrawTransformFeedbackPtr?.Invoke(mode, id);
        private delegate void glDrawTransformFeedbackDel(uint /*PrimitiveType*/  mode, uint  id);
        private static glDrawTransformFeedbackDel glDrawTransformFeedbackPtr;
        
        // glDrawTransformFeedbackEXT
        public static void glDrawTransformFeedbackEXT(uint /*PrimitiveType*/  mode, uint  id) => glDrawTransformFeedbackEXTPtr?.Invoke(mode, id);
        private delegate void glDrawTransformFeedbackEXTDel(uint /*PrimitiveType*/  mode, uint  id);
        private static glDrawTransformFeedbackEXTDel glDrawTransformFeedbackEXTPtr;
        
        // glDrawTransformFeedbackInstanced
        public static void glDrawTransformFeedbackInstanced(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount) => glDrawTransformFeedbackInstancedPtr?.Invoke(mode, id, instancecount);
        private delegate void glDrawTransformFeedbackInstancedDel(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount);
        private static glDrawTransformFeedbackInstancedDel glDrawTransformFeedbackInstancedPtr;
        
        // glDrawTransformFeedbackInstancedEXT
        public static void glDrawTransformFeedbackInstancedEXT(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount) => glDrawTransformFeedbackInstancedEXTPtr?.Invoke(mode, id, instancecount);
        private delegate void glDrawTransformFeedbackInstancedEXTDel(uint /*PrimitiveType*/  mode, uint  id, uint  instancecount);
        private static glDrawTransformFeedbackInstancedEXTDel glDrawTransformFeedbackInstancedEXTPtr;
        
        // glDrawTransformFeedbackNV
        public static void glDrawTransformFeedbackNV(uint /*PrimitiveType*/  mode, uint  id) => glDrawTransformFeedbackNVPtr?.Invoke(mode, id);
        private delegate void glDrawTransformFeedbackNVDel(uint /*PrimitiveType*/  mode, uint  id);
        private static glDrawTransformFeedbackNVDel glDrawTransformFeedbackNVPtr;
        
        // glDrawTransformFeedbackStream
        public static void glDrawTransformFeedbackStream(uint /*PrimitiveType*/  mode, uint  id, uint  stream) => glDrawTransformFeedbackStreamPtr?.Invoke(mode, id, stream);
        private delegate void glDrawTransformFeedbackStreamDel(uint /*PrimitiveType*/  mode, uint  id, uint  stream);
        private static glDrawTransformFeedbackStreamDel glDrawTransformFeedbackStreamPtr;
        
        // glDrawTransformFeedbackStreamInstanced
        public static void glDrawTransformFeedbackStreamInstanced(uint /*PrimitiveType*/  mode, uint  id, uint  stream, uint  instancecount) => glDrawTransformFeedbackStreamInstancedPtr?.Invoke(mode, id, stream, instancecount);
        private delegate void glDrawTransformFeedbackStreamInstancedDel(uint /*PrimitiveType*/  mode, uint  id, uint  stream, uint  instancecount);
        private static glDrawTransformFeedbackStreamInstancedDel glDrawTransformFeedbackStreamInstancedPtr;
        
        // glEGLImageTargetRenderbufferStorageOES
        public static void glEGLImageTargetRenderbufferStorageOES(uint  target, IntPtr /*GLeglImageOES*/  image) => glEGLImageTargetRenderbufferStorageOESPtr?.Invoke(target, image);
        private delegate void glEGLImageTargetRenderbufferStorageOESDel(uint  target, IntPtr /*GLeglImageOES*/  image);
        private static glEGLImageTargetRenderbufferStorageOESDel glEGLImageTargetRenderbufferStorageOESPtr;
        
        // glEGLImageTargetTexStorageEXT
        public static void glEGLImageTargetTexStorageEXT(uint  target, IntPtr /*GLeglImageOES*/  image, int  attrib_list) => glEGLImageTargetTexStorageEXTPtr?.Invoke(target, image, attrib_list);
        private delegate void glEGLImageTargetTexStorageEXTDel(uint  target, IntPtr /*GLeglImageOES*/  image, int  attrib_list);
        private static glEGLImageTargetTexStorageEXTDel glEGLImageTargetTexStorageEXTPtr;
        
        // glEGLImageTargetTexture2DOES
        public static void glEGLImageTargetTexture2DOES(uint  target, IntPtr /*GLeglImageOES*/  image) => glEGLImageTargetTexture2DOESPtr?.Invoke(target, image);
        private delegate void glEGLImageTargetTexture2DOESDel(uint  target, IntPtr /*GLeglImageOES*/  image);
        private static glEGLImageTargetTexture2DOESDel glEGLImageTargetTexture2DOESPtr;
        
        // glEGLImageTargetTextureStorageEXT
        public static void glEGLImageTargetTextureStorageEXT(uint  texture, IntPtr /*GLeglImageOES*/  image, int  attrib_list) => glEGLImageTargetTextureStorageEXTPtr?.Invoke(texture, image, attrib_list);
        private delegate void glEGLImageTargetTextureStorageEXTDel(uint  texture, IntPtr /*GLeglImageOES*/  image, int  attrib_list);
        private static glEGLImageTargetTextureStorageEXTDel glEGLImageTargetTextureStorageEXTPtr;
        
        // glEdgeFlag
        public static void glEdgeFlag(bool /*Boolean*/  flag) => glEdgeFlagPtr?.Invoke(flag);
        private delegate void glEdgeFlagDel(bool /*Boolean*/  flag);
        private static glEdgeFlagDel glEdgeFlagPtr;
        
        // glEdgeFlagFormatNV
        public static void glEdgeFlagFormatNV(uint  stride) => glEdgeFlagFormatNVPtr?.Invoke(stride);
        private delegate void glEdgeFlagFormatNVDel(uint  stride);
        private static glEdgeFlagFormatNVDel glEdgeFlagFormatNVPtr;
        
        // glEdgeFlagPointer
        public static void glEdgeFlagPointer(uint  stride, IntPtr  pointer) => glEdgeFlagPointerPtr?.Invoke(stride, pointer);
        private delegate void glEdgeFlagPointerDel(uint  stride, IntPtr  pointer);
        private static glEdgeFlagPointerDel glEdgeFlagPointerPtr;
        
        // glEdgeFlagPointerEXT
        public static void glEdgeFlagPointerEXT(uint  stride, uint  count, bool[] /*Boolean*/  pointer) => glEdgeFlagPointerEXTPtr?.Invoke(stride, count, pointer);
        private delegate void glEdgeFlagPointerEXTDel(uint  stride, uint  count, bool[] /*Boolean*/  pointer);
        private static glEdgeFlagPointerEXTDel glEdgeFlagPointerEXTPtr;
        
        // glEdgeFlagPointerListIBM
        public static void glEdgeFlagPointerListIBM(int  stride, bool[] /*BooleanPointer*/  pointer, int  ptrstride) => glEdgeFlagPointerListIBMPtr?.Invoke(stride, pointer, ptrstride);
        private delegate void glEdgeFlagPointerListIBMDel(int  stride, bool[] /*BooleanPointer*/  pointer, int  ptrstride);
        private static glEdgeFlagPointerListIBMDel glEdgeFlagPointerListIBMPtr;
        
        // glEdgeFlagv
        public static void glEdgeFlagv(bool[] /*Boolean*/  flag) => glEdgeFlagvPtr?.Invoke(flag);
        private delegate void glEdgeFlagvDel(bool[] /*Boolean*/  flag);
        private static glEdgeFlagvDel glEdgeFlagvPtr;
        
        // glElementPointerAPPLE
        public static void glElementPointerAPPLE(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer) => glElementPointerAPPLEPtr?.Invoke(type, pointer);
        private delegate void glElementPointerAPPLEDel(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer);
        private static glElementPointerAPPLEDel glElementPointerAPPLEPtr;
        
        // glElementPointerATI
        public static void glElementPointerATI(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer) => glElementPointerATIPtr?.Invoke(type, pointer);
        private delegate void glElementPointerATIDel(uint /*ElementPointerTypeATI*/  type, IntPtr  pointer);
        private static glElementPointerATIDel glElementPointerATIPtr;
        
        // glEnable
        public static void glEnable(uint /*EnableCap*/  cap) => glEnablePtr?.Invoke(cap);
        private delegate void glEnableDel(uint /*EnableCap*/  cap);
        private static glEnableDel glEnablePtr;
        
        // glEnableClientState
        public static void glEnableClientState(uint /*EnableCap*/  array) => glEnableClientStatePtr?.Invoke(array);
        private delegate void glEnableClientStateDel(uint /*EnableCap*/  array);
        private static glEnableClientStateDel glEnableClientStatePtr;
        
        // glEnableClientStateIndexedEXT
        public static void glEnableClientStateIndexedEXT(uint /*EnableCap*/  array, uint  index) => glEnableClientStateIndexedEXTPtr?.Invoke(array, index);
        private delegate void glEnableClientStateIndexedEXTDel(uint /*EnableCap*/  array, uint  index);
        private static glEnableClientStateIndexedEXTDel glEnableClientStateIndexedEXTPtr;
        
        // glEnableClientStateiEXT
        public static void glEnableClientStateiEXT(uint /*EnableCap*/  array, uint  index) => glEnableClientStateiEXTPtr?.Invoke(array, index);
        private delegate void glEnableClientStateiEXTDel(uint /*EnableCap*/  array, uint  index);
        private static glEnableClientStateiEXTDel glEnableClientStateiEXTPtr;
        
        // glEnableDriverControlQCOM
        public static void glEnableDriverControlQCOM(uint  driverControl) => glEnableDriverControlQCOMPtr?.Invoke(driverControl);
        private delegate void glEnableDriverControlQCOMDel(uint  driverControl);
        private static glEnableDriverControlQCOMDel glEnableDriverControlQCOMPtr;
        
        // glEnableIndexedEXT
        public static void glEnableIndexedEXT(uint /*EnableCap*/  target, uint  index) => glEnableIndexedEXTPtr?.Invoke(target, index);
        private delegate void glEnableIndexedEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glEnableIndexedEXTDel glEnableIndexedEXTPtr;
        
        // glEnableVariantClientStateEXT
        public static void glEnableVariantClientStateEXT(uint  id) => glEnableVariantClientStateEXTPtr?.Invoke(id);
        private delegate void glEnableVariantClientStateEXTDel(uint  id);
        private static glEnableVariantClientStateEXTDel glEnableVariantClientStateEXTPtr;
        
        // glEnableVertexArrayAttrib
        public static void glEnableVertexArrayAttrib(uint  vaobj, uint  index) => glEnableVertexArrayAttribPtr?.Invoke(vaobj, index);
        private delegate void glEnableVertexArrayAttribDel(uint  vaobj, uint  index);
        private static glEnableVertexArrayAttribDel glEnableVertexArrayAttribPtr;
        
        // glEnableVertexArrayAttribEXT
        public static void glEnableVertexArrayAttribEXT(uint  vaobj, uint  index) => glEnableVertexArrayAttribEXTPtr?.Invoke(vaobj, index);
        private delegate void glEnableVertexArrayAttribEXTDel(uint  vaobj, uint  index);
        private static glEnableVertexArrayAttribEXTDel glEnableVertexArrayAttribEXTPtr;
        
        // glEnableVertexArrayEXT
        public static void glEnableVertexArrayEXT(uint  vaobj, uint /*EnableCap*/  array) => glEnableVertexArrayEXTPtr?.Invoke(vaobj, array);
        private delegate void glEnableVertexArrayEXTDel(uint  vaobj, uint /*EnableCap*/  array);
        private static glEnableVertexArrayEXTDel glEnableVertexArrayEXTPtr;
        
        // glEnableVertexAttribAPPLE
        public static void glEnableVertexAttribAPPLE(uint  index, uint  pname) => glEnableVertexAttribAPPLEPtr?.Invoke(index, pname);
        private delegate void glEnableVertexAttribAPPLEDel(uint  index, uint  pname);
        private static glEnableVertexAttribAPPLEDel glEnableVertexAttribAPPLEPtr;
        
        // glEnableVertexAttribArray
        public static void glEnableVertexAttribArray(uint  index) => glEnableVertexAttribArrayPtr?.Invoke(index);
        private delegate void glEnableVertexAttribArrayDel(uint  index);
        private static glEnableVertexAttribArrayDel glEnableVertexAttribArrayPtr;
        
        // glEnableVertexAttribArrayARB
        public static void glEnableVertexAttribArrayARB(uint  index) => glEnableVertexAttribArrayARBPtr?.Invoke(index);
        private delegate void glEnableVertexAttribArrayARBDel(uint  index);
        private static glEnableVertexAttribArrayARBDel glEnableVertexAttribArrayARBPtr;
        
        // glEnablei
        public static void glEnablei(uint /*EnableCap*/  target, uint  index) => glEnableiPtr?.Invoke(target, index);
        private delegate void glEnableiDel(uint /*EnableCap*/  target, uint  index);
        private static glEnableiDel glEnableiPtr;
        
        // glEnableiEXT
        public static void glEnableiEXT(uint /*EnableCap*/  target, uint  index) => glEnableiEXTPtr?.Invoke(target, index);
        private delegate void glEnableiEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glEnableiEXTDel glEnableiEXTPtr;
        
        // glEnableiNV
        public static void glEnableiNV(uint /*EnableCap*/  target, uint  index) => glEnableiNVPtr?.Invoke(target, index);
        private delegate void glEnableiNVDel(uint /*EnableCap*/  target, uint  index);
        private static glEnableiNVDel glEnableiNVPtr;
        
        // glEnableiOES
        public static void glEnableiOES(uint /*EnableCap*/  target, uint  index) => glEnableiOESPtr?.Invoke(target, index);
        private delegate void glEnableiOESDel(uint /*EnableCap*/  target, uint  index);
        private static glEnableiOESDel glEnableiOESPtr;
        
        // glEnd
        public static void glEnd() => glEndPtr?.Invoke();
        private delegate void glEndDel();
        private static glEndDel glEndPtr;
        
        // glEndConditionalRender
        public static void glEndConditionalRender() => glEndConditionalRenderPtr?.Invoke();
        private delegate void glEndConditionalRenderDel();
        private static glEndConditionalRenderDel glEndConditionalRenderPtr;
        
        // glEndConditionalRenderNV
        public static void glEndConditionalRenderNV() => glEndConditionalRenderNVPtr?.Invoke();
        private delegate void glEndConditionalRenderNVDel();
        private static glEndConditionalRenderNVDel glEndConditionalRenderNVPtr;
        
        // glEndConditionalRenderNVX
        public static void glEndConditionalRenderNVX() => glEndConditionalRenderNVXPtr?.Invoke();
        private delegate void glEndConditionalRenderNVXDel();
        private static glEndConditionalRenderNVXDel glEndConditionalRenderNVXPtr;
        
        // glEndFragmentShaderATI
        public static void glEndFragmentShaderATI() => glEndFragmentShaderATIPtr?.Invoke();
        private delegate void glEndFragmentShaderATIDel();
        private static glEndFragmentShaderATIDel glEndFragmentShaderATIPtr;
        
        // glEndList
        public static void glEndList() => glEndListPtr?.Invoke();
        private delegate void glEndListDel();
        private static glEndListDel glEndListPtr;
        
        // glEndOcclusionQueryNV
        public static void glEndOcclusionQueryNV() => glEndOcclusionQueryNVPtr?.Invoke();
        private delegate void glEndOcclusionQueryNVDel();
        private static glEndOcclusionQueryNVDel glEndOcclusionQueryNVPtr;
        
        // glEndPerfMonitorAMD
        public static void glEndPerfMonitorAMD(uint  monitor) => glEndPerfMonitorAMDPtr?.Invoke(monitor);
        private delegate void glEndPerfMonitorAMDDel(uint  monitor);
        private static glEndPerfMonitorAMDDel glEndPerfMonitorAMDPtr;
        
        // glEndPerfQueryINTEL
        public static void glEndPerfQueryINTEL(uint  queryHandle) => glEndPerfQueryINTELPtr?.Invoke(queryHandle);
        private delegate void glEndPerfQueryINTELDel(uint  queryHandle);
        private static glEndPerfQueryINTELDel glEndPerfQueryINTELPtr;
        
        // glEndQuery
        public static void glEndQuery(uint /*QueryTarget*/  target) => glEndQueryPtr?.Invoke(target);
        private delegate void glEndQueryDel(uint /*QueryTarget*/  target);
        private static glEndQueryDel glEndQueryPtr;
        
        // glEndQueryARB
        public static void glEndQueryARB(uint /*QueryTarget*/  target) => glEndQueryARBPtr?.Invoke(target);
        private delegate void glEndQueryARBDel(uint /*QueryTarget*/  target);
        private static glEndQueryARBDel glEndQueryARBPtr;
        
        // glEndQueryEXT
        public static void glEndQueryEXT(uint /*QueryTarget*/  target) => glEndQueryEXTPtr?.Invoke(target);
        private delegate void glEndQueryEXTDel(uint /*QueryTarget*/  target);
        private static glEndQueryEXTDel glEndQueryEXTPtr;
        
        // glEndQueryIndexed
        public static void glEndQueryIndexed(uint /*QueryTarget*/  target, uint  index) => glEndQueryIndexedPtr?.Invoke(target, index);
        private delegate void glEndQueryIndexedDel(uint /*QueryTarget*/  target, uint  index);
        private static glEndQueryIndexedDel glEndQueryIndexedPtr;
        
        // glEndTilingQCOM
        public static void glEndTilingQCOM(uint /*BufferBitQCOM*/  preserveMask) => glEndTilingQCOMPtr?.Invoke(preserveMask);
        private delegate void glEndTilingQCOMDel(uint /*BufferBitQCOM*/  preserveMask);
        private static glEndTilingQCOMDel glEndTilingQCOMPtr;
        
        // glEndTransformFeedback
        public static void glEndTransformFeedback() => glEndTransformFeedbackPtr?.Invoke();
        private delegate void glEndTransformFeedbackDel();
        private static glEndTransformFeedbackDel glEndTransformFeedbackPtr;
        
        // glEndTransformFeedbackEXT
        public static void glEndTransformFeedbackEXT() => glEndTransformFeedbackEXTPtr?.Invoke();
        private delegate void glEndTransformFeedbackEXTDel();
        private static glEndTransformFeedbackEXTDel glEndTransformFeedbackEXTPtr;
        
        // glEndTransformFeedbackNV
        public static void glEndTransformFeedbackNV() => glEndTransformFeedbackNVPtr?.Invoke();
        private delegate void glEndTransformFeedbackNVDel();
        private static glEndTransformFeedbackNVDel glEndTransformFeedbackNVPtr;
        
        // glEndVertexShaderEXT
        public static void glEndVertexShaderEXT() => glEndVertexShaderEXTPtr?.Invoke();
        private delegate void glEndVertexShaderEXTDel();
        private static glEndVertexShaderEXTDel glEndVertexShaderEXTPtr;
        
        // glEndVideoCaptureNV
        public static void glEndVideoCaptureNV(uint  video_capture_slot) => glEndVideoCaptureNVPtr?.Invoke(video_capture_slot);
        private delegate void glEndVideoCaptureNVDel(uint  video_capture_slot);
        private static glEndVideoCaptureNVDel glEndVideoCaptureNVPtr;
        
        // glEvalCoord1d
        public static void glEvalCoord1d(double /*CoordD*/  u) => glEvalCoord1dPtr?.Invoke(u);
        private delegate void glEvalCoord1dDel(double /*CoordD*/  u);
        private static glEvalCoord1dDel glEvalCoord1dPtr;
        
        // glEvalCoord1dv
        public static void glEvalCoord1dv(double[] /*CoordD*/  u) => glEvalCoord1dvPtr?.Invoke(u);
        private delegate void glEvalCoord1dvDel(double[] /*CoordD*/  u);
        private static glEvalCoord1dvDel glEvalCoord1dvPtr;
        
        // glEvalCoord1f
        public static void glEvalCoord1f(float /*CoordF*/  u) => glEvalCoord1fPtr?.Invoke(u);
        private delegate void glEvalCoord1fDel(float /*CoordF*/  u);
        private static glEvalCoord1fDel glEvalCoord1fPtr;
        
        // glEvalCoord1fv
        public static void glEvalCoord1fv(float[] /*CoordF*/  u) => glEvalCoord1fvPtr?.Invoke(u);
        private delegate void glEvalCoord1fvDel(float[] /*CoordF*/  u);
        private static glEvalCoord1fvDel glEvalCoord1fvPtr;
        
        // glEvalCoord1xOES
        public static void glEvalCoord1xOES(int  u) => glEvalCoord1xOESPtr?.Invoke(u);
        private delegate void glEvalCoord1xOESDel(int  u);
        private static glEvalCoord1xOESDel glEvalCoord1xOESPtr;
        
        // glEvalCoord1xvOES
        public static void glEvalCoord1xvOES(int[]  coords) => glEvalCoord1xvOESPtr?.Invoke(coords);
        private delegate void glEvalCoord1xvOESDel(int[]  coords);
        private static glEvalCoord1xvOESDel glEvalCoord1xvOESPtr;
        
        // glEvalCoord2d
        public static void glEvalCoord2d(double /*CoordD*/  u, double /*CoordD*/  v) => glEvalCoord2dPtr?.Invoke(u, v);
        private delegate void glEvalCoord2dDel(double /*CoordD*/  u, double /*CoordD*/  v);
        private static glEvalCoord2dDel glEvalCoord2dPtr;
        
        // glEvalCoord2dv
        public static void glEvalCoord2dv(double[] /*CoordD*/  u) => glEvalCoord2dvPtr?.Invoke(u);
        private delegate void glEvalCoord2dvDel(double[] /*CoordD*/  u);
        private static glEvalCoord2dvDel glEvalCoord2dvPtr;
        
        // glEvalCoord2f
        public static void glEvalCoord2f(float /*CoordF*/  u, float /*CoordF*/  v) => glEvalCoord2fPtr?.Invoke(u, v);
        private delegate void glEvalCoord2fDel(float /*CoordF*/  u, float /*CoordF*/  v);
        private static glEvalCoord2fDel glEvalCoord2fPtr;
        
        // glEvalCoord2fv
        public static void glEvalCoord2fv(float[] /*CoordF*/  u) => glEvalCoord2fvPtr?.Invoke(u);
        private delegate void glEvalCoord2fvDel(float[] /*CoordF*/  u);
        private static glEvalCoord2fvDel glEvalCoord2fvPtr;
        
        // glEvalCoord2xOES
        public static void glEvalCoord2xOES(int  u, int  v) => glEvalCoord2xOESPtr?.Invoke(u, v);
        private delegate void glEvalCoord2xOESDel(int  u, int  v);
        private static glEvalCoord2xOESDel glEvalCoord2xOESPtr;
        
        // glEvalCoord2xvOES
        public static void glEvalCoord2xvOES(int[]  coords) => glEvalCoord2xvOESPtr?.Invoke(coords);
        private delegate void glEvalCoord2xvOESDel(int[]  coords);
        private static glEvalCoord2xvOESDel glEvalCoord2xvOESPtr;
        
        // glEvalMapsNV
        public static void glEvalMapsNV(uint /*EvalTargetNV*/  target, uint /*EvalMapsModeNV*/  mode) => glEvalMapsNVPtr?.Invoke(target, mode);
        private delegate void glEvalMapsNVDel(uint /*EvalTargetNV*/  target, uint /*EvalMapsModeNV*/  mode);
        private static glEvalMapsNVDel glEvalMapsNVPtr;
        
        // glEvalMesh1
        public static void glEvalMesh1(uint /*MeshMode1*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2) => glEvalMesh1Ptr?.Invoke(mode, i1, i2);
        private delegate void glEvalMesh1Del(uint /*MeshMode1*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2);
        private static glEvalMesh1Del glEvalMesh1Ptr;
        
        // glEvalMesh2
        public static void glEvalMesh2(uint /*MeshMode2*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2, int /*CheckedInt32*/  j1, int /*CheckedInt32*/  j2) => glEvalMesh2Ptr?.Invoke(mode, i1, i2, j1, j2);
        private delegate void glEvalMesh2Del(uint /*MeshMode2*/  mode, int /*CheckedInt32*/  i1, int /*CheckedInt32*/  i2, int /*CheckedInt32*/  j1, int /*CheckedInt32*/  j2);
        private static glEvalMesh2Del glEvalMesh2Ptr;
        
        // glEvalPoint1
        public static void glEvalPoint1(int  i) => glEvalPoint1Ptr?.Invoke(i);
        private delegate void glEvalPoint1Del(int  i);
        private static glEvalPoint1Del glEvalPoint1Ptr;
        
        // glEvalPoint2
        public static void glEvalPoint2(int /*CheckedInt32*/  i, int /*CheckedInt32*/  j) => glEvalPoint2Ptr?.Invoke(i, j);
        private delegate void glEvalPoint2Del(int /*CheckedInt32*/  i, int /*CheckedInt32*/  j);
        private static glEvalPoint2Del glEvalPoint2Ptr;
        
        // glEvaluateDepthValuesARB
        public static void glEvaluateDepthValuesARB() => glEvaluateDepthValuesARBPtr?.Invoke();
        private delegate void glEvaluateDepthValuesARBDel();
        private static glEvaluateDepthValuesARBDel glEvaluateDepthValuesARBPtr;
        
        // glExecuteProgramNV
        public static void glExecuteProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id, float[]  parameters) => glExecuteProgramNVPtr?.Invoke(target, id, parameters);
        private delegate void glExecuteProgramNVDel(uint /*VertexAttribEnumNV*/  target, uint  id, float[]  parameters);
        private static glExecuteProgramNVDel glExecuteProgramNVPtr;
        
        // glExtGetBufferPointervQCOM
        public static void glExtGetBufferPointervQCOM(uint  target, IntPtr  parameters) => glExtGetBufferPointervQCOMPtr?.Invoke(target, parameters);
        private delegate void glExtGetBufferPointervQCOMDel(uint  target, IntPtr  parameters);
        private static glExtGetBufferPointervQCOMDel glExtGetBufferPointervQCOMPtr;
        
        // glExtGetBuffersQCOM
        public static void glExtGetBuffersQCOM(uint[]  buffers, int  maxBuffers, int[]  numBuffers) => glExtGetBuffersQCOMPtr?.Invoke(buffers, maxBuffers, numBuffers);
        private delegate void glExtGetBuffersQCOMDel(uint[]  buffers, int  maxBuffers, int[]  numBuffers);
        private static glExtGetBuffersQCOMDel glExtGetBuffersQCOMPtr;
        
        // glExtGetFramebuffersQCOM
        public static void glExtGetFramebuffersQCOM(uint[]  framebuffers, int  maxFramebuffers, int[]  numFramebuffers) => glExtGetFramebuffersQCOMPtr?.Invoke(framebuffers, maxFramebuffers, numFramebuffers);
        private delegate void glExtGetFramebuffersQCOMDel(uint[]  framebuffers, int  maxFramebuffers, int[]  numFramebuffers);
        private static glExtGetFramebuffersQCOMDel glExtGetFramebuffersQCOMPtr;
        
        // glExtGetProgramBinarySourceQCOM
        public static void glExtGetProgramBinarySourceQCOM(uint  program, uint /*ShaderType*/  shadertype, string  source, int[]  length) => glExtGetProgramBinarySourceQCOMPtr?.Invoke(program, shadertype, source, length);
        private delegate void glExtGetProgramBinarySourceQCOMDel(uint  program, uint /*ShaderType*/  shadertype, string  source, int[]  length);
        private static glExtGetProgramBinarySourceQCOMDel glExtGetProgramBinarySourceQCOMPtr;
        
        // glExtGetProgramsQCOM
        public static void glExtGetProgramsQCOM(uint[]  programs, int  maxPrograms, int[]  numPrograms) => glExtGetProgramsQCOMPtr?.Invoke(programs, maxPrograms, numPrograms);
        private delegate void glExtGetProgramsQCOMDel(uint[]  programs, int  maxPrograms, int[]  numPrograms);
        private static glExtGetProgramsQCOMDel glExtGetProgramsQCOMPtr;
        
        // glExtGetRenderbuffersQCOM
        public static void glExtGetRenderbuffersQCOM(uint[]  renderbuffers, int  maxRenderbuffers, int[]  numRenderbuffers) => glExtGetRenderbuffersQCOMPtr?.Invoke(renderbuffers, maxRenderbuffers, numRenderbuffers);
        private delegate void glExtGetRenderbuffersQCOMDel(uint[]  renderbuffers, int  maxRenderbuffers, int[]  numRenderbuffers);
        private static glExtGetRenderbuffersQCOMDel glExtGetRenderbuffersQCOMPtr;
        
        // glExtGetShadersQCOM
        public static void glExtGetShadersQCOM(uint[]  shaders, int  maxShaders, int[]  numShaders) => glExtGetShadersQCOMPtr?.Invoke(shaders, maxShaders, numShaders);
        private delegate void glExtGetShadersQCOMDel(uint[]  shaders, int  maxShaders, int[]  numShaders);
        private static glExtGetShadersQCOMDel glExtGetShadersQCOMPtr;
        
        // glExtGetTexLevelParameterivQCOM
        public static void glExtGetTexLevelParameterivQCOM(uint  texture, uint  face, int  level, uint  pname, int[]  parameters) => glExtGetTexLevelParameterivQCOMPtr?.Invoke(texture, face, level, pname, parameters);
        private delegate void glExtGetTexLevelParameterivQCOMDel(uint  texture, uint  face, int  level, uint  pname, int[]  parameters);
        private static glExtGetTexLevelParameterivQCOMDel glExtGetTexLevelParameterivQCOMPtr;
        
        // glExtGetTexSubImageQCOM
        public static void glExtGetTexSubImageQCOM(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  texels) => glExtGetTexSubImageQCOMPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels);
        private delegate void glExtGetTexSubImageQCOMDel(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  texels);
        private static glExtGetTexSubImageQCOMDel glExtGetTexSubImageQCOMPtr;
        
        // glExtGetTexturesQCOM
        public static void glExtGetTexturesQCOM(uint[]  textures, int  maxTextures, int[]  numTextures) => glExtGetTexturesQCOMPtr?.Invoke(textures, maxTextures, numTextures);
        private delegate void glExtGetTexturesQCOMDel(uint[]  textures, int  maxTextures, int[]  numTextures);
        private static glExtGetTexturesQCOMDel glExtGetTexturesQCOMPtr;
        
        // glExtIsProgramBinaryQCOM
        public static bool /*Boolean*/ glExtIsProgramBinaryQCOM(uint  program) => glExtIsProgramBinaryQCOMPtr?.Invoke(program) ?? default;
        private delegate bool /*Boolean*/ glExtIsProgramBinaryQCOMDel(uint  program);
        private static glExtIsProgramBinaryQCOMDel glExtIsProgramBinaryQCOMPtr;
        
        // glExtTexObjectStateOverrideiQCOM
        public static void glExtTexObjectStateOverrideiQCOM(uint  target, uint  pname, int  param) => glExtTexObjectStateOverrideiQCOMPtr?.Invoke(target, pname, param);
        private delegate void glExtTexObjectStateOverrideiQCOMDel(uint  target, uint  pname, int  param);
        private static glExtTexObjectStateOverrideiQCOMDel glExtTexObjectStateOverrideiQCOMPtr;
        
        // glExtractComponentEXT
        public static void glExtractComponentEXT(uint  res, uint  src, uint  num) => glExtractComponentEXTPtr?.Invoke(res, src, num);
        private delegate void glExtractComponentEXTDel(uint  res, uint  src, uint  num);
        private static glExtractComponentEXTDel glExtractComponentEXTPtr;
        
        // glFeedbackBuffer
        public static void glFeedbackBuffer(uint  size, uint /*FeedbackType*/  type, float[] /*FeedbackElement*/  buffer) => glFeedbackBufferPtr?.Invoke(size, type, buffer);
        private delegate void glFeedbackBufferDel(uint  size, uint /*FeedbackType*/  type, float[] /*FeedbackElement*/  buffer);
        private static glFeedbackBufferDel glFeedbackBufferPtr;
        
        // glFeedbackBufferxOES
        public static void glFeedbackBufferxOES(uint  n, uint  type, int[]  buffer) => glFeedbackBufferxOESPtr?.Invoke(n, type, buffer);
        private delegate void glFeedbackBufferxOESDel(uint  n, uint  type, int[]  buffer);
        private static glFeedbackBufferxOESDel glFeedbackBufferxOESPtr;
        
        // glFenceSync
        public static IntPtr /*sync*/ glFenceSync(uint /*SyncCondition*/  condition, uint  flags) => glFenceSyncPtr?.Invoke(condition, flags) ?? default;
        private delegate IntPtr /*sync*/ glFenceSyncDel(uint /*SyncCondition*/  condition, uint  flags);
        private static glFenceSyncDel glFenceSyncPtr;
        
        // glFenceSyncAPPLE
        public static IntPtr glFenceSyncAPPLE(uint /*SyncCondition*/  condition, uint  flags) => glFenceSyncAPPLEPtr?.Invoke(condition, flags) ?? default;
        private delegate IntPtr glFenceSyncAPPLEDel(uint /*SyncCondition*/  condition, uint  flags);
        private static glFenceSyncAPPLEDel glFenceSyncAPPLEPtr;
        
        // glFinalCombinerInputNV
        public static void glFinalCombinerInputNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage) => glFinalCombinerInputNVPtr?.Invoke(variable, input, mapping, componentUsage);
        private delegate void glFinalCombinerInputNVDel(uint /*CombinerVariableNV*/  variable, uint /*CombinerRegisterNV*/  input, uint /*CombinerMappingNV*/  mapping, uint /*CombinerComponentUsageNV*/  componentUsage);
        private static glFinalCombinerInputNVDel glFinalCombinerInputNVPtr;
        
        // glFinish
        public static void glFinish() => glFinishPtr?.Invoke();
        private delegate void glFinishDel();
        private static glFinishDel glFinishPtr;
        
        // glFinishAsyncSGIX
        public static int glFinishAsyncSGIX(uint[]  markerp) => glFinishAsyncSGIXPtr?.Invoke(markerp) ?? default;
        private delegate int glFinishAsyncSGIXDel(uint[]  markerp);
        private static glFinishAsyncSGIXDel glFinishAsyncSGIXPtr;
        
        // glFinishFenceAPPLE
        public static void glFinishFenceAPPLE(uint /*FenceNV*/  fence) => glFinishFenceAPPLEPtr?.Invoke(fence);
        private delegate void glFinishFenceAPPLEDel(uint /*FenceNV*/  fence);
        private static glFinishFenceAPPLEDel glFinishFenceAPPLEPtr;
        
        // glFinishFenceNV
        public static void glFinishFenceNV(uint /*FenceNV*/  fence) => glFinishFenceNVPtr?.Invoke(fence);
        private delegate void glFinishFenceNVDel(uint /*FenceNV*/  fence);
        private static glFinishFenceNVDel glFinishFenceNVPtr;
        
        // glFinishObjectAPPLE
        public static void glFinishObjectAPPLE(uint /*ObjectTypeAPPLE*/  obj, int  name) => glFinishObjectAPPLEPtr?.Invoke(obj, name);
        private delegate void glFinishObjectAPPLEDel(uint /*ObjectTypeAPPLE*/  obj, int  name);
        private static glFinishObjectAPPLEDel glFinishObjectAPPLEPtr;
        
        // glFinishTextureSUNX
        public static void glFinishTextureSUNX() => glFinishTextureSUNXPtr?.Invoke();
        private delegate void glFinishTextureSUNXDel();
        private static glFinishTextureSUNXDel glFinishTextureSUNXPtr;
        
        // glFlush
        public static void glFlush() => glFlushPtr?.Invoke();
        private delegate void glFlushDel();
        private static glFlushDel glFlushPtr;
        
        // glFlushMappedBufferRange
        public static void glFlushMappedBufferRange(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length) => glFlushMappedBufferRangePtr?.Invoke(target, offset, length);
        private delegate void glFlushMappedBufferRangeDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length);
        private static glFlushMappedBufferRangeDel glFlushMappedBufferRangePtr;
        
        // glFlushMappedBufferRangeAPPLE
        public static void glFlushMappedBufferRangeAPPLE(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glFlushMappedBufferRangeAPPLEPtr?.Invoke(target, offset, size);
        private delegate void glFlushMappedBufferRangeAPPLEDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glFlushMappedBufferRangeAPPLEDel glFlushMappedBufferRangeAPPLEPtr;
        
        // glFlushMappedBufferRangeEXT
        public static void glFlushMappedBufferRangeEXT(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length) => glFlushMappedBufferRangeEXTPtr?.Invoke(target, offset, length);
        private delegate void glFlushMappedBufferRangeEXTDel(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length);
        private static glFlushMappedBufferRangeEXTDel glFlushMappedBufferRangeEXTPtr;
        
        // glFlushMappedNamedBufferRange
        public static void glFlushMappedNamedBufferRange(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length) => glFlushMappedNamedBufferRangePtr?.Invoke(buffer, offset, length);
        private delegate void glFlushMappedNamedBufferRangeDel(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length);
        private static glFlushMappedNamedBufferRangeDel glFlushMappedNamedBufferRangePtr;
        
        // glFlushMappedNamedBufferRangeEXT
        public static void glFlushMappedNamedBufferRangeEXT(uint  buffer, IntPtr  offset, IntPtr  length) => glFlushMappedNamedBufferRangeEXTPtr?.Invoke(buffer, offset, length);
        private delegate void glFlushMappedNamedBufferRangeEXTDel(uint  buffer, IntPtr  offset, IntPtr  length);
        private static glFlushMappedNamedBufferRangeEXTDel glFlushMappedNamedBufferRangeEXTPtr;
        
        // glFlushPixelDataRangeNV
        public static void glFlushPixelDataRangeNV(uint /*PixelDataRangeTargetNV*/  target) => glFlushPixelDataRangeNVPtr?.Invoke(target);
        private delegate void glFlushPixelDataRangeNVDel(uint /*PixelDataRangeTargetNV*/  target);
        private static glFlushPixelDataRangeNVDel glFlushPixelDataRangeNVPtr;
        
        // glFlushRasterSGIX
        public static void glFlushRasterSGIX() => glFlushRasterSGIXPtr?.Invoke();
        private delegate void glFlushRasterSGIXDel();
        private static glFlushRasterSGIXDel glFlushRasterSGIXPtr;
        
        // glFlushStaticDataIBM
        public static void glFlushStaticDataIBM(uint  target) => glFlushStaticDataIBMPtr?.Invoke(target);
        private delegate void glFlushStaticDataIBMDel(uint  target);
        private static glFlushStaticDataIBMDel glFlushStaticDataIBMPtr;
        
        // glFlushVertexArrayRangeAPPLE
        public static void glFlushVertexArrayRangeAPPLE(uint  length, IntPtr  pointer) => glFlushVertexArrayRangeAPPLEPtr?.Invoke(length, pointer);
        private delegate void glFlushVertexArrayRangeAPPLEDel(uint  length, IntPtr  pointer);
        private static glFlushVertexArrayRangeAPPLEDel glFlushVertexArrayRangeAPPLEPtr;
        
        // glFlushVertexArrayRangeNV
        public static void glFlushVertexArrayRangeNV() => glFlushVertexArrayRangeNVPtr?.Invoke();
        private delegate void glFlushVertexArrayRangeNVDel();
        private static glFlushVertexArrayRangeNVDel glFlushVertexArrayRangeNVPtr;
        
        // glFogCoordFormatNV
        public static void glFogCoordFormatNV(uint  type, uint  stride) => glFogCoordFormatNVPtr?.Invoke(type, stride);
        private delegate void glFogCoordFormatNVDel(uint  type, uint  stride);
        private static glFogCoordFormatNVDel glFogCoordFormatNVPtr;
        
        // glFogCoordPointer
        public static void glFogCoordPointer(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => glFogCoordPointerPtr?.Invoke(type, stride, pointer);
        private delegate void glFogCoordPointerDel(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer);
        private static glFogCoordPointerDel glFogCoordPointerPtr;
        
        // glFogCoordPointerEXT
        public static void glFogCoordPointerEXT(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => glFogCoordPointerEXTPtr?.Invoke(type, stride, pointer);
        private delegate void glFogCoordPointerEXTDel(uint /*FogPointerTypeEXT*/  type, uint  stride, IntPtr  pointer);
        private static glFogCoordPointerEXTDel glFogCoordPointerEXTPtr;
        
        // glFogCoordPointerListIBM
        public static void glFogCoordPointerListIBM(uint /*FogPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glFogCoordPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        private delegate void glFogCoordPointerListIBMDel(uint /*FogPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glFogCoordPointerListIBMDel glFogCoordPointerListIBMPtr;
        
        // glFogCoordd
        public static void glFogCoordd(double /*CoordD*/  coord) => glFogCoorddPtr?.Invoke(coord);
        private delegate void glFogCoorddDel(double /*CoordD*/  coord);
        private static glFogCoorddDel glFogCoorddPtr;
        
        // glFogCoorddEXT
        public static void glFogCoorddEXT(double /*CoordD*/  coord) => glFogCoorddEXTPtr?.Invoke(coord);
        private delegate void glFogCoorddEXTDel(double /*CoordD*/  coord);
        private static glFogCoorddEXTDel glFogCoorddEXTPtr;
        
        // glFogCoorddv
        public static void glFogCoorddv(double[] /*CoordD*/  coord) => glFogCoorddvPtr?.Invoke(coord);
        private delegate void glFogCoorddvDel(double[] /*CoordD*/  coord);
        private static glFogCoorddvDel glFogCoorddvPtr;
        
        // glFogCoorddvEXT
        public static void glFogCoorddvEXT(double[] /*CoordD*/  coord) => glFogCoorddvEXTPtr?.Invoke(coord);
        private delegate void glFogCoorddvEXTDel(double[] /*CoordD*/  coord);
        private static glFogCoorddvEXTDel glFogCoorddvEXTPtr;
        
        // glFogCoordf
        public static void glFogCoordf(float /*CoordF*/  coord) => glFogCoordfPtr?.Invoke(coord);
        private delegate void glFogCoordfDel(float /*CoordF*/  coord);
        private static glFogCoordfDel glFogCoordfPtr;
        
        // glFogCoordfEXT
        public static void glFogCoordfEXT(float /*CoordF*/  coord) => glFogCoordfEXTPtr?.Invoke(coord);
        private delegate void glFogCoordfEXTDel(float /*CoordF*/  coord);
        private static glFogCoordfEXTDel glFogCoordfEXTPtr;
        
        // glFogCoordfv
        public static void glFogCoordfv(float[] /*CoordF*/  coord) => glFogCoordfvPtr?.Invoke(coord);
        private delegate void glFogCoordfvDel(float[] /*CoordF*/  coord);
        private static glFogCoordfvDel glFogCoordfvPtr;
        
        // glFogCoordfvEXT
        public static void glFogCoordfvEXT(float[] /*CoordF*/  coord) => glFogCoordfvEXTPtr?.Invoke(coord);
        private delegate void glFogCoordfvEXTDel(float[] /*CoordF*/  coord);
        private static glFogCoordfvEXTDel glFogCoordfvEXTPtr;
        
        // glFogCoordhNV
        public static void glFogCoordhNV(ushort /*Half16NV*/  fog) => glFogCoordhNVPtr?.Invoke(fog);
        private delegate void glFogCoordhNVDel(ushort /*Half16NV*/  fog);
        private static glFogCoordhNVDel glFogCoordhNVPtr;
        
        // glFogCoordhvNV
        public static void glFogCoordhvNV(ushort[] /*Half16NV*/  fog) => glFogCoordhvNVPtr?.Invoke(fog);
        private delegate void glFogCoordhvNVDel(ushort[] /*Half16NV*/  fog);
        private static glFogCoordhvNVDel glFogCoordhvNVPtr;
        
        // glFogFuncSGIS
        public static void glFogFuncSGIS(uint  n, float[]  points) => glFogFuncSGISPtr?.Invoke(n, points);
        private delegate void glFogFuncSGISDel(uint  n, float[]  points);
        private static glFogFuncSGISDel glFogFuncSGISPtr;
        
        // glFogf
        public static void glFogf(uint /*FogParameter*/  pname, float /*CheckedFloat32*/  param) => glFogfPtr?.Invoke(pname, param);
        private delegate void glFogfDel(uint /*FogParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glFogfDel glFogfPtr;
        
        // glFogfv
        public static void glFogfv(uint /*FogParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glFogfvPtr?.Invoke(pname, parameters);
        private delegate void glFogfvDel(uint /*FogParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glFogfvDel glFogfvPtr;
        
        // glFogi
        public static void glFogi(uint /*FogParameter*/  pname, int /*CheckedInt32*/  param) => glFogiPtr?.Invoke(pname, param);
        private delegate void glFogiDel(uint /*FogParameter*/  pname, int /*CheckedInt32*/  param);
        private static glFogiDel glFogiPtr;
        
        // glFogiv
        public static void glFogiv(uint /*FogParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glFogivPtr?.Invoke(pname, parameters);
        private delegate void glFogivDel(uint /*FogParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glFogivDel glFogivPtr;
        
        // glFogx
        public static void glFogx(uint /*FogPName*/  pname, int  param) => glFogxPtr?.Invoke(pname, param);
        private delegate void glFogxDel(uint /*FogPName*/  pname, int  param);
        private static glFogxDel glFogxPtr;
        
        // glFogxOES
        public static void glFogxOES(uint /*FogPName*/  pname, int  param) => glFogxOESPtr?.Invoke(pname, param);
        private delegate void glFogxOESDel(uint /*FogPName*/  pname, int  param);
        private static glFogxOESDel glFogxOESPtr;
        
        // glFogxv
        public static void glFogxv(uint /*FogPName*/  pname, int[]  param) => glFogxvPtr?.Invoke(pname, param);
        private delegate void glFogxvDel(uint /*FogPName*/  pname, int[]  param);
        private static glFogxvDel glFogxvPtr;
        
        // glFogxvOES
        public static void glFogxvOES(uint /*FogPName*/  pname, int[]  param) => glFogxvOESPtr?.Invoke(pname, param);
        private delegate void glFogxvOESDel(uint /*FogPName*/  pname, int[]  param);
        private static glFogxvOESDel glFogxvOESPtr;
        
        // glFragmentColorMaterialSGIX
        public static void glFragmentColorMaterialSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode) => glFragmentColorMaterialSGIXPtr?.Invoke(face, mode);
        private delegate void glFragmentColorMaterialSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode);
        private static glFragmentColorMaterialSGIXDel glFragmentColorMaterialSGIXPtr;
        
        // glFragmentCoverageColorNV
        public static void glFragmentCoverageColorNV(uint  color) => glFragmentCoverageColorNVPtr?.Invoke(color);
        private delegate void glFragmentCoverageColorNVDel(uint  color);
        private static glFragmentCoverageColorNVDel glFragmentCoverageColorNVPtr;
        
        // glFragmentLightModelfSGIX
        public static void glFragmentLightModelfSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, float /*CheckedFloat32*/  param) => glFragmentLightModelfSGIXPtr?.Invoke(pname, param);
        private delegate void glFragmentLightModelfSGIXDel(uint /*FragmentLightModelParameterSGIX*/  pname, float /*CheckedFloat32*/  param);
        private static glFragmentLightModelfSGIXDel glFragmentLightModelfSGIXPtr;
        
        // glFragmentLightModelfvSGIX
        public static void glFragmentLightModelfvSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => glFragmentLightModelfvSGIXPtr?.Invoke(pname, parameters);
        private delegate void glFragmentLightModelfvSGIXDel(uint /*FragmentLightModelParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glFragmentLightModelfvSGIXDel glFragmentLightModelfvSGIXPtr;
        
        // glFragmentLightModeliSGIX
        public static void glFragmentLightModeliSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, int /*CheckedInt32*/  param) => glFragmentLightModeliSGIXPtr?.Invoke(pname, param);
        private delegate void glFragmentLightModeliSGIXDel(uint /*FragmentLightModelParameterSGIX*/  pname, int /*CheckedInt32*/  param);
        private static glFragmentLightModeliSGIXDel glFragmentLightModeliSGIXPtr;
        
        // glFragmentLightModelivSGIX
        public static void glFragmentLightModelivSGIX(uint /*FragmentLightModelParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => glFragmentLightModelivSGIXPtr?.Invoke(pname, parameters);
        private delegate void glFragmentLightModelivSGIXDel(uint /*FragmentLightModelParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glFragmentLightModelivSGIXDel glFragmentLightModelivSGIXPtr;
        
        // glFragmentLightfSGIX
        public static void glFragmentLightfSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float /*CheckedFloat32*/  param) => glFragmentLightfSGIXPtr?.Invoke(light, pname, param);
        private delegate void glFragmentLightfSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float /*CheckedFloat32*/  param);
        private static glFragmentLightfSGIXDel glFragmentLightfSGIXPtr;
        
        // glFragmentLightfvSGIX
        public static void glFragmentLightfvSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => glFragmentLightfvSGIXPtr?.Invoke(light, pname, parameters);
        private delegate void glFragmentLightfvSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glFragmentLightfvSGIXDel glFragmentLightfvSGIXPtr;
        
        // glFragmentLightiSGIX
        public static void glFragmentLightiSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int /*CheckedInt32*/  param) => glFragmentLightiSGIXPtr?.Invoke(light, pname, param);
        private delegate void glFragmentLightiSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int /*CheckedInt32*/  param);
        private static glFragmentLightiSGIXDel glFragmentLightiSGIXPtr;
        
        // glFragmentLightivSGIX
        public static void glFragmentLightivSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => glFragmentLightivSGIXPtr?.Invoke(light, pname, parameters);
        private delegate void glFragmentLightivSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glFragmentLightivSGIXDel glFragmentLightivSGIXPtr;
        
        // glFragmentMaterialfSGIX
        public static void glFragmentMaterialfSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param) => glFragmentMaterialfSGIXPtr?.Invoke(face, pname, param);
        private delegate void glFragmentMaterialfSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glFragmentMaterialfSGIXDel glFragmentMaterialfSGIXPtr;
        
        // glFragmentMaterialfvSGIX
        public static void glFragmentMaterialfvSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glFragmentMaterialfvSGIXPtr?.Invoke(face, pname, parameters);
        private delegate void glFragmentMaterialfvSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glFragmentMaterialfvSGIXDel glFragmentMaterialfvSGIXPtr;
        
        // glFragmentMaterialiSGIX
        public static void glFragmentMaterialiSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param) => glFragmentMaterialiSGIXPtr?.Invoke(face, pname, param);
        private delegate void glFragmentMaterialiSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param);
        private static glFragmentMaterialiSGIXDel glFragmentMaterialiSGIXPtr;
        
        // glFragmentMaterialivSGIX
        public static void glFragmentMaterialivSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glFragmentMaterialivSGIXPtr?.Invoke(face, pname, parameters);
        private delegate void glFragmentMaterialivSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glFragmentMaterialivSGIXDel glFragmentMaterialivSGIXPtr;
        
        // glFrameTerminatorGREMEDY
        public static void glFrameTerminatorGREMEDY() => glFrameTerminatorGREMEDYPtr?.Invoke();
        private delegate void glFrameTerminatorGREMEDYDel();
        private static glFrameTerminatorGREMEDYDel glFrameTerminatorGREMEDYPtr;
        
        // glFrameZoomSGIX
        public static void glFrameZoomSGIX(int /*CheckedInt32*/  factor) => glFrameZoomSGIXPtr?.Invoke(factor);
        private delegate void glFrameZoomSGIXDel(int /*CheckedInt32*/  factor);
        private static glFrameZoomSGIXDel glFrameZoomSGIXPtr;
        
        // glFramebufferDrawBufferEXT
        public static void glFramebufferDrawBufferEXT(uint /*Framebuffer*/  framebuffer, uint /*DrawBufferMode*/  mode) => glFramebufferDrawBufferEXTPtr?.Invoke(framebuffer, mode);
        private delegate void glFramebufferDrawBufferEXTDel(uint /*Framebuffer*/  framebuffer, uint /*DrawBufferMode*/  mode);
        private static glFramebufferDrawBufferEXTDel glFramebufferDrawBufferEXTPtr;
        
        // glFramebufferDrawBuffersEXT
        public static void glFramebufferDrawBuffersEXT(uint /*Framebuffer*/  framebuffer, uint  n, uint[] /*DrawBufferMode*/  bufs) => glFramebufferDrawBuffersEXTPtr?.Invoke(framebuffer, n, bufs);
        private delegate void glFramebufferDrawBuffersEXTDel(uint /*Framebuffer*/  framebuffer, uint  n, uint[] /*DrawBufferMode*/  bufs);
        private static glFramebufferDrawBuffersEXTDel glFramebufferDrawBuffersEXTPtr;
        
        // glFramebufferFetchBarrierEXT
        public static void glFramebufferFetchBarrierEXT() => glFramebufferFetchBarrierEXTPtr?.Invoke();
        private delegate void glFramebufferFetchBarrierEXTDel();
        private static glFramebufferFetchBarrierEXTDel glFramebufferFetchBarrierEXTPtr;
        
        // glFramebufferFetchBarrierQCOM
        public static void glFramebufferFetchBarrierQCOM() => glFramebufferFetchBarrierQCOMPtr?.Invoke();
        private delegate void glFramebufferFetchBarrierQCOMDel();
        private static glFramebufferFetchBarrierQCOMDel glFramebufferFetchBarrierQCOMPtr;
        
        // glFramebufferFoveationConfigQCOM
        public static void glFramebufferFoveationConfigQCOM(uint /*Framebuffer*/  framebuffer, uint  numLayers, uint  focalPointsPerLayer, uint  requestedFeatures, uint[]  providedFeatures) => glFramebufferFoveationConfigQCOMPtr?.Invoke(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures);
        private delegate void glFramebufferFoveationConfigQCOMDel(uint /*Framebuffer*/  framebuffer, uint  numLayers, uint  focalPointsPerLayer, uint  requestedFeatures, uint[]  providedFeatures);
        private static glFramebufferFoveationConfigQCOMDel glFramebufferFoveationConfigQCOMPtr;
        
        // glFramebufferFoveationParametersQCOM
        public static void glFramebufferFoveationParametersQCOM(uint /*Framebuffer*/  framebuffer, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea) => glFramebufferFoveationParametersQCOMPtr?.Invoke(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        private delegate void glFramebufferFoveationParametersQCOMDel(uint /*Framebuffer*/  framebuffer, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea);
        private static glFramebufferFoveationParametersQCOMDel glFramebufferFoveationParametersQCOMPtr;
        
        // glFramebufferParameteri
        public static void glFramebufferParameteri(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param) => glFramebufferParameteriPtr?.Invoke(target, pname, param);
        private delegate void glFramebufferParameteriDel(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param);
        private static glFramebufferParameteriDel glFramebufferParameteriPtr;
        
        // glFramebufferPixelLocalStorageSizeEXT
        public static void glFramebufferPixelLocalStorageSizeEXT(uint  target, uint  size) => glFramebufferPixelLocalStorageSizeEXTPtr?.Invoke(target, size);
        private delegate void glFramebufferPixelLocalStorageSizeEXTDel(uint  target, uint  size);
        private static glFramebufferPixelLocalStorageSizeEXTDel glFramebufferPixelLocalStorageSizeEXTPtr;
        
        // glFramebufferReadBufferEXT
        public static void glFramebufferReadBufferEXT(uint /*Framebuffer*/  framebuffer, uint /*ReadBufferMode*/  mode) => glFramebufferReadBufferEXTPtr?.Invoke(framebuffer, mode);
        private delegate void glFramebufferReadBufferEXTDel(uint /*Framebuffer*/  framebuffer, uint /*ReadBufferMode*/  mode);
        private static glFramebufferReadBufferEXTDel glFramebufferReadBufferEXTPtr;
        
        // glFramebufferRenderbuffer
        public static void glFramebufferRenderbuffer(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => glFramebufferRenderbufferPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        private delegate void glFramebufferRenderbufferDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer);
        private static glFramebufferRenderbufferDel glFramebufferRenderbufferPtr;
        
        // glFramebufferRenderbufferEXT
        public static void glFramebufferRenderbufferEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => glFramebufferRenderbufferEXTPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        private delegate void glFramebufferRenderbufferEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer);
        private static glFramebufferRenderbufferEXTDel glFramebufferRenderbufferEXTPtr;
        
        // glFramebufferRenderbufferOES
        public static void glFramebufferRenderbufferOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => glFramebufferRenderbufferOESPtr?.Invoke(target, attachment, renderbuffertarget, renderbuffer);
        private delegate void glFramebufferRenderbufferOESDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer);
        private static glFramebufferRenderbufferOESDel glFramebufferRenderbufferOESPtr;
        
        // glFramebufferSampleLocationsfvARB
        public static void glFramebufferSampleLocationsfvARB(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v) => glFramebufferSampleLocationsfvARBPtr?.Invoke(target, start, count, v);
        private delegate void glFramebufferSampleLocationsfvARBDel(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v);
        private static glFramebufferSampleLocationsfvARBDel glFramebufferSampleLocationsfvARBPtr;
        
        // glFramebufferSampleLocationsfvNV
        public static void glFramebufferSampleLocationsfvNV(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v) => glFramebufferSampleLocationsfvNVPtr?.Invoke(target, start, count, v);
        private delegate void glFramebufferSampleLocationsfvNVDel(uint /*FramebufferTarget*/  target, uint  start, uint  count, float[]  v);
        private static glFramebufferSampleLocationsfvNVDel glFramebufferSampleLocationsfvNVPtr;
        
        // glFramebufferSamplePositionsfvAMD
        public static void glFramebufferSamplePositionsfvAMD(uint /*FramebufferTarget*/  target, uint  numsamples, uint  pixelindex, float[]  values) => glFramebufferSamplePositionsfvAMDPtr?.Invoke(target, numsamples, pixelindex, values);
        private delegate void glFramebufferSamplePositionsfvAMDDel(uint /*FramebufferTarget*/  target, uint  numsamples, uint  pixelindex, float[]  values);
        private static glFramebufferSamplePositionsfvAMDDel glFramebufferSamplePositionsfvAMDPtr;
        
        // glFramebufferTexture
        public static void glFramebufferTexture(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level) => glFramebufferTexturePtr?.Invoke(target, attachment, texture, level);
        private delegate void glFramebufferTextureDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level);
        private static glFramebufferTextureDel glFramebufferTexturePtr;
        
        // glFramebufferTexture1D
        public static void glFramebufferTexture1D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => glFramebufferTexture1DPtr?.Invoke(target, attachment, textarget, texture, level);
        private delegate void glFramebufferTexture1DDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level);
        private static glFramebufferTexture1DDel glFramebufferTexture1DPtr;
        
        // glFramebufferTexture1DEXT
        public static void glFramebufferTexture1DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => glFramebufferTexture1DEXTPtr?.Invoke(target, attachment, textarget, texture, level);
        private delegate void glFramebufferTexture1DEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level);
        private static glFramebufferTexture1DEXTDel glFramebufferTexture1DEXTPtr;
        
        // glFramebufferTexture2D
        public static void glFramebufferTexture2D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => glFramebufferTexture2DPtr?.Invoke(target, attachment, textarget, texture, level);
        private delegate void glFramebufferTexture2DDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level);
        private static glFramebufferTexture2DDel glFramebufferTexture2DPtr;
        
        // glFramebufferTexture2DEXT
        public static void glFramebufferTexture2DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => glFramebufferTexture2DEXTPtr?.Invoke(target, attachment, textarget, texture, level);
        private delegate void glFramebufferTexture2DEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level);
        private static glFramebufferTexture2DEXTDel glFramebufferTexture2DEXTPtr;
        
        // glFramebufferTexture2DDownsampleIMG
        public static void glFramebufferTexture2DDownsampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  xscale, int  yscale) => glFramebufferTexture2DDownsampleIMGPtr?.Invoke(target, attachment, textarget, texture, level, xscale, yscale);
        private delegate void glFramebufferTexture2DDownsampleIMGDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  xscale, int  yscale);
        private static glFramebufferTexture2DDownsampleIMGDel glFramebufferTexture2DDownsampleIMGPtr;
        
        // glFramebufferTexture2DMultisampleEXT
        public static void glFramebufferTexture2DMultisampleEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples) => glFramebufferTexture2DMultisampleEXTPtr?.Invoke(target, attachment, textarget, texture, level, samples);
        private delegate void glFramebufferTexture2DMultisampleEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples);
        private static glFramebufferTexture2DMultisampleEXTDel glFramebufferTexture2DMultisampleEXTPtr;
        
        // glFramebufferTexture2DMultisampleIMG
        public static void glFramebufferTexture2DMultisampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples) => glFramebufferTexture2DMultisampleIMGPtr?.Invoke(target, attachment, textarget, texture, level, samples);
        private delegate void glFramebufferTexture2DMultisampleIMGDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, uint  samples);
        private static glFramebufferTexture2DMultisampleIMGDel glFramebufferTexture2DMultisampleIMGPtr;
        
        // glFramebufferTexture2DOES
        public static void glFramebufferTexture2DOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level) => glFramebufferTexture2DOESPtr?.Invoke(target, attachment, textarget, texture, level);
        private delegate void glFramebufferTexture2DOESDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level);
        private static glFramebufferTexture2DOESDel glFramebufferTexture2DOESPtr;
        
        // glFramebufferTexture3D
        public static void glFramebufferTexture3D(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => glFramebufferTexture3DPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        private delegate void glFramebufferTexture3DDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset);
        private static glFramebufferTexture3DDel glFramebufferTexture3DPtr;
        
        // glFramebufferTexture3DEXT
        public static void glFramebufferTexture3DEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => glFramebufferTexture3DEXTPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        private delegate void glFramebufferTexture3DEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset);
        private static glFramebufferTexture3DEXTDel glFramebufferTexture3DEXTPtr;
        
        // glFramebufferTexture3DOES
        public static void glFramebufferTexture3DOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset) => glFramebufferTexture3DOESPtr?.Invoke(target, attachment, textarget, texture, level, zoffset);
        private delegate void glFramebufferTexture3DOESDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint  texture, int  level, int  zoffset);
        private static glFramebufferTexture3DOESDel glFramebufferTexture3DOESPtr;
        
        // glFramebufferTextureARB
        public static void glFramebufferTextureARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glFramebufferTextureARBPtr?.Invoke(target, attachment, texture, level);
        private delegate void glFramebufferTextureARBDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glFramebufferTextureARBDel glFramebufferTextureARBPtr;
        
        // glFramebufferTextureEXT
        public static void glFramebufferTextureEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glFramebufferTextureEXTPtr?.Invoke(target, attachment, texture, level);
        private delegate void glFramebufferTextureEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glFramebufferTextureEXTDel glFramebufferTextureEXTPtr;
        
        // glFramebufferTextureFaceARB
        public static void glFramebufferTextureFaceARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => glFramebufferTextureFaceARBPtr?.Invoke(target, attachment, texture, level, face);
        private delegate void glFramebufferTextureFaceARBDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face);
        private static glFramebufferTextureFaceARBDel glFramebufferTextureFaceARBPtr;
        
        // glFramebufferTextureFaceEXT
        public static void glFramebufferTextureFaceEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => glFramebufferTextureFaceEXTPtr?.Invoke(target, attachment, texture, level, face);
        private delegate void glFramebufferTextureFaceEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face);
        private static glFramebufferTextureFaceEXTDel glFramebufferTextureFaceEXTPtr;
        
        // glFramebufferTextureLayer
        public static void glFramebufferTextureLayer(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => glFramebufferTextureLayerPtr?.Invoke(target, attachment, texture, level, layer);
        private delegate void glFramebufferTextureLayerDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer);
        private static glFramebufferTextureLayerDel glFramebufferTextureLayerPtr;
        
        // glFramebufferTextureLayerARB
        public static void glFramebufferTextureLayerARB(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => glFramebufferTextureLayerARBPtr?.Invoke(target, attachment, texture, level, layer);
        private delegate void glFramebufferTextureLayerARBDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer);
        private static glFramebufferTextureLayerARBDel glFramebufferTextureLayerARBPtr;
        
        // glFramebufferTextureLayerEXT
        public static void glFramebufferTextureLayerEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => glFramebufferTextureLayerEXTPtr?.Invoke(target, attachment, texture, level, layer);
        private delegate void glFramebufferTextureLayerEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer);
        private static glFramebufferTextureLayerEXTDel glFramebufferTextureLayerEXTPtr;
        
        // glFramebufferTextureLayerDownsampleIMG
        public static void glFramebufferTextureLayerDownsampleIMG(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer, int  xscale, int  yscale) => glFramebufferTextureLayerDownsampleIMGPtr?.Invoke(target, attachment, texture, level, layer, xscale, yscale);
        private delegate void glFramebufferTextureLayerDownsampleIMGDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer, int  xscale, int  yscale);
        private static glFramebufferTextureLayerDownsampleIMGDel glFramebufferTextureLayerDownsampleIMGPtr;
        
        // glFramebufferTextureMultisampleMultiviewOVR
        public static void glFramebufferTextureMultisampleMultiviewOVR(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint  samples, int  baseViewIndex, uint  numViews) => glFramebufferTextureMultisampleMultiviewOVRPtr?.Invoke(target, attachment, texture, level, samples, baseViewIndex, numViews);
        private delegate void glFramebufferTextureMultisampleMultiviewOVRDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint  samples, int  baseViewIndex, uint  numViews);
        private static glFramebufferTextureMultisampleMultiviewOVRDel glFramebufferTextureMultisampleMultiviewOVRPtr;
        
        // glFramebufferTextureMultiviewOVR
        public static void glFramebufferTextureMultiviewOVR(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int  baseViewIndex, uint  numViews) => glFramebufferTextureMultiviewOVRPtr?.Invoke(target, attachment, texture, level, baseViewIndex, numViews);
        private delegate void glFramebufferTextureMultiviewOVRDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int  baseViewIndex, uint  numViews);
        private static glFramebufferTextureMultiviewOVRDel glFramebufferTextureMultiviewOVRPtr;
        
        // glFramebufferTextureOES
        public static void glFramebufferTextureOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glFramebufferTextureOESPtr?.Invoke(target, attachment, texture, level);
        private delegate void glFramebufferTextureOESDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glFramebufferTextureOESDel glFramebufferTextureOESPtr;
        
        // glFreeObjectBufferATI
        public static void glFreeObjectBufferATI(uint  buffer) => glFreeObjectBufferATIPtr?.Invoke(buffer);
        private delegate void glFreeObjectBufferATIDel(uint  buffer);
        private static glFreeObjectBufferATIDel glFreeObjectBufferATIPtr;
        
        // glFrontFace
        public static void glFrontFace(uint /*FrontFaceDirection*/  mode) => glFrontFacePtr?.Invoke(mode);
        private delegate void glFrontFaceDel(uint /*FrontFaceDirection*/  mode);
        private static glFrontFaceDel glFrontFacePtr;
        
        // glFrustum
        public static void glFrustum(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => glFrustumPtr?.Invoke(left, right, bottom, top, zNear, zFar);
        private delegate void glFrustumDel(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar);
        private static glFrustumDel glFrustumPtr;
        
        // glFrustumf
        public static void glFrustumf(float  l, float  r, float  b, float  t, float  n, float  f) => glFrustumfPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glFrustumfDel(float  l, float  r, float  b, float  t, float  n, float  f);
        private static glFrustumfDel glFrustumfPtr;
        
        // glFrustumfOES
        public static void glFrustumfOES(float  l, float  r, float  b, float  t, float  n, float  f) => glFrustumfOESPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glFrustumfOESDel(float  l, float  r, float  b, float  t, float  n, float  f);
        private static glFrustumfOESDel glFrustumfOESPtr;
        
        // glFrustumx
        public static void glFrustumx(int  l, int  r, int  b, int  t, int  n, int  f) => glFrustumxPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glFrustumxDel(int  l, int  r, int  b, int  t, int  n, int  f);
        private static glFrustumxDel glFrustumxPtr;
        
        // glFrustumxOES
        public static void glFrustumxOES(int  l, int  r, int  b, int  t, int  n, int  f) => glFrustumxOESPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glFrustumxOESDel(int  l, int  r, int  b, int  t, int  n, int  f);
        private static glFrustumxOESDel glFrustumxOESPtr;
        
        // glGenAsyncMarkersSGIX
        public static uint glGenAsyncMarkersSGIX(uint  range) => glGenAsyncMarkersSGIXPtr?.Invoke(range) ?? default;
        private delegate uint glGenAsyncMarkersSGIXDel(uint  range);
        private static glGenAsyncMarkersSGIXDel glGenAsyncMarkersSGIXPtr;
        
        // glGenBuffers
        public static void glGenBuffers(uint  n, uint[]  buffers) => glGenBuffersPtr?.Invoke(n, buffers);
        private delegate void glGenBuffersDel(uint  n, uint[]  buffers);
        private static glGenBuffersDel glGenBuffersPtr;
        
        // glGenBuffersARB
        public static void glGenBuffersARB(uint  n, uint[]  buffers) => glGenBuffersARBPtr?.Invoke(n, buffers);
        private delegate void glGenBuffersARBDel(uint  n, uint[]  buffers);
        private static glGenBuffersARBDel glGenBuffersARBPtr;
        
        // glGenFencesAPPLE
        public static void glGenFencesAPPLE(uint  n, uint[] /*FenceNV*/  fences) => glGenFencesAPPLEPtr?.Invoke(n, fences);
        private delegate void glGenFencesAPPLEDel(uint  n, uint[] /*FenceNV*/  fences);
        private static glGenFencesAPPLEDel glGenFencesAPPLEPtr;
        
        // glGenFencesNV
        public static void glGenFencesNV(uint  n, uint[] /*FenceNV*/  fences) => glGenFencesNVPtr?.Invoke(n, fences);
        private delegate void glGenFencesNVDel(uint  n, uint[] /*FenceNV*/  fences);
        private static glGenFencesNVDel glGenFencesNVPtr;
        
        // glGenFragmentShadersATI
        public static uint glGenFragmentShadersATI(uint  range) => glGenFragmentShadersATIPtr?.Invoke(range) ?? default;
        private delegate uint glGenFragmentShadersATIDel(uint  range);
        private static glGenFragmentShadersATIDel glGenFragmentShadersATIPtr;
        
        // glGenFramebuffers
        public static void glGenFramebuffers(uint  n, uint[]  framebuffers) => glGenFramebuffersPtr?.Invoke(n, framebuffers);
        private delegate void glGenFramebuffersDel(uint  n, uint[]  framebuffers);
        private static glGenFramebuffersDel glGenFramebuffersPtr;
        
        // glGenFramebuffersEXT
        public static void glGenFramebuffersEXT(uint  n, uint[]  framebuffers) => glGenFramebuffersEXTPtr?.Invoke(n, framebuffers);
        private delegate void glGenFramebuffersEXTDel(uint  n, uint[]  framebuffers);
        private static glGenFramebuffersEXTDel glGenFramebuffersEXTPtr;
        
        // glGenFramebuffersOES
        public static void glGenFramebuffersOES(uint  n, uint[]  framebuffers) => glGenFramebuffersOESPtr?.Invoke(n, framebuffers);
        private delegate void glGenFramebuffersOESDel(uint  n, uint[]  framebuffers);
        private static glGenFramebuffersOESDel glGenFramebuffersOESPtr;
        
        // glGenLists
        public static uint /*List*/ glGenLists(uint  range) => glGenListsPtr?.Invoke(range) ?? default;
        private delegate uint /*List*/ glGenListsDel(uint  range);
        private static glGenListsDel glGenListsPtr;
        
        // glGenNamesAMD
        public static void glGenNamesAMD(uint  identifier, uint  num, uint[]  names) => glGenNamesAMDPtr?.Invoke(identifier, num, names);
        private delegate void glGenNamesAMDDel(uint  identifier, uint  num, uint[]  names);
        private static glGenNamesAMDDel glGenNamesAMDPtr;
        
        // glGenOcclusionQueriesNV
        public static void glGenOcclusionQueriesNV(uint  n, uint[]  ids) => glGenOcclusionQueriesNVPtr?.Invoke(n, ids);
        private delegate void glGenOcclusionQueriesNVDel(uint  n, uint[]  ids);
        private static glGenOcclusionQueriesNVDel glGenOcclusionQueriesNVPtr;
        
        // glGenPathsNV
        public static uint /*Path*/ glGenPathsNV(uint  range) => glGenPathsNVPtr?.Invoke(range) ?? default;
        private delegate uint /*Path*/ glGenPathsNVDel(uint  range);
        private static glGenPathsNVDel glGenPathsNVPtr;
        
        // glGenPerfMonitorsAMD
        public static void glGenPerfMonitorsAMD(uint  n, uint[]  monitors) => glGenPerfMonitorsAMDPtr?.Invoke(n, monitors);
        private delegate void glGenPerfMonitorsAMDDel(uint  n, uint[]  monitors);
        private static glGenPerfMonitorsAMDDel glGenPerfMonitorsAMDPtr;
        
        // glGenProgramPipelines
        public static void glGenProgramPipelines(uint  n, uint[]  pipelines) => glGenProgramPipelinesPtr?.Invoke(n, pipelines);
        private delegate void glGenProgramPipelinesDel(uint  n, uint[]  pipelines);
        private static glGenProgramPipelinesDel glGenProgramPipelinesPtr;
        
        // glGenProgramPipelinesEXT
        public static void glGenProgramPipelinesEXT(uint  n, uint[]  pipelines) => glGenProgramPipelinesEXTPtr?.Invoke(n, pipelines);
        private delegate void glGenProgramPipelinesEXTDel(uint  n, uint[]  pipelines);
        private static glGenProgramPipelinesEXTDel glGenProgramPipelinesEXTPtr;
        
        // glGenProgramsARB
        public static void glGenProgramsARB(uint  n, uint[]  programs) => glGenProgramsARBPtr?.Invoke(n, programs);
        private delegate void glGenProgramsARBDel(uint  n, uint[]  programs);
        private static glGenProgramsARBDel glGenProgramsARBPtr;
        
        // glGenProgramsNV
        public static void glGenProgramsNV(uint  n, uint[]  programs) => glGenProgramsNVPtr?.Invoke(n, programs);
        private delegate void glGenProgramsNVDel(uint  n, uint[]  programs);
        private static glGenProgramsNVDel glGenProgramsNVPtr;
        
        // glGenQueries
        public static void glGenQueries(uint  n, uint[]  ids) => glGenQueriesPtr?.Invoke(n, ids);
        private delegate void glGenQueriesDel(uint  n, uint[]  ids);
        private static glGenQueriesDel glGenQueriesPtr;
        
        // glGenQueriesARB
        public static void glGenQueriesARB(uint  n, uint[]  ids) => glGenQueriesARBPtr?.Invoke(n, ids);
        private delegate void glGenQueriesARBDel(uint  n, uint[]  ids);
        private static glGenQueriesARBDel glGenQueriesARBPtr;
        
        // glGenQueriesEXT
        public static void glGenQueriesEXT(uint  n, uint[]  ids) => glGenQueriesEXTPtr?.Invoke(n, ids);
        private delegate void glGenQueriesEXTDel(uint  n, uint[]  ids);
        private static glGenQueriesEXTDel glGenQueriesEXTPtr;
        
        // glGenQueryResourceTagNV
        public static void glGenQueryResourceTagNV(uint  n, int[]  tagIds) => glGenQueryResourceTagNVPtr?.Invoke(n, tagIds);
        private delegate void glGenQueryResourceTagNVDel(uint  n, int[]  tagIds);
        private static glGenQueryResourceTagNVDel glGenQueryResourceTagNVPtr;
        
        // glGenRenderbuffers
        public static void glGenRenderbuffers(uint  n, uint[]  renderbuffers) => glGenRenderbuffersPtr?.Invoke(n, renderbuffers);
        private delegate void glGenRenderbuffersDel(uint  n, uint[]  renderbuffers);
        private static glGenRenderbuffersDel glGenRenderbuffersPtr;
        
        // glGenRenderbuffersEXT
        public static void glGenRenderbuffersEXT(uint  n, uint[]  renderbuffers) => glGenRenderbuffersEXTPtr?.Invoke(n, renderbuffers);
        private delegate void glGenRenderbuffersEXTDel(uint  n, uint[]  renderbuffers);
        private static glGenRenderbuffersEXTDel glGenRenderbuffersEXTPtr;
        
        // glGenRenderbuffersOES
        public static void glGenRenderbuffersOES(uint  n, uint[]  renderbuffers) => glGenRenderbuffersOESPtr?.Invoke(n, renderbuffers);
        private delegate void glGenRenderbuffersOESDel(uint  n, uint[]  renderbuffers);
        private static glGenRenderbuffersOESDel glGenRenderbuffersOESPtr;
        
        // glGenSamplers
        public static void glGenSamplers(uint  count, uint[]  samplers) => glGenSamplersPtr?.Invoke(count, samplers);
        private delegate void glGenSamplersDel(uint  count, uint[]  samplers);
        private static glGenSamplersDel glGenSamplersPtr;
        
        // glGenSemaphoresEXT
        public static void glGenSemaphoresEXT(uint  n, uint[]  semaphores) => glGenSemaphoresEXTPtr?.Invoke(n, semaphores);
        private delegate void glGenSemaphoresEXTDel(uint  n, uint[]  semaphores);
        private static glGenSemaphoresEXTDel glGenSemaphoresEXTPtr;
        
        // glGenSymbolsEXT
        public static uint glGenSymbolsEXT(uint /*DataTypeEXT*/  datatype, uint /*VertexShaderStorageTypeEXT*/  storagetype, uint /*ParameterRangeEXT*/  range, uint  components) => glGenSymbolsEXTPtr?.Invoke(datatype, storagetype, range, components) ?? default;
        private delegate uint glGenSymbolsEXTDel(uint /*DataTypeEXT*/  datatype, uint /*VertexShaderStorageTypeEXT*/  storagetype, uint /*ParameterRangeEXT*/  range, uint  components);
        private static glGenSymbolsEXTDel glGenSymbolsEXTPtr;
        
        // glGenTextures
        public static void glGenTextures(uint  n, uint[] /*Texture*/  textures) => glGenTexturesPtr?.Invoke(n, textures);
        private delegate void glGenTexturesDel(uint  n, uint[] /*Texture*/  textures);
        private static glGenTexturesDel glGenTexturesPtr;
        
        // glGenTexturesEXT
        public static void glGenTexturesEXT(uint  n, uint[] /*Texture*/  textures) => glGenTexturesEXTPtr?.Invoke(n, textures);
        private delegate void glGenTexturesEXTDel(uint  n, uint[] /*Texture*/  textures);
        private static glGenTexturesEXTDel glGenTexturesEXTPtr;
        
        // glGenTransformFeedbacks
        public static void glGenTransformFeedbacks(uint  n, uint[]  ids) => glGenTransformFeedbacksPtr?.Invoke(n, ids);
        private delegate void glGenTransformFeedbacksDel(uint  n, uint[]  ids);
        private static glGenTransformFeedbacksDel glGenTransformFeedbacksPtr;
        
        // glGenTransformFeedbacksNV
        public static void glGenTransformFeedbacksNV(uint  n, uint[]  ids) => glGenTransformFeedbacksNVPtr?.Invoke(n, ids);
        private delegate void glGenTransformFeedbacksNVDel(uint  n, uint[]  ids);
        private static glGenTransformFeedbacksNVDel glGenTransformFeedbacksNVPtr;
        
        // glGenVertexArrays
        public static void glGenVertexArrays(uint  n, uint[]  arrays) => glGenVertexArraysPtr?.Invoke(n, arrays);
        private delegate void glGenVertexArraysDel(uint  n, uint[]  arrays);
        private static glGenVertexArraysDel glGenVertexArraysPtr;
        
        // glGenVertexArraysAPPLE
        public static void glGenVertexArraysAPPLE(uint  n, uint[]  arrays) => glGenVertexArraysAPPLEPtr?.Invoke(n, arrays);
        private delegate void glGenVertexArraysAPPLEDel(uint  n, uint[]  arrays);
        private static glGenVertexArraysAPPLEDel glGenVertexArraysAPPLEPtr;
        
        // glGenVertexArraysOES
        public static void glGenVertexArraysOES(uint  n, uint[]  arrays) => glGenVertexArraysOESPtr?.Invoke(n, arrays);
        private delegate void glGenVertexArraysOESDel(uint  n, uint[]  arrays);
        private static glGenVertexArraysOESDel glGenVertexArraysOESPtr;
        
        // glGenVertexShadersEXT
        public static uint glGenVertexShadersEXT(uint  range) => glGenVertexShadersEXTPtr?.Invoke(range) ?? default;
        private delegate uint glGenVertexShadersEXTDel(uint  range);
        private static glGenVertexShadersEXTDel glGenVertexShadersEXTPtr;
        
        // glGenerateMipmap
        public static void glGenerateMipmap(uint /*TextureTarget*/  target) => glGenerateMipmapPtr?.Invoke(target);
        private delegate void glGenerateMipmapDel(uint /*TextureTarget*/  target);
        private static glGenerateMipmapDel glGenerateMipmapPtr;
        
        // glGenerateMipmapEXT
        public static void glGenerateMipmapEXT(uint /*TextureTarget*/  target) => glGenerateMipmapEXTPtr?.Invoke(target);
        private delegate void glGenerateMipmapEXTDel(uint /*TextureTarget*/  target);
        private static glGenerateMipmapEXTDel glGenerateMipmapEXTPtr;
        
        // glGenerateMipmapOES
        public static void glGenerateMipmapOES(uint /*TextureTarget*/  target) => glGenerateMipmapOESPtr?.Invoke(target);
        private delegate void glGenerateMipmapOESDel(uint /*TextureTarget*/  target);
        private static glGenerateMipmapOESDel glGenerateMipmapOESPtr;
        
        // glGenerateMultiTexMipmapEXT
        public static void glGenerateMultiTexMipmapEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target) => glGenerateMultiTexMipmapEXTPtr?.Invoke(texunit, target);
        private delegate void glGenerateMultiTexMipmapEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target);
        private static glGenerateMultiTexMipmapEXTDel glGenerateMultiTexMipmapEXTPtr;
        
        // glGenerateTextureMipmap
        public static void glGenerateTextureMipmap(uint  texture) => glGenerateTextureMipmapPtr?.Invoke(texture);
        private delegate void glGenerateTextureMipmapDel(uint  texture);
        private static glGenerateTextureMipmapDel glGenerateTextureMipmapPtr;
        
        // glGenerateTextureMipmapEXT
        public static void glGenerateTextureMipmapEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target) => glGenerateTextureMipmapEXTPtr?.Invoke(texture, target);
        private delegate void glGenerateTextureMipmapEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target);
        private static glGenerateTextureMipmapEXTDel glGenerateTextureMipmapEXTPtr;
        
        // glGetActiveAtomicCounterBufferiv
        public static void glGetActiveAtomicCounterBufferiv(uint  program, uint  bufferIndex, uint /*AtomicCounterBufferPName*/  pname, int[]  parameters) => glGetActiveAtomicCounterBufferivPtr?.Invoke(program, bufferIndex, pname, parameters);
        private delegate void glGetActiveAtomicCounterBufferivDel(uint  program, uint  bufferIndex, uint /*AtomicCounterBufferPName*/  pname, int[]  parameters);
        private static glGetActiveAtomicCounterBufferivDel glGetActiveAtomicCounterBufferivPtr;
        
        // glGetActiveAttrib
        public static void glGetActiveAttrib(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name) => glGetActiveAttribPtr?.Invoke(program, index, bufSize, length, size, type, name);
        private delegate void glGetActiveAttribDel(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name);
        private static glGetActiveAttribDel glGetActiveAttribPtr;
        
        // glGetActiveAttribARB
        public static void glGetActiveAttribARB(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name) => glGetActiveAttribARBPtr?.Invoke(programObj, index, maxLength, length, size, type, name);
        private delegate void glGetActiveAttribARBDel(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*AttributeType*/  type, string  name);
        private static glGetActiveAttribARBDel glGetActiveAttribARBPtr;
        
        // glGetActiveSubroutineName
        public static void glGetActiveSubroutineName(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name) => glGetActiveSubroutineNamePtr?.Invoke(program, shadertype, index, bufSize, length, name);
        private delegate void glGetActiveSubroutineNameDel(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name);
        private static glGetActiveSubroutineNameDel glGetActiveSubroutineNamePtr;
        
        // glGetActiveSubroutineUniformName
        public static void glGetActiveSubroutineUniformName(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name) => glGetActiveSubroutineUniformNamePtr?.Invoke(program, shadertype, index, bufSize, length, name);
        private delegate void glGetActiveSubroutineUniformNameDel(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint  bufSize, uint[]  length, string  name);
        private static glGetActiveSubroutineUniformNameDel glGetActiveSubroutineUniformNamePtr;
        
        // glGetActiveSubroutineUniformiv
        public static void glGetActiveSubroutineUniformiv(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint /*SubroutineParameterName*/  pname, int[]  values) => glGetActiveSubroutineUniformivPtr?.Invoke(program, shadertype, index, pname, values);
        private delegate void glGetActiveSubroutineUniformivDel(uint  program, uint /*ShaderType*/  shadertype, uint  index, uint /*SubroutineParameterName*/  pname, int[]  values);
        private static glGetActiveSubroutineUniformivDel glGetActiveSubroutineUniformivPtr;
        
        // glGetActiveUniform
        public static void glGetActiveUniform(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name) => glGetActiveUniformPtr?.Invoke(program, index, bufSize, length, size, type, name);
        private delegate void glGetActiveUniformDel(uint  program, uint  index, uint  bufSize, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name);
        private static glGetActiveUniformDel glGetActiveUniformPtr;
        
        // glGetActiveUniformARB
        public static void glGetActiveUniformARB(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name) => glGetActiveUniformARBPtr?.Invoke(programObj, index, maxLength, length, size, type, name);
        private delegate void glGetActiveUniformARBDel(IntPtr /*handleARB*/  programObj, uint  index, uint  maxLength, uint[]  length, int[]  size, uint[] /*UniformType*/  type, string  name);
        private static glGetActiveUniformARBDel glGetActiveUniformARBPtr;
        
        // glGetActiveUniformBlockName
        public static void glGetActiveUniformBlockName(uint  program, uint  uniformBlockIndex, uint  bufSize, uint[]  length, string  uniformBlockName) => glGetActiveUniformBlockNamePtr?.Invoke(program, uniformBlockIndex, bufSize, length, uniformBlockName);
        private delegate void glGetActiveUniformBlockNameDel(uint  program, uint  uniformBlockIndex, uint  bufSize, uint[]  length, string  uniformBlockName);
        private static glGetActiveUniformBlockNameDel glGetActiveUniformBlockNamePtr;
        
        // glGetActiveUniformBlockiv
        public static void glGetActiveUniformBlockiv(uint  program, uint  uniformBlockIndex, uint /*UniformBlockPName*/  pname, int[]  parameters) => glGetActiveUniformBlockivPtr?.Invoke(program, uniformBlockIndex, pname, parameters);
        private delegate void glGetActiveUniformBlockivDel(uint  program, uint  uniformBlockIndex, uint /*UniformBlockPName*/  pname, int[]  parameters);
        private static glGetActiveUniformBlockivDel glGetActiveUniformBlockivPtr;
        
        // glGetActiveUniformName
        public static void glGetActiveUniformName(uint  program, uint  uniformIndex, uint  bufSize, uint[]  length, string  uniformName) => glGetActiveUniformNamePtr?.Invoke(program, uniformIndex, bufSize, length, uniformName);
        private delegate void glGetActiveUniformNameDel(uint  program, uint  uniformIndex, uint  bufSize, uint[]  length, string  uniformName);
        private static glGetActiveUniformNameDel glGetActiveUniformNamePtr;
        
        // glGetActiveUniformsiv
        public static void glGetActiveUniformsiv(uint  program, uint  uniformCount, uint[]  uniformIndices, uint /*UniformPName*/  pname, int[]  parameters) => glGetActiveUniformsivPtr?.Invoke(program, uniformCount, uniformIndices, pname, parameters);
        private delegate void glGetActiveUniformsivDel(uint  program, uint  uniformCount, uint[]  uniformIndices, uint /*UniformPName*/  pname, int[]  parameters);
        private static glGetActiveUniformsivDel glGetActiveUniformsivPtr;
        
        // glGetActiveVaryingNV
        public static void glGetActiveVaryingNV(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[]  type, string  name) => glGetActiveVaryingNVPtr?.Invoke(program, index, bufSize, length, size, type, name);
        private delegate void glGetActiveVaryingNVDel(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[]  type, string  name);
        private static glGetActiveVaryingNVDel glGetActiveVaryingNVPtr;
        
        // glGetArrayObjectfvATI
        public static void glGetArrayObjectfvATI(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => glGetArrayObjectfvATIPtr?.Invoke(array, pname, parameters);
        private delegate void glGetArrayObjectfvATIDel(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters);
        private static glGetArrayObjectfvATIDel glGetArrayObjectfvATIPtr;
        
        // glGetArrayObjectivATI
        public static void glGetArrayObjectivATI(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => glGetArrayObjectivATIPtr?.Invoke(array, pname, parameters);
        private delegate void glGetArrayObjectivATIDel(uint /*EnableCap*/  array, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters);
        private static glGetArrayObjectivATIDel glGetArrayObjectivATIPtr;
        
        // glGetAttachedObjectsARB
        // Could be an alias of glGetAttachedShaders except that GLhandleARB is different on MacOS X
        public static void glGetAttachedObjectsARB(IntPtr /*handleARB*/  containerObj, uint  maxCount, uint[]  count, IntPtr[] /*handleARB*/  obj) => glGetAttachedObjectsARBPtr?.Invoke(containerObj, maxCount, count, obj);
        private delegate void glGetAttachedObjectsARBDel(IntPtr /*handleARB*/  containerObj, uint  maxCount, uint[]  count, IntPtr[] /*handleARB*/  obj);
        private static glGetAttachedObjectsARBDel glGetAttachedObjectsARBPtr;
        
        // glGetAttachedShaders
        public static void glGetAttachedShaders(uint  program, uint  maxCount, uint[]  count, uint[]  shaders) => glGetAttachedShadersPtr?.Invoke(program, maxCount, count, shaders);
        private delegate void glGetAttachedShadersDel(uint  program, uint  maxCount, uint[]  count, uint[]  shaders);
        private static glGetAttachedShadersDel glGetAttachedShadersPtr;
        
        // glGetAttribLocation
        public static int glGetAttribLocation(uint  program, string  name) => glGetAttribLocationPtr?.Invoke(program, name) ?? default;
        private delegate int glGetAttribLocationDel(uint  program, string  name);
        private static glGetAttribLocationDel glGetAttribLocationPtr;
        
        // glGetAttribLocationARB
        public static int glGetAttribLocationARB(IntPtr /*handleARB*/  programObj, string  name) => glGetAttribLocationARBPtr?.Invoke(programObj, name) ?? default;
        private delegate int glGetAttribLocationARBDel(IntPtr /*handleARB*/  programObj, string  name);
        private static glGetAttribLocationARBDel glGetAttribLocationARBPtr;
        
        // glGetBooleanIndexedvEXT
        public static void glGetBooleanIndexedvEXT(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data) => glGetBooleanIndexedvEXTPtr?.Invoke(target, index, data);
        private delegate void glGetBooleanIndexedvEXTDel(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data);
        private static glGetBooleanIndexedvEXTDel glGetBooleanIndexedvEXTPtr;
        
        // glGetBooleani_v
        public static void glGetBooleani_v(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data) => glGetBooleani_vPtr?.Invoke(target, index, data);
        private delegate void glGetBooleani_vDel(uint /*BufferTargetARB*/  target, uint  index, bool[] /*Boolean*/  data);
        private static glGetBooleani_vDel glGetBooleani_vPtr;
        
        // glGetBooleanv
        public static void glGetBooleanv(uint /*GetPName*/  pname, bool[] /*Boolean*/  data) => glGetBooleanvPtr?.Invoke(pname, data);
        private delegate void glGetBooleanvDel(uint /*GetPName*/  pname, bool[] /*Boolean*/  data);
        private static glGetBooleanvDel glGetBooleanvPtr;
        
        // glGetBufferParameteri64v
        public static void glGetBufferParameteri64v(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, long[]  parameters) => glGetBufferParameteri64vPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferParameteri64vDel(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, long[]  parameters);
        private static glGetBufferParameteri64vDel glGetBufferParameteri64vPtr;
        
        // glGetBufferParameteriv
        public static void glGetBufferParameteriv(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters) => glGetBufferParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferParameterivDel(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters);
        private static glGetBufferParameterivDel glGetBufferParameterivPtr;
        
        // glGetBufferParameterivARB
        public static void glGetBufferParameterivARB(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters) => glGetBufferParameterivARBPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferParameterivARBDel(uint /*BufferTargetARB*/  target, uint /*BufferPNameARB*/  pname, int[]  parameters);
        private static glGetBufferParameterivARBDel glGetBufferParameterivARBPtr;
        
        // glGetBufferParameterui64vNV
        public static void glGetBufferParameterui64vNV(uint /*BufferTargetARB*/  target, uint  pname, ulong[]  parameters) => glGetBufferParameterui64vNVPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferParameterui64vNVDel(uint /*BufferTargetARB*/  target, uint  pname, ulong[]  parameters);
        private static glGetBufferParameterui64vNVDel glGetBufferParameterui64vNVPtr;
        
        // glGetBufferPointerv
        public static void glGetBufferPointerv(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => glGetBufferPointervPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferPointervDel(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters);
        private static glGetBufferPointervDel glGetBufferPointervPtr;
        
        // glGetBufferPointervARB
        public static void glGetBufferPointervARB(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => glGetBufferPointervARBPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferPointervARBDel(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters);
        private static glGetBufferPointervARBDel glGetBufferPointervARBPtr;
        
        // glGetBufferPointervOES
        public static void glGetBufferPointervOES(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => glGetBufferPointervOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetBufferPointervOESDel(uint /*BufferTargetARB*/  target, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters);
        private static glGetBufferPointervOESDel glGetBufferPointervOESPtr;
        
        // glGetBufferSubData
        public static void glGetBufferSubData(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => glGetBufferSubDataPtr?.Invoke(target, offset, size, data);
        private delegate void glGetBufferSubDataDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size, IntPtr  data);
        private static glGetBufferSubDataDel glGetBufferSubDataPtr;
        
        // glGetBufferSubDataARB
        public static void glGetBufferSubDataARB(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data) => glGetBufferSubDataARBPtr?.Invoke(target, offset, size, data);
        private delegate void glGetBufferSubDataARBDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffsetARB*/  offset, IntPtr /*BufferSizeARB*/  size, IntPtr  data);
        private static glGetBufferSubDataARBDel glGetBufferSubDataARBPtr;
        
        // glGetClipPlane
        public static void glGetClipPlane(uint /*ClipPlaneName*/  plane, double[]  equation) => glGetClipPlanePtr?.Invoke(plane, equation);
        private delegate void glGetClipPlaneDel(uint /*ClipPlaneName*/  plane, double[]  equation);
        private static glGetClipPlaneDel glGetClipPlanePtr;
        
        // glGetClipPlanef
        public static void glGetClipPlanef(uint /*ClipPlaneName*/  plane, float[]  equation) => glGetClipPlanefPtr?.Invoke(plane, equation);
        private delegate void glGetClipPlanefDel(uint /*ClipPlaneName*/  plane, float[]  equation);
        private static glGetClipPlanefDel glGetClipPlanefPtr;
        
        // glGetClipPlanefOES
        public static void glGetClipPlanefOES(uint /*ClipPlaneName*/  plane, float[]  equation) => glGetClipPlanefOESPtr?.Invoke(plane, equation);
        private delegate void glGetClipPlanefOESDel(uint /*ClipPlaneName*/  plane, float[]  equation);
        private static glGetClipPlanefOESDel glGetClipPlanefOESPtr;
        
        // glGetClipPlanex
        public static void glGetClipPlanex(uint /*ClipPlaneName*/  plane, int[]  equation) => glGetClipPlanexPtr?.Invoke(plane, equation);
        private delegate void glGetClipPlanexDel(uint /*ClipPlaneName*/  plane, int[]  equation);
        private static glGetClipPlanexDel glGetClipPlanexPtr;
        
        // glGetClipPlanexOES
        public static void glGetClipPlanexOES(uint /*ClipPlaneName*/  plane, int[]  equation) => glGetClipPlanexOESPtr?.Invoke(plane, equation);
        private delegate void glGetClipPlanexOESDel(uint /*ClipPlaneName*/  plane, int[]  equation);
        private static glGetClipPlanexOESDel glGetClipPlanexOESPtr;
        
        // glGetColorTable
        public static void glGetColorTable(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => glGetColorTablePtr?.Invoke(target, format, type, table);
        private delegate void glGetColorTableDel(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table);
        private static glGetColorTableDel glGetColorTablePtr;
        
        // glGetColorTableEXT
        public static void glGetColorTableEXT(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data) => glGetColorTableEXTPtr?.Invoke(target, format, type, data);
        private delegate void glGetColorTableEXTDel(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  data);
        private static glGetColorTableEXTDel glGetColorTableEXTPtr;
        
        // glGetColorTableParameterfv
        public static void glGetColorTableParameterfv(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => glGetColorTableParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterfvDel(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters);
        private static glGetColorTableParameterfvDel glGetColorTableParameterfvPtr;
        
        // glGetColorTableParameterfvEXT
        public static void glGetColorTableParameterfvEXT(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => glGetColorTableParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterfvEXTDel(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters);
        private static glGetColorTableParameterfvEXTDel glGetColorTableParameterfvEXTPtr;
        
        // glGetColorTableParameterfvSGI
        public static void glGetColorTableParameterfvSGI(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters) => glGetColorTableParameterfvSGIPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterfvSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, float[]  parameters);
        private static glGetColorTableParameterfvSGIDel glGetColorTableParameterfvSGIPtr;
        
        // glGetColorTableParameteriv
        public static void glGetColorTableParameteriv(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => glGetColorTableParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterivDel(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters);
        private static glGetColorTableParameterivDel glGetColorTableParameterivPtr;
        
        // glGetColorTableParameterivEXT
        public static void glGetColorTableParameterivEXT(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => glGetColorTableParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterivEXTDel(uint /*ColorTableTarget*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters);
        private static glGetColorTableParameterivEXTDel glGetColorTableParameterivEXTPtr;
        
        // glGetColorTableParameterivSGI
        public static void glGetColorTableParameterivSGI(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters) => glGetColorTableParameterivSGIPtr?.Invoke(target, pname, parameters);
        private delegate void glGetColorTableParameterivSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*GetColorTableParameterPNameSGI*/  pname, int[]  parameters);
        private static glGetColorTableParameterivSGIDel glGetColorTableParameterivSGIPtr;
        
        // glGetColorTableSGI
        public static void glGetColorTableSGI(uint /*ColorTableTargetSGI*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table) => glGetColorTableSGIPtr?.Invoke(target, format, type, table);
        private delegate void glGetColorTableSGIDel(uint /*ColorTableTargetSGI*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  table);
        private static glGetColorTableSGIDel glGetColorTableSGIPtr;
        
        // glGetCombinerInputParameterfvNV
        public static void glGetCombinerInputParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters) => glGetCombinerInputParameterfvNVPtr?.Invoke(stage, portion, variable, pname, parameters);
        private delegate void glGetCombinerInputParameterfvNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters);
        private static glGetCombinerInputParameterfvNVDel glGetCombinerInputParameterfvNVPtr;
        
        // glGetCombinerInputParameterivNV
        public static void glGetCombinerInputParameterivNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters) => glGetCombinerInputParameterivNVPtr?.Invoke(stage, portion, variable, pname, parameters);
        private delegate void glGetCombinerInputParameterivNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters);
        private static glGetCombinerInputParameterivNVDel glGetCombinerInputParameterivNVPtr;
        
        // glGetCombinerOutputParameterfvNV
        public static void glGetCombinerOutputParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, float[]  parameters) => glGetCombinerOutputParameterfvNVPtr?.Invoke(stage, portion, pname, parameters);
        private delegate void glGetCombinerOutputParameterfvNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, float[]  parameters);
        private static glGetCombinerOutputParameterfvNVDel glGetCombinerOutputParameterfvNVPtr;
        
        // glGetCombinerOutputParameterivNV
        public static void glGetCombinerOutputParameterivNV(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, int[]  parameters) => glGetCombinerOutputParameterivNVPtr?.Invoke(stage, portion, pname, parameters);
        private delegate void glGetCombinerOutputParameterivNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerPortionNV*/  portion, uint /*CombinerParameterNV*/  pname, int[]  parameters);
        private static glGetCombinerOutputParameterivNVDel glGetCombinerOutputParameterivNVPtr;
        
        // glGetCombinerStageParameterfvNV
        public static void glGetCombinerStageParameterfvNV(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[]  parameters) => glGetCombinerStageParameterfvNVPtr?.Invoke(stage, pname, parameters);
        private delegate void glGetCombinerStageParameterfvNVDel(uint /*CombinerStageNV*/  stage, uint /*CombinerParameterNV*/  pname, float[]  parameters);
        private static glGetCombinerStageParameterfvNVDel glGetCombinerStageParameterfvNVPtr;
        
        // glGetCommandHeaderNV
        public static uint glGetCommandHeaderNV(uint  tokenID, uint  size) => glGetCommandHeaderNVPtr?.Invoke(tokenID, size) ?? default;
        private delegate uint glGetCommandHeaderNVDel(uint  tokenID, uint  size);
        private static glGetCommandHeaderNVDel glGetCommandHeaderNVPtr;
        
        // glGetCompressedMultiTexImageEXT
        public static void glGetCompressedMultiTexImageEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img) => glGetCompressedMultiTexImageEXTPtr?.Invoke(texunit, target, lod, img);
        private delegate void glGetCompressedMultiTexImageEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img);
        private static glGetCompressedMultiTexImageEXTDel glGetCompressedMultiTexImageEXTPtr;
        
        // glGetCompressedTexImage
        public static void glGetCompressedTexImage(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img) => glGetCompressedTexImagePtr?.Invoke(target, level, img);
        private delegate void glGetCompressedTexImageDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img);
        private static glGetCompressedTexImageDel glGetCompressedTexImagePtr;
        
        // glGetCompressedTexImageARB
        public static void glGetCompressedTexImageARB(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img) => glGetCompressedTexImageARBPtr?.Invoke(target, level, img);
        private delegate void glGetCompressedTexImageARBDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, IntPtr /*CompressedTextureARB*/  img);
        private static glGetCompressedTexImageARBDel glGetCompressedTexImageARBPtr;
        
        // glGetCompressedTextureImage
        public static void glGetCompressedTextureImage(uint  texture, int  level, uint  bufSize, IntPtr  pixels) => glGetCompressedTextureImagePtr?.Invoke(texture, level, bufSize, pixels);
        private delegate void glGetCompressedTextureImageDel(uint  texture, int  level, uint  bufSize, IntPtr  pixels);
        private static glGetCompressedTextureImageDel glGetCompressedTextureImagePtr;
        
        // glGetCompressedTextureImageEXT
        public static void glGetCompressedTextureImageEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img) => glGetCompressedTextureImageEXTPtr?.Invoke(texture, target, lod, img);
        private delegate void glGetCompressedTextureImageEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  lod, IntPtr  img);
        private static glGetCompressedTextureImageEXTDel glGetCompressedTextureImageEXTPtr;
        
        // glGetCompressedTextureSubImage
        public static void glGetCompressedTextureSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint  bufSize, IntPtr  pixels) => glGetCompressedTextureSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        private delegate void glGetCompressedTextureSubImageDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint  bufSize, IntPtr  pixels);
        private static glGetCompressedTextureSubImageDel glGetCompressedTextureSubImagePtr;
        
        // glGetConvolutionFilter
        public static void glGetConvolutionFilter(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glGetConvolutionFilterPtr?.Invoke(target, format, type, image);
        private delegate void glGetConvolutionFilterDel(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glGetConvolutionFilterDel glGetConvolutionFilterPtr;
        
        // glGetConvolutionFilterEXT
        public static void glGetConvolutionFilterEXT(uint /*ConvolutionTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image) => glGetConvolutionFilterEXTPtr?.Invoke(target, format, type, image);
        private delegate void glGetConvolutionFilterEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  image);
        private static glGetConvolutionFilterEXTDel glGetConvolutionFilterEXTPtr;
        
        // glGetConvolutionParameterfv
        public static void glGetConvolutionParameterfv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters) => glGetConvolutionParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetConvolutionParameterfvDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters);
        private static glGetConvolutionParameterfvDel glGetConvolutionParameterfvPtr;
        
        // glGetConvolutionParameterfvEXT
        public static void glGetConvolutionParameterfvEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters) => glGetConvolutionParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetConvolutionParameterfvEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, float[]  parameters);
        private static glGetConvolutionParameterfvEXTDel glGetConvolutionParameterfvEXTPtr;
        
        // glGetConvolutionParameteriv
        public static void glGetConvolutionParameteriv(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => glGetConvolutionParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetConvolutionParameterivDel(uint /*ConvolutionTarget*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters);
        private static glGetConvolutionParameterivDel glGetConvolutionParameterivPtr;
        
        // glGetConvolutionParameterivEXT
        public static void glGetConvolutionParameterivEXT(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters) => glGetConvolutionParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetConvolutionParameterivEXTDel(uint /*ConvolutionTargetEXT*/  target, uint /*ConvolutionParameterEXT*/  pname, int[]  parameters);
        private static glGetConvolutionParameterivEXTDel glGetConvolutionParameterivEXTPtr;
        
        // glGetConvolutionParameterxvOES
        public static void glGetConvolutionParameterxvOES(uint  target, uint  pname, int[]  parameters) => glGetConvolutionParameterxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetConvolutionParameterxvOESDel(uint  target, uint  pname, int[]  parameters);
        private static glGetConvolutionParameterxvOESDel glGetConvolutionParameterxvOESPtr;
        
        // glGetCoverageModulationTableNV
        public static void glGetCoverageModulationTableNV(uint  bufSize, float[]  v) => glGetCoverageModulationTableNVPtr?.Invoke(bufSize, v);
        private delegate void glGetCoverageModulationTableNVDel(uint  bufSize, float[]  v);
        private static glGetCoverageModulationTableNVDel glGetCoverageModulationTableNVPtr;
        
        // glGetDebugMessageLog
        public static uint glGetDebugMessageLog(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => glGetDebugMessageLogPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        private delegate uint glGetDebugMessageLogDel(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog);
        private static glGetDebugMessageLogDel glGetDebugMessageLogPtr;
        
        // glGetDebugMessageLogAMD
        public static uint glGetDebugMessageLogAMD(uint  count, uint  bufSize, uint[]  categories, uint[] /*DebugSeverity*/  severities, uint[]  ids, uint[]  lengths, string  message) => glGetDebugMessageLogAMDPtr?.Invoke(count, bufSize, categories, severities, ids, lengths, message) ?? default;
        private delegate uint glGetDebugMessageLogAMDDel(uint  count, uint  bufSize, uint[]  categories, uint[] /*DebugSeverity*/  severities, uint[]  ids, uint[]  lengths, string  message);
        private static glGetDebugMessageLogAMDDel glGetDebugMessageLogAMDPtr;
        
        // glGetDebugMessageLogARB
        public static uint glGetDebugMessageLogARB(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => glGetDebugMessageLogARBPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        private delegate uint glGetDebugMessageLogARBDel(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog);
        private static glGetDebugMessageLogARBDel glGetDebugMessageLogARBPtr;
        
        // glGetDebugMessageLogKHR
        public static uint glGetDebugMessageLogKHR(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog) => glGetDebugMessageLogKHRPtr?.Invoke(count, bufSize, sources, types, ids, severities, lengths, messageLog) ?? default;
        private delegate uint glGetDebugMessageLogKHRDel(uint  count, uint  bufSize, uint[] /*DebugSource*/  sources, uint[] /*DebugType*/  types, uint[]  ids, uint[] /*DebugSeverity*/  severities, uint[]  lengths, string  messageLog);
        private static glGetDebugMessageLogKHRDel glGetDebugMessageLogKHRPtr;
        
        // glGetDetailTexFuncSGIS
        public static void glGetDetailTexFuncSGIS(uint /*TextureTarget*/  target, float[]  points) => glGetDetailTexFuncSGISPtr?.Invoke(target, points);
        private delegate void glGetDetailTexFuncSGISDel(uint /*TextureTarget*/  target, float[]  points);
        private static glGetDetailTexFuncSGISDel glGetDetailTexFuncSGISPtr;
        
        // glGetDoubleIndexedvEXT
        public static void glGetDoubleIndexedvEXT(uint  target, uint  index, double[]  data) => glGetDoubleIndexedvEXTPtr?.Invoke(target, index, data);
        private delegate void glGetDoubleIndexedvEXTDel(uint  target, uint  index, double[]  data);
        private static glGetDoubleIndexedvEXTDel glGetDoubleIndexedvEXTPtr;
        
        // glGetDoublei_v
        public static void glGetDoublei_v(uint  target, uint  index, double[]  data) => glGetDoublei_vPtr?.Invoke(target, index, data);
        private delegate void glGetDoublei_vDel(uint  target, uint  index, double[]  data);
        private static glGetDoublei_vDel glGetDoublei_vPtr;
        
        // glGetDoublei_vEXT
        public static void glGetDoublei_vEXT(uint  pname, uint  index, double[]  parameters) => glGetDoublei_vEXTPtr?.Invoke(pname, index, parameters);
        private delegate void glGetDoublei_vEXTDel(uint  pname, uint  index, double[]  parameters);
        private static glGetDoublei_vEXTDel glGetDoublei_vEXTPtr;
        
        // glGetDoublev
        public static void glGetDoublev(uint /*GetPName*/  pname, double[]  data) => glGetDoublevPtr?.Invoke(pname, data);
        private delegate void glGetDoublevDel(uint /*GetPName*/  pname, double[]  data);
        private static glGetDoublevDel glGetDoublevPtr;
        
        // glGetDriverControlStringQCOM
        public static void glGetDriverControlStringQCOM(uint  driverControl, uint  bufSize, uint[]  length, string  driverControlString) => glGetDriverControlStringQCOMPtr?.Invoke(driverControl, bufSize, length, driverControlString);
        private delegate void glGetDriverControlStringQCOMDel(uint  driverControl, uint  bufSize, uint[]  length, string  driverControlString);
        private static glGetDriverControlStringQCOMDel glGetDriverControlStringQCOMPtr;
        
        // glGetDriverControlsQCOM
        public static void glGetDriverControlsQCOM(int[]  num, uint  size, uint[]  driverControls) => glGetDriverControlsQCOMPtr?.Invoke(num, size, driverControls);
        private delegate void glGetDriverControlsQCOMDel(int[]  num, uint  size, uint[]  driverControls);
        private static glGetDriverControlsQCOMDel glGetDriverControlsQCOMPtr;
        
        // glGetError
        public static uint /*ErrorCode*/ glGetError() => glGetErrorPtr?.Invoke() ?? default;
        private delegate uint /*ErrorCode*/ glGetErrorDel();
        private static glGetErrorDel glGetErrorPtr;
        
        // glGetFenceivNV
        public static void glGetFenceivNV(uint /*FenceNV*/  fence, uint /*FenceParameterNameNV*/  pname, int[]  parameters) => glGetFenceivNVPtr?.Invoke(fence, pname, parameters);
        private delegate void glGetFenceivNVDel(uint /*FenceNV*/  fence, uint /*FenceParameterNameNV*/  pname, int[]  parameters);
        private static glGetFenceivNVDel glGetFenceivNVPtr;
        
        // glGetFinalCombinerInputParameterfvNV
        public static void glGetFinalCombinerInputParameterfvNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters) => glGetFinalCombinerInputParameterfvNVPtr?.Invoke(variable, pname, parameters);
        private delegate void glGetFinalCombinerInputParameterfvNVDel(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, float[]  parameters);
        private static glGetFinalCombinerInputParameterfvNVDel glGetFinalCombinerInputParameterfvNVPtr;
        
        // glGetFinalCombinerInputParameterivNV
        public static void glGetFinalCombinerInputParameterivNV(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters) => glGetFinalCombinerInputParameterivNVPtr?.Invoke(variable, pname, parameters);
        private delegate void glGetFinalCombinerInputParameterivNVDel(uint /*CombinerVariableNV*/  variable, uint /*CombinerParameterNV*/  pname, int[]  parameters);
        private static glGetFinalCombinerInputParameterivNVDel glGetFinalCombinerInputParameterivNVPtr;
        
        // glGetFirstPerfQueryIdINTEL
        public static void glGetFirstPerfQueryIdINTEL(uint[]  queryId) => glGetFirstPerfQueryIdINTELPtr?.Invoke(queryId);
        private delegate void glGetFirstPerfQueryIdINTELDel(uint[]  queryId);
        private static glGetFirstPerfQueryIdINTELDel glGetFirstPerfQueryIdINTELPtr;
        
        // glGetFixedv
        public static void glGetFixedv(uint /*GetPName*/  pname, int[]  parameters) => glGetFixedvPtr?.Invoke(pname, parameters);
        private delegate void glGetFixedvDel(uint /*GetPName*/  pname, int[]  parameters);
        private static glGetFixedvDel glGetFixedvPtr;
        
        // glGetFixedvOES
        public static void glGetFixedvOES(uint /*GetPName*/  pname, int[]  parameters) => glGetFixedvOESPtr?.Invoke(pname, parameters);
        private delegate void glGetFixedvOESDel(uint /*GetPName*/  pname, int[]  parameters);
        private static glGetFixedvOESDel glGetFixedvOESPtr;
        
        // glGetFloatIndexedvEXT
        public static void glGetFloatIndexedvEXT(uint  target, uint  index, float[]  data) => glGetFloatIndexedvEXTPtr?.Invoke(target, index, data);
        private delegate void glGetFloatIndexedvEXTDel(uint  target, uint  index, float[]  data);
        private static glGetFloatIndexedvEXTDel glGetFloatIndexedvEXTPtr;
        
        // glGetFloati_v
        public static void glGetFloati_v(uint  target, uint  index, float[]  data) => glGetFloati_vPtr?.Invoke(target, index, data);
        private delegate void glGetFloati_vDel(uint  target, uint  index, float[]  data);
        private static glGetFloati_vDel glGetFloati_vPtr;
        
        // glGetFloati_vEXT
        public static void glGetFloati_vEXT(uint  pname, uint  index, float[]  parameters) => glGetFloati_vEXTPtr?.Invoke(pname, index, parameters);
        private delegate void glGetFloati_vEXTDel(uint  pname, uint  index, float[]  parameters);
        private static glGetFloati_vEXTDel glGetFloati_vEXTPtr;
        
        // glGetFloati_vNV
        public static void glGetFloati_vNV(uint  target, uint  index, float[]  data) => glGetFloati_vNVPtr?.Invoke(target, index, data);
        private delegate void glGetFloati_vNVDel(uint  target, uint  index, float[]  data);
        private static glGetFloati_vNVDel glGetFloati_vNVPtr;
        
        // glGetFloati_vOES
        public static void glGetFloati_vOES(uint  target, uint  index, float[]  data) => glGetFloati_vOESPtr?.Invoke(target, index, data);
        private delegate void glGetFloati_vOESDel(uint  target, uint  index, float[]  data);
        private static glGetFloati_vOESDel glGetFloati_vOESPtr;
        
        // glGetFloatv
        public static void glGetFloatv(uint /*GetPName*/  pname, float[]  data) => glGetFloatvPtr?.Invoke(pname, data);
        private delegate void glGetFloatvDel(uint /*GetPName*/  pname, float[]  data);
        private static glGetFloatvDel glGetFloatvPtr;
        
        // glGetFogFuncSGIS
        public static void glGetFogFuncSGIS(float[]  points) => glGetFogFuncSGISPtr?.Invoke(points);
        private delegate void glGetFogFuncSGISDel(float[]  points);
        private static glGetFogFuncSGISDel glGetFogFuncSGISPtr;
        
        // glGetFragDataIndex
        public static int glGetFragDataIndex(uint  program, string  name) => glGetFragDataIndexPtr?.Invoke(program, name) ?? default;
        private delegate int glGetFragDataIndexDel(uint  program, string  name);
        private static glGetFragDataIndexDel glGetFragDataIndexPtr;
        
        // glGetFragDataIndexEXT
        public static int glGetFragDataIndexEXT(uint  program, string  name) => glGetFragDataIndexEXTPtr?.Invoke(program, name) ?? default;
        private delegate int glGetFragDataIndexEXTDel(uint  program, string  name);
        private static glGetFragDataIndexEXTDel glGetFragDataIndexEXTPtr;
        
        // glGetFragDataLocation
        public static int glGetFragDataLocation(uint  program, string  name) => glGetFragDataLocationPtr?.Invoke(program, name) ?? default;
        private delegate int glGetFragDataLocationDel(uint  program, string  name);
        private static glGetFragDataLocationDel glGetFragDataLocationPtr;
        
        // glGetFragDataLocationEXT
        public static int glGetFragDataLocationEXT(uint  program, string  name) => glGetFragDataLocationEXTPtr?.Invoke(program, name) ?? default;
        private delegate int glGetFragDataLocationEXTDel(uint  program, string  name);
        private static glGetFragDataLocationEXTDel glGetFragDataLocationEXTPtr;
        
        // glGetFragmentLightfvSGIX
        public static void glGetFragmentLightfvSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[]  parameters) => glGetFragmentLightfvSGIXPtr?.Invoke(light, pname, parameters);
        private delegate void glGetFragmentLightfvSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, float[]  parameters);
        private static glGetFragmentLightfvSGIXDel glGetFragmentLightfvSGIXPtr;
        
        // glGetFragmentLightivSGIX
        public static void glGetFragmentLightivSGIX(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[]  parameters) => glGetFragmentLightivSGIXPtr?.Invoke(light, pname, parameters);
        private delegate void glGetFragmentLightivSGIXDel(uint /*FragmentLightNameSGIX*/  light, uint /*FragmentLightParameterSGIX*/  pname, int[]  parameters);
        private static glGetFragmentLightivSGIXDel glGetFragmentLightivSGIXPtr;
        
        // glGetFragmentMaterialfvSGIX
        public static void glGetFragmentMaterialfvSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters) => glGetFragmentMaterialfvSGIXPtr?.Invoke(face, pname, parameters);
        private delegate void glGetFragmentMaterialfvSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters);
        private static glGetFragmentMaterialfvSGIXDel glGetFragmentMaterialfvSGIXPtr;
        
        // glGetFragmentMaterialivSGIX
        public static void glGetFragmentMaterialivSGIX(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => glGetFragmentMaterialivSGIXPtr?.Invoke(face, pname, parameters);
        private delegate void glGetFragmentMaterialivSGIXDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters);
        private static glGetFragmentMaterialivSGIXDel glGetFragmentMaterialivSGIXPtr;
        
        // glGetFramebufferAttachmentParameteriv
        public static void glGetFramebufferAttachmentParameteriv(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetFramebufferAttachmentParameterivPtr?.Invoke(target, attachment, pname, parameters);
        private delegate void glGetFramebufferAttachmentParameterivDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetFramebufferAttachmentParameterivDel glGetFramebufferAttachmentParameterivPtr;
        
        // glGetFramebufferAttachmentParameterivEXT
        public static void glGetFramebufferAttachmentParameterivEXT(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetFramebufferAttachmentParameterivEXTPtr?.Invoke(target, attachment, pname, parameters);
        private delegate void glGetFramebufferAttachmentParameterivEXTDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetFramebufferAttachmentParameterivEXTDel glGetFramebufferAttachmentParameterivEXTPtr;
        
        // glGetFramebufferAttachmentParameterivOES
        public static void glGetFramebufferAttachmentParameterivOES(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetFramebufferAttachmentParameterivOESPtr?.Invoke(target, attachment, pname, parameters);
        private delegate void glGetFramebufferAttachmentParameterivOESDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetFramebufferAttachmentParameterivOESDel glGetFramebufferAttachmentParameterivOESPtr;
        
        // glGetFramebufferParameterfvAMD
        public static void glGetFramebufferParameterfvAMD(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values) => glGetFramebufferParameterfvAMDPtr?.Invoke(target, pname, numsamples, pixelindex, size, values);
        private delegate void glGetFramebufferParameterfvAMDDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values);
        private static glGetFramebufferParameterfvAMDDel glGetFramebufferParameterfvAMDPtr;
        
        // glGetFramebufferParameteriv
        public static void glGetFramebufferParameteriv(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetFramebufferParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetFramebufferParameterivDel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetFramebufferParameterivDel glGetFramebufferParameterivPtr;
        
        // glGetFramebufferParameterivEXT
        public static void glGetFramebufferParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters) => glGetFramebufferParameterivEXTPtr?.Invoke(framebuffer, pname, parameters);
        private delegate void glGetFramebufferParameterivEXTDel(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters);
        private static glGetFramebufferParameterivEXTDel glGetFramebufferParameterivEXTPtr;
        
        // glGetFramebufferPixelLocalStorageSizeEXT
        public static uint glGetFramebufferPixelLocalStorageSizeEXT(uint /*FramebufferTarget*/  target) => glGetFramebufferPixelLocalStorageSizeEXTPtr?.Invoke(target) ?? default;
        private delegate uint glGetFramebufferPixelLocalStorageSizeEXTDel(uint /*FramebufferTarget*/  target);
        private static glGetFramebufferPixelLocalStorageSizeEXTDel glGetFramebufferPixelLocalStorageSizeEXTPtr;
        
        // glGetGraphicsResetStatus
        public static uint /*GraphicsResetStatus*/ glGetGraphicsResetStatus() => glGetGraphicsResetStatusPtr?.Invoke() ?? default;
        private delegate uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusDel();
        private static glGetGraphicsResetStatusDel glGetGraphicsResetStatusPtr;
        
        // glGetGraphicsResetStatusARB
        public static uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusARB() => glGetGraphicsResetStatusARBPtr?.Invoke() ?? default;
        private delegate uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusARBDel();
        private static glGetGraphicsResetStatusARBDel glGetGraphicsResetStatusARBPtr;
        
        // glGetGraphicsResetStatusEXT
        public static uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusEXT() => glGetGraphicsResetStatusEXTPtr?.Invoke() ?? default;
        private delegate uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusEXTDel();
        private static glGetGraphicsResetStatusEXTDel glGetGraphicsResetStatusEXTPtr;
        
        // glGetGraphicsResetStatusKHR
        public static uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusKHR() => glGetGraphicsResetStatusKHRPtr?.Invoke() ?? default;
        private delegate uint /*GraphicsResetStatus*/ glGetGraphicsResetStatusKHRDel();
        private static glGetGraphicsResetStatusKHRDel glGetGraphicsResetStatusKHRPtr;
        
        // glGetHandleARB
        public static IntPtr /*handleARB*/ glGetHandleARB(uint  pname) => glGetHandleARBPtr?.Invoke(pname) ?? default;
        private delegate IntPtr /*handleARB*/ glGetHandleARBDel(uint  pname);
        private static glGetHandleARBDel glGetHandleARBPtr;
        
        // glGetHistogram
        public static void glGetHistogram(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => glGetHistogramPtr?.Invoke(target, reset, format, type, values);
        private delegate void glGetHistogramDel(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values);
        private static glGetHistogramDel glGetHistogramPtr;
        
        // glGetHistogramEXT
        public static void glGetHistogramEXT(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => glGetHistogramEXTPtr?.Invoke(target, reset, format, type, values);
        private delegate void glGetHistogramEXTDel(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values);
        private static glGetHistogramEXTDel glGetHistogramEXTPtr;
        
        // glGetHistogramParameterfv
        public static void glGetHistogramParameterfv(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters) => glGetHistogramParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetHistogramParameterfvDel(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters);
        private static glGetHistogramParameterfvDel glGetHistogramParameterfvPtr;
        
        // glGetHistogramParameterfvEXT
        public static void glGetHistogramParameterfvEXT(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters) => glGetHistogramParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetHistogramParameterfvEXTDel(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, float[]  parameters);
        private static glGetHistogramParameterfvEXTDel glGetHistogramParameterfvEXTPtr;
        
        // glGetHistogramParameteriv
        public static void glGetHistogramParameteriv(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => glGetHistogramParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetHistogramParameterivDel(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters);
        private static glGetHistogramParameterivDel glGetHistogramParameterivPtr;
        
        // glGetHistogramParameterivEXT
        public static void glGetHistogramParameterivEXT(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => glGetHistogramParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetHistogramParameterivEXTDel(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters);
        private static glGetHistogramParameterivEXTDel glGetHistogramParameterivEXTPtr;
        
        // glGetHistogramParameterxvOES
        public static void glGetHistogramParameterxvOES(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters) => glGetHistogramParameterxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetHistogramParameterxvOESDel(uint /*HistogramTargetEXT*/  target, uint /*GetHistogramParameterPNameEXT*/  pname, int[]  parameters);
        private static glGetHistogramParameterxvOESDel glGetHistogramParameterxvOESPtr;
        
        // glGetImageHandleARB
        public static ulong glGetImageHandleARB(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format) => glGetImageHandleARBPtr?.Invoke(texture, level, layered, layer, format) ?? default;
        private delegate ulong glGetImageHandleARBDel(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format);
        private static glGetImageHandleARBDel glGetImageHandleARBPtr;
        
        // glGetImageHandleNV
        public static ulong glGetImageHandleNV(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format) => glGetImageHandleNVPtr?.Invoke(texture, level, layered, layer, format) ?? default;
        private delegate ulong glGetImageHandleNVDel(uint  texture, int  level, bool /*Boolean*/  layered, int  layer, uint /*PixelFormat*/  format);
        private static glGetImageHandleNVDel glGetImageHandleNVPtr;
        
        // glGetImageTransformParameterfvHP
        public static void glGetImageTransformParameterfvHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters) => glGetImageTransformParameterfvHPPtr?.Invoke(target, pname, parameters);
        private delegate void glGetImageTransformParameterfvHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters);
        private static glGetImageTransformParameterfvHPDel glGetImageTransformParameterfvHPPtr;
        
        // glGetImageTransformParameterivHP
        public static void glGetImageTransformParameterivHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters) => glGetImageTransformParameterivHPPtr?.Invoke(target, pname, parameters);
        private delegate void glGetImageTransformParameterivHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters);
        private static glGetImageTransformParameterivHPDel glGetImageTransformParameterivHPPtr;
        
        // glGetInfoLogARB
        public static void glGetInfoLogARB(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  infoLog) => glGetInfoLogARBPtr?.Invoke(obj, maxLength, length, infoLog);
        private delegate void glGetInfoLogARBDel(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  infoLog);
        private static glGetInfoLogARBDel glGetInfoLogARBPtr;
        
        // glGetInstrumentsSGIX
        public static int glGetInstrumentsSGIX() => glGetInstrumentsSGIXPtr?.Invoke() ?? default;
        private delegate int glGetInstrumentsSGIXDel();
        private static glGetInstrumentsSGIXDel glGetInstrumentsSGIXPtr;
        
        // glGetInteger64i_v
        public static void glGetInteger64i_v(uint  target, uint  index, long[]  data) => glGetInteger64i_vPtr?.Invoke(target, index, data);
        private delegate void glGetInteger64i_vDel(uint  target, uint  index, long[]  data);
        private static glGetInteger64i_vDel glGetInteger64i_vPtr;
        
        // glGetInteger64v
        public static void glGetInteger64v(uint /*GetPName*/  pname, long[]  data) => glGetInteger64vPtr?.Invoke(pname, data);
        private delegate void glGetInteger64vDel(uint /*GetPName*/  pname, long[]  data);
        private static glGetInteger64vDel glGetInteger64vPtr;
        
        // glGetInteger64vAPPLE
        public static void glGetInteger64vAPPLE(uint /*GetPName*/  pname, long[]  parameters) => glGetInteger64vAPPLEPtr?.Invoke(pname, parameters);
        private delegate void glGetInteger64vAPPLEDel(uint /*GetPName*/  pname, long[]  parameters);
        private static glGetInteger64vAPPLEDel glGetInteger64vAPPLEPtr;
        
        // glGetInteger64vEXT
        public static void glGetInteger64vEXT(uint /*GetPName*/  pname, long[]  data) => glGetInteger64vEXTPtr?.Invoke(pname, data);
        private delegate void glGetInteger64vEXTDel(uint /*GetPName*/  pname, long[]  data);
        private static glGetInteger64vEXTDel glGetInteger64vEXTPtr;
        
        // glGetIntegerIndexedvEXT
        public static void glGetIntegerIndexedvEXT(uint  target, uint  index, int[]  data) => glGetIntegerIndexedvEXTPtr?.Invoke(target, index, data);
        private delegate void glGetIntegerIndexedvEXTDel(uint  target, uint  index, int[]  data);
        private static glGetIntegerIndexedvEXTDel glGetIntegerIndexedvEXTPtr;
        
        // glGetIntegeri_v
        public static void glGetIntegeri_v(uint  target, uint  index, int[]  data) => glGetIntegeri_vPtr?.Invoke(target, index, data);
        private delegate void glGetIntegeri_vDel(uint  target, uint  index, int[]  data);
        private static glGetIntegeri_vDel glGetIntegeri_vPtr;
        
        // glGetIntegeri_vEXT
        public static void glGetIntegeri_vEXT(uint  target, uint  index, int[]  data) => glGetIntegeri_vEXTPtr?.Invoke(target, index, data);
        private delegate void glGetIntegeri_vEXTDel(uint  target, uint  index, int[]  data);
        private static glGetIntegeri_vEXTDel glGetIntegeri_vEXTPtr;
        
        // glGetIntegerui64i_vNV
        public static void glGetIntegerui64i_vNV(uint  value, uint  index, ulong[]  result) => glGetIntegerui64i_vNVPtr?.Invoke(value, index, result);
        private delegate void glGetIntegerui64i_vNVDel(uint  value, uint  index, ulong[]  result);
        private static glGetIntegerui64i_vNVDel glGetIntegerui64i_vNVPtr;
        
        // glGetIntegerui64vNV
        public static void glGetIntegerui64vNV(uint  value, ulong[]  result) => glGetIntegerui64vNVPtr?.Invoke(value, result);
        private delegate void glGetIntegerui64vNVDel(uint  value, ulong[]  result);
        private static glGetIntegerui64vNVDel glGetIntegerui64vNVPtr;
        
        // glGetIntegerv
        public static void glGetIntegerv(uint /*GetPName*/  pname, int[]  data) => glGetIntegervPtr?.Invoke(pname, data);
        private delegate void glGetIntegervDel(uint /*GetPName*/  pname, int[]  data);
        private static glGetIntegervDel glGetIntegervPtr;
        
        // glGetInternalformatSampleivNV
        public static void glGetInternalformatSampleivNV(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  samples, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters) => glGetInternalformatSampleivNVPtr?.Invoke(target, internalformat, samples, pname, count, parameters);
        private delegate void glGetInternalformatSampleivNVDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  samples, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters);
        private static glGetInternalformatSampleivNVDel glGetInternalformatSampleivNVPtr;
        
        // glGetInternalformati64v
        public static void glGetInternalformati64v(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, long[]  parameters) => glGetInternalformati64vPtr?.Invoke(target, internalformat, pname, count, parameters);
        private delegate void glGetInternalformati64vDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, long[]  parameters);
        private static glGetInternalformati64vDel glGetInternalformati64vPtr;
        
        // glGetInternalformativ
        public static void glGetInternalformativ(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters) => glGetInternalformativPtr?.Invoke(target, internalformat, pname, count, parameters);
        private delegate void glGetInternalformativDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint /*InternalFormatPName*/  pname, uint  count, int[]  parameters);
        private static glGetInternalformativDel glGetInternalformativPtr;
        
        // glGetInvariantBooleanvEXT
        public static void glGetInvariantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => glGetInvariantBooleanvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetInvariantBooleanvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data);
        private static glGetInvariantBooleanvEXTDel glGetInvariantBooleanvEXTPtr;
        
        // glGetInvariantFloatvEXT
        public static void glGetInvariantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => glGetInvariantFloatvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetInvariantFloatvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data);
        private static glGetInvariantFloatvEXTDel glGetInvariantFloatvEXTPtr;
        
        // glGetInvariantIntegervEXT
        public static void glGetInvariantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => glGetInvariantIntegervEXTPtr?.Invoke(id, value, data);
        private delegate void glGetInvariantIntegervEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data);
        private static glGetInvariantIntegervEXTDel glGetInvariantIntegervEXTPtr;
        
        // glGetLightfv
        public static void glGetLightfv(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[]  parameters) => glGetLightfvPtr?.Invoke(light, pname, parameters);
        private delegate void glGetLightfvDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[]  parameters);
        private static glGetLightfvDel glGetLightfvPtr;
        
        // glGetLightiv
        public static void glGetLightiv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glGetLightivPtr?.Invoke(light, pname, parameters);
        private delegate void glGetLightivDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glGetLightivDel glGetLightivPtr;
        
        // glGetLightxOES
        public static void glGetLightxOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glGetLightxOESPtr?.Invoke(light, pname, parameters);
        private delegate void glGetLightxOESDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glGetLightxOESDel glGetLightxOESPtr;
        
        // glGetLightxv
        public static void glGetLightxv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glGetLightxvPtr?.Invoke(light, pname, parameters);
        private delegate void glGetLightxvDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glGetLightxvDel glGetLightxvPtr;
        
        // glGetLightxvOES
        public static void glGetLightxvOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glGetLightxvOESPtr?.Invoke(light, pname, parameters);
        private delegate void glGetLightxvOESDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glGetLightxvOESDel glGetLightxvOESPtr;
        
        // glGetListParameterfvSGIX
        public static void glGetListParameterfvSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => glGetListParameterfvSGIXPtr?.Invoke(list, pname, parameters);
        private delegate void glGetListParameterfvSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glGetListParameterfvSGIXDel glGetListParameterfvSGIXPtr;
        
        // glGetListParameterivSGIX
        public static void glGetListParameterivSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glGetListParameterivSGIXPtr?.Invoke(list, pname, parameters);
        private delegate void glGetListParameterivSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glGetListParameterivSGIXDel glGetListParameterivSGIXPtr;
        
        // glGetLocalConstantBooleanvEXT
        public static void glGetLocalConstantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => glGetLocalConstantBooleanvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetLocalConstantBooleanvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data);
        private static glGetLocalConstantBooleanvEXTDel glGetLocalConstantBooleanvEXTPtr;
        
        // glGetLocalConstantFloatvEXT
        public static void glGetLocalConstantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => glGetLocalConstantFloatvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetLocalConstantFloatvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data);
        private static glGetLocalConstantFloatvEXTDel glGetLocalConstantFloatvEXTPtr;
        
        // glGetLocalConstantIntegervEXT
        public static void glGetLocalConstantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => glGetLocalConstantIntegervEXTPtr?.Invoke(id, value, data);
        private delegate void glGetLocalConstantIntegervEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data);
        private static glGetLocalConstantIntegervEXTDel glGetLocalConstantIntegervEXTPtr;
        
        // glGetMapAttribParameterfvNV
        public static void glGetMapAttribParameterfvNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, float[]  parameters) => glGetMapAttribParameterfvNVPtr?.Invoke(target, index, pname, parameters);
        private delegate void glGetMapAttribParameterfvNVDel(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, float[]  parameters);
        private static glGetMapAttribParameterfvNVDel glGetMapAttribParameterfvNVPtr;
        
        // glGetMapAttribParameterivNV
        public static void glGetMapAttribParameterivNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, int[]  parameters) => glGetMapAttribParameterivNVPtr?.Invoke(target, index, pname, parameters);
        private delegate void glGetMapAttribParameterivNVDel(uint /*EvalTargetNV*/  target, uint  index, uint /*MapAttribParameterNV*/  pname, int[]  parameters);
        private static glGetMapAttribParameterivNVDel glGetMapAttribParameterivNVPtr;
        
        // glGetMapControlPointsNV
        public static void glGetMapControlPointsNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, bool /*Boolean*/  packed, IntPtr  points) => glGetMapControlPointsNVPtr?.Invoke(target, index, type, ustride, vstride, packed, points);
        private delegate void glGetMapControlPointsNVDel(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, bool /*Boolean*/  packed, IntPtr  points);
        private static glGetMapControlPointsNVDel glGetMapControlPointsNVPtr;
        
        // glGetMapParameterfvNV
        public static void glGetMapParameterfvNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[]  parameters) => glGetMapParameterfvNVPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMapParameterfvNVDel(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[]  parameters);
        private static glGetMapParameterfvNVDel glGetMapParameterfvNVPtr;
        
        // glGetMapParameterivNV
        public static void glGetMapParameterivNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[]  parameters) => glGetMapParameterivNVPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMapParameterivNVDel(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[]  parameters);
        private static glGetMapParameterivNVDel glGetMapParameterivNVPtr;
        
        // glGetMapdv
        public static void glGetMapdv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, double[]  v) => glGetMapdvPtr?.Invoke(target, query, v);
        private delegate void glGetMapdvDel(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, double[]  v);
        private static glGetMapdvDel glGetMapdvPtr;
        
        // glGetMapfv
        public static void glGetMapfv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, float[]  v) => glGetMapfvPtr?.Invoke(target, query, v);
        private delegate void glGetMapfvDel(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, float[]  v);
        private static glGetMapfvDel glGetMapfvPtr;
        
        // glGetMapiv
        public static void glGetMapiv(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v) => glGetMapivPtr?.Invoke(target, query, v);
        private delegate void glGetMapivDel(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v);
        private static glGetMapivDel glGetMapivPtr;
        
        // glGetMapxvOES
        public static void glGetMapxvOES(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v) => glGetMapxvOESPtr?.Invoke(target, query, v);
        private delegate void glGetMapxvOESDel(uint /*MapTarget*/  target, uint /*GetMapQuery*/  query, int[]  v);
        private static glGetMapxvOESDel glGetMapxvOESPtr;
        
        // glGetMaterialfv
        public static void glGetMaterialfv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters) => glGetMaterialfvPtr?.Invoke(face, pname, parameters);
        private delegate void glGetMaterialfvDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[]  parameters);
        private static glGetMaterialfvDel glGetMaterialfvPtr;
        
        // glGetMaterialiv
        public static void glGetMaterialiv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => glGetMaterialivPtr?.Invoke(face, pname, parameters);
        private delegate void glGetMaterialivDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters);
        private static glGetMaterialivDel glGetMaterialivPtr;
        
        // glGetMaterialxOES
        public static void glGetMaterialxOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => glGetMaterialxOESPtr?.Invoke(face, pname, param);
        private delegate void glGetMaterialxOESDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param);
        private static glGetMaterialxOESDel glGetMaterialxOESPtr;
        
        // glGetMaterialxv
        public static void glGetMaterialxv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => glGetMaterialxvPtr?.Invoke(face, pname, parameters);
        private delegate void glGetMaterialxvDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters);
        private static glGetMaterialxvDel glGetMaterialxvPtr;
        
        // glGetMaterialxvOES
        public static void glGetMaterialxvOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters) => glGetMaterialxvOESPtr?.Invoke(face, pname, parameters);
        private delegate void glGetMaterialxvOESDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  parameters);
        private static glGetMaterialxvOESDel glGetMaterialxvOESPtr;
        
        // glGetMemoryObjectDetachedResourcesuivNV
        public static void glGetMemoryObjectDetachedResourcesuivNV(uint  memory, uint  pname, int  first, uint  count, uint[]  parameters) => glGetMemoryObjectDetachedResourcesuivNVPtr?.Invoke(memory, pname, first, count, parameters);
        private delegate void glGetMemoryObjectDetachedResourcesuivNVDel(uint  memory, uint  pname, int  first, uint  count, uint[]  parameters);
        private static glGetMemoryObjectDetachedResourcesuivNVDel glGetMemoryObjectDetachedResourcesuivNVPtr;
        
        // glGetMemoryObjectParameterivEXT
        public static void glGetMemoryObjectParameterivEXT(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters) => glGetMemoryObjectParameterivEXTPtr?.Invoke(memoryObject, pname, parameters);
        private delegate void glGetMemoryObjectParameterivEXTDel(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters);
        private static glGetMemoryObjectParameterivEXTDel glGetMemoryObjectParameterivEXTPtr;
        
        // glGetMinmax
        public static void glGetMinmax(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => glGetMinmaxPtr?.Invoke(target, reset, format, type, values);
        private delegate void glGetMinmaxDel(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values);
        private static glGetMinmaxDel glGetMinmaxPtr;
        
        // glGetMinmaxEXT
        public static void glGetMinmaxEXT(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values) => glGetMinmaxEXTPtr?.Invoke(target, reset, format, type, values);
        private delegate void glGetMinmaxEXTDel(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  values);
        private static glGetMinmaxEXTDel glGetMinmaxEXTPtr;
        
        // glGetMinmaxParameterfv
        public static void glGetMinmaxParameterfv(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters) => glGetMinmaxParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMinmaxParameterfvDel(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters);
        private static glGetMinmaxParameterfvDel glGetMinmaxParameterfvPtr;
        
        // glGetMinmaxParameterfvEXT
        public static void glGetMinmaxParameterfvEXT(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters) => glGetMinmaxParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMinmaxParameterfvEXTDel(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, float[]  parameters);
        private static glGetMinmaxParameterfvEXTDel glGetMinmaxParameterfvEXTPtr;
        
        // glGetMinmaxParameteriv
        public static void glGetMinmaxParameteriv(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters) => glGetMinmaxParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMinmaxParameterivDel(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters);
        private static glGetMinmaxParameterivDel glGetMinmaxParameterivPtr;
        
        // glGetMinmaxParameterivEXT
        public static void glGetMinmaxParameterivEXT(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters) => glGetMinmaxParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetMinmaxParameterivEXTDel(uint /*MinmaxTargetEXT*/  target, uint /*GetMinmaxParameterPNameEXT*/  pname, int[]  parameters);
        private static glGetMinmaxParameterivEXTDel glGetMinmaxParameterivEXTPtr;
        
        // glGetMultiTexEnvfvEXT
        public static void glGetMultiTexEnvfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters) => glGetMultiTexEnvfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexEnvfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters);
        private static glGetMultiTexEnvfvEXTDel glGetMultiTexEnvfvEXTPtr;
        
        // glGetMultiTexEnvivEXT
        public static void glGetMultiTexEnvivEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glGetMultiTexEnvivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexEnvivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glGetMultiTexEnvivEXTDel glGetMultiTexEnvivEXTPtr;
        
        // glGetMultiTexGendvEXT
        public static void glGetMultiTexGendvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => glGetMultiTexGendvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glGetMultiTexGendvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters);
        private static glGetMultiTexGendvEXTDel glGetMultiTexGendvEXTPtr;
        
        // glGetMultiTexGenfvEXT
        public static void glGetMultiTexGenfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => glGetMultiTexGenfvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glGetMultiTexGenfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters);
        private static glGetMultiTexGenfvEXTDel glGetMultiTexGenfvEXTPtr;
        
        // glGetMultiTexGenivEXT
        public static void glGetMultiTexGenivEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glGetMultiTexGenivEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glGetMultiTexGenivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glGetMultiTexGenivEXTDel glGetMultiTexGenivEXTPtr;
        
        // glGetMultiTexImageEXT
        public static void glGetMultiTexImageEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glGetMultiTexImageEXTPtr?.Invoke(texunit, target, level, format, type, pixels);
        private delegate void glGetMultiTexImageEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glGetMultiTexImageEXTDel glGetMultiTexImageEXTPtr;
        
        // glGetMultiTexLevelParameterfvEXT
        public static void glGetMultiTexLevelParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetMultiTexLevelParameterfvEXTPtr?.Invoke(texunit, target, level, pname, parameters);
        private delegate void glGetMultiTexLevelParameterfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetMultiTexLevelParameterfvEXTDel glGetMultiTexLevelParameterfvEXTPtr;
        
        // glGetMultiTexLevelParameterivEXT
        public static void glGetMultiTexLevelParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetMultiTexLevelParameterivEXTPtr?.Invoke(texunit, target, level, pname, parameters);
        private delegate void glGetMultiTexLevelParameterivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetMultiTexLevelParameterivEXTDel glGetMultiTexLevelParameterivEXTPtr;
        
        // glGetMultiTexParameterIivEXT
        public static void glGetMultiTexParameterIivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetMultiTexParameterIivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexParameterIivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetMultiTexParameterIivEXTDel glGetMultiTexParameterIivEXTPtr;
        
        // glGetMultiTexParameterIuivEXT
        public static void glGetMultiTexParameterIuivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetMultiTexParameterIuivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexParameterIuivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetMultiTexParameterIuivEXTDel glGetMultiTexParameterIuivEXTPtr;
        
        // glGetMultiTexParameterfvEXT
        public static void glGetMultiTexParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetMultiTexParameterfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexParameterfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetMultiTexParameterfvEXTDel glGetMultiTexParameterfvEXTPtr;
        
        // glGetMultiTexParameterivEXT
        public static void glGetMultiTexParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetMultiTexParameterivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glGetMultiTexParameterivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetMultiTexParameterivEXTDel glGetMultiTexParameterivEXTPtr;
        
        // glGetMultisamplefv
        public static void glGetMultisamplefv(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val) => glGetMultisamplefvPtr?.Invoke(pname, index, val);
        private delegate void glGetMultisamplefvDel(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val);
        private static glGetMultisamplefvDel glGetMultisamplefvPtr;
        
        // glGetMultisamplefvNV
        public static void glGetMultisamplefvNV(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val) => glGetMultisamplefvNVPtr?.Invoke(pname, index, val);
        private delegate void glGetMultisamplefvNVDel(uint /*GetMultisamplePNameNV*/  pname, uint  index, float[]  val);
        private static glGetMultisamplefvNVDel glGetMultisamplefvNVPtr;
        
        // glGetNamedBufferParameteri64v
        public static void glGetNamedBufferParameteri64v(uint  buffer, uint /*BufferPNameARB*/  pname, long[]  parameters) => glGetNamedBufferParameteri64vPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferParameteri64vDel(uint  buffer, uint /*BufferPNameARB*/  pname, long[]  parameters);
        private static glGetNamedBufferParameteri64vDel glGetNamedBufferParameteri64vPtr;
        
        // glGetNamedBufferParameteriv
        public static void glGetNamedBufferParameteriv(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters) => glGetNamedBufferParameterivPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferParameterivDel(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters);
        private static glGetNamedBufferParameterivDel glGetNamedBufferParameterivPtr;
        
        // glGetNamedBufferParameterivEXT
        public static void glGetNamedBufferParameterivEXT(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters) => glGetNamedBufferParameterivEXTPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferParameterivEXTDel(uint  buffer, uint /*BufferPNameARB*/  pname, int[]  parameters);
        private static glGetNamedBufferParameterivEXTDel glGetNamedBufferParameterivEXTPtr;
        
        // glGetNamedBufferParameterui64vNV
        public static void glGetNamedBufferParameterui64vNV(uint  buffer, uint /*BufferPNameARB*/  pname, ulong[]  parameters) => glGetNamedBufferParameterui64vNVPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferParameterui64vNVDel(uint  buffer, uint /*BufferPNameARB*/  pname, ulong[]  parameters);
        private static glGetNamedBufferParameterui64vNVDel glGetNamedBufferParameterui64vNVPtr;
        
        // glGetNamedBufferPointerv
        public static void glGetNamedBufferPointerv(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => glGetNamedBufferPointervPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferPointervDel(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters);
        private static glGetNamedBufferPointervDel glGetNamedBufferPointervPtr;
        
        // glGetNamedBufferPointervEXT
        public static void glGetNamedBufferPointervEXT(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters) => glGetNamedBufferPointervEXTPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetNamedBufferPointervEXTDel(uint  buffer, uint /*BufferPointerNameARB*/  pname, IntPtr  parameters);
        private static glGetNamedBufferPointervEXTDel glGetNamedBufferPointervEXTPtr;
        
        // glGetNamedBufferSubData
        public static void glGetNamedBufferSubData(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => glGetNamedBufferSubDataPtr?.Invoke(buffer, offset, size, data);
        private delegate void glGetNamedBufferSubDataDel(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data);
        private static glGetNamedBufferSubDataDel glGetNamedBufferSubDataPtr;
        
        // glGetNamedBufferSubDataEXT
        public static void glGetNamedBufferSubDataEXT(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => glGetNamedBufferSubDataEXTPtr?.Invoke(buffer, offset, size, data);
        private delegate void glGetNamedBufferSubDataEXTDel(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data);
        private static glGetNamedBufferSubDataEXTDel glGetNamedBufferSubDataEXTPtr;
        
        // glGetNamedFramebufferParameterfvAMD
        public static void glGetNamedFramebufferParameterfvAMD(uint  framebuffer, uint  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values) => glGetNamedFramebufferParameterfvAMDPtr?.Invoke(framebuffer, pname, numsamples, pixelindex, size, values);
        private delegate void glGetNamedFramebufferParameterfvAMDDel(uint  framebuffer, uint  pname, uint  numsamples, uint  pixelindex, uint  size, float[]  values);
        private static glGetNamedFramebufferParameterfvAMDDel glGetNamedFramebufferParameterfvAMDPtr;
        
        // glGetNamedFramebufferAttachmentParameteriv
        public static void glGetNamedFramebufferAttachmentParameteriv(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetNamedFramebufferAttachmentParameterivPtr?.Invoke(framebuffer, attachment, pname, parameters);
        private delegate void glGetNamedFramebufferAttachmentParameterivDel(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetNamedFramebufferAttachmentParameterivDel glGetNamedFramebufferAttachmentParameterivPtr;
        
        // glGetNamedFramebufferAttachmentParameterivEXT
        public static void glGetNamedFramebufferAttachmentParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetNamedFramebufferAttachmentParameterivEXTPtr?.Invoke(framebuffer, attachment, pname, parameters);
        private delegate void glGetNamedFramebufferAttachmentParameterivEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetNamedFramebufferAttachmentParameterivEXTDel glGetNamedFramebufferAttachmentParameterivEXTPtr;
        
        // glGetNamedFramebufferParameteriv
        public static void glGetNamedFramebufferParameteriv(uint  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  param) => glGetNamedFramebufferParameterivPtr?.Invoke(framebuffer, pname, param);
        private delegate void glGetNamedFramebufferParameterivDel(uint  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  param);
        private static glGetNamedFramebufferParameterivDel glGetNamedFramebufferParameterivPtr;
        
        // glGetNamedFramebufferParameterivEXT
        public static void glGetNamedFramebufferParameterivEXT(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters) => glGetNamedFramebufferParameterivEXTPtr?.Invoke(framebuffer, pname, parameters);
        private delegate void glGetNamedFramebufferParameterivEXTDel(uint /*Framebuffer*/  framebuffer, uint /*GetFramebufferParameter*/  pname, int[]  parameters);
        private static glGetNamedFramebufferParameterivEXTDel glGetNamedFramebufferParameterivEXTPtr;
        
        // glGetNamedProgramLocalParameterIivEXT
        public static void glGetNamedProgramLocalParameterIivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glGetNamedProgramLocalParameterIivEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glGetNamedProgramLocalParameterIivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glGetNamedProgramLocalParameterIivEXTDel glGetNamedProgramLocalParameterIivEXTPtr;
        
        // glGetNamedProgramLocalParameterIuivEXT
        public static void glGetNamedProgramLocalParameterIuivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glGetNamedProgramLocalParameterIuivEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glGetNamedProgramLocalParameterIuivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glGetNamedProgramLocalParameterIuivEXTDel glGetNamedProgramLocalParameterIuivEXTPtr;
        
        // glGetNamedProgramLocalParameterdvEXT
        public static void glGetNamedProgramLocalParameterdvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glGetNamedProgramLocalParameterdvEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glGetNamedProgramLocalParameterdvEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glGetNamedProgramLocalParameterdvEXTDel glGetNamedProgramLocalParameterdvEXTPtr;
        
        // glGetNamedProgramLocalParameterfvEXT
        public static void glGetNamedProgramLocalParameterfvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glGetNamedProgramLocalParameterfvEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glGetNamedProgramLocalParameterfvEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glGetNamedProgramLocalParameterfvEXTDel glGetNamedProgramLocalParameterfvEXTPtr;
        
        // glGetNamedProgramStringEXT
        public static void glGetNamedProgramStringEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str) => glGetNamedProgramStringEXTPtr?.Invoke(program, target, pname, str);
        private delegate void glGetNamedProgramStringEXTDel(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str);
        private static glGetNamedProgramStringEXTDel glGetNamedProgramStringEXTPtr;
        
        // glGetNamedProgramivEXT
        public static void glGetNamedProgramivEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => glGetNamedProgramivEXTPtr?.Invoke(program, target, pname, parameters);
        private delegate void glGetNamedProgramivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters);
        private static glGetNamedProgramivEXTDel glGetNamedProgramivEXTPtr;
        
        // glGetNamedRenderbufferParameteriv
        public static void glGetNamedRenderbufferParameteriv(uint  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => glGetNamedRenderbufferParameterivPtr?.Invoke(renderbuffer, pname, parameters);
        private delegate void glGetNamedRenderbufferParameterivDel(uint  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters);
        private static glGetNamedRenderbufferParameterivDel glGetNamedRenderbufferParameterivPtr;
        
        // glGetNamedRenderbufferParameterivEXT
        public static void glGetNamedRenderbufferParameterivEXT(uint /*Renderbuffer*/  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => glGetNamedRenderbufferParameterivEXTPtr?.Invoke(renderbuffer, pname, parameters);
        private delegate void glGetNamedRenderbufferParameterivEXTDel(uint /*Renderbuffer*/  renderbuffer, uint /*RenderbufferParameterName*/  pname, int[]  parameters);
        private static glGetNamedRenderbufferParameterivEXTDel glGetNamedRenderbufferParameterivEXTPtr;
        
        // glGetNamedStringARB
        public static void glGetNamedStringARB(int  namelen, string  name, uint  bufSize, int[]  stringlen, string  str) => glGetNamedStringARBPtr?.Invoke(namelen, name, bufSize, stringlen, str);
        private delegate void glGetNamedStringARBDel(int  namelen, string  name, uint  bufSize, int[]  stringlen, string  str);
        private static glGetNamedStringARBDel glGetNamedStringARBPtr;
        
        // glGetNamedStringivARB
        public static void glGetNamedStringivARB(int  namelen, string  name, uint  pname, int[]  parameters) => glGetNamedStringivARBPtr?.Invoke(namelen, name, pname, parameters);
        private delegate void glGetNamedStringivARBDel(int  namelen, string  name, uint  pname, int[]  parameters);
        private static glGetNamedStringivARBDel glGetNamedStringivARBPtr;
        
        // glGetNextPerfQueryIdINTEL
        public static void glGetNextPerfQueryIdINTEL(uint  queryId, uint[]  nextQueryId) => glGetNextPerfQueryIdINTELPtr?.Invoke(queryId, nextQueryId);
        private delegate void glGetNextPerfQueryIdINTELDel(uint  queryId, uint[]  nextQueryId);
        private static glGetNextPerfQueryIdINTELDel glGetNextPerfQueryIdINTELPtr;
        
        // glGetObjectBufferfvATI
        public static void glGetObjectBufferfvATI(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => glGetObjectBufferfvATIPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetObjectBufferfvATIDel(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters);
        private static glGetObjectBufferfvATIDel glGetObjectBufferfvATIPtr;
        
        // glGetObjectBufferivATI
        public static void glGetObjectBufferivATI(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => glGetObjectBufferivATIPtr?.Invoke(buffer, pname, parameters);
        private delegate void glGetObjectBufferivATIDel(uint  buffer, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters);
        private static glGetObjectBufferivATIDel glGetObjectBufferivATIPtr;
        
        // glGetObjectLabel
        public static void glGetObjectLabel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  bufSize, uint[]  length, string  label) => glGetObjectLabelPtr?.Invoke(identifier, name, bufSize, length, label);
        private delegate void glGetObjectLabelDel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  bufSize, uint[]  length, string  label);
        private static glGetObjectLabelDel glGetObjectLabelPtr;
        
        // glGetObjectLabelEXT
        public static void glGetObjectLabelEXT(uint  type, uint  obj, uint  bufSize, uint[]  length, string  label) => glGetObjectLabelEXTPtr?.Invoke(type, obj, bufSize, length, label);
        private delegate void glGetObjectLabelEXTDel(uint  type, uint  obj, uint  bufSize, uint[]  length, string  label);
        private static glGetObjectLabelEXTDel glGetObjectLabelEXTPtr;
        
        // glGetObjectLabelKHR
        public static void glGetObjectLabelKHR(uint  identifier, uint  name, uint  bufSize, uint[]  length, string  label) => glGetObjectLabelKHRPtr?.Invoke(identifier, name, bufSize, length, label);
        private delegate void glGetObjectLabelKHRDel(uint  identifier, uint  name, uint  bufSize, uint[]  length, string  label);
        private static glGetObjectLabelKHRDel glGetObjectLabelKHRPtr;
        
        // glGetObjectParameterfvARB
        public static void glGetObjectParameterfvARB(IntPtr /*handleARB*/  obj, uint  pname, float[]  parameters) => glGetObjectParameterfvARBPtr?.Invoke(obj, pname, parameters);
        private delegate void glGetObjectParameterfvARBDel(IntPtr /*handleARB*/  obj, uint  pname, float[]  parameters);
        private static glGetObjectParameterfvARBDel glGetObjectParameterfvARBPtr;
        
        // glGetObjectParameterivAPPLE
        public static void glGetObjectParameterivAPPLE(uint  objectType, uint  name, uint  pname, int[]  parameters) => glGetObjectParameterivAPPLEPtr?.Invoke(objectType, name, pname, parameters);
        private delegate void glGetObjectParameterivAPPLEDel(uint  objectType, uint  name, uint  pname, int[]  parameters);
        private static glGetObjectParameterivAPPLEDel glGetObjectParameterivAPPLEPtr;
        
        // glGetObjectParameterivARB
        public static void glGetObjectParameterivARB(IntPtr /*handleARB*/  obj, uint  pname, int[]  parameters) => glGetObjectParameterivARBPtr?.Invoke(obj, pname, parameters);
        private delegate void glGetObjectParameterivARBDel(IntPtr /*handleARB*/  obj, uint  pname, int[]  parameters);
        private static glGetObjectParameterivARBDel glGetObjectParameterivARBPtr;
        
        // glGetObjectPtrLabel
        public static void glGetObjectPtrLabel(IntPtr  ptr, uint  bufSize, uint[]  length, string  label) => glGetObjectPtrLabelPtr?.Invoke(ptr, bufSize, length, label);
        private delegate void glGetObjectPtrLabelDel(IntPtr  ptr, uint  bufSize, uint[]  length, string  label);
        private static glGetObjectPtrLabelDel glGetObjectPtrLabelPtr;
        
        // glGetObjectPtrLabelKHR
        public static void glGetObjectPtrLabelKHR(IntPtr  ptr, uint  bufSize, uint[]  length, string  label) => glGetObjectPtrLabelKHRPtr?.Invoke(ptr, bufSize, length, label);
        private delegate void glGetObjectPtrLabelKHRDel(IntPtr  ptr, uint  bufSize, uint[]  length, string  label);
        private static glGetObjectPtrLabelKHRDel glGetObjectPtrLabelKHRPtr;
        
        // glGetOcclusionQueryivNV
        public static void glGetOcclusionQueryivNV(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, int[]  parameters) => glGetOcclusionQueryivNVPtr?.Invoke(id, pname, parameters);
        private delegate void glGetOcclusionQueryivNVDel(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, int[]  parameters);
        private static glGetOcclusionQueryivNVDel glGetOcclusionQueryivNVPtr;
        
        // glGetOcclusionQueryuivNV
        public static void glGetOcclusionQueryuivNV(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, uint[]  parameters) => glGetOcclusionQueryuivNVPtr?.Invoke(id, pname, parameters);
        private delegate void glGetOcclusionQueryuivNVDel(uint  id, uint /*OcclusionQueryParameterNameNV*/  pname, uint[]  parameters);
        private static glGetOcclusionQueryuivNVDel glGetOcclusionQueryuivNVPtr;
        
        // glGetPathColorGenfvNV
        public static void glGetPathColorGenfvNV(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, float[]  value) => glGetPathColorGenfvNVPtr?.Invoke(color, pname, value);
        private delegate void glGetPathColorGenfvNVDel(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, float[]  value);
        private static glGetPathColorGenfvNVDel glGetPathColorGenfvNVPtr;
        
        // glGetPathColorGenivNV
        public static void glGetPathColorGenivNV(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, int[]  value) => glGetPathColorGenivNVPtr?.Invoke(color, pname, value);
        private delegate void glGetPathColorGenivNVDel(uint /*PathColor*/  color, uint /*PathGenMode*/  pname, int[]  value);
        private static glGetPathColorGenivNVDel glGetPathColorGenivNVPtr;
        
        // glGetPathCommandsNV
        public static void glGetPathCommandsNV(uint /*Path*/  path, byte[] /*PathCommand*/  commands) => glGetPathCommandsNVPtr?.Invoke(path, commands);
        private delegate void glGetPathCommandsNVDel(uint /*Path*/  path, byte[] /*PathCommand*/  commands);
        private static glGetPathCommandsNVDel glGetPathCommandsNVPtr;
        
        // glGetPathCoordsNV
        public static void glGetPathCoordsNV(uint /*Path*/  path, float[]  coords) => glGetPathCoordsNVPtr?.Invoke(path, coords);
        private delegate void glGetPathCoordsNVDel(uint /*Path*/  path, float[]  coords);
        private static glGetPathCoordsNVDel glGetPathCoordsNVPtr;
        
        // glGetPathDashArrayNV
        public static void glGetPathDashArrayNV(uint /*Path*/  path, float[]  dashArray) => glGetPathDashArrayNVPtr?.Invoke(path, dashArray);
        private delegate void glGetPathDashArrayNVDel(uint /*Path*/  path, float[]  dashArray);
        private static glGetPathDashArrayNVDel glGetPathDashArrayNVPtr;
        
        // glGetPathLengthNV
        public static float glGetPathLengthNV(uint /*Path*/  path, uint  startSegment, uint  numSegments) => glGetPathLengthNVPtr?.Invoke(path, startSegment, numSegments) ?? default;
        private delegate float glGetPathLengthNVDel(uint /*Path*/  path, uint  startSegment, uint  numSegments);
        private static glGetPathLengthNVDel glGetPathLengthNVPtr;
        
        // glGetPathMetricRangeNV
        public static void glGetPathMetricRangeNV(uint /*PathMetricMask*/  metricQueryMask, uint /*Path*/  firstPathName, uint  numPaths, uint  stride, float[]  metrics) => glGetPathMetricRangeNVPtr?.Invoke(metricQueryMask, firstPathName, numPaths, stride, metrics);
        private delegate void glGetPathMetricRangeNVDel(uint /*PathMetricMask*/  metricQueryMask, uint /*Path*/  firstPathName, uint  numPaths, uint  stride, float[]  metrics);
        private static glGetPathMetricRangeNVDel glGetPathMetricRangeNVPtr;
        
        // glGetPathMetricsNV
        public static void glGetPathMetricsNV(uint /*PathMetricMask*/  metricQueryMask, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint  stride, float[]  metrics) => glGetPathMetricsNVPtr?.Invoke(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
        private delegate void glGetPathMetricsNVDel(uint /*PathMetricMask*/  metricQueryMask, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint  stride, float[]  metrics);
        private static glGetPathMetricsNVDel glGetPathMetricsNVPtr;
        
        // glGetPathParameterfvNV
        public static void glGetPathParameterfvNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value) => glGetPathParameterfvNVPtr?.Invoke(path, pname, value);
        private delegate void glGetPathParameterfvNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value);
        private static glGetPathParameterfvNVDel glGetPathParameterfvNVPtr;
        
        // glGetPathParameterivNV
        public static void glGetPathParameterivNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value) => glGetPathParameterivNVPtr?.Invoke(path, pname, value);
        private delegate void glGetPathParameterivNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value);
        private static glGetPathParameterivNVDel glGetPathParameterivNVPtr;
        
        // glGetPathSpacingNV
        public static void glGetPathSpacingNV(uint /*PathListMode*/  pathListMode, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, float  advanceScale, float  kerningScale, uint /*PathTransformType*/  transformType, float[]  returnedSpacing) => glGetPathSpacingNVPtr?.Invoke(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
        private delegate void glGetPathSpacingNVDel(uint /*PathListMode*/  pathListMode, uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, float  advanceScale, float  kerningScale, uint /*PathTransformType*/  transformType, float[]  returnedSpacing);
        private static glGetPathSpacingNVDel glGetPathSpacingNVPtr;
        
        // glGetPathTexGenfvNV
        public static void glGetPathTexGenfvNV(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, float[]  value) => glGetPathTexGenfvNVPtr?.Invoke(texCoordSet, pname, value);
        private delegate void glGetPathTexGenfvNVDel(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, float[]  value);
        private static glGetPathTexGenfvNVDel glGetPathTexGenfvNVPtr;
        
        // glGetPathTexGenivNV
        public static void glGetPathTexGenivNV(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, int[]  value) => glGetPathTexGenivNVPtr?.Invoke(texCoordSet, pname, value);
        private delegate void glGetPathTexGenivNVDel(uint /*TextureUnit*/  texCoordSet, uint /*PathGenMode*/  pname, int[]  value);
        private static glGetPathTexGenivNVDel glGetPathTexGenivNVPtr;
        
        // glGetPerfCounterInfoINTEL
        public static void glGetPerfCounterInfoINTEL(uint  queryId, uint  counterId, uint  counterNameLength, string  counterName, uint  counterDescLength, string  counterDesc, uint[]  counterOffset, uint[]  counterDataSize, uint[]  counterTypeEnum, uint[]  counterDataTypeEnum, ulong[]  rawCounterMaxValue) => glGetPerfCounterInfoINTELPtr?.Invoke(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
        private delegate void glGetPerfCounterInfoINTELDel(uint  queryId, uint  counterId, uint  counterNameLength, string  counterName, uint  counterDescLength, string  counterDesc, uint[]  counterOffset, uint[]  counterDataSize, uint[]  counterTypeEnum, uint[]  counterDataTypeEnum, ulong[]  rawCounterMaxValue);
        private static glGetPerfCounterInfoINTELDel glGetPerfCounterInfoINTELPtr;
        
        // glGetPerfMonitorCounterDataAMD
        public static void glGetPerfMonitorCounterDataAMD(uint  monitor, uint  pname, uint  dataSize, uint[]  data, int[]  bytesWritten) => glGetPerfMonitorCounterDataAMDPtr?.Invoke(monitor, pname, dataSize, data, bytesWritten);
        private delegate void glGetPerfMonitorCounterDataAMDDel(uint  monitor, uint  pname, uint  dataSize, uint[]  data, int[]  bytesWritten);
        private static glGetPerfMonitorCounterDataAMDDel glGetPerfMonitorCounterDataAMDPtr;
        
        // glGetPerfMonitorCounterInfoAMD
        public static void glGetPerfMonitorCounterInfoAMD(uint  group, uint  counter, uint  pname, IntPtr  data) => glGetPerfMonitorCounterInfoAMDPtr?.Invoke(group, counter, pname, data);
        private delegate void glGetPerfMonitorCounterInfoAMDDel(uint  group, uint  counter, uint  pname, IntPtr  data);
        private static glGetPerfMonitorCounterInfoAMDDel glGetPerfMonitorCounterInfoAMDPtr;
        
        // glGetPerfMonitorCounterStringAMD
        public static void glGetPerfMonitorCounterStringAMD(uint  group, uint  counter, uint  bufSize, uint[]  length, string  counterString) => glGetPerfMonitorCounterStringAMDPtr?.Invoke(group, counter, bufSize, length, counterString);
        private delegate void glGetPerfMonitorCounterStringAMDDel(uint  group, uint  counter, uint  bufSize, uint[]  length, string  counterString);
        private static glGetPerfMonitorCounterStringAMDDel glGetPerfMonitorCounterStringAMDPtr;
        
        // glGetPerfMonitorCountersAMD
        public static void glGetPerfMonitorCountersAMD(uint  group, int[]  numCounters, int[]  maxActiveCounters, uint  counterSize, uint[]  counters) => glGetPerfMonitorCountersAMDPtr?.Invoke(group, numCounters, maxActiveCounters, counterSize, counters);
        private delegate void glGetPerfMonitorCountersAMDDel(uint  group, int[]  numCounters, int[]  maxActiveCounters, uint  counterSize, uint[]  counters);
        private static glGetPerfMonitorCountersAMDDel glGetPerfMonitorCountersAMDPtr;
        
        // glGetPerfMonitorGroupStringAMD
        public static void glGetPerfMonitorGroupStringAMD(uint  group, uint  bufSize, uint[]  length, string  groupString) => glGetPerfMonitorGroupStringAMDPtr?.Invoke(group, bufSize, length, groupString);
        private delegate void glGetPerfMonitorGroupStringAMDDel(uint  group, uint  bufSize, uint[]  length, string  groupString);
        private static glGetPerfMonitorGroupStringAMDDel glGetPerfMonitorGroupStringAMDPtr;
        
        // glGetPerfMonitorGroupsAMD
        public static void glGetPerfMonitorGroupsAMD(int[]  numGroups, uint  groupsSize, uint[]  groups) => glGetPerfMonitorGroupsAMDPtr?.Invoke(numGroups, groupsSize, groups);
        private delegate void glGetPerfMonitorGroupsAMDDel(int[]  numGroups, uint  groupsSize, uint[]  groups);
        private static glGetPerfMonitorGroupsAMDDel glGetPerfMonitorGroupsAMDPtr;
        
        // glGetPerfQueryDataINTEL
        public static void glGetPerfQueryDataINTEL(uint  queryHandle, uint  flags, uint  dataSize, IntPtr  data, uint[]  bytesWritten) => glGetPerfQueryDataINTELPtr?.Invoke(queryHandle, flags, dataSize, data, bytesWritten);
        private delegate void glGetPerfQueryDataINTELDel(uint  queryHandle, uint  flags, uint  dataSize, IntPtr  data, uint[]  bytesWritten);
        private static glGetPerfQueryDataINTELDel glGetPerfQueryDataINTELPtr;
        
        // glGetPerfQueryIdByNameINTEL
        public static void glGetPerfQueryIdByNameINTEL(string  queryName, uint[]  queryId) => glGetPerfQueryIdByNameINTELPtr?.Invoke(queryName, queryId);
        private delegate void glGetPerfQueryIdByNameINTELDel(string  queryName, uint[]  queryId);
        private static glGetPerfQueryIdByNameINTELDel glGetPerfQueryIdByNameINTELPtr;
        
        // glGetPerfQueryInfoINTEL
        public static void glGetPerfQueryInfoINTEL(uint  queryId, uint  queryNameLength, string  queryName, uint[]  dataSize, uint[]  noCounters, uint[]  noInstances, uint[]  capsMask) => glGetPerfQueryInfoINTELPtr?.Invoke(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
        private delegate void glGetPerfQueryInfoINTELDel(uint  queryId, uint  queryNameLength, string  queryName, uint[]  dataSize, uint[]  noCounters, uint[]  noInstances, uint[]  capsMask);
        private static glGetPerfQueryInfoINTELDel glGetPerfQueryInfoINTELPtr;
        
        // glGetPixelMapfv
        public static void glGetPixelMapfv(uint /*PixelMap*/  map, float[]  values) => glGetPixelMapfvPtr?.Invoke(map, values);
        private delegate void glGetPixelMapfvDel(uint /*PixelMap*/  map, float[]  values);
        private static glGetPixelMapfvDel glGetPixelMapfvPtr;
        
        // glGetPixelMapuiv
        public static void glGetPixelMapuiv(uint /*PixelMap*/  map, uint[]  values) => glGetPixelMapuivPtr?.Invoke(map, values);
        private delegate void glGetPixelMapuivDel(uint /*PixelMap*/  map, uint[]  values);
        private static glGetPixelMapuivDel glGetPixelMapuivPtr;
        
        // glGetPixelMapusv
        public static void glGetPixelMapusv(uint /*PixelMap*/  map, ushort[]  values) => glGetPixelMapusvPtr?.Invoke(map, values);
        private delegate void glGetPixelMapusvDel(uint /*PixelMap*/  map, ushort[]  values);
        private static glGetPixelMapusvDel glGetPixelMapusvPtr;
        
        // glGetPixelMapxv
        public static void glGetPixelMapxv(uint /*PixelMap*/  map, int  size, int[]  values) => glGetPixelMapxvPtr?.Invoke(map, size, values);
        private delegate void glGetPixelMapxvDel(uint /*PixelMap*/  map, int  size, int[]  values);
        private static glGetPixelMapxvDel glGetPixelMapxvPtr;
        
        // glGetPixelTexGenParameterfvSGIS
        public static void glGetPixelTexGenParameterfvSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters) => glGetPixelTexGenParameterfvSGISPtr?.Invoke(pname, parameters);
        private delegate void glGetPixelTexGenParameterfvSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glGetPixelTexGenParameterfvSGISDel glGetPixelTexGenParameterfvSGISPtr;
        
        // glGetPixelTexGenParameterivSGIS
        public static void glGetPixelTexGenParameterivSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters) => glGetPixelTexGenParameterivSGISPtr?.Invoke(pname, parameters);
        private delegate void glGetPixelTexGenParameterivSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glGetPixelTexGenParameterivSGISDel glGetPixelTexGenParameterivSGISPtr;
        
        // glGetPixelTransformParameterfvEXT
        public static void glGetPixelTransformParameterfvEXT(uint  target, uint  pname, float[]  parameters) => glGetPixelTransformParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetPixelTransformParameterfvEXTDel(uint  target, uint  pname, float[]  parameters);
        private static glGetPixelTransformParameterfvEXTDel glGetPixelTransformParameterfvEXTPtr;
        
        // glGetPixelTransformParameterivEXT
        public static void glGetPixelTransformParameterivEXT(uint  target, uint  pname, int[]  parameters) => glGetPixelTransformParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetPixelTransformParameterivEXTDel(uint  target, uint  pname, int[]  parameters);
        private static glGetPixelTransformParameterivEXTDel glGetPixelTransformParameterivEXTPtr;
        
        // glGetPointerIndexedvEXT
        public static void glGetPointerIndexedvEXT(uint  target, uint  index, IntPtr  data) => glGetPointerIndexedvEXTPtr?.Invoke(target, index, data);
        private delegate void glGetPointerIndexedvEXTDel(uint  target, uint  index, IntPtr  data);
        private static glGetPointerIndexedvEXTDel glGetPointerIndexedvEXTPtr;
        
        // glGetPointeri_vEXT
        public static void glGetPointeri_vEXT(uint  pname, uint  index, IntPtr  parameters) => glGetPointeri_vEXTPtr?.Invoke(pname, index, parameters);
        private delegate void glGetPointeri_vEXTDel(uint  pname, uint  index, IntPtr  parameters);
        private static glGetPointeri_vEXTDel glGetPointeri_vEXTPtr;
        
        // glGetPointerv
        public static void glGetPointerv(uint /*GetPointervPName*/  pname, IntPtr  parameters) => glGetPointervPtr?.Invoke(pname, parameters);
        private delegate void glGetPointervDel(uint /*GetPointervPName*/  pname, IntPtr  parameters);
        private static glGetPointervDel glGetPointervPtr;
        
        // glGetPointervEXT
        public static void glGetPointervEXT(uint /*GetPointervPName*/  pname, IntPtr  parameters) => glGetPointervEXTPtr?.Invoke(pname, parameters);
        private delegate void glGetPointervEXTDel(uint /*GetPointervPName*/  pname, IntPtr  parameters);
        private static glGetPointervEXTDel glGetPointervEXTPtr;
        
        // glGetPointervKHR
        public static void glGetPointervKHR(uint  pname, IntPtr  parameters) => glGetPointervKHRPtr?.Invoke(pname, parameters);
        private delegate void glGetPointervKHRDel(uint  pname, IntPtr  parameters);
        private static glGetPointervKHRDel glGetPointervKHRPtr;
        
        // glGetPolygonStipple
        public static void glGetPolygonStipple(byte[]  mask) => glGetPolygonStipplePtr?.Invoke(mask);
        private delegate void glGetPolygonStippleDel(byte[]  mask);
        private static glGetPolygonStippleDel glGetPolygonStipplePtr;
        
        // glGetProgramBinary
        public static void glGetProgramBinary(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary) => glGetProgramBinaryPtr?.Invoke(program, bufSize, length, binaryFormat, binary);
        private delegate void glGetProgramBinaryDel(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary);
        private static glGetProgramBinaryDel glGetProgramBinaryPtr;
        
        // glGetProgramBinaryOES
        public static void glGetProgramBinaryOES(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary) => glGetProgramBinaryOESPtr?.Invoke(program, bufSize, length, binaryFormat, binary);
        private delegate void glGetProgramBinaryOESDel(uint  program, uint  bufSize, uint[]  length, uint[]  binaryFormat, IntPtr  binary);
        private static glGetProgramBinaryOESDel glGetProgramBinaryOESPtr;
        
        // glGetProgramEnvParameterIivNV
        public static void glGetProgramEnvParameterIivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glGetProgramEnvParameterIivNVPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramEnvParameterIivNVDel(uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glGetProgramEnvParameterIivNVDel glGetProgramEnvParameterIivNVPtr;
        
        // glGetProgramEnvParameterIuivNV
        public static void glGetProgramEnvParameterIuivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glGetProgramEnvParameterIuivNVPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramEnvParameterIuivNVDel(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glGetProgramEnvParameterIuivNVDel glGetProgramEnvParameterIuivNVPtr;
        
        // glGetProgramEnvParameterdvARB
        public static void glGetProgramEnvParameterdvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glGetProgramEnvParameterdvARBPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramEnvParameterdvARBDel(uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glGetProgramEnvParameterdvARBDel glGetProgramEnvParameterdvARBPtr;
        
        // glGetProgramEnvParameterfvARB
        public static void glGetProgramEnvParameterfvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glGetProgramEnvParameterfvARBPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramEnvParameterfvARBDel(uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glGetProgramEnvParameterfvARBDel glGetProgramEnvParameterfvARBPtr;
        
        // glGetProgramInfoLog
        public static void glGetProgramInfoLog(uint  program, uint  bufSize, uint[]  length, string  infoLog) => glGetProgramInfoLogPtr?.Invoke(program, bufSize, length, infoLog);
        private delegate void glGetProgramInfoLogDel(uint  program, uint  bufSize, uint[]  length, string  infoLog);
        private static glGetProgramInfoLogDel glGetProgramInfoLogPtr;
        
        // glGetProgramInterfaceiv
        public static void glGetProgramInterfaceiv(uint  program, uint /*ProgramInterface*/  programInterface, uint /*ProgramInterfacePName*/  pname, int[]  parameters) => glGetProgramInterfaceivPtr?.Invoke(program, programInterface, pname, parameters);
        private delegate void glGetProgramInterfaceivDel(uint  program, uint /*ProgramInterface*/  programInterface, uint /*ProgramInterfacePName*/  pname, int[]  parameters);
        private static glGetProgramInterfaceivDel glGetProgramInterfaceivPtr;
        
        // glGetProgramLocalParameterIivNV
        public static void glGetProgramLocalParameterIivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glGetProgramLocalParameterIivNVPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramLocalParameterIivNVDel(uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glGetProgramLocalParameterIivNVDel glGetProgramLocalParameterIivNVPtr;
        
        // glGetProgramLocalParameterIuivNV
        public static void glGetProgramLocalParameterIuivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glGetProgramLocalParameterIuivNVPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramLocalParameterIuivNVDel(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glGetProgramLocalParameterIuivNVDel glGetProgramLocalParameterIuivNVPtr;
        
        // glGetProgramLocalParameterdvARB
        public static void glGetProgramLocalParameterdvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glGetProgramLocalParameterdvARBPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramLocalParameterdvARBDel(uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glGetProgramLocalParameterdvARBDel glGetProgramLocalParameterdvARBPtr;
        
        // glGetProgramLocalParameterfvARB
        public static void glGetProgramLocalParameterfvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glGetProgramLocalParameterfvARBPtr?.Invoke(target, index, parameters);
        private delegate void glGetProgramLocalParameterfvARBDel(uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glGetProgramLocalParameterfvARBDel glGetProgramLocalParameterfvARBPtr;
        
        // glGetProgramNamedParameterdvNV
        public static void glGetProgramNamedParameterdvNV(uint  id, uint  len, byte[]  name, double[]  parameters) => glGetProgramNamedParameterdvNVPtr?.Invoke(id, len, name, parameters);
        private delegate void glGetProgramNamedParameterdvNVDel(uint  id, uint  len, byte[]  name, double[]  parameters);
        private static glGetProgramNamedParameterdvNVDel glGetProgramNamedParameterdvNVPtr;
        
        // glGetProgramNamedParameterfvNV
        public static void glGetProgramNamedParameterfvNV(uint  id, uint  len, byte[]  name, float[]  parameters) => glGetProgramNamedParameterfvNVPtr?.Invoke(id, len, name, parameters);
        private delegate void glGetProgramNamedParameterfvNVDel(uint  id, uint  len, byte[]  name, float[]  parameters);
        private static glGetProgramNamedParameterfvNVDel glGetProgramNamedParameterfvNVPtr;
        
        // glGetProgramParameterdvNV
        public static void glGetProgramParameterdvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters) => glGetProgramParameterdvNVPtr?.Invoke(target, index, pname, parameters);
        private delegate void glGetProgramParameterdvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters);
        private static glGetProgramParameterdvNVDel glGetProgramParameterdvNVPtr;
        
        // glGetProgramParameterfvNV
        public static void glGetProgramParameterfvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters) => glGetProgramParameterfvNVPtr?.Invoke(target, index, pname, parameters);
        private delegate void glGetProgramParameterfvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters);
        private static glGetProgramParameterfvNVDel glGetProgramParameterfvNVPtr;
        
        // glGetProgramPipelineInfoLog
        public static void glGetProgramPipelineInfoLog(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog) => glGetProgramPipelineInfoLogPtr?.Invoke(pipeline, bufSize, length, infoLog);
        private delegate void glGetProgramPipelineInfoLogDel(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog);
        private static glGetProgramPipelineInfoLogDel glGetProgramPipelineInfoLogPtr;
        
        // glGetProgramPipelineInfoLogEXT
        public static void glGetProgramPipelineInfoLogEXT(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog) => glGetProgramPipelineInfoLogEXTPtr?.Invoke(pipeline, bufSize, length, infoLog);
        private delegate void glGetProgramPipelineInfoLogEXTDel(uint  pipeline, uint  bufSize, uint[]  length, string  infoLog);
        private static glGetProgramPipelineInfoLogEXTDel glGetProgramPipelineInfoLogEXTPtr;
        
        // glGetProgramPipelineiv
        public static void glGetProgramPipelineiv(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters) => glGetProgramPipelineivPtr?.Invoke(pipeline, pname, parameters);
        private delegate void glGetProgramPipelineivDel(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters);
        private static glGetProgramPipelineivDel glGetProgramPipelineivPtr;
        
        // glGetProgramPipelineivEXT
        public static void glGetProgramPipelineivEXT(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters) => glGetProgramPipelineivEXTPtr?.Invoke(pipeline, pname, parameters);
        private delegate void glGetProgramPipelineivEXTDel(uint  pipeline, uint /*PipelineParameterName*/  pname, int[]  parameters);
        private static glGetProgramPipelineivEXTDel glGetProgramPipelineivEXTPtr;
        
        // glGetProgramResourceIndex
        public static uint glGetProgramResourceIndex(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => glGetProgramResourceIndexPtr?.Invoke(program, programInterface, name) ?? default;
        private delegate uint glGetProgramResourceIndexDel(uint  program, uint /*ProgramInterface*/  programInterface, string  name);
        private static glGetProgramResourceIndexDel glGetProgramResourceIndexPtr;
        
        // glGetProgramResourceLocation
        public static int glGetProgramResourceLocation(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => glGetProgramResourceLocationPtr?.Invoke(program, programInterface, name) ?? default;
        private delegate int glGetProgramResourceLocationDel(uint  program, uint /*ProgramInterface*/  programInterface, string  name);
        private static glGetProgramResourceLocationDel glGetProgramResourceLocationPtr;
        
        // glGetProgramResourceLocationIndex
        public static int glGetProgramResourceLocationIndex(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => glGetProgramResourceLocationIndexPtr?.Invoke(program, programInterface, name) ?? default;
        private delegate int glGetProgramResourceLocationIndexDel(uint  program, uint /*ProgramInterface*/  programInterface, string  name);
        private static glGetProgramResourceLocationIndexDel glGetProgramResourceLocationIndexPtr;
        
        // glGetProgramResourceLocationIndexEXT
        public static int glGetProgramResourceLocationIndexEXT(uint  program, uint /*ProgramInterface*/  programInterface, string  name) => glGetProgramResourceLocationIndexEXTPtr?.Invoke(program, programInterface, name) ?? default;
        private delegate int glGetProgramResourceLocationIndexEXTDel(uint  program, uint /*ProgramInterface*/  programInterface, string  name);
        private static glGetProgramResourceLocationIndexEXTDel glGetProgramResourceLocationIndexEXTPtr;
        
        // glGetProgramResourceName
        public static void glGetProgramResourceName(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  bufSize, uint[]  length, string  name) => glGetProgramResourceNamePtr?.Invoke(program, programInterface, index, bufSize, length, name);
        private delegate void glGetProgramResourceNameDel(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  bufSize, uint[]  length, string  name);
        private static glGetProgramResourceNameDel glGetProgramResourceNamePtr;
        
        // glGetProgramResourcefvNV
        public static void glGetProgramResourcefvNV(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[]  props, uint  count, uint[]  length, float[]  parameters) => glGetProgramResourcefvNVPtr?.Invoke(program, programInterface, index, propCount, props, count, length, parameters);
        private delegate void glGetProgramResourcefvNVDel(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[]  props, uint  count, uint[]  length, float[]  parameters);
        private static glGetProgramResourcefvNVDel glGetProgramResourcefvNVPtr;
        
        // glGetProgramResourceiv
        public static void glGetProgramResourceiv(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[] /*ProgramResourceProperty*/  props, uint  count, uint[]  length, int[]  parameters) => glGetProgramResourceivPtr?.Invoke(program, programInterface, index, propCount, props, count, length, parameters);
        private delegate void glGetProgramResourceivDel(uint  program, uint /*ProgramInterface*/  programInterface, uint  index, uint  propCount, uint[] /*ProgramResourceProperty*/  props, uint  count, uint[]  length, int[]  parameters);
        private static glGetProgramResourceivDel glGetProgramResourceivPtr;
        
        // glGetProgramStageiv
        public static void glGetProgramStageiv(uint  program, uint /*ShaderType*/  shadertype, uint /*ProgramStagePName*/  pname, int[]  values) => glGetProgramStageivPtr?.Invoke(program, shadertype, pname, values);
        private delegate void glGetProgramStageivDel(uint  program, uint /*ShaderType*/  shadertype, uint /*ProgramStagePName*/  pname, int[]  values);
        private static glGetProgramStageivDel glGetProgramStageivPtr;
        
        // glGetProgramStringARB
        public static void glGetProgramStringARB(uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str) => glGetProgramStringARBPtr?.Invoke(target, pname, str);
        private delegate void glGetProgramStringARBDel(uint /*ProgramTarget*/  target, uint /*ProgramStringProperty*/  pname, IntPtr  str);
        private static glGetProgramStringARBDel glGetProgramStringARBPtr;
        
        // glGetProgramStringNV
        public static void glGetProgramStringNV(uint  id, uint /*VertexAttribEnumNV*/  pname, byte[] /*ProgramCharacterNV*/  program) => glGetProgramStringNVPtr?.Invoke(id, pname, program);
        private delegate void glGetProgramStringNVDel(uint  id, uint /*VertexAttribEnumNV*/  pname, byte[] /*ProgramCharacterNV*/  program);
        private static glGetProgramStringNVDel glGetProgramStringNVPtr;
        
        // glGetProgramSubroutineParameteruivNV
        public static void glGetProgramSubroutineParameteruivNV(uint  target, uint  index, uint[]  param) => glGetProgramSubroutineParameteruivNVPtr?.Invoke(target, index, param);
        private delegate void glGetProgramSubroutineParameteruivNVDel(uint  target, uint  index, uint[]  param);
        private static glGetProgramSubroutineParameteruivNVDel glGetProgramSubroutineParameteruivNVPtr;
        
        // glGetProgramiv
        public static void glGetProgramiv(uint  program, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => glGetProgramivPtr?.Invoke(program, pname, parameters);
        private delegate void glGetProgramivDel(uint  program, uint /*ProgramPropertyARB*/  pname, int[]  parameters);
        private static glGetProgramivDel glGetProgramivPtr;
        
        // glGetProgramivARB
        public static void glGetProgramivARB(uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters) => glGetProgramivARBPtr?.Invoke(target, pname, parameters);
        private delegate void glGetProgramivARBDel(uint /*ProgramTarget*/  target, uint /*ProgramPropertyARB*/  pname, int[]  parameters);
        private static glGetProgramivARBDel glGetProgramivARBPtr;
        
        // glGetProgramivNV
        public static void glGetProgramivNV(uint  id, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => glGetProgramivNVPtr?.Invoke(id, pname, parameters);
        private delegate void glGetProgramivNVDel(uint  id, uint /*VertexAttribEnumNV*/  pname, int[]  parameters);
        private static glGetProgramivNVDel glGetProgramivNVPtr;
        
        // glGetQueryBufferObjecti64v
        public static void glGetQueryBufferObjecti64v(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => glGetQueryBufferObjecti64vPtr?.Invoke(id, buffer, pname, offset);
        private delegate void glGetQueryBufferObjecti64vDel(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset);
        private static glGetQueryBufferObjecti64vDel glGetQueryBufferObjecti64vPtr;
        
        // glGetQueryBufferObjectiv
        public static void glGetQueryBufferObjectiv(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => glGetQueryBufferObjectivPtr?.Invoke(id, buffer, pname, offset);
        private delegate void glGetQueryBufferObjectivDel(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset);
        private static glGetQueryBufferObjectivDel glGetQueryBufferObjectivPtr;
        
        // glGetQueryBufferObjectui64v
        public static void glGetQueryBufferObjectui64v(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => glGetQueryBufferObjectui64vPtr?.Invoke(id, buffer, pname, offset);
        private delegate void glGetQueryBufferObjectui64vDel(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset);
        private static glGetQueryBufferObjectui64vDel glGetQueryBufferObjectui64vPtr;
        
        // glGetQueryBufferObjectuiv
        public static void glGetQueryBufferObjectuiv(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset) => glGetQueryBufferObjectuivPtr?.Invoke(id, buffer, pname, offset);
        private delegate void glGetQueryBufferObjectuivDel(uint  id, uint  buffer, uint /*QueryObjectParameterName*/  pname, IntPtr  offset);
        private static glGetQueryBufferObjectuivDel glGetQueryBufferObjectuivPtr;
        
        // glGetQueryIndexediv
        public static void glGetQueryIndexediv(uint /*QueryTarget*/  target, uint  index, uint /*QueryParameterName*/  pname, int[]  parameters) => glGetQueryIndexedivPtr?.Invoke(target, index, pname, parameters);
        private delegate void glGetQueryIndexedivDel(uint /*QueryTarget*/  target, uint  index, uint /*QueryParameterName*/  pname, int[]  parameters);
        private static glGetQueryIndexedivDel glGetQueryIndexedivPtr;
        
        // glGetQueryObjecti64v
        public static void glGetQueryObjecti64v(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters) => glGetQueryObjecti64vPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjecti64vDel(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters);
        private static glGetQueryObjecti64vDel glGetQueryObjecti64vPtr;
        
        // glGetQueryObjecti64vEXT
        public static void glGetQueryObjecti64vEXT(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters) => glGetQueryObjecti64vEXTPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjecti64vEXTDel(uint  id, uint /*QueryObjectParameterName*/  pname, long[]  parameters);
        private static glGetQueryObjecti64vEXTDel glGetQueryObjecti64vEXTPtr;
        
        // glGetQueryObjectiv
        public static void glGetQueryObjectiv(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => glGetQueryObjectivPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectivDel(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters);
        private static glGetQueryObjectivDel glGetQueryObjectivPtr;
        
        // glGetQueryObjectivARB
        public static void glGetQueryObjectivARB(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => glGetQueryObjectivARBPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectivARBDel(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters);
        private static glGetQueryObjectivARBDel glGetQueryObjectivARBPtr;
        
        // glGetQueryObjectivEXT
        public static void glGetQueryObjectivEXT(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters) => glGetQueryObjectivEXTPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectivEXTDel(uint  id, uint /*QueryObjectParameterName*/  pname, int[]  parameters);
        private static glGetQueryObjectivEXTDel glGetQueryObjectivEXTPtr;
        
        // glGetQueryObjectui64v
        public static void glGetQueryObjectui64v(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters) => glGetQueryObjectui64vPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectui64vDel(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters);
        private static glGetQueryObjectui64vDel glGetQueryObjectui64vPtr;
        
        // glGetQueryObjectui64vEXT
        public static void glGetQueryObjectui64vEXT(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters) => glGetQueryObjectui64vEXTPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectui64vEXTDel(uint  id, uint /*QueryObjectParameterName*/  pname, ulong[]  parameters);
        private static glGetQueryObjectui64vEXTDel glGetQueryObjectui64vEXTPtr;
        
        // glGetQueryObjectuiv
        public static void glGetQueryObjectuiv(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => glGetQueryObjectuivPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectuivDel(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters);
        private static glGetQueryObjectuivDel glGetQueryObjectuivPtr;
        
        // glGetQueryObjectuivARB
        public static void glGetQueryObjectuivARB(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => glGetQueryObjectuivARBPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectuivARBDel(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters);
        private static glGetQueryObjectuivARBDel glGetQueryObjectuivARBPtr;
        
        // glGetQueryObjectuivEXT
        public static void glGetQueryObjectuivEXT(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters) => glGetQueryObjectuivEXTPtr?.Invoke(id, pname, parameters);
        private delegate void glGetQueryObjectuivEXTDel(uint  id, uint /*QueryObjectParameterName*/  pname, uint[]  parameters);
        private static glGetQueryObjectuivEXTDel glGetQueryObjectuivEXTPtr;
        
        // glGetQueryiv
        public static void glGetQueryiv(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => glGetQueryivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetQueryivDel(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters);
        private static glGetQueryivDel glGetQueryivPtr;
        
        // glGetQueryivARB
        public static void glGetQueryivARB(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => glGetQueryivARBPtr?.Invoke(target, pname, parameters);
        private delegate void glGetQueryivARBDel(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters);
        private static glGetQueryivARBDel glGetQueryivARBPtr;
        
        // glGetQueryivEXT
        public static void glGetQueryivEXT(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters) => glGetQueryivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetQueryivEXTDel(uint /*QueryTarget*/  target, uint /*QueryParameterName*/  pname, int[]  parameters);
        private static glGetQueryivEXTDel glGetQueryivEXTPtr;
        
        // glGetRenderbufferParameteriv
        public static void glGetRenderbufferParameteriv(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => glGetRenderbufferParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetRenderbufferParameterivDel(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters);
        private static glGetRenderbufferParameterivDel glGetRenderbufferParameterivPtr;
        
        // glGetRenderbufferParameterivEXT
        public static void glGetRenderbufferParameterivEXT(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => glGetRenderbufferParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetRenderbufferParameterivEXTDel(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters);
        private static glGetRenderbufferParameterivEXTDel glGetRenderbufferParameterivEXTPtr;
        
        // glGetRenderbufferParameterivOES
        public static void glGetRenderbufferParameterivOES(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters) => glGetRenderbufferParameterivOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetRenderbufferParameterivOESDel(uint /*RenderbufferTarget*/  target, uint /*RenderbufferParameterName*/  pname, int[]  parameters);
        private static glGetRenderbufferParameterivOESDel glGetRenderbufferParameterivOESPtr;
        
        // glGetSamplerParameterIiv
        public static void glGetSamplerParameterIiv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => glGetSamplerParameterIivPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIivDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters);
        private static glGetSamplerParameterIivDel glGetSamplerParameterIivPtr;
        
        // glGetSamplerParameterIivEXT
        public static void glGetSamplerParameterIivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => glGetSamplerParameterIivEXTPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIivEXTDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters);
        private static glGetSamplerParameterIivEXTDel glGetSamplerParameterIivEXTPtr;
        
        // glGetSamplerParameterIivOES
        public static void glGetSamplerParameterIivOES(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => glGetSamplerParameterIivOESPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIivOESDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters);
        private static glGetSamplerParameterIivOESDel glGetSamplerParameterIivOESPtr;
        
        // glGetSamplerParameterIuiv
        public static void glGetSamplerParameterIuiv(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => glGetSamplerParameterIuivPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIuivDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters);
        private static glGetSamplerParameterIuivDel glGetSamplerParameterIuivPtr;
        
        // glGetSamplerParameterIuivEXT
        public static void glGetSamplerParameterIuivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => glGetSamplerParameterIuivEXTPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIuivEXTDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters);
        private static glGetSamplerParameterIuivEXTDel glGetSamplerParameterIuivEXTPtr;
        
        // glGetSamplerParameterIuivOES
        public static void glGetSamplerParameterIuivOES(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters) => glGetSamplerParameterIuivOESPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterIuivOESDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  parameters);
        private static glGetSamplerParameterIuivOESDel glGetSamplerParameterIuivOESPtr;
        
        // glGetSamplerParameterfv
        public static void glGetSamplerParameterfv(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  parameters) => glGetSamplerParameterfvPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterfvDel(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  parameters);
        private static glGetSamplerParameterfvDel glGetSamplerParameterfvPtr;
        
        // glGetSamplerParameteriv
        public static void glGetSamplerParameteriv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters) => glGetSamplerParameterivPtr?.Invoke(sampler, pname, parameters);
        private delegate void glGetSamplerParameterivDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  parameters);
        private static glGetSamplerParameterivDel glGetSamplerParameterivPtr;
        
        // glGetSemaphoreParameterui64vEXT
        public static void glGetSemaphoreParameterui64vEXT(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters) => glGetSemaphoreParameterui64vEXTPtr?.Invoke(semaphore, pname, parameters);
        private delegate void glGetSemaphoreParameterui64vEXTDel(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters);
        private static glGetSemaphoreParameterui64vEXTDel glGetSemaphoreParameterui64vEXTPtr;
        
        // glGetSeparableFilter
        public static void glGetSeparableFilter(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span) => glGetSeparableFilterPtr?.Invoke(target, format, type, row, column, span);
        private delegate void glGetSeparableFilterDel(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span);
        private static glGetSeparableFilterDel glGetSeparableFilterPtr;
        
        // glGetSeparableFilterEXT
        public static void glGetSeparableFilterEXT(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span) => glGetSeparableFilterEXTPtr?.Invoke(target, format, type, row, column, span);
        private delegate void glGetSeparableFilterEXTDel(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column, IntPtr  span);
        private static glGetSeparableFilterEXTDel glGetSeparableFilterEXTPtr;
        
        // glGetShaderInfoLog
        public static void glGetShaderInfoLog(uint  shader, uint  bufSize, uint[]  length, string  infoLog) => glGetShaderInfoLogPtr?.Invoke(shader, bufSize, length, infoLog);
        private delegate void glGetShaderInfoLogDel(uint  shader, uint  bufSize, uint[]  length, string  infoLog);
        private static glGetShaderInfoLogDel glGetShaderInfoLogPtr;
        
        // glGetShaderPrecisionFormat
        public static void glGetShaderPrecisionFormat(uint /*ShaderType*/  shadertype, uint /*PrecisionType*/  precisiontype, int[]  range, int[]  precision) => glGetShaderPrecisionFormatPtr?.Invoke(shadertype, precisiontype, range, precision);
        private delegate void glGetShaderPrecisionFormatDel(uint /*ShaderType*/  shadertype, uint /*PrecisionType*/  precisiontype, int[]  range, int[]  precision);
        private static glGetShaderPrecisionFormatDel glGetShaderPrecisionFormatPtr;
        
        // glGetShaderSource
        public static void glGetShaderSource(uint  shader, uint  bufSize, uint[]  length, string  source) => glGetShaderSourcePtr?.Invoke(shader, bufSize, length, source);
        private delegate void glGetShaderSourceDel(uint  shader, uint  bufSize, uint[]  length, string  source);
        private static glGetShaderSourceDel glGetShaderSourcePtr;
        
        // glGetShaderSourceARB
        public static void glGetShaderSourceARB(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  source) => glGetShaderSourceARBPtr?.Invoke(obj, maxLength, length, source);
        private delegate void glGetShaderSourceARBDel(IntPtr /*handleARB*/  obj, uint  maxLength, uint[]  length, string  source);
        private static glGetShaderSourceARBDel glGetShaderSourceARBPtr;
        
        // glGetShaderiv
        public static void glGetShaderiv(uint  shader, uint /*ShaderParameterName*/  pname, int[]  parameters) => glGetShaderivPtr?.Invoke(shader, pname, parameters);
        private delegate void glGetShaderivDel(uint  shader, uint /*ShaderParameterName*/  pname, int[]  parameters);
        private static glGetShaderivDel glGetShaderivPtr;
        
        // glGetShadingRateImagePaletteNV
        public static void glGetShadingRateImagePaletteNV(uint  viewport, uint  entry, uint[]  rate) => glGetShadingRateImagePaletteNVPtr?.Invoke(viewport, entry, rate);
        private delegate void glGetShadingRateImagePaletteNVDel(uint  viewport, uint  entry, uint[]  rate);
        private static glGetShadingRateImagePaletteNVDel glGetShadingRateImagePaletteNVPtr;
        
        // glGetShadingRateSampleLocationivNV
        public static void glGetShadingRateSampleLocationivNV(uint  rate, uint  samples, uint  index, int[]  location) => glGetShadingRateSampleLocationivNVPtr?.Invoke(rate, samples, index, location);
        private delegate void glGetShadingRateSampleLocationivNVDel(uint  rate, uint  samples, uint  index, int[]  location);
        private static glGetShadingRateSampleLocationivNVDel glGetShadingRateSampleLocationivNVPtr;
        
        // glGetSharpenTexFuncSGIS
        public static void glGetSharpenTexFuncSGIS(uint /*TextureTarget*/  target, float[]  points) => glGetSharpenTexFuncSGISPtr?.Invoke(target, points);
        private delegate void glGetSharpenTexFuncSGISDel(uint /*TextureTarget*/  target, float[]  points);
        private static glGetSharpenTexFuncSGISDel glGetSharpenTexFuncSGISPtr;
        
        // glGetStageIndexNV
        public static ushort glGetStageIndexNV(uint /*ShaderType*/  shadertype) => glGetStageIndexNVPtr?.Invoke(shadertype) ?? default;
        private delegate ushort glGetStageIndexNVDel(uint /*ShaderType*/  shadertype);
        private static glGetStageIndexNVDel glGetStageIndexNVPtr;
        
        // glGetString
        public static byte /*String*/ glGetString(uint /*StringName*/  name) => glGetStringPtr?.Invoke(name) ?? default;
        private delegate byte /*String*/ glGetStringDel(uint /*StringName*/  name);
        private static glGetStringDel glGetStringPtr;
        
        // glGetStringi
        public static byte /*String*/ glGetStringi(uint /*StringName*/  name, uint  index) => glGetStringiPtr?.Invoke(name, index) ?? default;
        private delegate byte /*String*/ glGetStringiDel(uint /*StringName*/  name, uint  index);
        private static glGetStringiDel glGetStringiPtr;
        
        // glGetSubroutineIndex
        public static uint glGetSubroutineIndex(uint  program, uint /*ShaderType*/  shadertype, string  name) => glGetSubroutineIndexPtr?.Invoke(program, shadertype, name) ?? default;
        private delegate uint glGetSubroutineIndexDel(uint  program, uint /*ShaderType*/  shadertype, string  name);
        private static glGetSubroutineIndexDel glGetSubroutineIndexPtr;
        
        // glGetSubroutineUniformLocation
        public static int glGetSubroutineUniformLocation(uint  program, uint /*ShaderType*/  shadertype, string  name) => glGetSubroutineUniformLocationPtr?.Invoke(program, shadertype, name) ?? default;
        private delegate int glGetSubroutineUniformLocationDel(uint  program, uint /*ShaderType*/  shadertype, string  name);
        private static glGetSubroutineUniformLocationDel glGetSubroutineUniformLocationPtr;
        
        // glGetSynciv
        public static void glGetSynciv(IntPtr /*sync*/  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values) => glGetSyncivPtr?.Invoke(sync, pname, count, length, values);
        private delegate void glGetSyncivDel(IntPtr /*sync*/  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values);
        private static glGetSyncivDel glGetSyncivPtr;
        
        // glGetSyncivAPPLE
        public static void glGetSyncivAPPLE(IntPtr  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values) => glGetSyncivAPPLEPtr?.Invoke(sync, pname, count, length, values);
        private delegate void glGetSyncivAPPLEDel(IntPtr  sync, uint /*SyncParameterName*/  pname, uint  count, uint[]  length, int[]  values);
        private static glGetSyncivAPPLEDel glGetSyncivAPPLEPtr;
        
        // glGetTexBumpParameterfvATI
        public static void glGetTexBumpParameterfvATI(uint /*GetTexBumpParameterATI*/  pname, float[]  param) => glGetTexBumpParameterfvATIPtr?.Invoke(pname, param);
        private delegate void glGetTexBumpParameterfvATIDel(uint /*GetTexBumpParameterATI*/  pname, float[]  param);
        private static glGetTexBumpParameterfvATIDel glGetTexBumpParameterfvATIPtr;
        
        // glGetTexBumpParameterivATI
        public static void glGetTexBumpParameterivATI(uint /*GetTexBumpParameterATI*/  pname, int[]  param) => glGetTexBumpParameterivATIPtr?.Invoke(pname, param);
        private delegate void glGetTexBumpParameterivATIDel(uint /*GetTexBumpParameterATI*/  pname, int[]  param);
        private static glGetTexBumpParameterivATIDel glGetTexBumpParameterivATIPtr;
        
        // glGetTexEnvfv
        public static void glGetTexEnvfv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters) => glGetTexEnvfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexEnvfvDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[]  parameters);
        private static glGetTexEnvfvDel glGetTexEnvfvPtr;
        
        // glGetTexEnviv
        public static void glGetTexEnviv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glGetTexEnvivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexEnvivDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glGetTexEnvivDel glGetTexEnvivPtr;
        
        // glGetTexEnvxv
        public static void glGetTexEnvxv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glGetTexEnvxvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexEnvxvDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glGetTexEnvxvDel glGetTexEnvxvPtr;
        
        // glGetTexEnvxvOES
        public static void glGetTexEnvxvOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glGetTexEnvxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexEnvxvOESDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glGetTexEnvxvOESDel glGetTexEnvxvOESPtr;
        
        // glGetTexFilterFuncSGIS
        public static void glGetTexFilterFuncSGIS(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, float[]  weights) => glGetTexFilterFuncSGISPtr?.Invoke(target, filter, weights);
        private delegate void glGetTexFilterFuncSGISDel(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, float[]  weights);
        private static glGetTexFilterFuncSGISDel glGetTexFilterFuncSGISPtr;
        
        // glGetTexGendv
        public static void glGetTexGendv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => glGetTexGendvPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGendvDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters);
        private static glGetTexGendvDel glGetTexGendvPtr;
        
        // glGetTexGenfv
        public static void glGetTexGenfv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => glGetTexGenfvPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGenfvDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters);
        private static glGetTexGenfvDel glGetTexGenfvPtr;
        
        // glGetTexGenfvOES
        public static void glGetTexGenfvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => glGetTexGenfvOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGenfvOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters);
        private static glGetTexGenfvOESDel glGetTexGenfvOESPtr;
        
        // glGetTexGeniv
        public static void glGetTexGeniv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glGetTexGenivPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGenivDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glGetTexGenivDel glGetTexGenivPtr;
        
        // glGetTexGenivOES
        public static void glGetTexGenivOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glGetTexGenivOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGenivOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glGetTexGenivOESDel glGetTexGenivOESPtr;
        
        // glGetTexGenxvOES
        public static void glGetTexGenxvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glGetTexGenxvOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glGetTexGenxvOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glGetTexGenxvOESDel glGetTexGenxvOESPtr;
        
        // glGetTexImage
        public static void glGetTexImage(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glGetTexImagePtr?.Invoke(target, level, format, type, pixels);
        private delegate void glGetTexImageDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glGetTexImageDel glGetTexImagePtr;
        
        // glGetTexLevelParameterfv
        public static void glGetTexLevelParameterfv(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTexLevelParameterfvPtr?.Invoke(target, level, pname, parameters);
        private delegate void glGetTexLevelParameterfvDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTexLevelParameterfvDel glGetTexLevelParameterfvPtr;
        
        // glGetTexLevelParameteriv
        public static void glGetTexLevelParameteriv(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexLevelParameterivPtr?.Invoke(target, level, pname, parameters);
        private delegate void glGetTexLevelParameterivDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexLevelParameterivDel glGetTexLevelParameterivPtr;
        
        // glGetTexLevelParameterxvOES
        public static void glGetTexLevelParameterxvOES(uint /*TextureTarget*/  target, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexLevelParameterxvOESPtr?.Invoke(target, level, pname, parameters);
        private delegate void glGetTexLevelParameterxvOESDel(uint /*TextureTarget*/  target, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexLevelParameterxvOESDel glGetTexLevelParameterxvOESPtr;
        
        // glGetTexParameterIiv
        public static void glGetTexParameterIiv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterIivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIivDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterIivDel glGetTexParameterIivPtr;
        
        // glGetTexParameterIivEXT
        public static void glGetTexParameterIivEXT(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterIivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIivEXTDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterIivEXTDel glGetTexParameterIivEXTPtr;
        
        // glGetTexParameterIivOES
        public static void glGetTexParameterIivOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterIivOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIivOESDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterIivOESDel glGetTexParameterIivOESPtr;
        
        // glGetTexParameterIuiv
        public static void glGetTexParameterIuiv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetTexParameterIuivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIuivDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetTexParameterIuivDel glGetTexParameterIuivPtr;
        
        // glGetTexParameterIuivEXT
        public static void glGetTexParameterIuivEXT(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetTexParameterIuivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIuivEXTDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetTexParameterIuivEXTDel glGetTexParameterIuivEXTPtr;
        
        // glGetTexParameterIuivOES
        public static void glGetTexParameterIuivOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetTexParameterIuivOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterIuivOESDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetTexParameterIuivOESDel glGetTexParameterIuivOESPtr;
        
        // glGetTexParameterPointervAPPLE
        public static void glGetTexParameterPointervAPPLE(uint  target, uint  pname, IntPtr  parameters) => glGetTexParameterPointervAPPLEPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterPointervAPPLEDel(uint  target, uint  pname, IntPtr  parameters);
        private static glGetTexParameterPointervAPPLEDel glGetTexParameterPointervAPPLEPtr;
        
        // glGetTexParameterfv
        public static void glGetTexParameterfv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTexParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterfvDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTexParameterfvDel glGetTexParameterfvPtr;
        
        // glGetTexParameteriv
        public static void glGetTexParameteriv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterivDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterivDel glGetTexParameterivPtr;
        
        // glGetTexParameterxv
        public static void glGetTexParameterxv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterxvPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterxvDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterxvDel glGetTexParameterxvPtr;
        
        // glGetTexParameterxvOES
        public static void glGetTexParameterxvOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTexParameterxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glGetTexParameterxvOESDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTexParameterxvOESDel glGetTexParameterxvOESPtr;
        
        // glGetTextureHandleARB
        public static ulong glGetTextureHandleARB(uint  texture) => glGetTextureHandleARBPtr?.Invoke(texture) ?? default;
        private delegate ulong glGetTextureHandleARBDel(uint  texture);
        private static glGetTextureHandleARBDel glGetTextureHandleARBPtr;
        
        // glGetTextureHandleIMG
        public static ulong glGetTextureHandleIMG(uint  texture) => glGetTextureHandleIMGPtr?.Invoke(texture) ?? default;
        private delegate ulong glGetTextureHandleIMGDel(uint  texture);
        private static glGetTextureHandleIMGDel glGetTextureHandleIMGPtr;
        
        // glGetTextureHandleNV
        public static ulong glGetTextureHandleNV(uint  texture) => glGetTextureHandleNVPtr?.Invoke(texture) ?? default;
        private delegate ulong glGetTextureHandleNVDel(uint  texture);
        private static glGetTextureHandleNVDel glGetTextureHandleNVPtr;
        
        // glGetTextureImage
        public static void glGetTextureImage(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => glGetTextureImagePtr?.Invoke(texture, level, format, type, bufSize, pixels);
        private delegate void glGetTextureImageDel(uint  texture, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels);
        private static glGetTextureImageDel glGetTextureImagePtr;
        
        // glGetTextureImageEXT
        public static void glGetTextureImageEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glGetTextureImageEXTPtr?.Invoke(texture, target, level, format, type, pixels);
        private delegate void glGetTextureImageEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glGetTextureImageEXTDel glGetTextureImageEXTPtr;
        
        // glGetTextureLevelParameterfv
        public static void glGetTextureLevelParameterfv(uint  texture, int  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTextureLevelParameterfvPtr?.Invoke(texture, level, pname, parameters);
        private delegate void glGetTextureLevelParameterfvDel(uint  texture, int  level, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTextureLevelParameterfvDel glGetTextureLevelParameterfvPtr;
        
        // glGetTextureLevelParameterfvEXT
        public static void glGetTextureLevelParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTextureLevelParameterfvEXTPtr?.Invoke(texture, target, level, pname, parameters);
        private delegate void glGetTextureLevelParameterfvEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTextureLevelParameterfvEXTDel glGetTextureLevelParameterfvEXTPtr;
        
        // glGetTextureLevelParameteriv
        public static void glGetTextureLevelParameteriv(uint  texture, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureLevelParameterivPtr?.Invoke(texture, level, pname, parameters);
        private delegate void glGetTextureLevelParameterivDel(uint  texture, int  level, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureLevelParameterivDel glGetTextureLevelParameterivPtr;
        
        // glGetTextureLevelParameterivEXT
        public static void glGetTextureLevelParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureLevelParameterivEXTPtr?.Invoke(texture, target, level, pname, parameters);
        private delegate void glGetTextureLevelParameterivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureLevelParameterivEXTDel glGetTextureLevelParameterivEXTPtr;
        
        // glGetTextureParameterIiv
        public static void glGetTextureParameterIiv(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureParameterIivPtr?.Invoke(texture, pname, parameters);
        private delegate void glGetTextureParameterIivDel(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureParameterIivDel glGetTextureParameterIivPtr;
        
        // glGetTextureParameterIivEXT
        public static void glGetTextureParameterIivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureParameterIivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glGetTextureParameterIivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureParameterIivEXTDel glGetTextureParameterIivEXTPtr;
        
        // glGetTextureParameterIuiv
        public static void glGetTextureParameterIuiv(uint  texture, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetTextureParameterIuivPtr?.Invoke(texture, pname, parameters);
        private delegate void glGetTextureParameterIuivDel(uint  texture, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetTextureParameterIuivDel glGetTextureParameterIuivPtr;
        
        // glGetTextureParameterIuivEXT
        public static void glGetTextureParameterIuivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters) => glGetTextureParameterIuivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glGetTextureParameterIuivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, uint[]  parameters);
        private static glGetTextureParameterIuivEXTDel glGetTextureParameterIuivEXTPtr;
        
        // glGetTextureParameterfv
        public static void glGetTextureParameterfv(uint  texture, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTextureParameterfvPtr?.Invoke(texture, pname, parameters);
        private delegate void glGetTextureParameterfvDel(uint  texture, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTextureParameterfvDel glGetTextureParameterfvPtr;
        
        // glGetTextureParameterfvEXT
        public static void glGetTextureParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters) => glGetTextureParameterfvEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glGetTextureParameterfvEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, float[]  parameters);
        private static glGetTextureParameterfvEXTDel glGetTextureParameterfvEXTPtr;
        
        // glGetTextureParameteriv
        public static void glGetTextureParameteriv(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureParameterivPtr?.Invoke(texture, pname, parameters);
        private delegate void glGetTextureParameterivDel(uint  texture, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureParameterivDel glGetTextureParameterivPtr;
        
        // glGetTextureParameterivEXT
        public static void glGetTextureParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glGetTextureParameterivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glGetTextureParameterivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glGetTextureParameterivEXTDel glGetTextureParameterivEXTPtr;
        
        // glGetTextureSamplerHandleARB
        public static ulong glGetTextureSamplerHandleARB(uint  texture, uint  sampler) => glGetTextureSamplerHandleARBPtr?.Invoke(texture, sampler) ?? default;
        private delegate ulong glGetTextureSamplerHandleARBDel(uint  texture, uint  sampler);
        private static glGetTextureSamplerHandleARBDel glGetTextureSamplerHandleARBPtr;
        
        // glGetTextureSamplerHandleIMG
        public static ulong glGetTextureSamplerHandleIMG(uint  texture, uint  sampler) => glGetTextureSamplerHandleIMGPtr?.Invoke(texture, sampler) ?? default;
        private delegate ulong glGetTextureSamplerHandleIMGDel(uint  texture, uint  sampler);
        private static glGetTextureSamplerHandleIMGDel glGetTextureSamplerHandleIMGPtr;
        
        // glGetTextureSamplerHandleNV
        public static ulong glGetTextureSamplerHandleNV(uint  texture, uint  sampler) => glGetTextureSamplerHandleNVPtr?.Invoke(texture, sampler) ?? default;
        private delegate ulong glGetTextureSamplerHandleNVDel(uint  texture, uint  sampler);
        private static glGetTextureSamplerHandleNVDel glGetTextureSamplerHandleNVPtr;
        
        // glGetTextureSubImage
        public static void glGetTextureSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => glGetTextureSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        private delegate void glGetTextureSubImageDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels);
        private static glGetTextureSubImageDel glGetTextureSubImagePtr;
        
        // glGetTrackMatrixivNV
        public static void glGetTrackMatrixivNV(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => glGetTrackMatrixivNVPtr?.Invoke(target, address, pname, parameters);
        private delegate void glGetTrackMatrixivNVDel(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  pname, int[]  parameters);
        private static glGetTrackMatrixivNVDel glGetTrackMatrixivNVPtr;
        
        // glGetTransformFeedbackVarying
        public static void glGetTransformFeedbackVarying(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name) => glGetTransformFeedbackVaryingPtr?.Invoke(program, index, bufSize, length, size, type, name);
        private delegate void glGetTransformFeedbackVaryingDel(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name);
        private static glGetTransformFeedbackVaryingDel glGetTransformFeedbackVaryingPtr;
        
        // glGetTransformFeedbackVaryingEXT
        public static void glGetTransformFeedbackVaryingEXT(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name) => glGetTransformFeedbackVaryingEXTPtr?.Invoke(program, index, bufSize, length, size, type, name);
        private delegate void glGetTransformFeedbackVaryingEXTDel(uint  program, uint  index, uint  bufSize, uint[]  length, uint[]  size, uint[] /*AttributeType*/  type, string  name);
        private static glGetTransformFeedbackVaryingEXTDel glGetTransformFeedbackVaryingEXTPtr;
        
        // glGetTransformFeedbackVaryingNV
        public static void glGetTransformFeedbackVaryingNV(uint  program, uint  index, int[]  location) => glGetTransformFeedbackVaryingNVPtr?.Invoke(program, index, location);
        private delegate void glGetTransformFeedbackVaryingNVDel(uint  program, uint  index, int[]  location);
        private static glGetTransformFeedbackVaryingNVDel glGetTransformFeedbackVaryingNVPtr;
        
        // glGetTransformFeedbacki64_v
        public static void glGetTransformFeedbacki64_v(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, long[]  param) => glGetTransformFeedbacki64_vPtr?.Invoke(xfb, pname, index, param);
        private delegate void glGetTransformFeedbacki64_vDel(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, long[]  param);
        private static glGetTransformFeedbacki64_vDel glGetTransformFeedbacki64_vPtr;
        
        // glGetTransformFeedbacki_v
        public static void glGetTransformFeedbacki_v(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, int[]  param) => glGetTransformFeedbacki_vPtr?.Invoke(xfb, pname, index, param);
        private delegate void glGetTransformFeedbacki_vDel(uint  xfb, uint /*TransformFeedbackPName*/  pname, uint  index, int[]  param);
        private static glGetTransformFeedbacki_vDel glGetTransformFeedbacki_vPtr;
        
        // glGetTransformFeedbackiv
        public static void glGetTransformFeedbackiv(uint  xfb, uint /*TransformFeedbackPName*/  pname, int[]  param) => glGetTransformFeedbackivPtr?.Invoke(xfb, pname, param);
        private delegate void glGetTransformFeedbackivDel(uint  xfb, uint /*TransformFeedbackPName*/  pname, int[]  param);
        private static glGetTransformFeedbackivDel glGetTransformFeedbackivPtr;
        
        // glGetTranslatedShaderSourceANGLE
        public static void glGetTranslatedShaderSourceANGLE(uint  shader, uint  bufSize, uint[]  length, string  source) => glGetTranslatedShaderSourceANGLEPtr?.Invoke(shader, bufSize, length, source);
        private delegate void glGetTranslatedShaderSourceANGLEDel(uint  shader, uint  bufSize, uint[]  length, string  source);
        private static glGetTranslatedShaderSourceANGLEDel glGetTranslatedShaderSourceANGLEPtr;
        
        // glGetUniformBlockIndex
        public static uint glGetUniformBlockIndex(uint  program, string  uniformBlockName) => glGetUniformBlockIndexPtr?.Invoke(program, uniformBlockName) ?? default;
        private delegate uint glGetUniformBlockIndexDel(uint  program, string  uniformBlockName);
        private static glGetUniformBlockIndexDel glGetUniformBlockIndexPtr;
        
        // glGetUniformBufferSizeEXT
        public static int glGetUniformBufferSizeEXT(uint  program, int  location) => glGetUniformBufferSizeEXTPtr?.Invoke(program, location) ?? default;
        private delegate int glGetUniformBufferSizeEXTDel(uint  program, int  location);
        private static glGetUniformBufferSizeEXTDel glGetUniformBufferSizeEXTPtr;
        
        // glGetUniformIndices
        public static void glGetUniformIndices(uint  program, uint  uniformCount, string  uniformNames, uint[]  uniformIndices) => glGetUniformIndicesPtr?.Invoke(program, uniformCount, uniformNames, uniformIndices);
        private delegate void glGetUniformIndicesDel(uint  program, uint  uniformCount, string  uniformNames, uint[]  uniformIndices);
        private static glGetUniformIndicesDel glGetUniformIndicesPtr;
        
        // glGetUniformLocation
        public static int glGetUniformLocation(uint  program, string  name) => glGetUniformLocationPtr?.Invoke(program, name) ?? default;
        private delegate int glGetUniformLocationDel(uint  program, string  name);
        private static glGetUniformLocationDel glGetUniformLocationPtr;
        
        // glGetUniformLocationARB
        public static int glGetUniformLocationARB(IntPtr /*handleARB*/  programObj, string  name) => glGetUniformLocationARBPtr?.Invoke(programObj, name) ?? default;
        private delegate int glGetUniformLocationARBDel(IntPtr /*handleARB*/  programObj, string  name);
        private static glGetUniformLocationARBDel glGetUniformLocationARBPtr;
        
        // glGetUniformOffsetEXT
        public static IntPtr /*BufferOffset*/ glGetUniformOffsetEXT(uint  program, int  location) => glGetUniformOffsetEXTPtr?.Invoke(program, location) ?? default;
        private delegate IntPtr /*BufferOffset*/ glGetUniformOffsetEXTDel(uint  program, int  location);
        private static glGetUniformOffsetEXTDel glGetUniformOffsetEXTPtr;
        
        // glGetUniformSubroutineuiv
        public static void glGetUniformSubroutineuiv(uint /*ShaderType*/  shadertype, int  location, uint[]  parameters) => glGetUniformSubroutineuivPtr?.Invoke(shadertype, location, parameters);
        private delegate void glGetUniformSubroutineuivDel(uint /*ShaderType*/  shadertype, int  location, uint[]  parameters);
        private static glGetUniformSubroutineuivDel glGetUniformSubroutineuivPtr;
        
        // glGetUniformdv
        public static void glGetUniformdv(uint  program, int  location, double[]  parameters) => glGetUniformdvPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformdvDel(uint  program, int  location, double[]  parameters);
        private static glGetUniformdvDel glGetUniformdvPtr;
        
        // glGetUniformfv
        public static void glGetUniformfv(uint  program, int  location, float[]  parameters) => glGetUniformfvPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformfvDel(uint  program, int  location, float[]  parameters);
        private static glGetUniformfvDel glGetUniformfvPtr;
        
        // glGetUniformfvARB
        public static void glGetUniformfvARB(IntPtr /*handleARB*/  programObj, int  location, float[]  parameters) => glGetUniformfvARBPtr?.Invoke(programObj, location, parameters);
        private delegate void glGetUniformfvARBDel(IntPtr /*handleARB*/  programObj, int  location, float[]  parameters);
        private static glGetUniformfvARBDel glGetUniformfvARBPtr;
        
        // glGetUniformi64vARB
        public static void glGetUniformi64vARB(uint  program, int  location, long[]  parameters) => glGetUniformi64vARBPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformi64vARBDel(uint  program, int  location, long[]  parameters);
        private static glGetUniformi64vARBDel glGetUniformi64vARBPtr;
        
        // glGetUniformi64vNV
        public static void glGetUniformi64vNV(uint  program, int  location, long[]  parameters) => glGetUniformi64vNVPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformi64vNVDel(uint  program, int  location, long[]  parameters);
        private static glGetUniformi64vNVDel glGetUniformi64vNVPtr;
        
        // glGetUniformiv
        public static void glGetUniformiv(uint  program, int  location, int[]  parameters) => glGetUniformivPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformivDel(uint  program, int  location, int[]  parameters);
        private static glGetUniformivDel glGetUniformivPtr;
        
        // glGetUniformivARB
        public static void glGetUniformivARB(IntPtr /*handleARB*/  programObj, int  location, int[]  parameters) => glGetUniformivARBPtr?.Invoke(programObj, location, parameters);
        private delegate void glGetUniformivARBDel(IntPtr /*handleARB*/  programObj, int  location, int[]  parameters);
        private static glGetUniformivARBDel glGetUniformivARBPtr;
        
        // glGetUniformui64vARB
        public static void glGetUniformui64vARB(uint  program, int  location, ulong[]  parameters) => glGetUniformui64vARBPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformui64vARBDel(uint  program, int  location, ulong[]  parameters);
        private static glGetUniformui64vARBDel glGetUniformui64vARBPtr;
        
        // glGetUniformui64vNV
        public static void glGetUniformui64vNV(uint  program, int  location, ulong[]  parameters) => glGetUniformui64vNVPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformui64vNVDel(uint  program, int  location, ulong[]  parameters);
        private static glGetUniformui64vNVDel glGetUniformui64vNVPtr;
        
        // glGetUniformuiv
        public static void glGetUniformuiv(uint  program, int  location, uint[]  parameters) => glGetUniformuivPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformuivDel(uint  program, int  location, uint[]  parameters);
        private static glGetUniformuivDel glGetUniformuivPtr;
        
        // glGetUniformuivEXT
        public static void glGetUniformuivEXT(uint  program, int  location, uint[]  parameters) => glGetUniformuivEXTPtr?.Invoke(program, location, parameters);
        private delegate void glGetUniformuivEXTDel(uint  program, int  location, uint[]  parameters);
        private static glGetUniformuivEXTDel glGetUniformuivEXTPtr;
        
        // glGetUnsignedBytevEXT
        public static void glGetUnsignedBytevEXT(uint /*GetPName*/  pname, byte[]  data) => glGetUnsignedBytevEXTPtr?.Invoke(pname, data);
        private delegate void glGetUnsignedBytevEXTDel(uint /*GetPName*/  pname, byte[]  data);
        private static glGetUnsignedBytevEXTDel glGetUnsignedBytevEXTPtr;
        
        // glGetUnsignedBytei_vEXT
        public static void glGetUnsignedBytei_vEXT(uint  target, uint  index, byte[]  data) => glGetUnsignedBytei_vEXTPtr?.Invoke(target, index, data);
        private delegate void glGetUnsignedBytei_vEXTDel(uint  target, uint  index, byte[]  data);
        private static glGetUnsignedBytei_vEXTDel glGetUnsignedBytei_vEXTPtr;
        
        // glGetVariantArrayObjectfvATI
        public static void glGetVariantArrayObjectfvATI(uint  id, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => glGetVariantArrayObjectfvATIPtr?.Invoke(id, pname, parameters);
        private delegate void glGetVariantArrayObjectfvATIDel(uint  id, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters);
        private static glGetVariantArrayObjectfvATIDel glGetVariantArrayObjectfvATIPtr;
        
        // glGetVariantArrayObjectivATI
        public static void glGetVariantArrayObjectivATI(uint  id, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => glGetVariantArrayObjectivATIPtr?.Invoke(id, pname, parameters);
        private delegate void glGetVariantArrayObjectivATIDel(uint  id, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters);
        private static glGetVariantArrayObjectivATIDel glGetVariantArrayObjectivATIPtr;
        
        // glGetVariantBooleanvEXT
        public static void glGetVariantBooleanvEXT(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data) => glGetVariantBooleanvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetVariantBooleanvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, bool[] /*Boolean*/  data);
        private static glGetVariantBooleanvEXTDel glGetVariantBooleanvEXTPtr;
        
        // glGetVariantFloatvEXT
        public static void glGetVariantFloatvEXT(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data) => glGetVariantFloatvEXTPtr?.Invoke(id, value, data);
        private delegate void glGetVariantFloatvEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, float[]  data);
        private static glGetVariantFloatvEXTDel glGetVariantFloatvEXTPtr;
        
        // glGetVariantIntegervEXT
        public static void glGetVariantIntegervEXT(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data) => glGetVariantIntegervEXTPtr?.Invoke(id, value, data);
        private delegate void glGetVariantIntegervEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, int[]  data);
        private static glGetVariantIntegervEXTDel glGetVariantIntegervEXTPtr;
        
        // glGetVariantPointervEXT
        public static void glGetVariantPointervEXT(uint  id, uint /*GetVariantValueEXT*/  value, IntPtr  data) => glGetVariantPointervEXTPtr?.Invoke(id, value, data);
        private delegate void glGetVariantPointervEXTDel(uint  id, uint /*GetVariantValueEXT*/  value, IntPtr  data);
        private static glGetVariantPointervEXTDel glGetVariantPointervEXTPtr;
        
        // glGetVaryingLocationNV
        public static int glGetVaryingLocationNV(uint  program, string  name) => glGetVaryingLocationNVPtr?.Invoke(program, name) ?? default;
        private delegate int glGetVaryingLocationNVDel(uint  program, string  name);
        private static glGetVaryingLocationNVDel glGetVaryingLocationNVPtr;
        
        // glGetVertexArrayIndexed64iv
        public static void glGetVertexArrayIndexed64iv(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, long[]  param) => glGetVertexArrayIndexed64ivPtr?.Invoke(vaobj, index, pname, param);
        private delegate void glGetVertexArrayIndexed64ivDel(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, long[]  param);
        private static glGetVertexArrayIndexed64ivDel glGetVertexArrayIndexed64ivPtr;
        
        // glGetVertexArrayIndexediv
        public static void glGetVertexArrayIndexediv(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param) => glGetVertexArrayIndexedivPtr?.Invoke(vaobj, index, pname, param);
        private delegate void glGetVertexArrayIndexedivDel(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param);
        private static glGetVertexArrayIndexedivDel glGetVertexArrayIndexedivPtr;
        
        // glGetVertexArrayIntegeri_vEXT
        public static void glGetVertexArrayIntegeri_vEXT(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param) => glGetVertexArrayIntegeri_vEXTPtr?.Invoke(vaobj, index, pname, param);
        private delegate void glGetVertexArrayIntegeri_vEXTDel(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, int[]  param);
        private static glGetVertexArrayIntegeri_vEXTDel glGetVertexArrayIntegeri_vEXTPtr;
        
        // glGetVertexArrayIntegervEXT
        public static void glGetVertexArrayIntegervEXT(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param) => glGetVertexArrayIntegervEXTPtr?.Invoke(vaobj, pname, param);
        private delegate void glGetVertexArrayIntegervEXTDel(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param);
        private static glGetVertexArrayIntegervEXTDel glGetVertexArrayIntegervEXTPtr;
        
        // glGetVertexArrayPointeri_vEXT
        public static void glGetVertexArrayPointeri_vEXT(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, IntPtr  param) => glGetVertexArrayPointeri_vEXTPtr?.Invoke(vaobj, index, pname, param);
        private delegate void glGetVertexArrayPointeri_vEXTDel(uint  vaobj, uint  index, uint /*VertexArrayPName*/  pname, IntPtr  param);
        private static glGetVertexArrayPointeri_vEXTDel glGetVertexArrayPointeri_vEXTPtr;
        
        // glGetVertexArrayPointervEXT
        public static void glGetVertexArrayPointervEXT(uint  vaobj, uint /*VertexArrayPName*/  pname, IntPtr  param) => glGetVertexArrayPointervEXTPtr?.Invoke(vaobj, pname, param);
        private delegate void glGetVertexArrayPointervEXTDel(uint  vaobj, uint /*VertexArrayPName*/  pname, IntPtr  param);
        private static glGetVertexArrayPointervEXTDel glGetVertexArrayPointervEXTPtr;
        
        // glGetVertexArrayiv
        public static void glGetVertexArrayiv(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param) => glGetVertexArrayivPtr?.Invoke(vaobj, pname, param);
        private delegate void glGetVertexArrayivDel(uint  vaobj, uint /*VertexArrayPName*/  pname, int[]  param);
        private static glGetVertexArrayivDel glGetVertexArrayivPtr;
        
        // glGetVertexAttribArrayObjectfvATI
        public static void glGetVertexAttribArrayObjectfvATI(uint  index, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters) => glGetVertexAttribArrayObjectfvATIPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribArrayObjectfvATIDel(uint  index, uint /*ArrayObjectPNameATI*/  pname, float[]  parameters);
        private static glGetVertexAttribArrayObjectfvATIDel glGetVertexAttribArrayObjectfvATIPtr;
        
        // glGetVertexAttribArrayObjectivATI
        public static void glGetVertexAttribArrayObjectivATI(uint  index, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters) => glGetVertexAttribArrayObjectivATIPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribArrayObjectivATIDel(uint  index, uint /*ArrayObjectPNameATI*/  pname, int[]  parameters);
        private static glGetVertexAttribArrayObjectivATIDel glGetVertexAttribArrayObjectivATIPtr;
        
        // glGetVertexAttribIiv
        public static void glGetVertexAttribIiv(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters) => glGetVertexAttribIivPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribIivDel(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters);
        private static glGetVertexAttribIivDel glGetVertexAttribIivPtr;
        
        // glGetVertexAttribIivEXT
        public static void glGetVertexAttribIivEXT(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters) => glGetVertexAttribIivEXTPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribIivEXTDel(uint  index, uint /*VertexAttribEnum*/  pname, int[]  parameters);
        private static glGetVertexAttribIivEXTDel glGetVertexAttribIivEXTPtr;
        
        // glGetVertexAttribIuiv
        public static void glGetVertexAttribIuiv(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters) => glGetVertexAttribIuivPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribIuivDel(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters);
        private static glGetVertexAttribIuivDel glGetVertexAttribIuivPtr;
        
        // glGetVertexAttribIuivEXT
        public static void glGetVertexAttribIuivEXT(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters) => glGetVertexAttribIuivEXTPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribIuivEXTDel(uint  index, uint /*VertexAttribEnum*/  pname, uint[]  parameters);
        private static glGetVertexAttribIuivEXTDel glGetVertexAttribIuivEXTPtr;
        
        // glGetVertexAttribLdv
        public static void glGetVertexAttribLdv(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters) => glGetVertexAttribLdvPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribLdvDel(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters);
        private static glGetVertexAttribLdvDel glGetVertexAttribLdvPtr;
        
        // glGetVertexAttribLdvEXT
        public static void glGetVertexAttribLdvEXT(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters) => glGetVertexAttribLdvEXTPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribLdvEXTDel(uint  index, uint /*VertexAttribEnum*/  pname, double[]  parameters);
        private static glGetVertexAttribLdvEXTDel glGetVertexAttribLdvEXTPtr;
        
        // glGetVertexAttribLi64vNV
        public static void glGetVertexAttribLi64vNV(uint  index, uint /*VertexAttribEnum*/  pname, long[]  parameters) => glGetVertexAttribLi64vNVPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribLi64vNVDel(uint  index, uint /*VertexAttribEnum*/  pname, long[]  parameters);
        private static glGetVertexAttribLi64vNVDel glGetVertexAttribLi64vNVPtr;
        
        // glGetVertexAttribLui64vARB
        public static void glGetVertexAttribLui64vARB(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters) => glGetVertexAttribLui64vARBPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribLui64vARBDel(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters);
        private static glGetVertexAttribLui64vARBDel glGetVertexAttribLui64vARBPtr;
        
        // glGetVertexAttribLui64vNV
        public static void glGetVertexAttribLui64vNV(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters) => glGetVertexAttribLui64vNVPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribLui64vNVDel(uint  index, uint /*VertexAttribEnum*/  pname, ulong[]  parameters);
        private static glGetVertexAttribLui64vNVDel glGetVertexAttribLui64vNVPtr;
        
        // glGetVertexAttribPointerv
        public static void glGetVertexAttribPointerv(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer) => glGetVertexAttribPointervPtr?.Invoke(index, pname, pointer);
        private delegate void glGetVertexAttribPointervDel(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer);
        private static glGetVertexAttribPointervDel glGetVertexAttribPointervPtr;
        
        // glGetVertexAttribPointervARB
        public static void glGetVertexAttribPointervARB(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer) => glGetVertexAttribPointervARBPtr?.Invoke(index, pname, pointer);
        private delegate void glGetVertexAttribPointervARBDel(uint  index, uint /*VertexAttribPointerPropertyARB*/  pname, IntPtr  pointer);
        private static glGetVertexAttribPointervARBDel glGetVertexAttribPointervARBPtr;
        
        // glGetVertexAttribPointervNV
        public static void glGetVertexAttribPointervNV(uint  index, uint /*VertexAttribEnumNV*/  pname, IntPtr  pointer) => glGetVertexAttribPointervNVPtr?.Invoke(index, pname, pointer);
        private delegate void glGetVertexAttribPointervNVDel(uint  index, uint /*VertexAttribEnumNV*/  pname, IntPtr  pointer);
        private static glGetVertexAttribPointervNVDel glGetVertexAttribPointervNVPtr;
        
        // glGetVertexAttribdv
        public static void glGetVertexAttribdv(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters) => glGetVertexAttribdvPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribdvDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters);
        private static glGetVertexAttribdvDel glGetVertexAttribdvPtr;
        
        // glGetVertexAttribdvARB
        public static void glGetVertexAttribdvARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters) => glGetVertexAttribdvARBPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribdvARBDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, double[]  parameters);
        private static glGetVertexAttribdvARBDel glGetVertexAttribdvARBPtr;
        
        // glGetVertexAttribdvNV
        public static void glGetVertexAttribdvNV(uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters) => glGetVertexAttribdvNVPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribdvNVDel(uint  index, uint /*VertexAttribEnumNV*/  pname, double[]  parameters);
        private static glGetVertexAttribdvNVDel glGetVertexAttribdvNVPtr;
        
        // glGetVertexAttribfv
        public static void glGetVertexAttribfv(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters) => glGetVertexAttribfvPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribfvDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters);
        private static glGetVertexAttribfvDel glGetVertexAttribfvPtr;
        
        // glGetVertexAttribfvARB
        public static void glGetVertexAttribfvARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters) => glGetVertexAttribfvARBPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribfvARBDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, float[]  parameters);
        private static glGetVertexAttribfvARBDel glGetVertexAttribfvARBPtr;
        
        // glGetVertexAttribfvNV
        public static void glGetVertexAttribfvNV(uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters) => glGetVertexAttribfvNVPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribfvNVDel(uint  index, uint /*VertexAttribEnumNV*/  pname, float[]  parameters);
        private static glGetVertexAttribfvNVDel glGetVertexAttribfvNVPtr;
        
        // glGetVertexAttribiv
        public static void glGetVertexAttribiv(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters) => glGetVertexAttribivPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribivDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters);
        private static glGetVertexAttribivDel glGetVertexAttribivPtr;
        
        // glGetVertexAttribivARB
        public static void glGetVertexAttribivARB(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters) => glGetVertexAttribivARBPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribivARBDel(uint  index, uint /*VertexAttribPropertyARB*/  pname, int[]  parameters);
        private static glGetVertexAttribivARBDel glGetVertexAttribivARBPtr;
        
        // glGetVertexAttribivNV
        public static void glGetVertexAttribivNV(uint  index, uint /*VertexAttribEnumNV*/  pname, int[]  parameters) => glGetVertexAttribivNVPtr?.Invoke(index, pname, parameters);
        private delegate void glGetVertexAttribivNVDel(uint  index, uint /*VertexAttribEnumNV*/  pname, int[]  parameters);
        private static glGetVertexAttribivNVDel glGetVertexAttribivNVPtr;
        
        // glGetVideoCaptureStreamdvNV
        public static void glGetVideoCaptureStreamdvNV(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters) => glGetVideoCaptureStreamdvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glGetVideoCaptureStreamdvNVDel(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters);
        private static glGetVideoCaptureStreamdvNVDel glGetVideoCaptureStreamdvNVPtr;
        
        // glGetVideoCaptureStreamfvNV
        public static void glGetVideoCaptureStreamfvNV(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters) => glGetVideoCaptureStreamfvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glGetVideoCaptureStreamfvNVDel(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters);
        private static glGetVideoCaptureStreamfvNVDel glGetVideoCaptureStreamfvNVPtr;
        
        // glGetVideoCaptureStreamivNV
        public static void glGetVideoCaptureStreamivNV(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters) => glGetVideoCaptureStreamivNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glGetVideoCaptureStreamivNVDel(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters);
        private static glGetVideoCaptureStreamivNVDel glGetVideoCaptureStreamivNVPtr;
        
        // glGetVideoCaptureivNV
        public static void glGetVideoCaptureivNV(uint  video_capture_slot, uint  pname, int[]  parameters) => glGetVideoCaptureivNVPtr?.Invoke(video_capture_slot, pname, parameters);
        private delegate void glGetVideoCaptureivNVDel(uint  video_capture_slot, uint  pname, int[]  parameters);
        private static glGetVideoCaptureivNVDel glGetVideoCaptureivNVPtr;
        
        // glGetVideoi64vNV
        public static void glGetVideoi64vNV(uint  video_slot, uint  pname, long[]  parameters) => glGetVideoi64vNVPtr?.Invoke(video_slot, pname, parameters);
        private delegate void glGetVideoi64vNVDel(uint  video_slot, uint  pname, long[]  parameters);
        private static glGetVideoi64vNVDel glGetVideoi64vNVPtr;
        
        // glGetVideoivNV
        public static void glGetVideoivNV(uint  video_slot, uint  pname, int[]  parameters) => glGetVideoivNVPtr?.Invoke(video_slot, pname, parameters);
        private delegate void glGetVideoivNVDel(uint  video_slot, uint  pname, int[]  parameters);
        private static glGetVideoivNVDel glGetVideoivNVPtr;
        
        // glGetVideoui64vNV
        public static void glGetVideoui64vNV(uint  video_slot, uint  pname, ulong[]  parameters) => glGetVideoui64vNVPtr?.Invoke(video_slot, pname, parameters);
        private delegate void glGetVideoui64vNVDel(uint  video_slot, uint  pname, ulong[]  parameters);
        private static glGetVideoui64vNVDel glGetVideoui64vNVPtr;
        
        // glGetVideouivNV
        public static void glGetVideouivNV(uint  video_slot, uint  pname, uint[]  parameters) => glGetVideouivNVPtr?.Invoke(video_slot, pname, parameters);
        private delegate void glGetVideouivNVDel(uint  video_slot, uint  pname, uint[]  parameters);
        private static glGetVideouivNVDel glGetVideouivNVPtr;
        
        // glGetnColorTable
        public static void glGetnColorTable(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table) => glGetnColorTablePtr?.Invoke(target, format, type, bufSize, table);
        private delegate void glGetnColorTableDel(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table);
        private static glGetnColorTableDel glGetnColorTablePtr;
        
        // glGetnColorTableARB
        public static void glGetnColorTableARB(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table) => glGetnColorTableARBPtr?.Invoke(target, format, type, bufSize, table);
        private delegate void glGetnColorTableARBDel(uint /*ColorTableTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  table);
        private static glGetnColorTableARBDel glGetnColorTableARBPtr;
        
        // glGetnCompressedTexImage
        public static void glGetnCompressedTexImage(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  pixels) => glGetnCompressedTexImagePtr?.Invoke(target, lod, bufSize, pixels);
        private delegate void glGetnCompressedTexImageDel(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  pixels);
        private static glGetnCompressedTexImageDel glGetnCompressedTexImagePtr;
        
        // glGetnCompressedTexImageARB
        public static void glGetnCompressedTexImageARB(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  img) => glGetnCompressedTexImageARBPtr?.Invoke(target, lod, bufSize, img);
        private delegate void glGetnCompressedTexImageARBDel(uint /*TextureTarget*/  target, int  lod, uint  bufSize, IntPtr  img);
        private static glGetnCompressedTexImageARBDel glGetnCompressedTexImageARBPtr;
        
        // glGetnConvolutionFilter
        public static void glGetnConvolutionFilter(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image) => glGetnConvolutionFilterPtr?.Invoke(target, format, type, bufSize, image);
        private delegate void glGetnConvolutionFilterDel(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image);
        private static glGetnConvolutionFilterDel glGetnConvolutionFilterPtr;
        
        // glGetnConvolutionFilterARB
        public static void glGetnConvolutionFilterARB(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image) => glGetnConvolutionFilterARBPtr?.Invoke(target, format, type, bufSize, image);
        private delegate void glGetnConvolutionFilterARBDel(uint /*ConvolutionTarget*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  image);
        private static glGetnConvolutionFilterARBDel glGetnConvolutionFilterARBPtr;
        
        // glGetnHistogram
        public static void glGetnHistogram(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => glGetnHistogramPtr?.Invoke(target, reset, format, type, bufSize, values);
        private delegate void glGetnHistogramDel(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values);
        private static glGetnHistogramDel glGetnHistogramPtr;
        
        // glGetnHistogramARB
        public static void glGetnHistogramARB(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => glGetnHistogramARBPtr?.Invoke(target, reset, format, type, bufSize, values);
        private delegate void glGetnHistogramARBDel(uint /*HistogramTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values);
        private static glGetnHistogramARBDel glGetnHistogramARBPtr;
        
        // glGetnMapdv
        public static void glGetnMapdv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v) => glGetnMapdvPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapdvDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v);
        private static glGetnMapdvDel glGetnMapdvPtr;
        
        // glGetnMapdvARB
        public static void glGetnMapdvARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v) => glGetnMapdvARBPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapdvARBDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, double[]  v);
        private static glGetnMapdvARBDel glGetnMapdvARBPtr;
        
        // glGetnMapfv
        public static void glGetnMapfv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v) => glGetnMapfvPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapfvDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v);
        private static glGetnMapfvDel glGetnMapfvPtr;
        
        // glGetnMapfvARB
        public static void glGetnMapfvARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v) => glGetnMapfvARBPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapfvARBDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, float[]  v);
        private static glGetnMapfvARBDel glGetnMapfvARBPtr;
        
        // glGetnMapiv
        public static void glGetnMapiv(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v) => glGetnMapivPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapivDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v);
        private static glGetnMapivDel glGetnMapivPtr;
        
        // glGetnMapivARB
        public static void glGetnMapivARB(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v) => glGetnMapivARBPtr?.Invoke(target, query, bufSize, v);
        private delegate void glGetnMapivARBDel(uint /*MapTarget*/  target, uint /*MapQuery*/  query, uint  bufSize, int[]  v);
        private static glGetnMapivARBDel glGetnMapivARBPtr;
        
        // glGetnMinmax
        public static void glGetnMinmax(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => glGetnMinmaxPtr?.Invoke(target, reset, format, type, bufSize, values);
        private delegate void glGetnMinmaxDel(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values);
        private static glGetnMinmaxDel glGetnMinmaxPtr;
        
        // glGetnMinmaxARB
        public static void glGetnMinmaxARB(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values) => glGetnMinmaxARBPtr?.Invoke(target, reset, format, type, bufSize, values);
        private delegate void glGetnMinmaxARBDel(uint /*MinmaxTargetEXT*/  target, bool /*Boolean*/  reset, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  values);
        private static glGetnMinmaxARBDel glGetnMinmaxARBPtr;
        
        // glGetnPixelMapfv
        public static void glGetnPixelMapfv(uint /*PixelMap*/  map, uint  bufSize, float[]  values) => glGetnPixelMapfvPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapfvDel(uint /*PixelMap*/  map, uint  bufSize, float[]  values);
        private static glGetnPixelMapfvDel glGetnPixelMapfvPtr;
        
        // glGetnPixelMapfvARB
        public static void glGetnPixelMapfvARB(uint /*PixelMap*/  map, uint  bufSize, float[]  values) => glGetnPixelMapfvARBPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapfvARBDel(uint /*PixelMap*/  map, uint  bufSize, float[]  values);
        private static glGetnPixelMapfvARBDel glGetnPixelMapfvARBPtr;
        
        // glGetnPixelMapuiv
        public static void glGetnPixelMapuiv(uint /*PixelMap*/  map, uint  bufSize, uint[]  values) => glGetnPixelMapuivPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapuivDel(uint /*PixelMap*/  map, uint  bufSize, uint[]  values);
        private static glGetnPixelMapuivDel glGetnPixelMapuivPtr;
        
        // glGetnPixelMapuivARB
        public static void glGetnPixelMapuivARB(uint /*PixelMap*/  map, uint  bufSize, uint[]  values) => glGetnPixelMapuivARBPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapuivARBDel(uint /*PixelMap*/  map, uint  bufSize, uint[]  values);
        private static glGetnPixelMapuivARBDel glGetnPixelMapuivARBPtr;
        
        // glGetnPixelMapusv
        public static void glGetnPixelMapusv(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values) => glGetnPixelMapusvPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapusvDel(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values);
        private static glGetnPixelMapusvDel glGetnPixelMapusvPtr;
        
        // glGetnPixelMapusvARB
        public static void glGetnPixelMapusvARB(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values) => glGetnPixelMapusvARBPtr?.Invoke(map, bufSize, values);
        private delegate void glGetnPixelMapusvARBDel(uint /*PixelMap*/  map, uint  bufSize, ushort[]  values);
        private static glGetnPixelMapusvARBDel glGetnPixelMapusvARBPtr;
        
        // glGetnPolygonStipple
        public static void glGetnPolygonStipple(uint  bufSize, byte[]  pattern) => glGetnPolygonStipplePtr?.Invoke(bufSize, pattern);
        private delegate void glGetnPolygonStippleDel(uint  bufSize, byte[]  pattern);
        private static glGetnPolygonStippleDel glGetnPolygonStipplePtr;
        
        // glGetnPolygonStippleARB
        public static void glGetnPolygonStippleARB(uint  bufSize, byte[]  pattern) => glGetnPolygonStippleARBPtr?.Invoke(bufSize, pattern);
        private delegate void glGetnPolygonStippleARBDel(uint  bufSize, byte[]  pattern);
        private static glGetnPolygonStippleARBDel glGetnPolygonStippleARBPtr;
        
        // glGetnSeparableFilter
        public static void glGetnSeparableFilter(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span) => glGetnSeparableFilterPtr?.Invoke(target, format, type, rowBufSize, row, columnBufSize, column, span);
        private delegate void glGetnSeparableFilterDel(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span);
        private static glGetnSeparableFilterDel glGetnSeparableFilterPtr;
        
        // glGetnSeparableFilterARB
        public static void glGetnSeparableFilterARB(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span) => glGetnSeparableFilterARBPtr?.Invoke(target, format, type, rowBufSize, row, columnBufSize, column, span);
        private delegate void glGetnSeparableFilterARBDel(uint /*SeparableTargetEXT*/  target, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  rowBufSize, IntPtr  row, uint  columnBufSize, IntPtr  column, IntPtr  span);
        private static glGetnSeparableFilterARBDel glGetnSeparableFilterARBPtr;
        
        // glGetnTexImage
        public static void glGetnTexImage(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels) => glGetnTexImagePtr?.Invoke(target, level, format, type, bufSize, pixels);
        private delegate void glGetnTexImageDel(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  pixels);
        private static glGetnTexImageDel glGetnTexImagePtr;
        
        // glGetnTexImageARB
        public static void glGetnTexImageARB(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  img) => glGetnTexImageARBPtr?.Invoke(target, level, format, type, bufSize, img);
        private delegate void glGetnTexImageARBDel(uint /*TextureTarget*/  target, int  level, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  img);
        private static glGetnTexImageARBDel glGetnTexImageARBPtr;
        
        // glGetnUniformdv
        public static void glGetnUniformdv(uint  program, int  location, uint  bufSize, double[]  parameters) => glGetnUniformdvPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformdvDel(uint  program, int  location, uint  bufSize, double[]  parameters);
        private static glGetnUniformdvDel glGetnUniformdvPtr;
        
        // glGetnUniformdvARB
        public static void glGetnUniformdvARB(uint  program, int  location, uint  bufSize, double[]  parameters) => glGetnUniformdvARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformdvARBDel(uint  program, int  location, uint  bufSize, double[]  parameters);
        private static glGetnUniformdvARBDel glGetnUniformdvARBPtr;
        
        // glGetnUniformfv
        public static void glGetnUniformfv(uint  program, int  location, uint  bufSize, float[]  parameters) => glGetnUniformfvPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformfvDel(uint  program, int  location, uint  bufSize, float[]  parameters);
        private static glGetnUniformfvDel glGetnUniformfvPtr;
        
        // glGetnUniformfvARB
        public static void glGetnUniformfvARB(uint  program, int  location, uint  bufSize, float[]  parameters) => glGetnUniformfvARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformfvARBDel(uint  program, int  location, uint  bufSize, float[]  parameters);
        private static glGetnUniformfvARBDel glGetnUniformfvARBPtr;
        
        // glGetnUniformfvEXT
        public static void glGetnUniformfvEXT(uint  program, int  location, uint  bufSize, float[]  parameters) => glGetnUniformfvEXTPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformfvEXTDel(uint  program, int  location, uint  bufSize, float[]  parameters);
        private static glGetnUniformfvEXTDel glGetnUniformfvEXTPtr;
        
        // glGetnUniformfvKHR
        public static void glGetnUniformfvKHR(uint  program, int  location, uint  bufSize, float[]  parameters) => glGetnUniformfvKHRPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformfvKHRDel(uint  program, int  location, uint  bufSize, float[]  parameters);
        private static glGetnUniformfvKHRDel glGetnUniformfvKHRPtr;
        
        // glGetnUniformi64vARB
        public static void glGetnUniformi64vARB(uint  program, int  location, uint  bufSize, long[]  parameters) => glGetnUniformi64vARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformi64vARBDel(uint  program, int  location, uint  bufSize, long[]  parameters);
        private static glGetnUniformi64vARBDel glGetnUniformi64vARBPtr;
        
        // glGetnUniformiv
        public static void glGetnUniformiv(uint  program, int  location, uint  bufSize, int[]  parameters) => glGetnUniformivPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformivDel(uint  program, int  location, uint  bufSize, int[]  parameters);
        private static glGetnUniformivDel glGetnUniformivPtr;
        
        // glGetnUniformivARB
        public static void glGetnUniformivARB(uint  program, int  location, uint  bufSize, int[]  parameters) => glGetnUniformivARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformivARBDel(uint  program, int  location, uint  bufSize, int[]  parameters);
        private static glGetnUniformivARBDel glGetnUniformivARBPtr;
        
        // glGetnUniformivEXT
        public static void glGetnUniformivEXT(uint  program, int  location, uint  bufSize, int[]  parameters) => glGetnUniformivEXTPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformivEXTDel(uint  program, int  location, uint  bufSize, int[]  parameters);
        private static glGetnUniformivEXTDel glGetnUniformivEXTPtr;
        
        // glGetnUniformivKHR
        public static void glGetnUniformivKHR(uint  program, int  location, uint  bufSize, int[]  parameters) => glGetnUniformivKHRPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformivKHRDel(uint  program, int  location, uint  bufSize, int[]  parameters);
        private static glGetnUniformivKHRDel glGetnUniformivKHRPtr;
        
        // glGetnUniformui64vARB
        public static void glGetnUniformui64vARB(uint  program, int  location, uint  bufSize, ulong[]  parameters) => glGetnUniformui64vARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformui64vARBDel(uint  program, int  location, uint  bufSize, ulong[]  parameters);
        private static glGetnUniformui64vARBDel glGetnUniformui64vARBPtr;
        
        // glGetnUniformuiv
        public static void glGetnUniformuiv(uint  program, int  location, uint  bufSize, uint[]  parameters) => glGetnUniformuivPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformuivDel(uint  program, int  location, uint  bufSize, uint[]  parameters);
        private static glGetnUniformuivDel glGetnUniformuivPtr;
        
        // glGetnUniformuivARB
        public static void glGetnUniformuivARB(uint  program, int  location, uint  bufSize, uint[]  parameters) => glGetnUniformuivARBPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformuivARBDel(uint  program, int  location, uint  bufSize, uint[]  parameters);
        private static glGetnUniformuivARBDel glGetnUniformuivARBPtr;
        
        // glGetnUniformuivKHR
        public static void glGetnUniformuivKHR(uint  program, int  location, uint  bufSize, uint[]  parameters) => glGetnUniformuivKHRPtr?.Invoke(program, location, bufSize, parameters);
        private delegate void glGetnUniformuivKHRDel(uint  program, int  location, uint  bufSize, uint[]  parameters);
        private static glGetnUniformuivKHRDel glGetnUniformuivKHRPtr;
        
        // glGlobalAlphaFactorbSUN
        public static void glGlobalAlphaFactorbSUN(sbyte  factor) => glGlobalAlphaFactorbSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactorbSUNDel(sbyte  factor);
        private static glGlobalAlphaFactorbSUNDel glGlobalAlphaFactorbSUNPtr;
        
        // glGlobalAlphaFactordSUN
        public static void glGlobalAlphaFactordSUN(double  factor) => glGlobalAlphaFactordSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactordSUNDel(double  factor);
        private static glGlobalAlphaFactordSUNDel glGlobalAlphaFactordSUNPtr;
        
        // glGlobalAlphaFactorfSUN
        public static void glGlobalAlphaFactorfSUN(float  factor) => glGlobalAlphaFactorfSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactorfSUNDel(float  factor);
        private static glGlobalAlphaFactorfSUNDel glGlobalAlphaFactorfSUNPtr;
        
        // glGlobalAlphaFactoriSUN
        public static void glGlobalAlphaFactoriSUN(int  factor) => glGlobalAlphaFactoriSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactoriSUNDel(int  factor);
        private static glGlobalAlphaFactoriSUNDel glGlobalAlphaFactoriSUNPtr;
        
        // glGlobalAlphaFactorsSUN
        public static void glGlobalAlphaFactorsSUN(short  factor) => glGlobalAlphaFactorsSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactorsSUNDel(short  factor);
        private static glGlobalAlphaFactorsSUNDel glGlobalAlphaFactorsSUNPtr;
        
        // glGlobalAlphaFactorubSUN
        public static void glGlobalAlphaFactorubSUN(byte  factor) => glGlobalAlphaFactorubSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactorubSUNDel(byte  factor);
        private static glGlobalAlphaFactorubSUNDel glGlobalAlphaFactorubSUNPtr;
        
        // glGlobalAlphaFactoruiSUN
        public static void glGlobalAlphaFactoruiSUN(uint  factor) => glGlobalAlphaFactoruiSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactoruiSUNDel(uint  factor);
        private static glGlobalAlphaFactoruiSUNDel glGlobalAlphaFactoruiSUNPtr;
        
        // glGlobalAlphaFactorusSUN
        public static void glGlobalAlphaFactorusSUN(ushort  factor) => glGlobalAlphaFactorusSUNPtr?.Invoke(factor);
        private delegate void glGlobalAlphaFactorusSUNDel(ushort  factor);
        private static glGlobalAlphaFactorusSUNDel glGlobalAlphaFactorusSUNPtr;
        
        // glHint
        public static void glHint(uint /*HintTarget*/  target, uint /*HintMode*/  mode) => glHintPtr?.Invoke(target, mode);
        private delegate void glHintDel(uint /*HintTarget*/  target, uint /*HintMode*/  mode);
        private static glHintDel glHintPtr;
        
        // glHintPGI
        public static void glHintPGI(uint /*HintTargetPGI*/  target, int  mode) => glHintPGIPtr?.Invoke(target, mode);
        private delegate void glHintPGIDel(uint /*HintTargetPGI*/  target, int  mode);
        private static glHintPGIDel glHintPGIPtr;
        
        // glHistogram
        public static void glHistogram(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => glHistogramPtr?.Invoke(target, width, internalformat, sink);
        private delegate void glHistogramDel(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink);
        private static glHistogramDel glHistogramPtr;
        
        // glHistogramEXT
        public static void glHistogramEXT(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => glHistogramEXTPtr?.Invoke(target, width, internalformat, sink);
        private delegate void glHistogramEXTDel(uint /*HistogramTargetEXT*/  target, uint  width, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink);
        private static glHistogramEXTDel glHistogramEXTPtr;
        
        // glIglooInterfaceSGIX
        public static void glIglooInterfaceSGIX(uint  pname, IntPtr  parameters) => glIglooInterfaceSGIXPtr?.Invoke(pname, parameters);
        private delegate void glIglooInterfaceSGIXDel(uint  pname, IntPtr  parameters);
        private static glIglooInterfaceSGIXDel glIglooInterfaceSGIXPtr;
        
        // glImageTransformParameterfHP
        public static void glImageTransformParameterfHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float  param) => glImageTransformParameterfHPPtr?.Invoke(target, pname, param);
        private delegate void glImageTransformParameterfHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float  param);
        private static glImageTransformParameterfHPDel glImageTransformParameterfHPPtr;
        
        // glImageTransformParameterfvHP
        public static void glImageTransformParameterfvHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters) => glImageTransformParameterfvHPPtr?.Invoke(target, pname, parameters);
        private delegate void glImageTransformParameterfvHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, float[]  parameters);
        private static glImageTransformParameterfvHPDel glImageTransformParameterfvHPPtr;
        
        // glImageTransformParameteriHP
        public static void glImageTransformParameteriHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int  param) => glImageTransformParameteriHPPtr?.Invoke(target, pname, param);
        private delegate void glImageTransformParameteriHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int  param);
        private static glImageTransformParameteriHPDel glImageTransformParameteriHPPtr;
        
        // glImageTransformParameterivHP
        public static void glImageTransformParameterivHP(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters) => glImageTransformParameterivHPPtr?.Invoke(target, pname, parameters);
        private delegate void glImageTransformParameterivHPDel(uint /*ImageTransformTargetHP*/  target, uint /*ImageTransformPNameHP*/  pname, int[]  parameters);
        private static glImageTransformParameterivHPDel glImageTransformParameterivHPPtr;
        
        // glImportMemoryFdEXT
        public static void glImportMemoryFdEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, int  fd) => glImportMemoryFdEXTPtr?.Invoke(memory, size, handleType, fd);
        private delegate void glImportMemoryFdEXTDel(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, int  fd);
        private static glImportMemoryFdEXTDel glImportMemoryFdEXTPtr;
        
        // glImportMemoryWin32HandleEXT
        public static void glImportMemoryWin32HandleEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  handle) => glImportMemoryWin32HandleEXTPtr?.Invoke(memory, size, handleType, handle);
        private delegate void glImportMemoryWin32HandleEXTDel(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  handle);
        private static glImportMemoryWin32HandleEXTDel glImportMemoryWin32HandleEXTPtr;
        
        // glImportMemoryWin32NameEXT
        public static void glImportMemoryWin32NameEXT(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  name) => glImportMemoryWin32NameEXTPtr?.Invoke(memory, size, handleType, name);
        private delegate void glImportMemoryWin32NameEXTDel(uint  memory, ulong  size, uint /*ExternalHandleType*/  handleType, IntPtr  name);
        private static glImportMemoryWin32NameEXTDel glImportMemoryWin32NameEXTPtr;
        
        // glImportSemaphoreFdEXT
        public static void glImportSemaphoreFdEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, int  fd) => glImportSemaphoreFdEXTPtr?.Invoke(semaphore, handleType, fd);
        private delegate void glImportSemaphoreFdEXTDel(uint  semaphore, uint /*ExternalHandleType*/  handleType, int  fd);
        private static glImportSemaphoreFdEXTDel glImportSemaphoreFdEXTPtr;
        
        // glImportSemaphoreWin32HandleEXT
        public static void glImportSemaphoreWin32HandleEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  handle) => glImportSemaphoreWin32HandleEXTPtr?.Invoke(semaphore, handleType, handle);
        private delegate void glImportSemaphoreWin32HandleEXTDel(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  handle);
        private static glImportSemaphoreWin32HandleEXTDel glImportSemaphoreWin32HandleEXTPtr;
        
        // glImportSemaphoreWin32NameEXT
        public static void glImportSemaphoreWin32NameEXT(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  name) => glImportSemaphoreWin32NameEXTPtr?.Invoke(semaphore, handleType, name);
        private delegate void glImportSemaphoreWin32NameEXTDel(uint  semaphore, uint /*ExternalHandleType*/  handleType, IntPtr  name);
        private static glImportSemaphoreWin32NameEXTDel glImportSemaphoreWin32NameEXTPtr;
        
        // glImportSyncEXT
        public static IntPtr /*sync*/ glImportSyncEXT(uint  external_sync_type, IntPtr  external_sync, uint  flags) => glImportSyncEXTPtr?.Invoke(external_sync_type, external_sync, flags) ?? default;
        private delegate IntPtr /*sync*/ glImportSyncEXTDel(uint  external_sync_type, IntPtr  external_sync, uint  flags);
        private static glImportSyncEXTDel glImportSyncEXTPtr;
        
        // glIndexFormatNV
        public static void glIndexFormatNV(uint  type, uint  stride) => glIndexFormatNVPtr?.Invoke(type, stride);
        private delegate void glIndexFormatNVDel(uint  type, uint  stride);
        private static glIndexFormatNVDel glIndexFormatNVPtr;
        
        // glIndexFuncEXT
        public static void glIndexFuncEXT(uint /*IndexFunctionEXT*/  func, float /*ClampedFloat32*/  refVal) => glIndexFuncEXTPtr?.Invoke(func, refVal);
        private delegate void glIndexFuncEXTDel(uint /*IndexFunctionEXT*/  func, float /*ClampedFloat32*/  refVal);
        private static glIndexFuncEXTDel glIndexFuncEXTPtr;
        
        // glIndexMask
        public static void glIndexMask(uint /*MaskedColorIndexValueI*/  mask) => glIndexMaskPtr?.Invoke(mask);
        private delegate void glIndexMaskDel(uint /*MaskedColorIndexValueI*/  mask);
        private static glIndexMaskDel glIndexMaskPtr;
        
        // glIndexMaterialEXT
        public static void glIndexMaterialEXT(uint /*MaterialFace*/  face, uint /*IndexMaterialParameterEXT*/  mode) => glIndexMaterialEXTPtr?.Invoke(face, mode);
        private delegate void glIndexMaterialEXTDel(uint /*MaterialFace*/  face, uint /*IndexMaterialParameterEXT*/  mode);
        private static glIndexMaterialEXTDel glIndexMaterialEXTPtr;
        
        // glIndexPointer
        public static void glIndexPointer(uint /*IndexPointerType*/  type, uint  stride, IntPtr  pointer) => glIndexPointerPtr?.Invoke(type, stride, pointer);
        private delegate void glIndexPointerDel(uint /*IndexPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glIndexPointerDel glIndexPointerPtr;
        
        // glIndexPointerEXT
        public static void glIndexPointerEXT(uint /*IndexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => glIndexPointerEXTPtr?.Invoke(type, stride, count, pointer);
        private delegate void glIndexPointerEXTDel(uint /*IndexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer);
        private static glIndexPointerEXTDel glIndexPointerEXTPtr;
        
        // glIndexPointerListIBM
        public static void glIndexPointerListIBM(uint /*IndexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glIndexPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        private delegate void glIndexPointerListIBMDel(uint /*IndexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glIndexPointerListIBMDel glIndexPointerListIBMPtr;
        
        // glIndexd
        public static void glIndexd(double /*ColorIndexValueD*/  c) => glIndexdPtr?.Invoke(c);
        private delegate void glIndexdDel(double /*ColorIndexValueD*/  c);
        private static glIndexdDel glIndexdPtr;
        
        // glIndexdv
        public static void glIndexdv(double[] /*ColorIndexValueD*/  c) => glIndexdvPtr?.Invoke(c);
        private delegate void glIndexdvDel(double[] /*ColorIndexValueD*/  c);
        private static glIndexdvDel glIndexdvPtr;
        
        // glIndexf
        public static void glIndexf(float /*ColorIndexValueF*/  c) => glIndexfPtr?.Invoke(c);
        private delegate void glIndexfDel(float /*ColorIndexValueF*/  c);
        private static glIndexfDel glIndexfPtr;
        
        // glIndexfv
        public static void glIndexfv(float[] /*ColorIndexValueF*/  c) => glIndexfvPtr?.Invoke(c);
        private delegate void glIndexfvDel(float[] /*ColorIndexValueF*/  c);
        private static glIndexfvDel glIndexfvPtr;
        
        // glIndexi
        public static void glIndexi(int /*ColorIndexValueI*/  c) => glIndexiPtr?.Invoke(c);
        private delegate void glIndexiDel(int /*ColorIndexValueI*/  c);
        private static glIndexiDel glIndexiPtr;
        
        // glIndexiv
        public static void glIndexiv(int[] /*ColorIndexValueI*/  c) => glIndexivPtr?.Invoke(c);
        private delegate void glIndexivDel(int[] /*ColorIndexValueI*/  c);
        private static glIndexivDel glIndexivPtr;
        
        // glIndexs
        public static void glIndexs(short /*ColorIndexValueS*/  c) => glIndexsPtr?.Invoke(c);
        private delegate void glIndexsDel(short /*ColorIndexValueS*/  c);
        private static glIndexsDel glIndexsPtr;
        
        // glIndexsv
        public static void glIndexsv(short[] /*ColorIndexValueS*/  c) => glIndexsvPtr?.Invoke(c);
        private delegate void glIndexsvDel(short[] /*ColorIndexValueS*/  c);
        private static glIndexsvDel glIndexsvPtr;
        
        // glIndexub
        public static void glIndexub(byte /*ColorIndexValueUB*/  c) => glIndexubPtr?.Invoke(c);
        private delegate void glIndexubDel(byte /*ColorIndexValueUB*/  c);
        private static glIndexubDel glIndexubPtr;
        
        // glIndexubv
        public static void glIndexubv(byte[] /*ColorIndexValueUB*/  c) => glIndexubvPtr?.Invoke(c);
        private delegate void glIndexubvDel(byte[] /*ColorIndexValueUB*/  c);
        private static glIndexubvDel glIndexubvPtr;
        
        // glIndexxOES
        public static void glIndexxOES(int  component) => glIndexxOESPtr?.Invoke(component);
        private delegate void glIndexxOESDel(int  component);
        private static glIndexxOESDel glIndexxOESPtr;
        
        // glIndexxvOES
        public static void glIndexxvOES(int[]  component) => glIndexxvOESPtr?.Invoke(component);
        private delegate void glIndexxvOESDel(int[]  component);
        private static glIndexxvOESDel glIndexxvOESPtr;
        
        // glInitNames
        public static void glInitNames() => glInitNamesPtr?.Invoke();
        private delegate void glInitNamesDel();
        private static glInitNamesDel glInitNamesPtr;
        
        // glInsertComponentEXT
        public static void glInsertComponentEXT(uint  res, uint  src, uint  num) => glInsertComponentEXTPtr?.Invoke(res, src, num);
        private delegate void glInsertComponentEXTDel(uint  res, uint  src, uint  num);
        private static glInsertComponentEXTDel glInsertComponentEXTPtr;
        
        // glInsertEventMarkerEXT
        public static void glInsertEventMarkerEXT(uint  length, string  marker) => glInsertEventMarkerEXTPtr?.Invoke(length, marker);
        private delegate void glInsertEventMarkerEXTDel(uint  length, string  marker);
        private static glInsertEventMarkerEXTDel glInsertEventMarkerEXTPtr;
        
        // glInstrumentsBufferSGIX
        public static void glInstrumentsBufferSGIX(uint  size, int[]  buffer) => glInstrumentsBufferSGIXPtr?.Invoke(size, buffer);
        private delegate void glInstrumentsBufferSGIXDel(uint  size, int[]  buffer);
        private static glInstrumentsBufferSGIXDel glInstrumentsBufferSGIXPtr;
        
        // glInterleavedArrays
        public static void glInterleavedArrays(uint /*InterleavedArrayFormat*/  format, uint  stride, IntPtr  pointer) => glInterleavedArraysPtr?.Invoke(format, stride, pointer);
        private delegate void glInterleavedArraysDel(uint /*InterleavedArrayFormat*/  format, uint  stride, IntPtr  pointer);
        private static glInterleavedArraysDel glInterleavedArraysPtr;
        
        // glInterpolatePathsNV
        public static void glInterpolatePathsNV(uint /*Path*/  resultPath, uint /*Path*/  pathA, uint /*Path*/  pathB, float  weight) => glInterpolatePathsNVPtr?.Invoke(resultPath, pathA, pathB, weight);
        private delegate void glInterpolatePathsNVDel(uint /*Path*/  resultPath, uint /*Path*/  pathA, uint /*Path*/  pathB, float  weight);
        private static glInterpolatePathsNVDel glInterpolatePathsNVPtr;
        
        // glInvalidateBufferData
        public static void glInvalidateBufferData(uint  buffer) => glInvalidateBufferDataPtr?.Invoke(buffer);
        private delegate void glInvalidateBufferDataDel(uint  buffer);
        private static glInvalidateBufferDataDel glInvalidateBufferDataPtr;
        
        // glInvalidateBufferSubData
        public static void glInvalidateBufferSubData(uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length) => glInvalidateBufferSubDataPtr?.Invoke(buffer, offset, length);
        private delegate void glInvalidateBufferSubDataDel(uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length);
        private static glInvalidateBufferSubDataDel glInvalidateBufferSubDataPtr;
        
        // glInvalidateFramebuffer
        public static void glInvalidateFramebuffer(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments) => glInvalidateFramebufferPtr?.Invoke(target, numAttachments, attachments);
        private delegate void glInvalidateFramebufferDel(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments);
        private static glInvalidateFramebufferDel glInvalidateFramebufferPtr;
        
        // glInvalidateNamedFramebufferData
        public static void glInvalidateNamedFramebufferData(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments) => glInvalidateNamedFramebufferDataPtr?.Invoke(framebuffer, numAttachments, attachments);
        private delegate void glInvalidateNamedFramebufferDataDel(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments);
        private static glInvalidateNamedFramebufferDataDel glInvalidateNamedFramebufferDataPtr;
        
        // glInvalidateNamedFramebufferSubData
        public static void glInvalidateNamedFramebufferSubData(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height) => glInvalidateNamedFramebufferSubDataPtr?.Invoke(framebuffer, numAttachments, attachments, x, y, width, height);
        private delegate void glInvalidateNamedFramebufferSubDataDel(uint  framebuffer, uint  numAttachments, uint[] /*FramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height);
        private static glInvalidateNamedFramebufferSubDataDel glInvalidateNamedFramebufferSubDataPtr;
        
        // glInvalidateSubFramebuffer
        public static void glInvalidateSubFramebuffer(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height) => glInvalidateSubFramebufferPtr?.Invoke(target, numAttachments, attachments, x, y, width, height);
        private delegate void glInvalidateSubFramebufferDel(uint /*FramebufferTarget*/  target, uint  numAttachments, uint[] /*InvalidateFramebufferAttachment*/  attachments, int  x, int  y, uint  width, uint  height);
        private static glInvalidateSubFramebufferDel glInvalidateSubFramebufferPtr;
        
        // glInvalidateTexImage
        public static void glInvalidateTexImage(uint  texture, int  level) => glInvalidateTexImagePtr?.Invoke(texture, level);
        private delegate void glInvalidateTexImageDel(uint  texture, int  level);
        private static glInvalidateTexImageDel glInvalidateTexImagePtr;
        
        // glInvalidateTexSubImage
        public static void glInvalidateTexSubImage(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth) => glInvalidateTexSubImagePtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        private delegate void glInvalidateTexSubImageDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth);
        private static glInvalidateTexSubImageDel glInvalidateTexSubImagePtr;
        
        // glIsAsyncMarkerSGIX
        public static bool /*Boolean*/ glIsAsyncMarkerSGIX(uint  marker) => glIsAsyncMarkerSGIXPtr?.Invoke(marker) ?? default;
        private delegate bool /*Boolean*/ glIsAsyncMarkerSGIXDel(uint  marker);
        private static glIsAsyncMarkerSGIXDel glIsAsyncMarkerSGIXPtr;
        
        // glIsBuffer
        public static bool /*Boolean*/ glIsBuffer(uint  buffer) => glIsBufferPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glIsBufferDel(uint  buffer);
        private static glIsBufferDel glIsBufferPtr;
        
        // glIsBufferARB
        public static bool /*Boolean*/ glIsBufferARB(uint  buffer) => glIsBufferARBPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glIsBufferARBDel(uint  buffer);
        private static glIsBufferARBDel glIsBufferARBPtr;
        
        // glIsBufferResidentNV
        public static bool /*Boolean*/ glIsBufferResidentNV(uint  target) => glIsBufferResidentNVPtr?.Invoke(target) ?? default;
        private delegate bool /*Boolean*/ glIsBufferResidentNVDel(uint  target);
        private static glIsBufferResidentNVDel glIsBufferResidentNVPtr;
        
        // glIsCommandListNV
        public static bool /*Boolean*/ glIsCommandListNV(uint  list) => glIsCommandListNVPtr?.Invoke(list) ?? default;
        private delegate bool /*Boolean*/ glIsCommandListNVDel(uint  list);
        private static glIsCommandListNVDel glIsCommandListNVPtr;
        
        // glIsEnabled
        public static bool /*Boolean*/ glIsEnabled(uint /*EnableCap*/  cap) => glIsEnabledPtr?.Invoke(cap) ?? default;
        private delegate bool /*Boolean*/ glIsEnabledDel(uint /*EnableCap*/  cap);
        private static glIsEnabledDel glIsEnabledPtr;
        
        // glIsEnabledIndexedEXT
        public static bool /*Boolean*/ glIsEnabledIndexedEXT(uint /*EnableCap*/  target, uint  index) => glIsEnabledIndexedEXTPtr?.Invoke(target, index) ?? default;
        private delegate bool /*Boolean*/ glIsEnabledIndexedEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glIsEnabledIndexedEXTDel glIsEnabledIndexedEXTPtr;
        
        // glIsEnabledi
        public static bool /*Boolean*/ glIsEnabledi(uint /*EnableCap*/  target, uint  index) => glIsEnablediPtr?.Invoke(target, index) ?? default;
        private delegate bool /*Boolean*/ glIsEnablediDel(uint /*EnableCap*/  target, uint  index);
        private static glIsEnablediDel glIsEnablediPtr;
        
        // glIsEnablediEXT
        public static bool /*Boolean*/ glIsEnablediEXT(uint /*EnableCap*/  target, uint  index) => glIsEnablediEXTPtr?.Invoke(target, index) ?? default;
        private delegate bool /*Boolean*/ glIsEnablediEXTDel(uint /*EnableCap*/  target, uint  index);
        private static glIsEnablediEXTDel glIsEnablediEXTPtr;
        
        // glIsEnablediNV
        public static bool /*Boolean*/ glIsEnablediNV(uint /*EnableCap*/  target, uint  index) => glIsEnablediNVPtr?.Invoke(target, index) ?? default;
        private delegate bool /*Boolean*/ glIsEnablediNVDel(uint /*EnableCap*/  target, uint  index);
        private static glIsEnablediNVDel glIsEnablediNVPtr;
        
        // glIsEnablediOES
        public static bool /*Boolean*/ glIsEnablediOES(uint /*EnableCap*/  target, uint  index) => glIsEnablediOESPtr?.Invoke(target, index) ?? default;
        private delegate bool /*Boolean*/ glIsEnablediOESDel(uint /*EnableCap*/  target, uint  index);
        private static glIsEnablediOESDel glIsEnablediOESPtr;
        
        // glIsFenceAPPLE
        public static bool /*Boolean*/ glIsFenceAPPLE(uint /*FenceNV*/  fence) => glIsFenceAPPLEPtr?.Invoke(fence) ?? default;
        private delegate bool /*Boolean*/ glIsFenceAPPLEDel(uint /*FenceNV*/  fence);
        private static glIsFenceAPPLEDel glIsFenceAPPLEPtr;
        
        // glIsFenceNV
        public static bool /*Boolean*/ glIsFenceNV(uint /*FenceNV*/  fence) => glIsFenceNVPtr?.Invoke(fence) ?? default;
        private delegate bool /*Boolean*/ glIsFenceNVDel(uint /*FenceNV*/  fence);
        private static glIsFenceNVDel glIsFenceNVPtr;
        
        // glIsFramebuffer
        public static bool /*Boolean*/ glIsFramebuffer(uint  framebuffer) => glIsFramebufferPtr?.Invoke(framebuffer) ?? default;
        private delegate bool /*Boolean*/ glIsFramebufferDel(uint  framebuffer);
        private static glIsFramebufferDel glIsFramebufferPtr;
        
        // glIsFramebufferEXT
        public static bool /*Boolean*/ glIsFramebufferEXT(uint  framebuffer) => glIsFramebufferEXTPtr?.Invoke(framebuffer) ?? default;
        private delegate bool /*Boolean*/ glIsFramebufferEXTDel(uint  framebuffer);
        private static glIsFramebufferEXTDel glIsFramebufferEXTPtr;
        
        // glIsFramebufferOES
        public static bool /*Boolean*/ glIsFramebufferOES(uint  framebuffer) => glIsFramebufferOESPtr?.Invoke(framebuffer) ?? default;
        private delegate bool /*Boolean*/ glIsFramebufferOESDel(uint  framebuffer);
        private static glIsFramebufferOESDel glIsFramebufferOESPtr;
        
        // glIsImageHandleResidentARB
        public static bool /*Boolean*/ glIsImageHandleResidentARB(ulong  handle) => glIsImageHandleResidentARBPtr?.Invoke(handle) ?? default;
        private delegate bool /*Boolean*/ glIsImageHandleResidentARBDel(ulong  handle);
        private static glIsImageHandleResidentARBDel glIsImageHandleResidentARBPtr;
        
        // glIsImageHandleResidentNV
        public static bool /*Boolean*/ glIsImageHandleResidentNV(ulong  handle) => glIsImageHandleResidentNVPtr?.Invoke(handle) ?? default;
        private delegate bool /*Boolean*/ glIsImageHandleResidentNVDel(ulong  handle);
        private static glIsImageHandleResidentNVDel glIsImageHandleResidentNVPtr;
        
        // glIsList
        public static bool /*Boolean*/ glIsList(uint /*List*/  list) => glIsListPtr?.Invoke(list) ?? default;
        private delegate bool /*Boolean*/ glIsListDel(uint /*List*/  list);
        private static glIsListDel glIsListPtr;
        
        // glIsMemoryObjectEXT
        public static bool /*Boolean*/ glIsMemoryObjectEXT(uint  memoryObject) => glIsMemoryObjectEXTPtr?.Invoke(memoryObject) ?? default;
        private delegate bool /*Boolean*/ glIsMemoryObjectEXTDel(uint  memoryObject);
        private static glIsMemoryObjectEXTDel glIsMemoryObjectEXTPtr;
        
        // glIsNameAMD
        public static bool /*Boolean*/ glIsNameAMD(uint  identifier, uint  name) => glIsNameAMDPtr?.Invoke(identifier, name) ?? default;
        private delegate bool /*Boolean*/ glIsNameAMDDel(uint  identifier, uint  name);
        private static glIsNameAMDDel glIsNameAMDPtr;
        
        // glIsNamedBufferResidentNV
        public static bool /*Boolean*/ glIsNamedBufferResidentNV(uint  buffer) => glIsNamedBufferResidentNVPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glIsNamedBufferResidentNVDel(uint  buffer);
        private static glIsNamedBufferResidentNVDel glIsNamedBufferResidentNVPtr;
        
        // glIsNamedStringARB
        public static bool /*Boolean*/ glIsNamedStringARB(int  namelen, string  name) => glIsNamedStringARBPtr?.Invoke(namelen, name) ?? default;
        private delegate bool /*Boolean*/ glIsNamedStringARBDel(int  namelen, string  name);
        private static glIsNamedStringARBDel glIsNamedStringARBPtr;
        
        // glIsObjectBufferATI
        public static bool /*Boolean*/ glIsObjectBufferATI(uint  buffer) => glIsObjectBufferATIPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glIsObjectBufferATIDel(uint  buffer);
        private static glIsObjectBufferATIDel glIsObjectBufferATIPtr;
        
        // glIsOcclusionQueryNV
        public static bool /*Boolean*/ glIsOcclusionQueryNV(uint  id) => glIsOcclusionQueryNVPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsOcclusionQueryNVDel(uint  id);
        private static glIsOcclusionQueryNVDel glIsOcclusionQueryNVPtr;
        
        // glIsPathNV
        public static bool /*Boolean*/ glIsPathNV(uint /*Path*/  path) => glIsPathNVPtr?.Invoke(path) ?? default;
        private delegate bool /*Boolean*/ glIsPathNVDel(uint /*Path*/  path);
        private static glIsPathNVDel glIsPathNVPtr;
        
        // glIsPointInFillPathNV
        public static bool /*Boolean*/ glIsPointInFillPathNV(uint /*Path*/  path, uint /*MaskedStencilValue*/  mask, float  x, float  y) => glIsPointInFillPathNVPtr?.Invoke(path, mask, x, y) ?? default;
        private delegate bool /*Boolean*/ glIsPointInFillPathNVDel(uint /*Path*/  path, uint /*MaskedStencilValue*/  mask, float  x, float  y);
        private static glIsPointInFillPathNVDel glIsPointInFillPathNVPtr;
        
        // glIsPointInStrokePathNV
        public static bool /*Boolean*/ glIsPointInStrokePathNV(uint /*Path*/  path, float  x, float  y) => glIsPointInStrokePathNVPtr?.Invoke(path, x, y) ?? default;
        private delegate bool /*Boolean*/ glIsPointInStrokePathNVDel(uint /*Path*/  path, float  x, float  y);
        private static glIsPointInStrokePathNVDel glIsPointInStrokePathNVPtr;
        
        // glIsProgram
        public static bool /*Boolean*/ glIsProgram(uint  program) => glIsProgramPtr?.Invoke(program) ?? default;
        private delegate bool /*Boolean*/ glIsProgramDel(uint  program);
        private static glIsProgramDel glIsProgramPtr;
        
        // glIsProgramARB
        public static bool /*Boolean*/ glIsProgramARB(uint  program) => glIsProgramARBPtr?.Invoke(program) ?? default;
        private delegate bool /*Boolean*/ glIsProgramARBDel(uint  program);
        private static glIsProgramARBDel glIsProgramARBPtr;
        
        // glIsProgramNV
        public static bool /*Boolean*/ glIsProgramNV(uint  id) => glIsProgramNVPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsProgramNVDel(uint  id);
        private static glIsProgramNVDel glIsProgramNVPtr;
        
        // glIsProgramPipeline
        public static bool /*Boolean*/ glIsProgramPipeline(uint  pipeline) => glIsProgramPipelinePtr?.Invoke(pipeline) ?? default;
        private delegate bool /*Boolean*/ glIsProgramPipelineDel(uint  pipeline);
        private static glIsProgramPipelineDel glIsProgramPipelinePtr;
        
        // glIsProgramPipelineEXT
        public static bool /*Boolean*/ glIsProgramPipelineEXT(uint  pipeline) => glIsProgramPipelineEXTPtr?.Invoke(pipeline) ?? default;
        private delegate bool /*Boolean*/ glIsProgramPipelineEXTDel(uint  pipeline);
        private static glIsProgramPipelineEXTDel glIsProgramPipelineEXTPtr;
        
        // glIsQuery
        public static bool /*Boolean*/ glIsQuery(uint  id) => glIsQueryPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsQueryDel(uint  id);
        private static glIsQueryDel glIsQueryPtr;
        
        // glIsQueryARB
        public static bool /*Boolean*/ glIsQueryARB(uint  id) => glIsQueryARBPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsQueryARBDel(uint  id);
        private static glIsQueryARBDel glIsQueryARBPtr;
        
        // glIsQueryEXT
        public static bool /*Boolean*/ glIsQueryEXT(uint  id) => glIsQueryEXTPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsQueryEXTDel(uint  id);
        private static glIsQueryEXTDel glIsQueryEXTPtr;
        
        // glIsRenderbuffer
        public static bool /*Boolean*/ glIsRenderbuffer(uint  renderbuffer) => glIsRenderbufferPtr?.Invoke(renderbuffer) ?? default;
        private delegate bool /*Boolean*/ glIsRenderbufferDel(uint  renderbuffer);
        private static glIsRenderbufferDel glIsRenderbufferPtr;
        
        // glIsRenderbufferEXT
        public static bool /*Boolean*/ glIsRenderbufferEXT(uint  renderbuffer) => glIsRenderbufferEXTPtr?.Invoke(renderbuffer) ?? default;
        private delegate bool /*Boolean*/ glIsRenderbufferEXTDel(uint  renderbuffer);
        private static glIsRenderbufferEXTDel glIsRenderbufferEXTPtr;
        
        // glIsRenderbufferOES
        public static bool /*Boolean*/ glIsRenderbufferOES(uint  renderbuffer) => glIsRenderbufferOESPtr?.Invoke(renderbuffer) ?? default;
        private delegate bool /*Boolean*/ glIsRenderbufferOESDel(uint  renderbuffer);
        private static glIsRenderbufferOESDel glIsRenderbufferOESPtr;
        
        // glIsSemaphoreEXT
        public static bool /*Boolean*/ glIsSemaphoreEXT(uint  semaphore) => glIsSemaphoreEXTPtr?.Invoke(semaphore) ?? default;
        private delegate bool /*Boolean*/ glIsSemaphoreEXTDel(uint  semaphore);
        private static glIsSemaphoreEXTDel glIsSemaphoreEXTPtr;
        
        // glIsSampler
        public static bool /*Boolean*/ glIsSampler(uint  sampler) => glIsSamplerPtr?.Invoke(sampler) ?? default;
        private delegate bool /*Boolean*/ glIsSamplerDel(uint  sampler);
        private static glIsSamplerDel glIsSamplerPtr;
        
        // glIsShader
        public static bool /*Boolean*/ glIsShader(uint  shader) => glIsShaderPtr?.Invoke(shader) ?? default;
        private delegate bool /*Boolean*/ glIsShaderDel(uint  shader);
        private static glIsShaderDel glIsShaderPtr;
        
        // glIsStateNV
        public static bool /*Boolean*/ glIsStateNV(uint  state) => glIsStateNVPtr?.Invoke(state) ?? default;
        private delegate bool /*Boolean*/ glIsStateNVDel(uint  state);
        private static glIsStateNVDel glIsStateNVPtr;
        
        // glIsSync
        public static bool /*Boolean*/ glIsSync(IntPtr /*sync*/  sync) => glIsSyncPtr?.Invoke(sync) ?? default;
        private delegate bool /*Boolean*/ glIsSyncDel(IntPtr /*sync*/  sync);
        private static glIsSyncDel glIsSyncPtr;
        
        // glIsSyncAPPLE
        public static bool /*Boolean*/ glIsSyncAPPLE(IntPtr  sync) => glIsSyncAPPLEPtr?.Invoke(sync) ?? default;
        private delegate bool /*Boolean*/ glIsSyncAPPLEDel(IntPtr  sync);
        private static glIsSyncAPPLEDel glIsSyncAPPLEPtr;
        
        // glIsTexture
        public static bool /*Boolean*/ glIsTexture(uint /*Texture*/  texture) => glIsTexturePtr?.Invoke(texture) ?? default;
        private delegate bool /*Boolean*/ glIsTextureDel(uint /*Texture*/  texture);
        private static glIsTextureDel glIsTexturePtr;
        
        // glIsTextureEXT
        public static bool /*Boolean*/ glIsTextureEXT(uint /*Texture*/  texture) => glIsTextureEXTPtr?.Invoke(texture) ?? default;
        private delegate bool /*Boolean*/ glIsTextureEXTDel(uint /*Texture*/  texture);
        private static glIsTextureEXTDel glIsTextureEXTPtr;
        
        // glIsTextureHandleResidentARB
        public static bool /*Boolean*/ glIsTextureHandleResidentARB(ulong  handle) => glIsTextureHandleResidentARBPtr?.Invoke(handle) ?? default;
        private delegate bool /*Boolean*/ glIsTextureHandleResidentARBDel(ulong  handle);
        private static glIsTextureHandleResidentARBDel glIsTextureHandleResidentARBPtr;
        
        // glIsTextureHandleResidentNV
        public static bool /*Boolean*/ glIsTextureHandleResidentNV(ulong  handle) => glIsTextureHandleResidentNVPtr?.Invoke(handle) ?? default;
        private delegate bool /*Boolean*/ glIsTextureHandleResidentNVDel(ulong  handle);
        private static glIsTextureHandleResidentNVDel glIsTextureHandleResidentNVPtr;
        
        // glIsTransformFeedback
        public static bool /*Boolean*/ glIsTransformFeedback(uint  id) => glIsTransformFeedbackPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsTransformFeedbackDel(uint  id);
        private static glIsTransformFeedbackDel glIsTransformFeedbackPtr;
        
        // glIsTransformFeedbackNV
        public static bool /*Boolean*/ glIsTransformFeedbackNV(uint  id) => glIsTransformFeedbackNVPtr?.Invoke(id) ?? default;
        private delegate bool /*Boolean*/ glIsTransformFeedbackNVDel(uint  id);
        private static glIsTransformFeedbackNVDel glIsTransformFeedbackNVPtr;
        
        // glIsVariantEnabledEXT
        public static bool /*Boolean*/ glIsVariantEnabledEXT(uint  id, uint /*VariantCapEXT*/  cap) => glIsVariantEnabledEXTPtr?.Invoke(id, cap) ?? default;
        private delegate bool /*Boolean*/ glIsVariantEnabledEXTDel(uint  id, uint /*VariantCapEXT*/  cap);
        private static glIsVariantEnabledEXTDel glIsVariantEnabledEXTPtr;
        
        // glIsVertexArray
        public static bool /*Boolean*/ glIsVertexArray(uint  array) => glIsVertexArrayPtr?.Invoke(array) ?? default;
        private delegate bool /*Boolean*/ glIsVertexArrayDel(uint  array);
        private static glIsVertexArrayDel glIsVertexArrayPtr;
        
        // glIsVertexArrayAPPLE
        public static bool /*Boolean*/ glIsVertexArrayAPPLE(uint  array) => glIsVertexArrayAPPLEPtr?.Invoke(array) ?? default;
        private delegate bool /*Boolean*/ glIsVertexArrayAPPLEDel(uint  array);
        private static glIsVertexArrayAPPLEDel glIsVertexArrayAPPLEPtr;
        
        // glIsVertexArrayOES
        public static bool /*Boolean*/ glIsVertexArrayOES(uint  array) => glIsVertexArrayOESPtr?.Invoke(array) ?? default;
        private delegate bool /*Boolean*/ glIsVertexArrayOESDel(uint  array);
        private static glIsVertexArrayOESDel glIsVertexArrayOESPtr;
        
        // glIsVertexAttribEnabledAPPLE
        public static bool /*Boolean*/ glIsVertexAttribEnabledAPPLE(uint  index, uint  pname) => glIsVertexAttribEnabledAPPLEPtr?.Invoke(index, pname) ?? default;
        private delegate bool /*Boolean*/ glIsVertexAttribEnabledAPPLEDel(uint  index, uint  pname);
        private static glIsVertexAttribEnabledAPPLEDel glIsVertexAttribEnabledAPPLEPtr;
        
        // glLGPUCopyImageSubDataNVX
        public static void glLGPUCopyImageSubDataNVX(uint  sourceGpu, uint  destinationGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srxY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth) => glLGPUCopyImageSubDataNVXPtr?.Invoke(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        private delegate void glLGPUCopyImageSubDataNVXDel(uint  sourceGpu, uint  destinationGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srxY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  width, uint  height, uint  depth);
        private static glLGPUCopyImageSubDataNVXDel glLGPUCopyImageSubDataNVXPtr;
        
        // glLGPUInterlockNVX
        public static void glLGPUInterlockNVX() => glLGPUInterlockNVXPtr?.Invoke();
        private delegate void glLGPUInterlockNVXDel();
        private static glLGPUInterlockNVXDel glLGPUInterlockNVXPtr;
        
        // glLGPUNamedBufferSubDataNVX
        public static void glLGPUNamedBufferSubDataNVX(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => glLGPUNamedBufferSubDataNVXPtr?.Invoke(gpuMask, buffer, offset, size, data);
        private delegate void glLGPUNamedBufferSubDataNVXDel(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data);
        private static glLGPUNamedBufferSubDataNVXDel glLGPUNamedBufferSubDataNVXPtr;
        
        // glLabelObjectEXT
        public static void glLabelObjectEXT(uint  type, uint  obj, uint  length, string  label) => glLabelObjectEXTPtr?.Invoke(type, obj, length, label);
        private delegate void glLabelObjectEXTDel(uint  type, uint  obj, uint  length, string  label);
        private static glLabelObjectEXTDel glLabelObjectEXTPtr;
        
        // glLightEnviSGIX
        public static void glLightEnviSGIX(uint /*LightEnvParameterSGIX*/  pname, int /*CheckedInt32*/  param) => glLightEnviSGIXPtr?.Invoke(pname, param);
        private delegate void glLightEnviSGIXDel(uint /*LightEnvParameterSGIX*/  pname, int /*CheckedInt32*/  param);
        private static glLightEnviSGIXDel glLightEnviSGIXPtr;
        
        // glLightModelf
        public static void glLightModelf(uint /*LightModelParameter*/  pname, float  param) => glLightModelfPtr?.Invoke(pname, param);
        private delegate void glLightModelfDel(uint /*LightModelParameter*/  pname, float  param);
        private static glLightModelfDel glLightModelfPtr;
        
        // glLightModelfv
        public static void glLightModelfv(uint /*LightModelParameter*/  pname, float[]  parameters) => glLightModelfvPtr?.Invoke(pname, parameters);
        private delegate void glLightModelfvDel(uint /*LightModelParameter*/  pname, float[]  parameters);
        private static glLightModelfvDel glLightModelfvPtr;
        
        // glLightModeli
        public static void glLightModeli(uint /*LightModelParameter*/  pname, int  param) => glLightModeliPtr?.Invoke(pname, param);
        private delegate void glLightModeliDel(uint /*LightModelParameter*/  pname, int  param);
        private static glLightModeliDel glLightModeliPtr;
        
        // glLightModeliv
        public static void glLightModeliv(uint /*LightModelParameter*/  pname, int[]  parameters) => glLightModelivPtr?.Invoke(pname, parameters);
        private delegate void glLightModelivDel(uint /*LightModelParameter*/  pname, int[]  parameters);
        private static glLightModelivDel glLightModelivPtr;
        
        // glLightModelx
        public static void glLightModelx(uint /*LightModelParameter*/  pname, int  param) => glLightModelxPtr?.Invoke(pname, param);
        private delegate void glLightModelxDel(uint /*LightModelParameter*/  pname, int  param);
        private static glLightModelxDel glLightModelxPtr;
        
        // glLightModelxOES
        public static void glLightModelxOES(uint /*LightModelParameter*/  pname, int  param) => glLightModelxOESPtr?.Invoke(pname, param);
        private delegate void glLightModelxOESDel(uint /*LightModelParameter*/  pname, int  param);
        private static glLightModelxOESDel glLightModelxOESPtr;
        
        // glLightModelxv
        public static void glLightModelxv(uint /*LightModelParameter*/  pname, int[]  param) => glLightModelxvPtr?.Invoke(pname, param);
        private delegate void glLightModelxvDel(uint /*LightModelParameter*/  pname, int[]  param);
        private static glLightModelxvDel glLightModelxvPtr;
        
        // glLightModelxvOES
        public static void glLightModelxvOES(uint /*LightModelParameter*/  pname, int[]  param) => glLightModelxvOESPtr?.Invoke(pname, param);
        private delegate void glLightModelxvOESDel(uint /*LightModelParameter*/  pname, int[]  param);
        private static glLightModelxvOESDel glLightModelxvOESPtr;
        
        // glLightf
        public static void glLightf(uint /*LightName*/  light, uint /*LightParameter*/  pname, float /*CheckedFloat32*/  param) => glLightfPtr?.Invoke(light, pname, param);
        private delegate void glLightfDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glLightfDel glLightfPtr;
        
        // glLightfv
        public static void glLightfv(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glLightfvPtr?.Invoke(light, pname, parameters);
        private delegate void glLightfvDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glLightfvDel glLightfvPtr;
        
        // glLighti
        public static void glLighti(uint /*LightName*/  light, uint /*LightParameter*/  pname, int /*CheckedInt32*/  param) => glLightiPtr?.Invoke(light, pname, param);
        private delegate void glLightiDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int /*CheckedInt32*/  param);
        private static glLightiDel glLightiPtr;
        
        // glLightiv
        public static void glLightiv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glLightivPtr?.Invoke(light, pname, parameters);
        private delegate void glLightivDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glLightivDel glLightivPtr;
        
        // glLightx
        public static void glLightx(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param) => glLightxPtr?.Invoke(light, pname, param);
        private delegate void glLightxDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param);
        private static glLightxDel glLightxPtr;
        
        // glLightxOES
        public static void glLightxOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param) => glLightxOESPtr?.Invoke(light, pname, param);
        private delegate void glLightxOESDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int  param);
        private static glLightxOESDel glLightxOESPtr;
        
        // glLightxv
        public static void glLightxv(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glLightxvPtr?.Invoke(light, pname, parameters);
        private delegate void glLightxvDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glLightxvDel glLightxvPtr;
        
        // glLightxvOES
        public static void glLightxvOES(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters) => glLightxvOESPtr?.Invoke(light, pname, parameters);
        private delegate void glLightxvOESDel(uint /*LightName*/  light, uint /*LightParameter*/  pname, int[]  parameters);
        private static glLightxvOESDel glLightxvOESPtr;
        
        // glLineStipple
        public static void glLineStipple(int /*CheckedInt32*/  factor, ushort /*LineStipple*/  pattern) => glLineStipplePtr?.Invoke(factor, pattern);
        private delegate void glLineStippleDel(int /*CheckedInt32*/  factor, ushort /*LineStipple*/  pattern);
        private static glLineStippleDel glLineStipplePtr;
        
        // glLineWidth
        public static void glLineWidth(float /*CheckedFloat32*/  width) => glLineWidthPtr?.Invoke(width);
        private delegate void glLineWidthDel(float /*CheckedFloat32*/  width);
        private static glLineWidthDel glLineWidthPtr;
        
        // glLineWidthx
        public static void glLineWidthx(int  width) => glLineWidthxPtr?.Invoke(width);
        private delegate void glLineWidthxDel(int  width);
        private static glLineWidthxDel glLineWidthxPtr;
        
        // glLineWidthxOES
        public static void glLineWidthxOES(int  width) => glLineWidthxOESPtr?.Invoke(width);
        private delegate void glLineWidthxOESDel(int  width);
        private static glLineWidthxOESDel glLineWidthxOESPtr;
        
        // glLinkProgram
        public static void glLinkProgram(uint  program) => glLinkProgramPtr?.Invoke(program);
        private delegate void glLinkProgramDel(uint  program);
        private static glLinkProgramDel glLinkProgramPtr;
        
        // glLinkProgramARB
        public static void glLinkProgramARB(IntPtr /*handleARB*/  programObj) => glLinkProgramARBPtr?.Invoke(programObj);
        private delegate void glLinkProgramARBDel(IntPtr /*handleARB*/  programObj);
        private static glLinkProgramARBDel glLinkProgramARBPtr;
        
        // glListBase
        public static void glListBase(uint /*List*/  basis) => glListBasePtr?.Invoke(basis);
        private delegate void glListBaseDel(uint /*List*/  basis);
        private static glListBaseDel glListBasePtr;
        
        // glListDrawCommandsStatesClientNV
        public static void glListDrawCommandsStatesClientNV(uint  list, uint  segment, IntPtr  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count) => glListDrawCommandsStatesClientNVPtr?.Invoke(list, segment, indirects, sizes, states, fbos, count);
        private delegate void glListDrawCommandsStatesClientNVDel(uint  list, uint  segment, IntPtr  indirects, uint[]  sizes, uint[]  states, uint[]  fbos, uint  count);
        private static glListDrawCommandsStatesClientNVDel glListDrawCommandsStatesClientNVPtr;
        
        // glListParameterfSGIX
        public static void glListParameterfSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float /*CheckedFloat32*/  param) => glListParameterfSGIXPtr?.Invoke(list, pname, param);
        private delegate void glListParameterfSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, float /*CheckedFloat32*/  param);
        private static glListParameterfSGIXDel glListParameterfSGIXPtr;
        
        // glListParameterfvSGIX
        public static void glListParameterfvSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => glListParameterfvSGIXPtr?.Invoke(list, pname, parameters);
        private delegate void glListParameterfvSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glListParameterfvSGIXDel glListParameterfvSGIXPtr;
        
        // glListParameteriSGIX
        public static void glListParameteriSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int /*CheckedInt32*/  param) => glListParameteriSGIXPtr?.Invoke(list, pname, param);
        private delegate void glListParameteriSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, int /*CheckedInt32*/  param);
        private static glListParameteriSGIXDel glListParameteriSGIXPtr;
        
        // glListParameterivSGIX
        public static void glListParameterivSGIX(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glListParameterivSGIXPtr?.Invoke(list, pname, parameters);
        private delegate void glListParameterivSGIXDel(uint /*List*/  list, uint /*ListParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glListParameterivSGIXDel glListParameterivSGIXPtr;
        
        // glLoadIdentity
        public static void glLoadIdentity() => glLoadIdentityPtr?.Invoke();
        private delegate void glLoadIdentityDel();
        private static glLoadIdentityDel glLoadIdentityPtr;
        
        // glLoadIdentityDeformationMapSGIX
        public static void glLoadIdentityDeformationMapSGIX(uint /*FfdMaskSGIX*/  mask) => glLoadIdentityDeformationMapSGIXPtr?.Invoke(mask);
        private delegate void glLoadIdentityDeformationMapSGIXDel(uint /*FfdMaskSGIX*/  mask);
        private static glLoadIdentityDeformationMapSGIXDel glLoadIdentityDeformationMapSGIXPtr;
        
        // glLoadMatrixd
        public static void glLoadMatrixd(double[]  m) => glLoadMatrixdPtr?.Invoke(m);
        private delegate void glLoadMatrixdDel(double[]  m);
        private static glLoadMatrixdDel glLoadMatrixdPtr;
        
        // glLoadMatrixf
        public static void glLoadMatrixf(float[]  m) => glLoadMatrixfPtr?.Invoke(m);
        private delegate void glLoadMatrixfDel(float[]  m);
        private static glLoadMatrixfDel glLoadMatrixfPtr;
        
        // glLoadMatrixx
        public static void glLoadMatrixx(int[]  m) => glLoadMatrixxPtr?.Invoke(m);
        private delegate void glLoadMatrixxDel(int[]  m);
        private static glLoadMatrixxDel glLoadMatrixxPtr;
        
        // glLoadMatrixxOES
        public static void glLoadMatrixxOES(int[]  m) => glLoadMatrixxOESPtr?.Invoke(m);
        private delegate void glLoadMatrixxOESDel(int[]  m);
        private static glLoadMatrixxOESDel glLoadMatrixxOESPtr;
        
        // glLoadName
        public static void glLoadName(uint /*SelectName*/  name) => glLoadNamePtr?.Invoke(name);
        private delegate void glLoadNameDel(uint /*SelectName*/  name);
        private static glLoadNameDel glLoadNamePtr;
        
        // glLoadPaletteFromModelViewMatrixOES
        public static void glLoadPaletteFromModelViewMatrixOES() => glLoadPaletteFromModelViewMatrixOESPtr?.Invoke();
        private delegate void glLoadPaletteFromModelViewMatrixOESDel();
        private static glLoadPaletteFromModelViewMatrixOESDel glLoadPaletteFromModelViewMatrixOESPtr;
        
        // glLoadProgramNV
        public static void glLoadProgramNV(uint /*VertexAttribEnumNV*/  target, uint  id, uint  len, byte[]  program) => glLoadProgramNVPtr?.Invoke(target, id, len, program);
        private delegate void glLoadProgramNVDel(uint /*VertexAttribEnumNV*/  target, uint  id, uint  len, byte[]  program);
        private static glLoadProgramNVDel glLoadProgramNVPtr;
        
        // glLoadTransposeMatrixd
        public static void glLoadTransposeMatrixd(double[]  m) => glLoadTransposeMatrixdPtr?.Invoke(m);
        private delegate void glLoadTransposeMatrixdDel(double[]  m);
        private static glLoadTransposeMatrixdDel glLoadTransposeMatrixdPtr;
        
        // glLoadTransposeMatrixdARB
        public static void glLoadTransposeMatrixdARB(double[]  m) => glLoadTransposeMatrixdARBPtr?.Invoke(m);
        private delegate void glLoadTransposeMatrixdARBDel(double[]  m);
        private static glLoadTransposeMatrixdARBDel glLoadTransposeMatrixdARBPtr;
        
        // glLoadTransposeMatrixf
        public static void glLoadTransposeMatrixf(float[]  m) => glLoadTransposeMatrixfPtr?.Invoke(m);
        private delegate void glLoadTransposeMatrixfDel(float[]  m);
        private static glLoadTransposeMatrixfDel glLoadTransposeMatrixfPtr;
        
        // glLoadTransposeMatrixfARB
        public static void glLoadTransposeMatrixfARB(float[]  m) => glLoadTransposeMatrixfARBPtr?.Invoke(m);
        private delegate void glLoadTransposeMatrixfARBDel(float[]  m);
        private static glLoadTransposeMatrixfARBDel glLoadTransposeMatrixfARBPtr;
        
        // glLoadTransposeMatrixxOES
        public static void glLoadTransposeMatrixxOES(int[]  m) => glLoadTransposeMatrixxOESPtr?.Invoke(m);
        private delegate void glLoadTransposeMatrixxOESDel(int[]  m);
        private static glLoadTransposeMatrixxOESDel glLoadTransposeMatrixxOESPtr;
        
        // glLockArraysEXT
        public static void glLockArraysEXT(int  first, uint  count) => glLockArraysEXTPtr?.Invoke(first, count);
        private delegate void glLockArraysEXTDel(int  first, uint  count);
        private static glLockArraysEXTDel glLockArraysEXTPtr;
        
        // glLogicOp
        public static void glLogicOp(uint /*LogicOp*/  opcode) => glLogicOpPtr?.Invoke(opcode);
        private delegate void glLogicOpDel(uint /*LogicOp*/  opcode);
        private static glLogicOpDel glLogicOpPtr;
        
        // glMakeBufferNonResidentNV
        public static void glMakeBufferNonResidentNV(uint  target) => glMakeBufferNonResidentNVPtr?.Invoke(target);
        private delegate void glMakeBufferNonResidentNVDel(uint  target);
        private static glMakeBufferNonResidentNVDel glMakeBufferNonResidentNVPtr;
        
        // glMakeBufferResidentNV
        public static void glMakeBufferResidentNV(uint  target, uint  access) => glMakeBufferResidentNVPtr?.Invoke(target, access);
        private delegate void glMakeBufferResidentNVDel(uint  target, uint  access);
        private static glMakeBufferResidentNVDel glMakeBufferResidentNVPtr;
        
        // glMakeImageHandleNonResidentARB
        public static void glMakeImageHandleNonResidentARB(ulong  handle) => glMakeImageHandleNonResidentARBPtr?.Invoke(handle);
        private delegate void glMakeImageHandleNonResidentARBDel(ulong  handle);
        private static glMakeImageHandleNonResidentARBDel glMakeImageHandleNonResidentARBPtr;
        
        // glMakeImageHandleNonResidentNV
        public static void glMakeImageHandleNonResidentNV(ulong  handle) => glMakeImageHandleNonResidentNVPtr?.Invoke(handle);
        private delegate void glMakeImageHandleNonResidentNVDel(ulong  handle);
        private static glMakeImageHandleNonResidentNVDel glMakeImageHandleNonResidentNVPtr;
        
        // glMakeImageHandleResidentARB
        public static void glMakeImageHandleResidentARB(ulong  handle, uint  access) => glMakeImageHandleResidentARBPtr?.Invoke(handle, access);
        private delegate void glMakeImageHandleResidentARBDel(ulong  handle, uint  access);
        private static glMakeImageHandleResidentARBDel glMakeImageHandleResidentARBPtr;
        
        // glMakeImageHandleResidentNV
        public static void glMakeImageHandleResidentNV(ulong  handle, uint  access) => glMakeImageHandleResidentNVPtr?.Invoke(handle, access);
        private delegate void glMakeImageHandleResidentNVDel(ulong  handle, uint  access);
        private static glMakeImageHandleResidentNVDel glMakeImageHandleResidentNVPtr;
        
        // glMakeNamedBufferNonResidentNV
        public static void glMakeNamedBufferNonResidentNV(uint  buffer) => glMakeNamedBufferNonResidentNVPtr?.Invoke(buffer);
        private delegate void glMakeNamedBufferNonResidentNVDel(uint  buffer);
        private static glMakeNamedBufferNonResidentNVDel glMakeNamedBufferNonResidentNVPtr;
        
        // glMakeNamedBufferResidentNV
        public static void glMakeNamedBufferResidentNV(uint  buffer, uint  access) => glMakeNamedBufferResidentNVPtr?.Invoke(buffer, access);
        private delegate void glMakeNamedBufferResidentNVDel(uint  buffer, uint  access);
        private static glMakeNamedBufferResidentNVDel glMakeNamedBufferResidentNVPtr;
        
        // glMakeTextureHandleNonResidentARB
        public static void glMakeTextureHandleNonResidentARB(ulong  handle) => glMakeTextureHandleNonResidentARBPtr?.Invoke(handle);
        private delegate void glMakeTextureHandleNonResidentARBDel(ulong  handle);
        private static glMakeTextureHandleNonResidentARBDel glMakeTextureHandleNonResidentARBPtr;
        
        // glMakeTextureHandleNonResidentNV
        public static void glMakeTextureHandleNonResidentNV(ulong  handle) => glMakeTextureHandleNonResidentNVPtr?.Invoke(handle);
        private delegate void glMakeTextureHandleNonResidentNVDel(ulong  handle);
        private static glMakeTextureHandleNonResidentNVDel glMakeTextureHandleNonResidentNVPtr;
        
        // glMakeTextureHandleResidentARB
        public static void glMakeTextureHandleResidentARB(ulong  handle) => glMakeTextureHandleResidentARBPtr?.Invoke(handle);
        private delegate void glMakeTextureHandleResidentARBDel(ulong  handle);
        private static glMakeTextureHandleResidentARBDel glMakeTextureHandleResidentARBPtr;
        
        // glMakeTextureHandleResidentNV
        public static void glMakeTextureHandleResidentNV(ulong  handle) => glMakeTextureHandleResidentNVPtr?.Invoke(handle);
        private delegate void glMakeTextureHandleResidentNVDel(ulong  handle);
        private static glMakeTextureHandleResidentNVDel glMakeTextureHandleResidentNVPtr;
        
        // glMap1d
        public static void glMap1d(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points) => glMap1dPtr?.Invoke(target, u1, u2, stride, order, points);
        private delegate void glMap1dDel(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points);
        private static glMap1dDel glMap1dPtr;
        
        // glMap1f
        public static void glMap1f(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points) => glMap1fPtr?.Invoke(target, u1, u2, stride, order, points);
        private delegate void glMap1fDel(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points);
        private static glMap1fDel glMap1fPtr;
        
        // glMap1xOES
        public static void glMap1xOES(uint /*MapTarget*/  target, int  u1, int  u2, int  stride, int  order, int  points) => glMap1xOESPtr?.Invoke(target, u1, u2, stride, order, points);
        private delegate void glMap1xOESDel(uint /*MapTarget*/  target, int  u1, int  u2, int  stride, int  order, int  points);
        private static glMap1xOESDel glMap1xOESPtr;
        
        // glMap2d
        public static void glMap2d(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points) => glMap2dPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        private delegate void glMap2dDel(uint /*MapTarget*/  target, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points);
        private static glMap2dDel glMap2dPtr;
        
        // glMap2f
        public static void glMap2f(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points) => glMap2fPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        private delegate void glMap2fDel(uint /*MapTarget*/  target, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points);
        private static glMap2fDel glMap2fPtr;
        
        // glMap2xOES
        public static void glMap2xOES(uint /*MapTarget*/  target, int  u1, int  u2, int  ustride, int  uorder, int  v1, int  v2, int  vstride, int  vorder, int  points) => glMap2xOESPtr?.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        private delegate void glMap2xOESDel(uint /*MapTarget*/  target, int  u1, int  u2, int  ustride, int  uorder, int  v1, int  v2, int  vstride, int  vorder, int  points);
        private static glMap2xOESDel glMap2xOESPtr;
        
        // glMapBuffer
        public static void glMapBuffer(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => glMapBufferPtr?.Invoke(target, access);
        private delegate void glMapBufferDel(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access);
        private static glMapBufferDel glMapBufferPtr;
        
        // glMapBufferARB
        public static void glMapBufferARB(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => glMapBufferARBPtr?.Invoke(target, access);
        private delegate void glMapBufferARBDel(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access);
        private static glMapBufferARBDel glMapBufferARBPtr;
        
        // glMapBufferOES
        public static void glMapBufferOES(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access) => glMapBufferOESPtr?.Invoke(target, access);
        private delegate void glMapBufferOESDel(uint /*BufferTargetARB*/  target, uint /*BufferAccessARB*/  access);
        private static glMapBufferOESDel glMapBufferOESPtr;
        
        // glMapBufferRange
        public static void glMapBufferRange(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access) => glMapBufferRangePtr?.Invoke(target, offset, length, access);
        private delegate void glMapBufferRangeDel(uint /*BufferTargetARB*/  target, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access);
        private static glMapBufferRangeDel glMapBufferRangePtr;
        
        // glMapBufferRangeEXT
        public static void glMapBufferRangeEXT(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access) => glMapBufferRangeEXTPtr?.Invoke(target, offset, length, access);
        private delegate void glMapBufferRangeEXTDel(uint /*BufferTargetARB*/  target, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access);
        private static glMapBufferRangeEXTDel glMapBufferRangeEXTPtr;
        
        // glMapControlPointsNV
        public static void glMapControlPointsNV(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, int /*CheckedInt32*/  uorder, int /*CheckedInt32*/  vorder, bool /*Boolean*/  packed, IntPtr  points) => glMapControlPointsNVPtr?.Invoke(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        private delegate void glMapControlPointsNVDel(uint /*EvalTargetNV*/  target, uint  index, uint /*MapTypeNV*/  type, uint  ustride, uint  vstride, int /*CheckedInt32*/  uorder, int /*CheckedInt32*/  vorder, bool /*Boolean*/  packed, IntPtr  points);
        private static glMapControlPointsNVDel glMapControlPointsNVPtr;
        
        // glMapGrid1d
        public static void glMapGrid1d(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2) => glMapGrid1dPtr?.Invoke(un, u1, u2);
        private delegate void glMapGrid1dDel(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2);
        private static glMapGrid1dDel glMapGrid1dPtr;
        
        // glMapGrid1f
        public static void glMapGrid1f(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2) => glMapGrid1fPtr?.Invoke(un, u1, u2);
        private delegate void glMapGrid1fDel(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2);
        private static glMapGrid1fDel glMapGrid1fPtr;
        
        // glMapGrid1xOES
        public static void glMapGrid1xOES(int  n, int  u1, int  u2) => glMapGrid1xOESPtr?.Invoke(n, u1, u2);
        private delegate void glMapGrid1xOESDel(int  n, int  u1, int  u2);
        private static glMapGrid1xOESDel glMapGrid1xOESPtr;
        
        // glMapGrid2d
        public static void glMapGrid2d(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2, int  vn, double /*CoordD*/  v1, double /*CoordD*/  v2) => glMapGrid2dPtr?.Invoke(un, u1, u2, vn, v1, v2);
        private delegate void glMapGrid2dDel(int  un, double /*CoordD*/  u1, double /*CoordD*/  u2, int  vn, double /*CoordD*/  v1, double /*CoordD*/  v2);
        private static glMapGrid2dDel glMapGrid2dPtr;
        
        // glMapGrid2f
        public static void glMapGrid2f(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2, int  vn, float /*CoordF*/  v1, float /*CoordF*/  v2) => glMapGrid2fPtr?.Invoke(un, u1, u2, vn, v1, v2);
        private delegate void glMapGrid2fDel(int  un, float /*CoordF*/  u1, float /*CoordF*/  u2, int  vn, float /*CoordF*/  v1, float /*CoordF*/  v2);
        private static glMapGrid2fDel glMapGrid2fPtr;
        
        // glMapGrid2xOES
        public static void glMapGrid2xOES(int  n, int  u1, int  u2, int  v1, int  v2) => glMapGrid2xOESPtr?.Invoke(n, u1, u2, v1, v2);
        private delegate void glMapGrid2xOESDel(int  n, int  u1, int  u2, int  v1, int  v2);
        private static glMapGrid2xOESDel glMapGrid2xOESPtr;
        
        // glMapNamedBuffer
        public static void glMapNamedBuffer(uint  buffer, uint /*BufferAccessARB*/  access) => glMapNamedBufferPtr?.Invoke(buffer, access);
        private delegate void glMapNamedBufferDel(uint  buffer, uint /*BufferAccessARB*/  access);
        private static glMapNamedBufferDel glMapNamedBufferPtr;
        
        // glMapNamedBufferEXT
        public static void glMapNamedBufferEXT(uint  buffer, uint /*BufferAccessARB*/  access) => glMapNamedBufferEXTPtr?.Invoke(buffer, access);
        private delegate void glMapNamedBufferEXTDel(uint  buffer, uint /*BufferAccessARB*/  access);
        private static glMapNamedBufferEXTDel glMapNamedBufferEXTPtr;
        
        // glMapNamedBufferRange
        public static void glMapNamedBufferRange(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access) => glMapNamedBufferRangePtr?.Invoke(buffer, offset, length, access);
        private delegate void glMapNamedBufferRangeDel(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  length, uint /*MapBufferAccessMask*/  access);
        private static glMapNamedBufferRangeDel glMapNamedBufferRangePtr;
        
        // glMapNamedBufferRangeEXT
        public static void glMapNamedBufferRangeEXT(uint  buffer, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access) => glMapNamedBufferRangeEXTPtr?.Invoke(buffer, offset, length, access);
        private delegate void glMapNamedBufferRangeEXTDel(uint  buffer, IntPtr  offset, IntPtr  length, uint /*MapBufferAccessMask*/  access);
        private static glMapNamedBufferRangeEXTDel glMapNamedBufferRangeEXTPtr;
        
        // glMapObjectBufferATI
        public static void glMapObjectBufferATI(uint  buffer) => glMapObjectBufferATIPtr?.Invoke(buffer);
        private delegate void glMapObjectBufferATIDel(uint  buffer);
        private static glMapObjectBufferATIDel glMapObjectBufferATIPtr;
        
        // glMapParameterfvNV
        public static void glMapParameterfvNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters) => glMapParameterfvNVPtr?.Invoke(target, pname, parameters);
        private delegate void glMapParameterfvNVDel(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glMapParameterfvNVDel glMapParameterfvNVPtr;
        
        // glMapParameterivNV
        public static void glMapParameterivNV(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[] /*CheckedInt32*/  parameters) => glMapParameterivNVPtr?.Invoke(target, pname, parameters);
        private delegate void glMapParameterivNVDel(uint /*EvalTargetNV*/  target, uint /*MapParameterNV*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMapParameterivNVDel glMapParameterivNVPtr;
        
        // glMapTexture2DINTEL
        public static void glMapTexture2DINTEL(uint  texture, int  level, uint  access, int[]  stride, uint[]  layout) => glMapTexture2DINTELPtr?.Invoke(texture, level, access, stride, layout);
        private delegate void glMapTexture2DINTELDel(uint  texture, int  level, uint  access, int[]  stride, uint[]  layout);
        private static glMapTexture2DINTELDel glMapTexture2DINTELPtr;
        
        // glMapVertexAttrib1dAPPLE
        public static void glMapVertexAttrib1dAPPLE(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points) => glMapVertexAttrib1dAPPLEPtr?.Invoke(index, size, u1, u2, stride, order, points);
        private delegate void glMapVertexAttrib1dAPPLEDel(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  stride, int /*CheckedInt32*/  order, double[] /*CoordD*/  points);
        private static glMapVertexAttrib1dAPPLEDel glMapVertexAttrib1dAPPLEPtr;
        
        // glMapVertexAttrib1fAPPLE
        public static void glMapVertexAttrib1fAPPLE(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points) => glMapVertexAttrib1fAPPLEPtr?.Invoke(index, size, u1, u2, stride, order, points);
        private delegate void glMapVertexAttrib1fAPPLEDel(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  stride, int /*CheckedInt32*/  order, float[] /*CoordF*/  points);
        private static glMapVertexAttrib1fAPPLEDel glMapVertexAttrib1fAPPLEPtr;
        
        // glMapVertexAttrib2dAPPLE
        public static void glMapVertexAttrib2dAPPLE(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points) => glMapVertexAttrib2dAPPLEPtr?.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        private delegate void glMapVertexAttrib2dAPPLEDel(uint  index, uint  size, double /*CoordD*/  u1, double /*CoordD*/  u2, int  ustride, int /*CheckedInt32*/  uorder, double /*CoordD*/  v1, double /*CoordD*/  v2, int  vstride, int /*CheckedInt32*/  vorder, double[] /*CoordD*/  points);
        private static glMapVertexAttrib2dAPPLEDel glMapVertexAttrib2dAPPLEPtr;
        
        // glMapVertexAttrib2fAPPLE
        public static void glMapVertexAttrib2fAPPLE(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points) => glMapVertexAttrib2fAPPLEPtr?.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        private delegate void glMapVertexAttrib2fAPPLEDel(uint  index, uint  size, float /*CoordF*/  u1, float /*CoordF*/  u2, int  ustride, int /*CheckedInt32*/  uorder, float /*CoordF*/  v1, float /*CoordF*/  v2, int  vstride, int /*CheckedInt32*/  vorder, float[] /*CoordF*/  points);
        private static glMapVertexAttrib2fAPPLEDel glMapVertexAttrib2fAPPLEPtr;
        
        // glMaterialf
        public static void glMaterialf(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param) => glMaterialfPtr?.Invoke(face, pname, param);
        private delegate void glMaterialfDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glMaterialfDel glMaterialfPtr;
        
        // glMaterialfv
        public static void glMaterialfv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glMaterialfvPtr?.Invoke(face, pname, parameters);
        private delegate void glMaterialfvDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glMaterialfvDel glMaterialfvPtr;
        
        // glMateriali
        public static void glMateriali(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param) => glMaterialiPtr?.Invoke(face, pname, param);
        private delegate void glMaterialiDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int /*CheckedInt32*/  param);
        private static glMaterialiDel glMaterialiPtr;
        
        // glMaterialiv
        public static void glMaterialiv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glMaterialivPtr?.Invoke(face, pname, parameters);
        private delegate void glMaterialivDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMaterialivDel glMaterialivPtr;
        
        // glMaterialx
        public static void glMaterialx(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => glMaterialxPtr?.Invoke(face, pname, param);
        private delegate void glMaterialxDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param);
        private static glMaterialxDel glMaterialxPtr;
        
        // glMaterialxOES
        public static void glMaterialxOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param) => glMaterialxOESPtr?.Invoke(face, pname, param);
        private delegate void glMaterialxOESDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int  param);
        private static glMaterialxOESDel glMaterialxOESPtr;
        
        // glMaterialxv
        public static void glMaterialxv(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param) => glMaterialxvPtr?.Invoke(face, pname, param);
        private delegate void glMaterialxvDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param);
        private static glMaterialxvDel glMaterialxvPtr;
        
        // glMaterialxvOES
        public static void glMaterialxvOES(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param) => glMaterialxvOESPtr?.Invoke(face, pname, param);
        private delegate void glMaterialxvOESDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  pname, int[]  param);
        private static glMaterialxvOESDel glMaterialxvOESPtr;
        
        // glMatrixFrustumEXT
        public static void glMatrixFrustumEXT(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => glMatrixFrustumEXTPtr?.Invoke(mode, left, right, bottom, top, zNear, zFar);
        private delegate void glMatrixFrustumEXTDel(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar);
        private static glMatrixFrustumEXTDel glMatrixFrustumEXTPtr;
        
        // glMatrixIndexPointerARB
        public static void glMatrixIndexPointerARB(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => glMatrixIndexPointerARBPtr?.Invoke(size, type, stride, pointer);
        private delegate void glMatrixIndexPointerARBDel(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer);
        private static glMatrixIndexPointerARBDel glMatrixIndexPointerARBPtr;
        
        // glMatrixIndexPointerOES
        public static void glMatrixIndexPointerOES(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => glMatrixIndexPointerOESPtr?.Invoke(size, type, stride, pointer);
        private delegate void glMatrixIndexPointerOESDel(int  size, uint /*MatrixIndexPointerTypeARB*/  type, uint  stride, IntPtr  pointer);
        private static glMatrixIndexPointerOESDel glMatrixIndexPointerOESPtr;
        
        // glMatrixIndexubvARB
        public static void glMatrixIndexubvARB(int  size, byte[]  indices) => glMatrixIndexubvARBPtr?.Invoke(size, indices);
        private delegate void glMatrixIndexubvARBDel(int  size, byte[]  indices);
        private static glMatrixIndexubvARBDel glMatrixIndexubvARBPtr;
        
        // glMatrixIndexuivARB
        public static void glMatrixIndexuivARB(int  size, uint[]  indices) => glMatrixIndexuivARBPtr?.Invoke(size, indices);
        private delegate void glMatrixIndexuivARBDel(int  size, uint[]  indices);
        private static glMatrixIndexuivARBDel glMatrixIndexuivARBPtr;
        
        // glMatrixIndexusvARB
        public static void glMatrixIndexusvARB(int  size, ushort[]  indices) => glMatrixIndexusvARBPtr?.Invoke(size, indices);
        private delegate void glMatrixIndexusvARBDel(int  size, ushort[]  indices);
        private static glMatrixIndexusvARBDel glMatrixIndexusvARBPtr;
        
        // glMatrixLoad3x2fNV
        public static void glMatrixLoad3x2fNV(uint  matrixMode, float[]  m) => glMatrixLoad3x2fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixLoad3x2fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixLoad3x2fNVDel glMatrixLoad3x2fNVPtr;
        
        // glMatrixLoad3x3fNV
        public static void glMatrixLoad3x3fNV(uint  matrixMode, float[]  m) => glMatrixLoad3x3fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixLoad3x3fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixLoad3x3fNVDel glMatrixLoad3x3fNVPtr;
        
        // glMatrixLoadIdentityEXT
        public static void glMatrixLoadIdentityEXT(uint /*MatrixMode*/  mode) => glMatrixLoadIdentityEXTPtr?.Invoke(mode);
        private delegate void glMatrixLoadIdentityEXTDel(uint /*MatrixMode*/  mode);
        private static glMatrixLoadIdentityEXTDel glMatrixLoadIdentityEXTPtr;
        
        // glMatrixLoadTranspose3x3fNV
        public static void glMatrixLoadTranspose3x3fNV(uint  matrixMode, float[]  m) => glMatrixLoadTranspose3x3fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixLoadTranspose3x3fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixLoadTranspose3x3fNVDel glMatrixLoadTranspose3x3fNVPtr;
        
        // glMatrixLoadTransposedEXT
        public static void glMatrixLoadTransposedEXT(uint /*MatrixMode*/  mode, double[]  m) => glMatrixLoadTransposedEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixLoadTransposedEXTDel(uint /*MatrixMode*/  mode, double[]  m);
        private static glMatrixLoadTransposedEXTDel glMatrixLoadTransposedEXTPtr;
        
        // glMatrixLoadTransposefEXT
        public static void glMatrixLoadTransposefEXT(uint /*MatrixMode*/  mode, float[]  m) => glMatrixLoadTransposefEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixLoadTransposefEXTDel(uint /*MatrixMode*/  mode, float[]  m);
        private static glMatrixLoadTransposefEXTDel glMatrixLoadTransposefEXTPtr;
        
        // glMatrixLoaddEXT
        public static void glMatrixLoaddEXT(uint /*MatrixMode*/  mode, double[]  m) => glMatrixLoaddEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixLoaddEXTDel(uint /*MatrixMode*/  mode, double[]  m);
        private static glMatrixLoaddEXTDel glMatrixLoaddEXTPtr;
        
        // glMatrixLoadfEXT
        public static void glMatrixLoadfEXT(uint /*MatrixMode*/  mode, float[]  m) => glMatrixLoadfEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixLoadfEXTDel(uint /*MatrixMode*/  mode, float[]  m);
        private static glMatrixLoadfEXTDel glMatrixLoadfEXTPtr;
        
        // glMatrixMode
        public static void glMatrixMode(uint /*MatrixMode*/  mode) => glMatrixModePtr?.Invoke(mode);
        private delegate void glMatrixModeDel(uint /*MatrixMode*/  mode);
        private static glMatrixModeDel glMatrixModePtr;
        
        // glMatrixMult3x2fNV
        public static void glMatrixMult3x2fNV(uint  matrixMode, float[]  m) => glMatrixMult3x2fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixMult3x2fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixMult3x2fNVDel glMatrixMult3x2fNVPtr;
        
        // glMatrixMult3x3fNV
        public static void glMatrixMult3x3fNV(uint  matrixMode, float[]  m) => glMatrixMult3x3fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixMult3x3fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixMult3x3fNVDel glMatrixMult3x3fNVPtr;
        
        // glMatrixMultTranspose3x3fNV
        public static void glMatrixMultTranspose3x3fNV(uint  matrixMode, float[]  m) => glMatrixMultTranspose3x3fNVPtr?.Invoke(matrixMode, m);
        private delegate void glMatrixMultTranspose3x3fNVDel(uint  matrixMode, float[]  m);
        private static glMatrixMultTranspose3x3fNVDel glMatrixMultTranspose3x3fNVPtr;
        
        // glMatrixMultTransposedEXT
        public static void glMatrixMultTransposedEXT(uint /*MatrixMode*/  mode, double[]  m) => glMatrixMultTransposedEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixMultTransposedEXTDel(uint /*MatrixMode*/  mode, double[]  m);
        private static glMatrixMultTransposedEXTDel glMatrixMultTransposedEXTPtr;
        
        // glMatrixMultTransposefEXT
        public static void glMatrixMultTransposefEXT(uint /*MatrixMode*/  mode, float[]  m) => glMatrixMultTransposefEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixMultTransposefEXTDel(uint /*MatrixMode*/  mode, float[]  m);
        private static glMatrixMultTransposefEXTDel glMatrixMultTransposefEXTPtr;
        
        // glMatrixMultdEXT
        public static void glMatrixMultdEXT(uint /*MatrixMode*/  mode, double[]  m) => glMatrixMultdEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixMultdEXTDel(uint /*MatrixMode*/  mode, double[]  m);
        private static glMatrixMultdEXTDel glMatrixMultdEXTPtr;
        
        // glMatrixMultfEXT
        public static void glMatrixMultfEXT(uint /*MatrixMode*/  mode, float[]  m) => glMatrixMultfEXTPtr?.Invoke(mode, m);
        private delegate void glMatrixMultfEXTDel(uint /*MatrixMode*/  mode, float[]  m);
        private static glMatrixMultfEXTDel glMatrixMultfEXTPtr;
        
        // glMatrixOrthoEXT
        public static void glMatrixOrthoEXT(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => glMatrixOrthoEXTPtr?.Invoke(mode, left, right, bottom, top, zNear, zFar);
        private delegate void glMatrixOrthoEXTDel(uint /*MatrixMode*/  mode, double  left, double  right, double  bottom, double  top, double  zNear, double  zFar);
        private static glMatrixOrthoEXTDel glMatrixOrthoEXTPtr;
        
        // glMatrixPopEXT
        public static void glMatrixPopEXT(uint /*MatrixMode*/  mode) => glMatrixPopEXTPtr?.Invoke(mode);
        private delegate void glMatrixPopEXTDel(uint /*MatrixMode*/  mode);
        private static glMatrixPopEXTDel glMatrixPopEXTPtr;
        
        // glMatrixPushEXT
        public static void glMatrixPushEXT(uint /*MatrixMode*/  mode) => glMatrixPushEXTPtr?.Invoke(mode);
        private delegate void glMatrixPushEXTDel(uint /*MatrixMode*/  mode);
        private static glMatrixPushEXTDel glMatrixPushEXTPtr;
        
        // glMatrixRotatedEXT
        public static void glMatrixRotatedEXT(uint /*MatrixMode*/  mode, double  angle, double  x, double  y, double  z) => glMatrixRotatedEXTPtr?.Invoke(mode, angle, x, y, z);
        private delegate void glMatrixRotatedEXTDel(uint /*MatrixMode*/  mode, double  angle, double  x, double  y, double  z);
        private static glMatrixRotatedEXTDel glMatrixRotatedEXTPtr;
        
        // glMatrixRotatefEXT
        public static void glMatrixRotatefEXT(uint /*MatrixMode*/  mode, float  angle, float  x, float  y, float  z) => glMatrixRotatefEXTPtr?.Invoke(mode, angle, x, y, z);
        private delegate void glMatrixRotatefEXTDel(uint /*MatrixMode*/  mode, float  angle, float  x, float  y, float  z);
        private static glMatrixRotatefEXTDel glMatrixRotatefEXTPtr;
        
        // glMatrixScaledEXT
        public static void glMatrixScaledEXT(uint /*MatrixMode*/  mode, double  x, double  y, double  z) => glMatrixScaledEXTPtr?.Invoke(mode, x, y, z);
        private delegate void glMatrixScaledEXTDel(uint /*MatrixMode*/  mode, double  x, double  y, double  z);
        private static glMatrixScaledEXTDel glMatrixScaledEXTPtr;
        
        // glMatrixScalefEXT
        public static void glMatrixScalefEXT(uint /*MatrixMode*/  mode, float  x, float  y, float  z) => glMatrixScalefEXTPtr?.Invoke(mode, x, y, z);
        private delegate void glMatrixScalefEXTDel(uint /*MatrixMode*/  mode, float  x, float  y, float  z);
        private static glMatrixScalefEXTDel glMatrixScalefEXTPtr;
        
        // glMatrixTranslatedEXT
        public static void glMatrixTranslatedEXT(uint /*MatrixMode*/  mode, double  x, double  y, double  z) => glMatrixTranslatedEXTPtr?.Invoke(mode, x, y, z);
        private delegate void glMatrixTranslatedEXTDel(uint /*MatrixMode*/  mode, double  x, double  y, double  z);
        private static glMatrixTranslatedEXTDel glMatrixTranslatedEXTPtr;
        
        // glMatrixTranslatefEXT
        public static void glMatrixTranslatefEXT(uint /*MatrixMode*/  mode, float  x, float  y, float  z) => glMatrixTranslatefEXTPtr?.Invoke(mode, x, y, z);
        private delegate void glMatrixTranslatefEXTDel(uint /*MatrixMode*/  mode, float  x, float  y, float  z);
        private static glMatrixTranslatefEXTDel glMatrixTranslatefEXTPtr;
        
        // glMaxShaderCompilerThreadsKHR
        public static void glMaxShaderCompilerThreadsKHR(uint  count) => glMaxShaderCompilerThreadsKHRPtr?.Invoke(count);
        private delegate void glMaxShaderCompilerThreadsKHRDel(uint  count);
        private static glMaxShaderCompilerThreadsKHRDel glMaxShaderCompilerThreadsKHRPtr;
        
        // glMaxShaderCompilerThreadsARB
        public static void glMaxShaderCompilerThreadsARB(uint  count) => glMaxShaderCompilerThreadsARBPtr?.Invoke(count);
        private delegate void glMaxShaderCompilerThreadsARBDel(uint  count);
        private static glMaxShaderCompilerThreadsARBDel glMaxShaderCompilerThreadsARBPtr;
        
        // glMemoryBarrier
        public static void glMemoryBarrier(uint /*MemoryBarrierMask*/  barriers) => glMemoryBarrierPtr?.Invoke(barriers);
        private delegate void glMemoryBarrierDel(uint /*MemoryBarrierMask*/  barriers);
        private static glMemoryBarrierDel glMemoryBarrierPtr;
        
        // glMemoryBarrierByRegion
        public static void glMemoryBarrierByRegion(uint /*MemoryBarrierMask*/  barriers) => glMemoryBarrierByRegionPtr?.Invoke(barriers);
        private delegate void glMemoryBarrierByRegionDel(uint /*MemoryBarrierMask*/  barriers);
        private static glMemoryBarrierByRegionDel glMemoryBarrierByRegionPtr;
        
        // glMemoryBarrierEXT
        public static void glMemoryBarrierEXT(uint /*MemoryBarrierMask*/  barriers) => glMemoryBarrierEXTPtr?.Invoke(barriers);
        private delegate void glMemoryBarrierEXTDel(uint /*MemoryBarrierMask*/  barriers);
        private static glMemoryBarrierEXTDel glMemoryBarrierEXTPtr;
        
        // glMemoryObjectParameterivEXT
        public static void glMemoryObjectParameterivEXT(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters) => glMemoryObjectParameterivEXTPtr?.Invoke(memoryObject, pname, parameters);
        private delegate void glMemoryObjectParameterivEXTDel(uint  memoryObject, uint /*MemoryObjectParameterName*/  pname, int[]  parameters);
        private static glMemoryObjectParameterivEXTDel glMemoryObjectParameterivEXTPtr;
        
        // glMinSampleShading
        public static void glMinSampleShading(float /*ColorF*/  value) => glMinSampleShadingPtr?.Invoke(value);
        private delegate void glMinSampleShadingDel(float /*ColorF*/  value);
        private static glMinSampleShadingDel glMinSampleShadingPtr;
        
        // glMinSampleShadingARB
        public static void glMinSampleShadingARB(float /*ColorF*/  value) => glMinSampleShadingARBPtr?.Invoke(value);
        private delegate void glMinSampleShadingARBDel(float /*ColorF*/  value);
        private static glMinSampleShadingARBDel glMinSampleShadingARBPtr;
        
        // glMinSampleShadingOES
        public static void glMinSampleShadingOES(float /*ColorF*/  value) => glMinSampleShadingOESPtr?.Invoke(value);
        private delegate void glMinSampleShadingOESDel(float /*ColorF*/  value);
        private static glMinSampleShadingOESDel glMinSampleShadingOESPtr;
        
        // glMinmax
        public static void glMinmax(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => glMinmaxPtr?.Invoke(target, internalformat, sink);
        private delegate void glMinmaxDel(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink);
        private static glMinmaxDel glMinmaxPtr;
        
        // glMinmaxEXT
        public static void glMinmaxEXT(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink) => glMinmaxEXTPtr?.Invoke(target, internalformat, sink);
        private delegate void glMinmaxEXTDel(uint /*MinmaxTargetEXT*/  target, uint /*InternalFormat*/  internalformat, bool /*Boolean*/  sink);
        private static glMinmaxEXTDel glMinmaxEXTPtr;
        
        // glMultMatrixd
        public static void glMultMatrixd(double[]  m) => glMultMatrixdPtr?.Invoke(m);
        private delegate void glMultMatrixdDel(double[]  m);
        private static glMultMatrixdDel glMultMatrixdPtr;
        
        // glMultMatrixf
        public static void glMultMatrixf(float[]  m) => glMultMatrixfPtr?.Invoke(m);
        private delegate void glMultMatrixfDel(float[]  m);
        private static glMultMatrixfDel glMultMatrixfPtr;
        
        // glMultMatrixx
        public static void glMultMatrixx(int[]  m) => glMultMatrixxPtr?.Invoke(m);
        private delegate void glMultMatrixxDel(int[]  m);
        private static glMultMatrixxDel glMultMatrixxPtr;
        
        // glMultMatrixxOES
        public static void glMultMatrixxOES(int[]  m) => glMultMatrixxOESPtr?.Invoke(m);
        private delegate void glMultMatrixxOESDel(int[]  m);
        private static glMultMatrixxOESDel glMultMatrixxOESPtr;
        
        // glMultTransposeMatrixd
        public static void glMultTransposeMatrixd(double[]  m) => glMultTransposeMatrixdPtr?.Invoke(m);
        private delegate void glMultTransposeMatrixdDel(double[]  m);
        private static glMultTransposeMatrixdDel glMultTransposeMatrixdPtr;
        
        // glMultTransposeMatrixdARB
        public static void glMultTransposeMatrixdARB(double[]  m) => glMultTransposeMatrixdARBPtr?.Invoke(m);
        private delegate void glMultTransposeMatrixdARBDel(double[]  m);
        private static glMultTransposeMatrixdARBDel glMultTransposeMatrixdARBPtr;
        
        // glMultTransposeMatrixf
        public static void glMultTransposeMatrixf(float[]  m) => glMultTransposeMatrixfPtr?.Invoke(m);
        private delegate void glMultTransposeMatrixfDel(float[]  m);
        private static glMultTransposeMatrixfDel glMultTransposeMatrixfPtr;
        
        // glMultTransposeMatrixfARB
        public static void glMultTransposeMatrixfARB(float[]  m) => glMultTransposeMatrixfARBPtr?.Invoke(m);
        private delegate void glMultTransposeMatrixfARBDel(float[]  m);
        private static glMultTransposeMatrixfARBDel glMultTransposeMatrixfARBPtr;
        
        // glMultTransposeMatrixxOES
        public static void glMultTransposeMatrixxOES(int[]  m) => glMultTransposeMatrixxOESPtr?.Invoke(m);
        private delegate void glMultTransposeMatrixxOESDel(int[]  m);
        private static glMultTransposeMatrixxOESDel glMultTransposeMatrixxOESPtr;
        
        // glMultiDrawArrays
        public static void glMultiDrawArrays(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  drawcount) => glMultiDrawArraysPtr?.Invoke(mode, first, count, drawcount);
        private delegate void glMultiDrawArraysDel(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  drawcount);
        private static glMultiDrawArraysDel glMultiDrawArraysPtr;
        
        // glMultiDrawArraysEXT
        public static void glMultiDrawArraysEXT(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount) => glMultiDrawArraysEXTPtr?.Invoke(mode, first, count, primcount);
        private delegate void glMultiDrawArraysEXTDel(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount);
        private static glMultiDrawArraysEXTDel glMultiDrawArraysEXTPtr;
        
        // glMultiDrawArraysIndirect
        public static void glMultiDrawArraysIndirect(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride) => glMultiDrawArraysIndirectPtr?.Invoke(mode, indirect, drawcount, stride);
        private delegate void glMultiDrawArraysIndirectDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride);
        private static glMultiDrawArraysIndirectDel glMultiDrawArraysIndirectPtr;
        
        // glMultiDrawArraysIndirectAMD
        public static void glMultiDrawArraysIndirectAMD(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  primcount, uint  stride) => glMultiDrawArraysIndirectAMDPtr?.Invoke(mode, indirect, primcount, stride);
        private delegate void glMultiDrawArraysIndirectAMDDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  primcount, uint  stride);
        private static glMultiDrawArraysIndirectAMDDel glMultiDrawArraysIndirectAMDPtr;
        
        // glMultiDrawArraysIndirectBindlessCountNV
        public static void glMultiDrawArraysIndirectBindlessCountNV(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount) => glMultiDrawArraysIndirectBindlessCountNVPtr?.Invoke(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        private delegate void glMultiDrawArraysIndirectBindlessCountNVDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount);
        private static glMultiDrawArraysIndirectBindlessCountNVDel glMultiDrawArraysIndirectBindlessCountNVPtr;
        
        // glMultiDrawArraysIndirectBindlessNV
        public static void glMultiDrawArraysIndirectBindlessNV(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount) => glMultiDrawArraysIndirectBindlessNVPtr?.Invoke(mode, indirect, drawCount, stride, vertexBufferCount);
        private delegate void glMultiDrawArraysIndirectBindlessNVDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount);
        private static glMultiDrawArraysIndirectBindlessNVDel glMultiDrawArraysIndirectBindlessNVPtr;
        
        // glMultiDrawArraysIndirectCount
        public static void glMultiDrawArraysIndirectCount(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => glMultiDrawArraysIndirectCountPtr?.Invoke(mode, indirect, drawcount, maxdrawcount, stride);
        private delegate void glMultiDrawArraysIndirectCountDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride);
        private static glMultiDrawArraysIndirectCountDel glMultiDrawArraysIndirectCountPtr;
        
        // glMultiDrawArraysIndirectCountARB
        public static void glMultiDrawArraysIndirectCountARB(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => glMultiDrawArraysIndirectCountARBPtr?.Invoke(mode, indirect, drawcount, maxdrawcount, stride);
        private delegate void glMultiDrawArraysIndirectCountARBDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride);
        private static glMultiDrawArraysIndirectCountARBDel glMultiDrawArraysIndirectCountARBPtr;
        
        // glMultiDrawArraysIndirectEXT
        public static void glMultiDrawArraysIndirectEXT(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride) => glMultiDrawArraysIndirectEXTPtr?.Invoke(mode, indirect, drawcount, stride);
        private delegate void glMultiDrawArraysIndirectEXTDel(uint /*PrimitiveType*/  mode, IntPtr  indirect, uint  drawcount, uint  stride);
        private static glMultiDrawArraysIndirectEXTDel glMultiDrawArraysIndirectEXTPtr;
        
        // glMultiDrawElementArrayAPPLE
        public static void glMultiDrawElementArrayAPPLE(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount) => glMultiDrawElementArrayAPPLEPtr?.Invoke(mode, first, count, primcount);
        private delegate void glMultiDrawElementArrayAPPLEDel(uint /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount);
        private static glMultiDrawElementArrayAPPLEDel glMultiDrawElementArrayAPPLEPtr;
        
        // glMultiDrawElements
        public static void glMultiDrawElements(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount) => glMultiDrawElementsPtr?.Invoke(mode, count, type, indices, drawcount);
        private delegate void glMultiDrawElementsDel(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount);
        private static glMultiDrawElementsDel glMultiDrawElementsPtr;
        
        // glMultiDrawElementsBaseVertex
        public static void glMultiDrawElementsBaseVertex(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount, int[]  basevertex) => glMultiDrawElementsBaseVertexPtr?.Invoke(mode, count, type, indices, drawcount, basevertex);
        private delegate void glMultiDrawElementsBaseVertexDel(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  drawcount, int[]  basevertex);
        private static glMultiDrawElementsBaseVertexDel glMultiDrawElementsBaseVertexPtr;
        
        // glMultiDrawElementsBaseVertexEXT
        public static void glMultiDrawElementsBaseVertexEXT(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int[]  basevertex) => glMultiDrawElementsBaseVertexEXTPtr?.Invoke(mode, count, type, indices, primcount, basevertex);
        private delegate void glMultiDrawElementsBaseVertexEXTDel(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int[]  basevertex);
        private static glMultiDrawElementsBaseVertexEXTDel glMultiDrawElementsBaseVertexEXTPtr;
        
        // glMultiDrawElementsEXT
        public static void glMultiDrawElementsEXT(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount) => glMultiDrawElementsEXTPtr?.Invoke(mode, count, type, indices, primcount);
        private delegate void glMultiDrawElementsEXTDel(uint /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount);
        private static glMultiDrawElementsEXTDel glMultiDrawElementsEXTPtr;
        
        // glMultiDrawElementsIndirect
        public static void glMultiDrawElementsIndirect(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride) => glMultiDrawElementsIndirectPtr?.Invoke(mode, type, indirect, drawcount, stride);
        private delegate void glMultiDrawElementsIndirectDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride);
        private static glMultiDrawElementsIndirectDel glMultiDrawElementsIndirectPtr;
        
        // glMultiDrawElementsIndirectAMD
        public static void glMultiDrawElementsIndirectAMD(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  primcount, uint  stride) => glMultiDrawElementsIndirectAMDPtr?.Invoke(mode, type, indirect, primcount, stride);
        private delegate void glMultiDrawElementsIndirectAMDDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  primcount, uint  stride);
        private static glMultiDrawElementsIndirectAMDDel glMultiDrawElementsIndirectAMDPtr;
        
        // glMultiDrawElementsIndirectBindlessCountNV
        public static void glMultiDrawElementsIndirectBindlessCountNV(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount) => glMultiDrawElementsIndirectBindlessCountNVPtr?.Invoke(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        private delegate void glMultiDrawElementsIndirectBindlessCountNVDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  maxDrawCount, uint  stride, int  vertexBufferCount);
        private static glMultiDrawElementsIndirectBindlessCountNVDel glMultiDrawElementsIndirectBindlessCountNVPtr;
        
        // glMultiDrawElementsIndirectBindlessNV
        public static void glMultiDrawElementsIndirectBindlessNV(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount) => glMultiDrawElementsIndirectBindlessNVPtr?.Invoke(mode, type, indirect, drawCount, stride, vertexBufferCount);
        private delegate void glMultiDrawElementsIndirectBindlessNVDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawCount, uint  stride, int  vertexBufferCount);
        private static glMultiDrawElementsIndirectBindlessNVDel glMultiDrawElementsIndirectBindlessNVPtr;
        
        // glMultiDrawElementsIndirectCount
        public static void glMultiDrawElementsIndirectCount(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => glMultiDrawElementsIndirectCountPtr?.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);
        private delegate void glMultiDrawElementsIndirectCountDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride);
        private static glMultiDrawElementsIndirectCountDel glMultiDrawElementsIndirectCountPtr;
        
        // glMultiDrawElementsIndirectCountARB
        public static void glMultiDrawElementsIndirectCountARB(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => glMultiDrawElementsIndirectCountARBPtr?.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);
        private delegate void glMultiDrawElementsIndirectCountARBDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride);
        private static glMultiDrawElementsIndirectCountARBDel glMultiDrawElementsIndirectCountARBPtr;
        
        // glMultiDrawElementsIndirectEXT
        public static void glMultiDrawElementsIndirectEXT(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride) => glMultiDrawElementsIndirectEXTPtr?.Invoke(mode, type, indirect, drawcount, stride);
        private delegate void glMultiDrawElementsIndirectEXTDel(uint /*PrimitiveType*/  mode, uint /*DrawElementsType*/  type, IntPtr  indirect, uint  drawcount, uint  stride);
        private static glMultiDrawElementsIndirectEXTDel glMultiDrawElementsIndirectEXTPtr;
        
        // glMultiDrawMeshTasksIndirectNV
        public static void glMultiDrawMeshTasksIndirectNV(IntPtr  indirect, uint  drawcount, uint  stride) => glMultiDrawMeshTasksIndirectNVPtr?.Invoke(indirect, drawcount, stride);
        private delegate void glMultiDrawMeshTasksIndirectNVDel(IntPtr  indirect, uint  drawcount, uint  stride);
        private static glMultiDrawMeshTasksIndirectNVDel glMultiDrawMeshTasksIndirectNVPtr;
        
        // glMultiDrawMeshTasksIndirectCountNV
        public static void glMultiDrawMeshTasksIndirectCountNV(IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride) => glMultiDrawMeshTasksIndirectCountNVPtr?.Invoke(indirect, drawcount, maxdrawcount, stride);
        private delegate void glMultiDrawMeshTasksIndirectCountNVDel(IntPtr  indirect, IntPtr  drawcount, uint  maxdrawcount, uint  stride);
        private static glMultiDrawMeshTasksIndirectCountNVDel glMultiDrawMeshTasksIndirectCountNVPtr;
        
        // glMultiDrawRangeElementArrayAPPLE
        public static void glMultiDrawRangeElementArrayAPPLE(uint /*PrimitiveType*/  mode, uint  start, uint  end, int[]  first, uint[]  count, uint  primcount) => glMultiDrawRangeElementArrayAPPLEPtr?.Invoke(mode, start, end, first, count, primcount);
        private delegate void glMultiDrawRangeElementArrayAPPLEDel(uint /*PrimitiveType*/  mode, uint  start, uint  end, int[]  first, uint[]  count, uint  primcount);
        private static glMultiDrawRangeElementArrayAPPLEDel glMultiDrawRangeElementArrayAPPLEPtr;
        
        // glMultiModeDrawArraysIBM
        public static void glMultiModeDrawArraysIBM(uint[] /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount, int  modestride) => glMultiModeDrawArraysIBMPtr?.Invoke(mode, first, count, primcount, modestride);
        private delegate void glMultiModeDrawArraysIBMDel(uint[] /*PrimitiveType*/  mode, int[]  first, uint[]  count, uint  primcount, int  modestride);
        private static glMultiModeDrawArraysIBMDel glMultiModeDrawArraysIBMPtr;
        
        // glMultiModeDrawElementsIBM
        public static void glMultiModeDrawElementsIBM(uint[] /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int  modestride) => glMultiModeDrawElementsIBMPtr?.Invoke(mode, count, type, indices, primcount, modestride);
        private delegate void glMultiModeDrawElementsIBMDel(uint[] /*PrimitiveType*/  mode, uint[]  count, uint /*DrawElementsType*/  type, IntPtr  indices, uint  primcount, int  modestride);
        private static glMultiModeDrawElementsIBMDel glMultiModeDrawElementsIBMPtr;
        
        // glMultiTexBufferEXT
        public static void glMultiTexBufferEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  internalformat, uint  buffer) => glMultiTexBufferEXTPtr?.Invoke(texunit, target, internalformat, buffer);
        private delegate void glMultiTexBufferEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  internalformat, uint  buffer);
        private static glMultiTexBufferEXTDel glMultiTexBufferEXTPtr;
        
        // glMultiTexCoord1bOES
        public static void glMultiTexCoord1bOES(uint /*TextureUnit*/  texture, sbyte  s) => glMultiTexCoord1bOESPtr?.Invoke(texture, s);
        private delegate void glMultiTexCoord1bOESDel(uint /*TextureUnit*/  texture, sbyte  s);
        private static glMultiTexCoord1bOESDel glMultiTexCoord1bOESPtr;
        
        // glMultiTexCoord1bvOES
        public static void glMultiTexCoord1bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => glMultiTexCoord1bvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord1bvOESDel(uint /*TextureUnit*/  texture, sbyte[]  coords);
        private static glMultiTexCoord1bvOESDel glMultiTexCoord1bvOESPtr;
        
        // glMultiTexCoord1d
        public static void glMultiTexCoord1d(uint /*TextureUnit*/  target, double /*CoordD*/  s) => glMultiTexCoord1dPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1dDel(uint /*TextureUnit*/  target, double /*CoordD*/  s);
        private static glMultiTexCoord1dDel glMultiTexCoord1dPtr;
        
        // glMultiTexCoord1dARB
        public static void glMultiTexCoord1dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s) => glMultiTexCoord1dARBPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1dARBDel(uint /*TextureUnit*/  target, double /*CoordD*/  s);
        private static glMultiTexCoord1dARBDel glMultiTexCoord1dARBPtr;
        
        // glMultiTexCoord1dv
        public static void glMultiTexCoord1dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord1dvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1dvDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord1dvDel glMultiTexCoord1dvPtr;
        
        // glMultiTexCoord1dvARB
        public static void glMultiTexCoord1dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord1dvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1dvARBDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord1dvARBDel glMultiTexCoord1dvARBPtr;
        
        // glMultiTexCoord1f
        public static void glMultiTexCoord1f(uint /*TextureUnit*/  target, float /*CoordF*/  s) => glMultiTexCoord1fPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1fDel(uint /*TextureUnit*/  target, float /*CoordF*/  s);
        private static glMultiTexCoord1fDel glMultiTexCoord1fPtr;
        
        // glMultiTexCoord1fARB
        public static void glMultiTexCoord1fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s) => glMultiTexCoord1fARBPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1fARBDel(uint /*TextureUnit*/  target, float /*CoordF*/  s);
        private static glMultiTexCoord1fARBDel glMultiTexCoord1fARBPtr;
        
        // glMultiTexCoord1fv
        public static void glMultiTexCoord1fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord1fvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1fvDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord1fvDel glMultiTexCoord1fvPtr;
        
        // glMultiTexCoord1fvARB
        public static void glMultiTexCoord1fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord1fvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1fvARBDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord1fvARBDel glMultiTexCoord1fvARBPtr;
        
        // glMultiTexCoord1hNV
        public static void glMultiTexCoord1hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s) => glMultiTexCoord1hNVPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1hNVDel(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s);
        private static glMultiTexCoord1hNVDel glMultiTexCoord1hNVPtr;
        
        // glMultiTexCoord1hvNV
        public static void glMultiTexCoord1hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => glMultiTexCoord1hvNVPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1hvNVDel(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v);
        private static glMultiTexCoord1hvNVDel glMultiTexCoord1hvNVPtr;
        
        // glMultiTexCoord1i
        public static void glMultiTexCoord1i(uint /*TextureUnit*/  target, int /*CoordI*/  s) => glMultiTexCoord1iPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1iDel(uint /*TextureUnit*/  target, int /*CoordI*/  s);
        private static glMultiTexCoord1iDel glMultiTexCoord1iPtr;
        
        // glMultiTexCoord1iARB
        public static void glMultiTexCoord1iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s) => glMultiTexCoord1iARBPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1iARBDel(uint /*TextureUnit*/  target, int /*CoordI*/  s);
        private static glMultiTexCoord1iARBDel glMultiTexCoord1iARBPtr;
        
        // glMultiTexCoord1iv
        public static void glMultiTexCoord1iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord1ivPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1ivDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord1ivDel glMultiTexCoord1ivPtr;
        
        // glMultiTexCoord1ivARB
        public static void glMultiTexCoord1ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord1ivARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1ivARBDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord1ivARBDel glMultiTexCoord1ivARBPtr;
        
        // glMultiTexCoord1s
        public static void glMultiTexCoord1s(uint /*TextureUnit*/  target, short /*CoordS*/  s) => glMultiTexCoord1sPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1sDel(uint /*TextureUnit*/  target, short /*CoordS*/  s);
        private static glMultiTexCoord1sDel glMultiTexCoord1sPtr;
        
        // glMultiTexCoord1sARB
        public static void glMultiTexCoord1sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s) => glMultiTexCoord1sARBPtr?.Invoke(target, s);
        private delegate void glMultiTexCoord1sARBDel(uint /*TextureUnit*/  target, short /*CoordS*/  s);
        private static glMultiTexCoord1sARBDel glMultiTexCoord1sARBPtr;
        
        // glMultiTexCoord1sv
        public static void glMultiTexCoord1sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord1svPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1svDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord1svDel glMultiTexCoord1svPtr;
        
        // glMultiTexCoord1svARB
        public static void glMultiTexCoord1svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord1svARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord1svARBDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord1svARBDel glMultiTexCoord1svARBPtr;
        
        // glMultiTexCoord1xOES
        public static void glMultiTexCoord1xOES(uint /*TextureUnit*/  texture, int  s) => glMultiTexCoord1xOESPtr?.Invoke(texture, s);
        private delegate void glMultiTexCoord1xOESDel(uint /*TextureUnit*/  texture, int  s);
        private static glMultiTexCoord1xOESDel glMultiTexCoord1xOESPtr;
        
        // glMultiTexCoord1xvOES
        public static void glMultiTexCoord1xvOES(uint /*TextureUnit*/  texture, int[]  coords) => glMultiTexCoord1xvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord1xvOESDel(uint /*TextureUnit*/  texture, int[]  coords);
        private static glMultiTexCoord1xvOESDel glMultiTexCoord1xvOESPtr;
        
        // glMultiTexCoord2bOES
        public static void glMultiTexCoord2bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t) => glMultiTexCoord2bOESPtr?.Invoke(texture, s, t);
        private delegate void glMultiTexCoord2bOESDel(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t);
        private static glMultiTexCoord2bOESDel glMultiTexCoord2bOESPtr;
        
        // glMultiTexCoord2bvOES
        public static void glMultiTexCoord2bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => glMultiTexCoord2bvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord2bvOESDel(uint /*TextureUnit*/  texture, sbyte[]  coords);
        private static glMultiTexCoord2bvOESDel glMultiTexCoord2bvOESPtr;
        
        // glMultiTexCoord2d
        public static void glMultiTexCoord2d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t) => glMultiTexCoord2dPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2dDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t);
        private static glMultiTexCoord2dDel glMultiTexCoord2dPtr;
        
        // glMultiTexCoord2dARB
        public static void glMultiTexCoord2dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t) => glMultiTexCoord2dARBPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2dARBDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t);
        private static glMultiTexCoord2dARBDel glMultiTexCoord2dARBPtr;
        
        // glMultiTexCoord2dv
        public static void glMultiTexCoord2dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord2dvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2dvDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord2dvDel glMultiTexCoord2dvPtr;
        
        // glMultiTexCoord2dvARB
        public static void glMultiTexCoord2dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord2dvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2dvARBDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord2dvARBDel glMultiTexCoord2dvARBPtr;
        
        // glMultiTexCoord2f
        public static void glMultiTexCoord2f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t) => glMultiTexCoord2fPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2fDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t);
        private static glMultiTexCoord2fDel glMultiTexCoord2fPtr;
        
        // glMultiTexCoord2fARB
        public static void glMultiTexCoord2fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t) => glMultiTexCoord2fARBPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2fARBDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t);
        private static glMultiTexCoord2fARBDel glMultiTexCoord2fARBPtr;
        
        // glMultiTexCoord2fv
        public static void glMultiTexCoord2fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord2fvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2fvDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord2fvDel glMultiTexCoord2fvPtr;
        
        // glMultiTexCoord2fvARB
        public static void glMultiTexCoord2fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord2fvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2fvARBDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord2fvARBDel glMultiTexCoord2fvARBPtr;
        
        // glMultiTexCoord2hNV
        public static void glMultiTexCoord2hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t) => glMultiTexCoord2hNVPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2hNVDel(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t);
        private static glMultiTexCoord2hNVDel glMultiTexCoord2hNVPtr;
        
        // glMultiTexCoord2hvNV
        public static void glMultiTexCoord2hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => glMultiTexCoord2hvNVPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2hvNVDel(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v);
        private static glMultiTexCoord2hvNVDel glMultiTexCoord2hvNVPtr;
        
        // glMultiTexCoord2i
        public static void glMultiTexCoord2i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t) => glMultiTexCoord2iPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2iDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t);
        private static glMultiTexCoord2iDel glMultiTexCoord2iPtr;
        
        // glMultiTexCoord2iARB
        public static void glMultiTexCoord2iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t) => glMultiTexCoord2iARBPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2iARBDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t);
        private static glMultiTexCoord2iARBDel glMultiTexCoord2iARBPtr;
        
        // glMultiTexCoord2iv
        public static void glMultiTexCoord2iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord2ivPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2ivDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord2ivDel glMultiTexCoord2ivPtr;
        
        // glMultiTexCoord2ivARB
        public static void glMultiTexCoord2ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord2ivARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2ivARBDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord2ivARBDel glMultiTexCoord2ivARBPtr;
        
        // glMultiTexCoord2s
        public static void glMultiTexCoord2s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t) => glMultiTexCoord2sPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2sDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t);
        private static glMultiTexCoord2sDel glMultiTexCoord2sPtr;
        
        // glMultiTexCoord2sARB
        public static void glMultiTexCoord2sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t) => glMultiTexCoord2sARBPtr?.Invoke(target, s, t);
        private delegate void glMultiTexCoord2sARBDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t);
        private static glMultiTexCoord2sARBDel glMultiTexCoord2sARBPtr;
        
        // glMultiTexCoord2sv
        public static void glMultiTexCoord2sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord2svPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2svDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord2svDel glMultiTexCoord2svPtr;
        
        // glMultiTexCoord2svARB
        public static void glMultiTexCoord2svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord2svARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord2svARBDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord2svARBDel glMultiTexCoord2svARBPtr;
        
        // glMultiTexCoord2xOES
        public static void glMultiTexCoord2xOES(uint /*TextureUnit*/  texture, int  s, int  t) => glMultiTexCoord2xOESPtr?.Invoke(texture, s, t);
        private delegate void glMultiTexCoord2xOESDel(uint /*TextureUnit*/  texture, int  s, int  t);
        private static glMultiTexCoord2xOESDel glMultiTexCoord2xOESPtr;
        
        // glMultiTexCoord2xvOES
        public static void glMultiTexCoord2xvOES(uint /*TextureUnit*/  texture, int[]  coords) => glMultiTexCoord2xvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord2xvOESDel(uint /*TextureUnit*/  texture, int[]  coords);
        private static glMultiTexCoord2xvOESDel glMultiTexCoord2xvOESPtr;
        
        // glMultiTexCoord3bOES
        public static void glMultiTexCoord3bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r) => glMultiTexCoord3bOESPtr?.Invoke(texture, s, t, r);
        private delegate void glMultiTexCoord3bOESDel(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r);
        private static glMultiTexCoord3bOESDel glMultiTexCoord3bOESPtr;
        
        // glMultiTexCoord3bvOES
        public static void glMultiTexCoord3bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => glMultiTexCoord3bvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord3bvOESDel(uint /*TextureUnit*/  texture, sbyte[]  coords);
        private static glMultiTexCoord3bvOESDel glMultiTexCoord3bvOESPtr;
        
        // glMultiTexCoord3d
        public static void glMultiTexCoord3d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => glMultiTexCoord3dPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3dDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r);
        private static glMultiTexCoord3dDel glMultiTexCoord3dPtr;
        
        // glMultiTexCoord3dARB
        public static void glMultiTexCoord3dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => glMultiTexCoord3dARBPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3dARBDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r);
        private static glMultiTexCoord3dARBDel glMultiTexCoord3dARBPtr;
        
        // glMultiTexCoord3dv
        public static void glMultiTexCoord3dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord3dvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3dvDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord3dvDel glMultiTexCoord3dvPtr;
        
        // glMultiTexCoord3dvARB
        public static void glMultiTexCoord3dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord3dvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3dvARBDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord3dvARBDel glMultiTexCoord3dvARBPtr;
        
        // glMultiTexCoord3f
        public static void glMultiTexCoord3f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => glMultiTexCoord3fPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3fDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r);
        private static glMultiTexCoord3fDel glMultiTexCoord3fPtr;
        
        // glMultiTexCoord3fARB
        public static void glMultiTexCoord3fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => glMultiTexCoord3fARBPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3fARBDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r);
        private static glMultiTexCoord3fARBDel glMultiTexCoord3fARBPtr;
        
        // glMultiTexCoord3fv
        public static void glMultiTexCoord3fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord3fvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3fvDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord3fvDel glMultiTexCoord3fvPtr;
        
        // glMultiTexCoord3fvARB
        public static void glMultiTexCoord3fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord3fvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3fvARBDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord3fvARBDel glMultiTexCoord3fvARBPtr;
        
        // glMultiTexCoord3hNV
        public static void glMultiTexCoord3hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r) => glMultiTexCoord3hNVPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3hNVDel(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r);
        private static glMultiTexCoord3hNVDel glMultiTexCoord3hNVPtr;
        
        // glMultiTexCoord3hvNV
        public static void glMultiTexCoord3hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => glMultiTexCoord3hvNVPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3hvNVDel(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v);
        private static glMultiTexCoord3hvNVDel glMultiTexCoord3hvNVPtr;
        
        // glMultiTexCoord3i
        public static void glMultiTexCoord3i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => glMultiTexCoord3iPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3iDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r);
        private static glMultiTexCoord3iDel glMultiTexCoord3iPtr;
        
        // glMultiTexCoord3iARB
        public static void glMultiTexCoord3iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => glMultiTexCoord3iARBPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3iARBDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r);
        private static glMultiTexCoord3iARBDel glMultiTexCoord3iARBPtr;
        
        // glMultiTexCoord3iv
        public static void glMultiTexCoord3iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord3ivPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3ivDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord3ivDel glMultiTexCoord3ivPtr;
        
        // glMultiTexCoord3ivARB
        public static void glMultiTexCoord3ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord3ivARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3ivARBDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord3ivARBDel glMultiTexCoord3ivARBPtr;
        
        // glMultiTexCoord3s
        public static void glMultiTexCoord3s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => glMultiTexCoord3sPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3sDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r);
        private static glMultiTexCoord3sDel glMultiTexCoord3sPtr;
        
        // glMultiTexCoord3sARB
        public static void glMultiTexCoord3sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => glMultiTexCoord3sARBPtr?.Invoke(target, s, t, r);
        private delegate void glMultiTexCoord3sARBDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r);
        private static glMultiTexCoord3sARBDel glMultiTexCoord3sARBPtr;
        
        // glMultiTexCoord3sv
        public static void glMultiTexCoord3sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord3svPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3svDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord3svDel glMultiTexCoord3svPtr;
        
        // glMultiTexCoord3svARB
        public static void glMultiTexCoord3svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord3svARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord3svARBDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord3svARBDel glMultiTexCoord3svARBPtr;
        
        // glMultiTexCoord3xOES
        public static void glMultiTexCoord3xOES(uint /*TextureUnit*/  texture, int  s, int  t, int  r) => glMultiTexCoord3xOESPtr?.Invoke(texture, s, t, r);
        private delegate void glMultiTexCoord3xOESDel(uint /*TextureUnit*/  texture, int  s, int  t, int  r);
        private static glMultiTexCoord3xOESDel glMultiTexCoord3xOESPtr;
        
        // glMultiTexCoord3xvOES
        public static void glMultiTexCoord3xvOES(uint /*TextureUnit*/  texture, int[]  coords) => glMultiTexCoord3xvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord3xvOESDel(uint /*TextureUnit*/  texture, int[]  coords);
        private static glMultiTexCoord3xvOESDel glMultiTexCoord3xvOESPtr;
        
        // glMultiTexCoord4bOES
        public static void glMultiTexCoord4bOES(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r, sbyte  q) => glMultiTexCoord4bOESPtr?.Invoke(texture, s, t, r, q);
        private delegate void glMultiTexCoord4bOESDel(uint /*TextureUnit*/  texture, sbyte  s, sbyte  t, sbyte  r, sbyte  q);
        private static glMultiTexCoord4bOESDel glMultiTexCoord4bOESPtr;
        
        // glMultiTexCoord4bvOES
        public static void glMultiTexCoord4bvOES(uint /*TextureUnit*/  texture, sbyte[]  coords) => glMultiTexCoord4bvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord4bvOESDel(uint /*TextureUnit*/  texture, sbyte[]  coords);
        private static glMultiTexCoord4bvOESDel glMultiTexCoord4bvOESPtr;
        
        // glMultiTexCoord4d
        public static void glMultiTexCoord4d(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => glMultiTexCoord4dPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4dDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q);
        private static glMultiTexCoord4dDel glMultiTexCoord4dPtr;
        
        // glMultiTexCoord4dARB
        public static void glMultiTexCoord4dARB(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => glMultiTexCoord4dARBPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4dARBDel(uint /*TextureUnit*/  target, double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q);
        private static glMultiTexCoord4dARBDel glMultiTexCoord4dARBPtr;
        
        // glMultiTexCoord4dv
        public static void glMultiTexCoord4dv(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord4dvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4dvDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord4dvDel glMultiTexCoord4dvPtr;
        
        // glMultiTexCoord4dvARB
        public static void glMultiTexCoord4dvARB(uint /*TextureUnit*/  target, double[] /*CoordD*/  v) => glMultiTexCoord4dvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4dvARBDel(uint /*TextureUnit*/  target, double[] /*CoordD*/  v);
        private static glMultiTexCoord4dvARBDel glMultiTexCoord4dvARBPtr;
        
        // glMultiTexCoord4f
        public static void glMultiTexCoord4f(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => glMultiTexCoord4fPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4fDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q);
        private static glMultiTexCoord4fDel glMultiTexCoord4fPtr;
        
        // glMultiTexCoord4fARB
        public static void glMultiTexCoord4fARB(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => glMultiTexCoord4fARBPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4fARBDel(uint /*TextureUnit*/  target, float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q);
        private static glMultiTexCoord4fARBDel glMultiTexCoord4fARBPtr;
        
        // glMultiTexCoord4fv
        public static void glMultiTexCoord4fv(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord4fvPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4fvDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord4fvDel glMultiTexCoord4fvPtr;
        
        // glMultiTexCoord4fvARB
        public static void glMultiTexCoord4fvARB(uint /*TextureUnit*/  target, float[] /*CoordF*/  v) => glMultiTexCoord4fvARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4fvARBDel(uint /*TextureUnit*/  target, float[] /*CoordF*/  v);
        private static glMultiTexCoord4fvARBDel glMultiTexCoord4fvARBPtr;
        
        // glMultiTexCoord4hNV
        public static void glMultiTexCoord4hNV(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q) => glMultiTexCoord4hNVPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4hNVDel(uint /*TextureUnit*/  target, ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q);
        private static glMultiTexCoord4hNVDel glMultiTexCoord4hNVPtr;
        
        // glMultiTexCoord4hvNV
        public static void glMultiTexCoord4hvNV(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v) => glMultiTexCoord4hvNVPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4hvNVDel(uint /*TextureUnit*/  target, ushort[] /*Half16NV*/  v);
        private static glMultiTexCoord4hvNVDel glMultiTexCoord4hvNVPtr;
        
        // glMultiTexCoord4i
        public static void glMultiTexCoord4i(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => glMultiTexCoord4iPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4iDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q);
        private static glMultiTexCoord4iDel glMultiTexCoord4iPtr;
        
        // glMultiTexCoord4iARB
        public static void glMultiTexCoord4iARB(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => glMultiTexCoord4iARBPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4iARBDel(uint /*TextureUnit*/  target, int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q);
        private static glMultiTexCoord4iARBDel glMultiTexCoord4iARBPtr;
        
        // glMultiTexCoord4iv
        public static void glMultiTexCoord4iv(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord4ivPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4ivDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord4ivDel glMultiTexCoord4ivPtr;
        
        // glMultiTexCoord4ivARB
        public static void glMultiTexCoord4ivARB(uint /*TextureUnit*/  target, int[] /*CoordI*/  v) => glMultiTexCoord4ivARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4ivARBDel(uint /*TextureUnit*/  target, int[] /*CoordI*/  v);
        private static glMultiTexCoord4ivARBDel glMultiTexCoord4ivARBPtr;
        
        // glMultiTexCoord4s
        public static void glMultiTexCoord4s(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => glMultiTexCoord4sPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4sDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q);
        private static glMultiTexCoord4sDel glMultiTexCoord4sPtr;
        
        // glMultiTexCoord4sARB
        public static void glMultiTexCoord4sARB(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => glMultiTexCoord4sARBPtr?.Invoke(target, s, t, r, q);
        private delegate void glMultiTexCoord4sARBDel(uint /*TextureUnit*/  target, short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q);
        private static glMultiTexCoord4sARBDel glMultiTexCoord4sARBPtr;
        
        // glMultiTexCoord4sv
        public static void glMultiTexCoord4sv(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord4svPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4svDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord4svDel glMultiTexCoord4svPtr;
        
        // glMultiTexCoord4svARB
        public static void glMultiTexCoord4svARB(uint /*TextureUnit*/  target, short[] /*CoordS*/  v) => glMultiTexCoord4svARBPtr?.Invoke(target, v);
        private delegate void glMultiTexCoord4svARBDel(uint /*TextureUnit*/  target, short[] /*CoordS*/  v);
        private static glMultiTexCoord4svARBDel glMultiTexCoord4svARBPtr;
        
        // glMultiTexCoord4x
        public static void glMultiTexCoord4x(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q) => glMultiTexCoord4xPtr?.Invoke(texture, s, t, r, q);
        private delegate void glMultiTexCoord4xDel(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q);
        private static glMultiTexCoord4xDel glMultiTexCoord4xPtr;
        
        // glMultiTexCoord4xOES
        public static void glMultiTexCoord4xOES(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q) => glMultiTexCoord4xOESPtr?.Invoke(texture, s, t, r, q);
        private delegate void glMultiTexCoord4xOESDel(uint /*TextureUnit*/  texture, int  s, int  t, int  r, int  q);
        private static glMultiTexCoord4xOESDel glMultiTexCoord4xOESPtr;
        
        // glMultiTexCoord4xvOES
        public static void glMultiTexCoord4xvOES(uint /*TextureUnit*/  texture, int[]  coords) => glMultiTexCoord4xvOESPtr?.Invoke(texture, coords);
        private delegate void glMultiTexCoord4xvOESDel(uint /*TextureUnit*/  texture, int[]  coords);
        private static glMultiTexCoord4xvOESDel glMultiTexCoord4xvOESPtr;
        
        // glMultiTexCoordP1ui
        public static void glMultiTexCoordP1ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => glMultiTexCoordP1uiPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP1uiDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords);
        private static glMultiTexCoordP1uiDel glMultiTexCoordP1uiPtr;
        
        // glMultiTexCoordP1uiv
        public static void glMultiTexCoordP1uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => glMultiTexCoordP1uivPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP1uivDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glMultiTexCoordP1uivDel glMultiTexCoordP1uivPtr;
        
        // glMultiTexCoordP2ui
        public static void glMultiTexCoordP2ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => glMultiTexCoordP2uiPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP2uiDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords);
        private static glMultiTexCoordP2uiDel glMultiTexCoordP2uiPtr;
        
        // glMultiTexCoordP2uiv
        public static void glMultiTexCoordP2uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => glMultiTexCoordP2uivPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP2uivDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glMultiTexCoordP2uivDel glMultiTexCoordP2uivPtr;
        
        // glMultiTexCoordP3ui
        public static void glMultiTexCoordP3ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => glMultiTexCoordP3uiPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP3uiDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords);
        private static glMultiTexCoordP3uiDel glMultiTexCoordP3uiPtr;
        
        // glMultiTexCoordP3uiv
        public static void glMultiTexCoordP3uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => glMultiTexCoordP3uivPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP3uivDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glMultiTexCoordP3uivDel glMultiTexCoordP3uivPtr;
        
        // glMultiTexCoordP4ui
        public static void glMultiTexCoordP4ui(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords) => glMultiTexCoordP4uiPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP4uiDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint  coords);
        private static glMultiTexCoordP4uiDel glMultiTexCoordP4uiPtr;
        
        // glMultiTexCoordP4uiv
        public static void glMultiTexCoordP4uiv(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords) => glMultiTexCoordP4uivPtr?.Invoke(texture, type, coords);
        private delegate void glMultiTexCoordP4uivDel(uint /*TextureUnit*/  texture, uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glMultiTexCoordP4uivDel glMultiTexCoordP4uivPtr;
        
        // glMultiTexCoordPointerEXT
        public static void glMultiTexCoordPointerEXT(uint /*TextureUnit*/  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer) => glMultiTexCoordPointerEXTPtr?.Invoke(texunit, size, type, stride, pointer);
        private delegate void glMultiTexCoordPointerEXTDel(uint /*TextureUnit*/  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glMultiTexCoordPointerEXTDel glMultiTexCoordPointerEXTPtr;
        
        // glMultiTexEnvfEXT
        public static void glMultiTexEnvfEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param) => glMultiTexEnvfEXTPtr?.Invoke(texunit, target, pname, param);
        private delegate void glMultiTexEnvfEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glMultiTexEnvfEXTDel glMultiTexEnvfEXTPtr;
        
        // glMultiTexEnvfvEXT
        public static void glMultiTexEnvfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glMultiTexEnvfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexEnvfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glMultiTexEnvfvEXTDel glMultiTexEnvfvEXTPtr;
        
        // glMultiTexEnviEXT
        public static void glMultiTexEnviEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param) => glMultiTexEnviEXTPtr?.Invoke(texunit, target, pname, param);
        private delegate void glMultiTexEnviEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param);
        private static glMultiTexEnviEXTDel glMultiTexEnviEXTPtr;
        
        // glMultiTexEnvivEXT
        public static void glMultiTexEnvivEXT(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glMultiTexEnvivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexEnvivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMultiTexEnvivEXTDel glMultiTexEnvivEXTPtr;
        
        // glMultiTexGendEXT
        public static void glMultiTexGendEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param) => glMultiTexGendEXTPtr?.Invoke(texunit, coord, pname, param);
        private delegate void glMultiTexGendEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param);
        private static glMultiTexGendEXTDel glMultiTexGendEXTPtr;
        
        // glMultiTexGendvEXT
        public static void glMultiTexGendvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => glMultiTexGendvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glMultiTexGendvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters);
        private static glMultiTexGendvEXTDel glMultiTexGendvEXTPtr;
        
        // glMultiTexGenfEXT
        public static void glMultiTexGenfEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param) => glMultiTexGenfEXTPtr?.Invoke(texunit, coord, pname, param);
        private delegate void glMultiTexGenfEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glMultiTexGenfEXTDel glMultiTexGenfEXTPtr;
        
        // glMultiTexGenfvEXT
        public static void glMultiTexGenfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glMultiTexGenfvEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glMultiTexGenfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glMultiTexGenfvEXTDel glMultiTexGenfvEXTPtr;
        
        // glMultiTexGeniEXT
        public static void glMultiTexGeniEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param) => glMultiTexGeniEXTPtr?.Invoke(texunit, coord, pname, param);
        private delegate void glMultiTexGeniEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param);
        private static glMultiTexGeniEXTDel glMultiTexGeniEXTPtr;
        
        // glMultiTexGenivEXT
        public static void glMultiTexGenivEXT(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glMultiTexGenivEXTPtr?.Invoke(texunit, coord, pname, parameters);
        private delegate void glMultiTexGenivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMultiTexGenivEXTDel glMultiTexGenivEXTPtr;
        
        // glMultiTexImage1DEXT
        public static void glMultiTexImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexImage1DEXTPtr?.Invoke(texunit, target, level, internalformat, width, border, format, type, pixels);
        private delegate void glMultiTexImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexImage1DEXTDel glMultiTexImage1DEXTPtr;
        
        // glMultiTexImage2DEXT
        public static void glMultiTexImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexImage2DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, border, format, type, pixels);
        private delegate void glMultiTexImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexImage2DEXTDel glMultiTexImage2DEXTPtr;
        
        // glMultiTexImage3DEXT
        public static void glMultiTexImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexImage3DEXTPtr?.Invoke(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
        private delegate void glMultiTexImage3DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexImage3DEXTDel glMultiTexImage3DEXTPtr;
        
        // glMultiTexParameterIivEXT
        public static void glMultiTexParameterIivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glMultiTexParameterIivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexParameterIivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMultiTexParameterIivEXTDel glMultiTexParameterIivEXTPtr;
        
        // glMultiTexParameterIuivEXT
        public static void glMultiTexParameterIuivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => glMultiTexParameterIuivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexParameterIuivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glMultiTexParameterIuivEXTDel glMultiTexParameterIuivEXTPtr;
        
        // glMultiTexParameterfEXT
        public static void glMultiTexParameterfEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => glMultiTexParameterfEXTPtr?.Invoke(texunit, target, pname, param);
        private delegate void glMultiTexParameterfEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param);
        private static glMultiTexParameterfEXTDel glMultiTexParameterfEXTPtr;
        
        // glMultiTexParameterfvEXT
        public static void glMultiTexParameterfvEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => glMultiTexParameterfvEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexParameterfvEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glMultiTexParameterfvEXTDel glMultiTexParameterfvEXTPtr;
        
        // glMultiTexParameteriEXT
        public static void glMultiTexParameteriEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => glMultiTexParameteriEXTPtr?.Invoke(texunit, target, pname, param);
        private delegate void glMultiTexParameteriEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param);
        private static glMultiTexParameteriEXTDel glMultiTexParameteriEXTPtr;
        
        // glMultiTexParameterivEXT
        public static void glMultiTexParameterivEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glMultiTexParameterivEXTPtr?.Invoke(texunit, target, pname, parameters);
        private delegate void glMultiTexParameterivEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glMultiTexParameterivEXTDel glMultiTexParameterivEXTPtr;
        
        // glMultiTexRenderbufferEXT
        public static void glMultiTexRenderbufferEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  renderbuffer) => glMultiTexRenderbufferEXTPtr?.Invoke(texunit, target, renderbuffer);
        private delegate void glMultiTexRenderbufferEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, uint  renderbuffer);
        private static glMultiTexRenderbufferEXTDel glMultiTexRenderbufferEXTPtr;
        
        // glMultiTexSubImage1DEXT
        public static void glMultiTexSubImage1DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexSubImage1DEXTPtr?.Invoke(texunit, target, level, xoffset, width, format, type, pixels);
        private delegate void glMultiTexSubImage1DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexSubImage1DEXTDel glMultiTexSubImage1DEXTPtr;
        
        // glMultiTexSubImage2DEXT
        public static void glMultiTexSubImage2DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexSubImage2DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
        private delegate void glMultiTexSubImage2DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexSubImage2DEXTDel glMultiTexSubImage2DEXTPtr;
        
        // glMultiTexSubImage3DEXT
        public static void glMultiTexSubImage3DEXT(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glMultiTexSubImage3DEXTPtr?.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glMultiTexSubImage3DEXTDel(uint /*TextureUnit*/  texunit, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glMultiTexSubImage3DEXTDel glMultiTexSubImage3DEXTPtr;
        
        // glMulticastBarrierNV
        public static void glMulticastBarrierNV() => glMulticastBarrierNVPtr?.Invoke();
        private delegate void glMulticastBarrierNVDel();
        private static glMulticastBarrierNVDel glMulticastBarrierNVPtr;
        
        // glMulticastBlitFramebufferNV
        public static void glMulticastBlitFramebufferNV(uint  srcGpu, uint  dstGpu, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint  filter) => glMulticastBlitFramebufferNVPtr?.Invoke(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        private delegate void glMulticastBlitFramebufferNVDel(uint  srcGpu, uint  dstGpu, int  srcX0, int  srcY0, int  srcX1, int  srcY1, int  dstX0, int  dstY0, int  dstX1, int  dstY1, uint /*ClearBufferMask*/  mask, uint  filter);
        private static glMulticastBlitFramebufferNVDel glMulticastBlitFramebufferNVPtr;
        
        // glMulticastBufferSubDataNV
        public static void glMulticastBufferSubDataNV(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data) => glMulticastBufferSubDataNVPtr?.Invoke(gpuMask, buffer, offset, size, data);
        private delegate void glMulticastBufferSubDataNVDel(uint  gpuMask, uint  buffer, IntPtr  offset, IntPtr  size, IntPtr  data);
        private static glMulticastBufferSubDataNVDel glMulticastBufferSubDataNVPtr;
        
        // glMulticastCopyBufferSubDataNV
        public static void glMulticastCopyBufferSubDataNV(uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size) => glMulticastCopyBufferSubDataNVPtr?.Invoke(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        private delegate void glMulticastCopyBufferSubDataNVDel(uint  readGpu, uint  writeGpuMask, uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size);
        private static glMulticastCopyBufferSubDataNVDel glMulticastCopyBufferSubDataNVPtr;
        
        // glMulticastCopyImageSubDataNV
        public static void glMulticastCopyImageSubDataNV(uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth) => glMulticastCopyImageSubDataNVPtr?.Invoke(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        private delegate void glMulticastCopyImageSubDataNVDel(uint  srcGpu, uint  dstGpuMask, uint  srcName, uint  srcTarget, int  srcLevel, int  srcX, int  srcY, int  srcZ, uint  dstName, uint  dstTarget, int  dstLevel, int  dstX, int  dstY, int  dstZ, uint  srcWidth, uint  srcHeight, uint  srcDepth);
        private static glMulticastCopyImageSubDataNVDel glMulticastCopyImageSubDataNVPtr;
        
        // glMulticastFramebufferSampleLocationsfvNV
        public static void glMulticastFramebufferSampleLocationsfvNV(uint  gpu, uint  framebuffer, uint  start, uint  count, float[]  v) => glMulticastFramebufferSampleLocationsfvNVPtr?.Invoke(gpu, framebuffer, start, count, v);
        private delegate void glMulticastFramebufferSampleLocationsfvNVDel(uint  gpu, uint  framebuffer, uint  start, uint  count, float[]  v);
        private static glMulticastFramebufferSampleLocationsfvNVDel glMulticastFramebufferSampleLocationsfvNVPtr;
        
        // glMulticastGetQueryObjecti64vNV
        public static void glMulticastGetQueryObjecti64vNV(uint  gpu, uint  id, uint  pname, long[]  parameters) => glMulticastGetQueryObjecti64vNVPtr?.Invoke(gpu, id, pname, parameters);
        private delegate void glMulticastGetQueryObjecti64vNVDel(uint  gpu, uint  id, uint  pname, long[]  parameters);
        private static glMulticastGetQueryObjecti64vNVDel glMulticastGetQueryObjecti64vNVPtr;
        
        // glMulticastGetQueryObjectivNV
        public static void glMulticastGetQueryObjectivNV(uint  gpu, uint  id, uint  pname, int[]  parameters) => glMulticastGetQueryObjectivNVPtr?.Invoke(gpu, id, pname, parameters);
        private delegate void glMulticastGetQueryObjectivNVDel(uint  gpu, uint  id, uint  pname, int[]  parameters);
        private static glMulticastGetQueryObjectivNVDel glMulticastGetQueryObjectivNVPtr;
        
        // glMulticastGetQueryObjectui64vNV
        public static void glMulticastGetQueryObjectui64vNV(uint  gpu, uint  id, uint  pname, ulong[]  parameters) => glMulticastGetQueryObjectui64vNVPtr?.Invoke(gpu, id, pname, parameters);
        private delegate void glMulticastGetQueryObjectui64vNVDel(uint  gpu, uint  id, uint  pname, ulong[]  parameters);
        private static glMulticastGetQueryObjectui64vNVDel glMulticastGetQueryObjectui64vNVPtr;
        
        // glMulticastGetQueryObjectuivNV
        public static void glMulticastGetQueryObjectuivNV(uint  gpu, uint  id, uint  pname, uint[]  parameters) => glMulticastGetQueryObjectuivNVPtr?.Invoke(gpu, id, pname, parameters);
        private delegate void glMulticastGetQueryObjectuivNVDel(uint  gpu, uint  id, uint  pname, uint[]  parameters);
        private static glMulticastGetQueryObjectuivNVDel glMulticastGetQueryObjectuivNVPtr;
        
        // glMulticastScissorArrayvNVX
        public static void glMulticastScissorArrayvNVX(uint  gpu, uint  first, uint  count, int[]  v) => glMulticastScissorArrayvNVXPtr?.Invoke(gpu, first, count, v);
        private delegate void glMulticastScissorArrayvNVXDel(uint  gpu, uint  first, uint  count, int[]  v);
        private static glMulticastScissorArrayvNVXDel glMulticastScissorArrayvNVXPtr;
        
        // glMulticastViewportArrayvNVX
        public static void glMulticastViewportArrayvNVX(uint  gpu, uint  first, uint  count, float[]  v) => glMulticastViewportArrayvNVXPtr?.Invoke(gpu, first, count, v);
        private delegate void glMulticastViewportArrayvNVXDel(uint  gpu, uint  first, uint  count, float[]  v);
        private static glMulticastViewportArrayvNVXDel glMulticastViewportArrayvNVXPtr;
        
        // glMulticastViewportPositionWScaleNVX
        public static void glMulticastViewportPositionWScaleNVX(uint  gpu, uint  index, float  xcoeff, float  ycoeff) => glMulticastViewportPositionWScaleNVXPtr?.Invoke(gpu, index, xcoeff, ycoeff);
        private delegate void glMulticastViewportPositionWScaleNVXDel(uint  gpu, uint  index, float  xcoeff, float  ycoeff);
        private static glMulticastViewportPositionWScaleNVXDel glMulticastViewportPositionWScaleNVXPtr;
        
        // glMulticastWaitSyncNV
        public static void glMulticastWaitSyncNV(uint  signalGpu, uint  waitGpuMask) => glMulticastWaitSyncNVPtr?.Invoke(signalGpu, waitGpuMask);
        private delegate void glMulticastWaitSyncNVDel(uint  signalGpu, uint  waitGpuMask);
        private static glMulticastWaitSyncNVDel glMulticastWaitSyncNVPtr;
        
        // glNamedBufferAttachMemoryNV
        public static void glNamedBufferAttachMemoryNV(uint  buffer, uint  memory, ulong  offset) => glNamedBufferAttachMemoryNVPtr?.Invoke(buffer, memory, offset);
        private delegate void glNamedBufferAttachMemoryNVDel(uint  buffer, uint  memory, ulong  offset);
        private static glNamedBufferAttachMemoryNVDel glNamedBufferAttachMemoryNVPtr;
        
        // glNamedBufferData
        public static void glNamedBufferData(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage) => glNamedBufferDataPtr?.Invoke(buffer, size, data, usage);
        private delegate void glNamedBufferDataDel(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage);
        private static glNamedBufferDataDel glNamedBufferDataPtr;
        
        // glNamedBufferDataEXT
        public static void glNamedBufferDataEXT(uint  buffer, IntPtr  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage) => glNamedBufferDataEXTPtr?.Invoke(buffer, size, data, usage);
        private delegate void glNamedBufferDataEXTDel(uint  buffer, IntPtr  size, IntPtr  data, uint /*VertexBufferObjectUsage*/  usage);
        private static glNamedBufferDataEXTDel glNamedBufferDataEXTPtr;
        
        // glNamedBufferPageCommitmentARB
        public static void glNamedBufferPageCommitmentARB(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => glNamedBufferPageCommitmentARBPtr?.Invoke(buffer, offset, size, commit);
        private delegate void glNamedBufferPageCommitmentARBDel(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit);
        private static glNamedBufferPageCommitmentARBDel glNamedBufferPageCommitmentARBPtr;
        
        // glNamedBufferPageCommitmentEXT
        public static void glNamedBufferPageCommitmentEXT(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit) => glNamedBufferPageCommitmentEXTPtr?.Invoke(buffer, offset, size, commit);
        private delegate void glNamedBufferPageCommitmentEXTDel(uint  buffer, IntPtr  offset, IntPtr  size, bool /*Boolean*/  commit);
        private static glNamedBufferPageCommitmentEXTDel glNamedBufferPageCommitmentEXTPtr;
        
        // glNamedBufferStorage
        public static void glNamedBufferStorage(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => glNamedBufferStoragePtr?.Invoke(buffer, size, data, flags);
        private delegate void glNamedBufferStorageDel(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags);
        private static glNamedBufferStorageDel glNamedBufferStoragePtr;
        
        // glNamedBufferStorageExternalEXT
        public static void glNamedBufferStorageExternalEXT(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags) => glNamedBufferStorageExternalEXTPtr?.Invoke(buffer, offset, size, clientBuffer, flags);
        private delegate void glNamedBufferStorageExternalEXTDel(uint  buffer, IntPtr  offset, IntPtr  size, IntPtr /*GLeglClientBufferEXT*/  clientBuffer, uint /*BufferStorageMask*/  flags);
        private static glNamedBufferStorageExternalEXTDel glNamedBufferStorageExternalEXTPtr;
        
        // glNamedBufferStorageEXT
        public static void glNamedBufferStorageEXT(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags) => glNamedBufferStorageEXTPtr?.Invoke(buffer, size, data, flags);
        private delegate void glNamedBufferStorageEXTDel(uint  buffer, IntPtr /*BufferSize*/  size, IntPtr  data, uint /*BufferStorageMask*/  flags);
        private static glNamedBufferStorageEXTDel glNamedBufferStorageEXTPtr;
        
        // glNamedBufferStorageMemEXT
        public static void glNamedBufferStorageMemEXT(uint  buffer, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset) => glNamedBufferStorageMemEXTPtr?.Invoke(buffer, size, memory, offset);
        private delegate void glNamedBufferStorageMemEXTDel(uint  buffer, IntPtr /*BufferSize*/  size, uint  memory, ulong  offset);
        private static glNamedBufferStorageMemEXTDel glNamedBufferStorageMemEXTPtr;
        
        // glNamedBufferSubData
        public static void glNamedBufferSubData(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => glNamedBufferSubDataPtr?.Invoke(buffer, offset, size, data);
        private delegate void glNamedBufferSubDataDel(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data);
        private static glNamedBufferSubDataDel glNamedBufferSubDataPtr;
        
        // glNamedBufferSubDataEXT
        public static void glNamedBufferSubDataEXT(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data) => glNamedBufferSubDataEXTPtr?.Invoke(buffer, offset, size, data);
        private delegate void glNamedBufferSubDataEXTDel(uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size, IntPtr  data);
        private static glNamedBufferSubDataEXTDel glNamedBufferSubDataEXTPtr;
        
        // glNamedCopyBufferSubDataEXT
        public static void glNamedCopyBufferSubDataEXT(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size) => glNamedCopyBufferSubDataEXTPtr?.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);
        private delegate void glNamedCopyBufferSubDataEXTDel(uint  readBuffer, uint  writeBuffer, IntPtr  readOffset, IntPtr  writeOffset, IntPtr  size);
        private static glNamedCopyBufferSubDataEXTDel glNamedCopyBufferSubDataEXTPtr;
        
        // glNamedFramebufferDrawBuffer
        public static void glNamedFramebufferDrawBuffer(uint  framebuffer, uint /*ColorBuffer*/  buf) => glNamedFramebufferDrawBufferPtr?.Invoke(framebuffer, buf);
        private delegate void glNamedFramebufferDrawBufferDel(uint  framebuffer, uint /*ColorBuffer*/  buf);
        private static glNamedFramebufferDrawBufferDel glNamedFramebufferDrawBufferPtr;
        
        // glNamedFramebufferDrawBuffers
        public static void glNamedFramebufferDrawBuffers(uint  framebuffer, uint  n, uint[] /*ColorBuffer*/  bufs) => glNamedFramebufferDrawBuffersPtr?.Invoke(framebuffer, n, bufs);
        private delegate void glNamedFramebufferDrawBuffersDel(uint  framebuffer, uint  n, uint[] /*ColorBuffer*/  bufs);
        private static glNamedFramebufferDrawBuffersDel glNamedFramebufferDrawBuffersPtr;
        
        // glNamedFramebufferParameteri
        public static void glNamedFramebufferParameteri(uint  framebuffer, uint /*FramebufferParameterName*/  pname, int  param) => glNamedFramebufferParameteriPtr?.Invoke(framebuffer, pname, param);
        private delegate void glNamedFramebufferParameteriDel(uint  framebuffer, uint /*FramebufferParameterName*/  pname, int  param);
        private static glNamedFramebufferParameteriDel glNamedFramebufferParameteriPtr;
        
        // glNamedFramebufferParameteriEXT
        public static void glNamedFramebufferParameteriEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferParameterName*/  pname, int  param) => glNamedFramebufferParameteriEXTPtr?.Invoke(framebuffer, pname, param);
        private delegate void glNamedFramebufferParameteriEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferParameterName*/  pname, int  param);
        private static glNamedFramebufferParameteriEXTDel glNamedFramebufferParameteriEXTPtr;
        
        // glNamedFramebufferReadBuffer
        public static void glNamedFramebufferReadBuffer(uint  framebuffer, uint /*ColorBuffer*/  src) => glNamedFramebufferReadBufferPtr?.Invoke(framebuffer, src);
        private delegate void glNamedFramebufferReadBufferDel(uint  framebuffer, uint /*ColorBuffer*/  src);
        private static glNamedFramebufferReadBufferDel glNamedFramebufferReadBufferPtr;
        
        // glNamedFramebufferRenderbuffer
        public static void glNamedFramebufferRenderbuffer(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer) => glNamedFramebufferRenderbufferPtr?.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);
        private delegate void glNamedFramebufferRenderbufferDel(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint  renderbuffer);
        private static glNamedFramebufferRenderbufferDel glNamedFramebufferRenderbufferPtr;
        
        // glNamedFramebufferRenderbufferEXT
        public static void glNamedFramebufferRenderbufferEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint /*Renderbuffer*/  renderbuffer) => glNamedFramebufferRenderbufferEXTPtr?.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);
        private delegate void glNamedFramebufferRenderbufferEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*RenderbufferTarget*/  renderbuffertarget, uint /*Renderbuffer*/  renderbuffer);
        private static glNamedFramebufferRenderbufferEXTDel glNamedFramebufferRenderbufferEXTPtr;
        
        // glNamedFramebufferSampleLocationsfvARB
        public static void glNamedFramebufferSampleLocationsfvARB(uint  framebuffer, uint  start, uint  count, float[]  v) => glNamedFramebufferSampleLocationsfvARBPtr?.Invoke(framebuffer, start, count, v);
        private delegate void glNamedFramebufferSampleLocationsfvARBDel(uint  framebuffer, uint  start, uint  count, float[]  v);
        private static glNamedFramebufferSampleLocationsfvARBDel glNamedFramebufferSampleLocationsfvARBPtr;
        
        // glNamedFramebufferSampleLocationsfvNV
        public static void glNamedFramebufferSampleLocationsfvNV(uint  framebuffer, uint  start, uint  count, float[]  v) => glNamedFramebufferSampleLocationsfvNVPtr?.Invoke(framebuffer, start, count, v);
        private delegate void glNamedFramebufferSampleLocationsfvNVDel(uint  framebuffer, uint  start, uint  count, float[]  v);
        private static glNamedFramebufferSampleLocationsfvNVDel glNamedFramebufferSampleLocationsfvNVPtr;
        
        // glNamedFramebufferTexture
        public static void glNamedFramebufferTexture(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level) => glNamedFramebufferTexturePtr?.Invoke(framebuffer, attachment, texture, level);
        private delegate void glNamedFramebufferTextureDel(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level);
        private static glNamedFramebufferTextureDel glNamedFramebufferTexturePtr;
        
        // glNamedFramebufferSamplePositionsfvAMD
        public static void glNamedFramebufferSamplePositionsfvAMD(uint  framebuffer, uint  numsamples, uint  pixelindex, float[]  values) => glNamedFramebufferSamplePositionsfvAMDPtr?.Invoke(framebuffer, numsamples, pixelindex, values);
        private delegate void glNamedFramebufferSamplePositionsfvAMDDel(uint  framebuffer, uint  numsamples, uint  pixelindex, float[]  values);
        private static glNamedFramebufferSamplePositionsfvAMDDel glNamedFramebufferSamplePositionsfvAMDPtr;
        
        // glNamedFramebufferTexture1DEXT
        public static void glNamedFramebufferTexture1DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glNamedFramebufferTexture1DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level);
        private delegate void glNamedFramebufferTexture1DEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glNamedFramebufferTexture1DEXTDel glNamedFramebufferTexture1DEXTPtr;
        
        // glNamedFramebufferTexture2DEXT
        public static void glNamedFramebufferTexture2DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glNamedFramebufferTexture2DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level);
        private delegate void glNamedFramebufferTexture2DEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glNamedFramebufferTexture2DEXTDel glNamedFramebufferTexture2DEXTPtr;
        
        // glNamedFramebufferTexture3DEXT
        public static void glNamedFramebufferTexture3DEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  zoffset) => glNamedFramebufferTexture3DEXTPtr?.Invoke(framebuffer, attachment, textarget, texture, level, zoffset);
        private delegate void glNamedFramebufferTexture3DEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*TextureTarget*/  textarget, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  zoffset);
        private static glNamedFramebufferTexture3DEXTDel glNamedFramebufferTexture3DEXTPtr;
        
        // glNamedFramebufferTextureEXT
        public static void glNamedFramebufferTextureEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level) => glNamedFramebufferTextureEXTPtr?.Invoke(framebuffer, attachment, texture, level);
        private delegate void glNamedFramebufferTextureEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level);
        private static glNamedFramebufferTextureEXTDel glNamedFramebufferTextureEXTPtr;
        
        // glNamedFramebufferTextureFaceEXT
        public static void glNamedFramebufferTextureFaceEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face) => glNamedFramebufferTextureFaceEXTPtr?.Invoke(framebuffer, attachment, texture, level, face);
        private delegate void glNamedFramebufferTextureFaceEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, uint /*TextureTarget*/  face);
        private static glNamedFramebufferTextureFaceEXTDel glNamedFramebufferTextureFaceEXTPtr;
        
        // glNamedFramebufferTextureLayer
        public static void glNamedFramebufferTextureLayer(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level, int  layer) => glNamedFramebufferTextureLayerPtr?.Invoke(framebuffer, attachment, texture, level, layer);
        private delegate void glNamedFramebufferTextureLayerDel(uint  framebuffer, uint /*FramebufferAttachment*/  attachment, uint  texture, int  level, int  layer);
        private static glNamedFramebufferTextureLayerDel glNamedFramebufferTextureLayerPtr;
        
        // glNamedFramebufferTextureLayerEXT
        public static void glNamedFramebufferTextureLayerEXT(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer) => glNamedFramebufferTextureLayerEXTPtr?.Invoke(framebuffer, attachment, texture, level, layer);
        private delegate void glNamedFramebufferTextureLayerEXTDel(uint /*Framebuffer*/  framebuffer, uint /*FramebufferAttachment*/  attachment, uint /*Texture*/  texture, int /*CheckedInt32*/  level, int /*CheckedInt32*/  layer);
        private static glNamedFramebufferTextureLayerEXTDel glNamedFramebufferTextureLayerEXTPtr;
        
        // glNamedProgramLocalParameter4dEXT
        public static void glNamedProgramLocalParameter4dEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => glNamedProgramLocalParameter4dEXTPtr?.Invoke(program, target, index, x, y, z, w);
        private delegate void glNamedProgramLocalParameter4dEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w);
        private static glNamedProgramLocalParameter4dEXTDel glNamedProgramLocalParameter4dEXTPtr;
        
        // glNamedProgramLocalParameter4dvEXT
        public static void glNamedProgramLocalParameter4dvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glNamedProgramLocalParameter4dvEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glNamedProgramLocalParameter4dvEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glNamedProgramLocalParameter4dvEXTDel glNamedProgramLocalParameter4dvEXTPtr;
        
        // glNamedProgramLocalParameter4fEXT
        public static void glNamedProgramLocalParameter4fEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => glNamedProgramLocalParameter4fEXTPtr?.Invoke(program, target, index, x, y, z, w);
        private delegate void glNamedProgramLocalParameter4fEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w);
        private static glNamedProgramLocalParameter4fEXTDel glNamedProgramLocalParameter4fEXTPtr;
        
        // glNamedProgramLocalParameter4fvEXT
        public static void glNamedProgramLocalParameter4fvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glNamedProgramLocalParameter4fvEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glNamedProgramLocalParameter4fvEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glNamedProgramLocalParameter4fvEXTDel glNamedProgramLocalParameter4fvEXTPtr;
        
        // glNamedProgramLocalParameterI4iEXT
        public static void glNamedProgramLocalParameterI4iEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => glNamedProgramLocalParameterI4iEXTPtr?.Invoke(program, target, index, x, y, z, w);
        private delegate void glNamedProgramLocalParameterI4iEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w);
        private static glNamedProgramLocalParameterI4iEXTDel glNamedProgramLocalParameterI4iEXTPtr;
        
        // glNamedProgramLocalParameterI4ivEXT
        public static void glNamedProgramLocalParameterI4ivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glNamedProgramLocalParameterI4ivEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glNamedProgramLocalParameterI4ivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glNamedProgramLocalParameterI4ivEXTDel glNamedProgramLocalParameterI4ivEXTPtr;
        
        // glNamedProgramLocalParameterI4uiEXT
        public static void glNamedProgramLocalParameterI4uiEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => glNamedProgramLocalParameterI4uiEXTPtr?.Invoke(program, target, index, x, y, z, w);
        private delegate void glNamedProgramLocalParameterI4uiEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w);
        private static glNamedProgramLocalParameterI4uiEXTDel glNamedProgramLocalParameterI4uiEXTPtr;
        
        // glNamedProgramLocalParameterI4uivEXT
        public static void glNamedProgramLocalParameterI4uivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glNamedProgramLocalParameterI4uivEXTPtr?.Invoke(program, target, index, parameters);
        private delegate void glNamedProgramLocalParameterI4uivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glNamedProgramLocalParameterI4uivEXTDel glNamedProgramLocalParameterI4uivEXTPtr;
        
        // glNamedProgramLocalParameters4fvEXT
        public static void glNamedProgramLocalParameters4fvEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => glNamedProgramLocalParameters4fvEXTPtr?.Invoke(program, target, index, count, parameters);
        private delegate void glNamedProgramLocalParameters4fvEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters);
        private static glNamedProgramLocalParameters4fvEXTDel glNamedProgramLocalParameters4fvEXTPtr;
        
        // glNamedProgramLocalParametersI4ivEXT
        public static void glNamedProgramLocalParametersI4ivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => glNamedProgramLocalParametersI4ivEXTPtr?.Invoke(program, target, index, count, parameters);
        private delegate void glNamedProgramLocalParametersI4ivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters);
        private static glNamedProgramLocalParametersI4ivEXTDel glNamedProgramLocalParametersI4ivEXTPtr;
        
        // glNamedProgramLocalParametersI4uivEXT
        public static void glNamedProgramLocalParametersI4uivEXT(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => glNamedProgramLocalParametersI4uivEXTPtr?.Invoke(program, target, index, count, parameters);
        private delegate void glNamedProgramLocalParametersI4uivEXTDel(uint  program, uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters);
        private static glNamedProgramLocalParametersI4uivEXTDel glNamedProgramLocalParametersI4uivEXTPtr;
        
        // glNamedProgramStringEXT
        public static void glNamedProgramStringEXT(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str) => glNamedProgramStringEXTPtr?.Invoke(program, target, format, len, str);
        private delegate void glNamedProgramStringEXTDel(uint  program, uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str);
        private static glNamedProgramStringEXTDel glNamedProgramStringEXTPtr;
        
        // glNamedRenderbufferStorage
        public static void glNamedRenderbufferStorage(uint  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStoragePtr?.Invoke(renderbuffer, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageDel(uint  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageDel glNamedRenderbufferStoragePtr;
        
        // glNamedRenderbufferStorageEXT
        public static void glNamedRenderbufferStorageEXT(uint /*Renderbuffer*/  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStorageEXTPtr?.Invoke(renderbuffer, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageEXTDel(uint /*Renderbuffer*/  renderbuffer, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageEXTDel glNamedRenderbufferStorageEXTPtr;
        
        // glNamedRenderbufferStorageMultisample
        public static void glNamedRenderbufferStorageMultisample(uint  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStorageMultisamplePtr?.Invoke(renderbuffer, samples, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageMultisampleDel(uint  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageMultisampleDel glNamedRenderbufferStorageMultisamplePtr;
        
        // glNamedRenderbufferStorageMultisampleAdvancedAMD
        public static void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStorageMultisampleAdvancedAMDPtr?.Invoke(renderbuffer, samples, storageSamples, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageMultisampleAdvancedAMDDel(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageMultisampleAdvancedAMDDel glNamedRenderbufferStorageMultisampleAdvancedAMDPtr;
        
        // glNamedRenderbufferStorageMultisampleCoverageEXT
        public static void glNamedRenderbufferStorageMultisampleCoverageEXT(uint /*Renderbuffer*/  renderbuffer, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStorageMultisampleCoverageEXTPtr?.Invoke(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageMultisampleCoverageEXTDel(uint /*Renderbuffer*/  renderbuffer, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageMultisampleCoverageEXTDel glNamedRenderbufferStorageMultisampleCoverageEXTPtr;
        
        // glNamedRenderbufferStorageMultisampleEXT
        public static void glNamedRenderbufferStorageMultisampleEXT(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glNamedRenderbufferStorageMultisampleEXTPtr?.Invoke(renderbuffer, samples, internalformat, width, height);
        private delegate void glNamedRenderbufferStorageMultisampleEXTDel(uint /*Renderbuffer*/  renderbuffer, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glNamedRenderbufferStorageMultisampleEXTDel glNamedRenderbufferStorageMultisampleEXTPtr;
        
        // glNamedStringARB
        public static void glNamedStringARB(uint  type, int  namelen, string  name, int  stringlen, string  str) => glNamedStringARBPtr?.Invoke(type, namelen, name, stringlen, str);
        private delegate void glNamedStringARBDel(uint  type, int  namelen, string  name, int  stringlen, string  str);
        private static glNamedStringARBDel glNamedStringARBPtr;
        
        // glNewList
        public static void glNewList(uint /*List*/  list, uint /*ListMode*/  mode) => glNewListPtr?.Invoke(list, mode);
        private delegate void glNewListDel(uint /*List*/  list, uint /*ListMode*/  mode);
        private static glNewListDel glNewListPtr;
        
        // glNewObjectBufferATI
        public static uint glNewObjectBufferATI(uint  size, IntPtr  pointer, uint /*ArrayObjectUsageATI*/  usage) => glNewObjectBufferATIPtr?.Invoke(size, pointer, usage) ?? default;
        private delegate uint glNewObjectBufferATIDel(uint  size, IntPtr  pointer, uint /*ArrayObjectUsageATI*/  usage);
        private static glNewObjectBufferATIDel glNewObjectBufferATIPtr;
        
        // glNormal3b
        public static void glNormal3b(sbyte  nx, sbyte  ny, sbyte  nz) => glNormal3bPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3bDel(sbyte  nx, sbyte  ny, sbyte  nz);
        private static glNormal3bDel glNormal3bPtr;
        
        // glNormal3bv
        public static void glNormal3bv(sbyte[]  v) => glNormal3bvPtr?.Invoke(v);
        private delegate void glNormal3bvDel(sbyte[]  v);
        private static glNormal3bvDel glNormal3bvPtr;
        
        // glNormal3d
        public static void glNormal3d(double /*CoordD*/  nx, double /*CoordD*/  ny, double /*CoordD*/  nz) => glNormal3dPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3dDel(double /*CoordD*/  nx, double /*CoordD*/  ny, double /*CoordD*/  nz);
        private static glNormal3dDel glNormal3dPtr;
        
        // glNormal3dv
        public static void glNormal3dv(double[] /*CoordD*/  v) => glNormal3dvPtr?.Invoke(v);
        private delegate void glNormal3dvDel(double[] /*CoordD*/  v);
        private static glNormal3dvDel glNormal3dvPtr;
        
        // glNormal3f
        public static void glNormal3f(float /*CoordF*/  nx, float /*CoordF*/  ny, float /*CoordF*/  nz) => glNormal3fPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3fDel(float /*CoordF*/  nx, float /*CoordF*/  ny, float /*CoordF*/  nz);
        private static glNormal3fDel glNormal3fPtr;
        
        // glNormal3fVertex3fSUN
        public static void glNormal3fVertex3fSUN(float  nx, float  ny, float  nz, float  x, float  y, float  z) => glNormal3fVertex3fSUNPtr?.Invoke(nx, ny, nz, x, y, z);
        private delegate void glNormal3fVertex3fSUNDel(float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glNormal3fVertex3fSUNDel glNormal3fVertex3fSUNPtr;
        
        // glNormal3fVertex3fvSUN
        public static void glNormal3fVertex3fvSUN(float[]  n, float[]  v) => glNormal3fVertex3fvSUNPtr?.Invoke(n, v);
        private delegate void glNormal3fVertex3fvSUNDel(float[]  n, float[]  v);
        private static glNormal3fVertex3fvSUNDel glNormal3fVertex3fvSUNPtr;
        
        // glNormal3fv
        public static void glNormal3fv(float[] /*CoordF*/  v) => glNormal3fvPtr?.Invoke(v);
        private delegate void glNormal3fvDel(float[] /*CoordF*/  v);
        private static glNormal3fvDel glNormal3fvPtr;
        
        // glNormal3hNV
        public static void glNormal3hNV(ushort /*Half16NV*/  nx, ushort /*Half16NV*/  ny, ushort /*Half16NV*/  nz) => glNormal3hNVPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3hNVDel(ushort /*Half16NV*/  nx, ushort /*Half16NV*/  ny, ushort /*Half16NV*/  nz);
        private static glNormal3hNVDel glNormal3hNVPtr;
        
        // glNormal3hvNV
        public static void glNormal3hvNV(ushort[] /*Half16NV*/  v) => glNormal3hvNVPtr?.Invoke(v);
        private delegate void glNormal3hvNVDel(ushort[] /*Half16NV*/  v);
        private static glNormal3hvNVDel glNormal3hvNVPtr;
        
        // glNormal3i
        public static void glNormal3i(int  nx, int  ny, int  nz) => glNormal3iPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3iDel(int  nx, int  ny, int  nz);
        private static glNormal3iDel glNormal3iPtr;
        
        // glNormal3iv
        public static void glNormal3iv(int[]  v) => glNormal3ivPtr?.Invoke(v);
        private delegate void glNormal3ivDel(int[]  v);
        private static glNormal3ivDel glNormal3ivPtr;
        
        // glNormal3s
        public static void glNormal3s(short  nx, short  ny, short  nz) => glNormal3sPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3sDel(short  nx, short  ny, short  nz);
        private static glNormal3sDel glNormal3sPtr;
        
        // glNormal3sv
        public static void glNormal3sv(short[]  v) => glNormal3svPtr?.Invoke(v);
        private delegate void glNormal3svDel(short[]  v);
        private static glNormal3svDel glNormal3svPtr;
        
        // glNormal3x
        public static void glNormal3x(int  nx, int  ny, int  nz) => glNormal3xPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3xDel(int  nx, int  ny, int  nz);
        private static glNormal3xDel glNormal3xPtr;
        
        // glNormal3xOES
        public static void glNormal3xOES(int  nx, int  ny, int  nz) => glNormal3xOESPtr?.Invoke(nx, ny, nz);
        private delegate void glNormal3xOESDel(int  nx, int  ny, int  nz);
        private static glNormal3xOESDel glNormal3xOESPtr;
        
        // glNormal3xvOES
        public static void glNormal3xvOES(int[]  coords) => glNormal3xvOESPtr?.Invoke(coords);
        private delegate void glNormal3xvOESDel(int[]  coords);
        private static glNormal3xvOESDel glNormal3xvOESPtr;
        
        // glNormalFormatNV
        public static void glNormalFormatNV(uint  type, uint  stride) => glNormalFormatNVPtr?.Invoke(type, stride);
        private delegate void glNormalFormatNVDel(uint  type, uint  stride);
        private static glNormalFormatNVDel glNormalFormatNVPtr;
        
        // glNormalP3ui
        public static void glNormalP3ui(uint /*NormalPointerType*/  type, uint  coords) => glNormalP3uiPtr?.Invoke(type, coords);
        private delegate void glNormalP3uiDel(uint /*NormalPointerType*/  type, uint  coords);
        private static glNormalP3uiDel glNormalP3uiPtr;
        
        // glNormalP3uiv
        public static void glNormalP3uiv(uint /*NormalPointerType*/  type, uint[]  coords) => glNormalP3uivPtr?.Invoke(type, coords);
        private delegate void glNormalP3uivDel(uint /*NormalPointerType*/  type, uint[]  coords);
        private static glNormalP3uivDel glNormalP3uivPtr;
        
        // glNormalPointer
        public static void glNormalPointer(uint /*NormalPointerType*/  type, uint  stride, IntPtr  pointer) => glNormalPointerPtr?.Invoke(type, stride, pointer);
        private delegate void glNormalPointerDel(uint /*NormalPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glNormalPointerDel glNormalPointerPtr;
        
        // glNormalPointerEXT
        public static void glNormalPointerEXT(uint /*NormalPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => glNormalPointerEXTPtr?.Invoke(type, stride, count, pointer);
        private delegate void glNormalPointerEXTDel(uint /*NormalPointerType*/  type, uint  stride, uint  count, IntPtr  pointer);
        private static glNormalPointerEXTDel glNormalPointerEXTPtr;
        
        // glNormalPointerListIBM
        public static void glNormalPointerListIBM(uint /*NormalPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glNormalPointerListIBMPtr?.Invoke(type, stride, pointer, ptrstride);
        private delegate void glNormalPointerListIBMDel(uint /*NormalPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glNormalPointerListIBMDel glNormalPointerListIBMPtr;
        
        // glNormalPointervINTEL
        public static void glNormalPointervINTEL(uint /*NormalPointerType*/  type, IntPtr  pointer) => glNormalPointervINTELPtr?.Invoke(type, pointer);
        private delegate void glNormalPointervINTELDel(uint /*NormalPointerType*/  type, IntPtr  pointer);
        private static glNormalPointervINTELDel glNormalPointervINTELPtr;
        
        // glNormalStream3bATI
        public static void glNormalStream3bATI(uint /*VertexStreamATI*/  stream, sbyte  nx, sbyte  ny, sbyte  nz) => glNormalStream3bATIPtr?.Invoke(stream, nx, ny, nz);
        private delegate void glNormalStream3bATIDel(uint /*VertexStreamATI*/  stream, sbyte  nx, sbyte  ny, sbyte  nz);
        private static glNormalStream3bATIDel glNormalStream3bATIPtr;
        
        // glNormalStream3bvATI
        public static void glNormalStream3bvATI(uint /*VertexStreamATI*/  stream, sbyte[]  coords) => glNormalStream3bvATIPtr?.Invoke(stream, coords);
        private delegate void glNormalStream3bvATIDel(uint /*VertexStreamATI*/  stream, sbyte[]  coords);
        private static glNormalStream3bvATIDel glNormalStream3bvATIPtr;
        
        // glNormalStream3dATI
        public static void glNormalStream3dATI(uint /*VertexStreamATI*/  stream, double  nx, double  ny, double  nz) => glNormalStream3dATIPtr?.Invoke(stream, nx, ny, nz);
        private delegate void glNormalStream3dATIDel(uint /*VertexStreamATI*/  stream, double  nx, double  ny, double  nz);
        private static glNormalStream3dATIDel glNormalStream3dATIPtr;
        
        // glNormalStream3dvATI
        public static void glNormalStream3dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => glNormalStream3dvATIPtr?.Invoke(stream, coords);
        private delegate void glNormalStream3dvATIDel(uint /*VertexStreamATI*/  stream, double[]  coords);
        private static glNormalStream3dvATIDel glNormalStream3dvATIPtr;
        
        // glNormalStream3fATI
        public static void glNormalStream3fATI(uint /*VertexStreamATI*/  stream, float  nx, float  ny, float  nz) => glNormalStream3fATIPtr?.Invoke(stream, nx, ny, nz);
        private delegate void glNormalStream3fATIDel(uint /*VertexStreamATI*/  stream, float  nx, float  ny, float  nz);
        private static glNormalStream3fATIDel glNormalStream3fATIPtr;
        
        // glNormalStream3fvATI
        public static void glNormalStream3fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => glNormalStream3fvATIPtr?.Invoke(stream, coords);
        private delegate void glNormalStream3fvATIDel(uint /*VertexStreamATI*/  stream, float[]  coords);
        private static glNormalStream3fvATIDel glNormalStream3fvATIPtr;
        
        // glNormalStream3iATI
        public static void glNormalStream3iATI(uint /*VertexStreamATI*/  stream, int  nx, int  ny, int  nz) => glNormalStream3iATIPtr?.Invoke(stream, nx, ny, nz);
        private delegate void glNormalStream3iATIDel(uint /*VertexStreamATI*/  stream, int  nx, int  ny, int  nz);
        private static glNormalStream3iATIDel glNormalStream3iATIPtr;
        
        // glNormalStream3ivATI
        public static void glNormalStream3ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => glNormalStream3ivATIPtr?.Invoke(stream, coords);
        private delegate void glNormalStream3ivATIDel(uint /*VertexStreamATI*/  stream, int[]  coords);
        private static glNormalStream3ivATIDel glNormalStream3ivATIPtr;
        
        // glNormalStream3sATI
        public static void glNormalStream3sATI(uint /*VertexStreamATI*/  stream, short  nx, short  ny, short  nz) => glNormalStream3sATIPtr?.Invoke(stream, nx, ny, nz);
        private delegate void glNormalStream3sATIDel(uint /*VertexStreamATI*/  stream, short  nx, short  ny, short  nz);
        private static glNormalStream3sATIDel glNormalStream3sATIPtr;
        
        // glNormalStream3svATI
        public static void glNormalStream3svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => glNormalStream3svATIPtr?.Invoke(stream, coords);
        private delegate void glNormalStream3svATIDel(uint /*VertexStreamATI*/  stream, short[]  coords);
        private static glNormalStream3svATIDel glNormalStream3svATIPtr;
        
        // glObjectLabel
        public static void glObjectLabel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label) => glObjectLabelPtr?.Invoke(identifier, name, length, label);
        private delegate void glObjectLabelDel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label);
        private static glObjectLabelDel glObjectLabelPtr;
        
        // glObjectLabelKHR
        public static void glObjectLabelKHR(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label) => glObjectLabelKHRPtr?.Invoke(identifier, name, length, label);
        private delegate void glObjectLabelKHRDel(uint /*ObjectIdentifier*/  identifier, uint  name, uint  length, string  label);
        private static glObjectLabelKHRDel glObjectLabelKHRPtr;
        
        // glObjectPtrLabel
        public static void glObjectPtrLabel(IntPtr  ptr, uint  length, string  label) => glObjectPtrLabelPtr?.Invoke(ptr, length, label);
        private delegate void glObjectPtrLabelDel(IntPtr  ptr, uint  length, string  label);
        private static glObjectPtrLabelDel glObjectPtrLabelPtr;
        
        // glObjectPtrLabelKHR
        public static void glObjectPtrLabelKHR(IntPtr  ptr, uint  length, string  label) => glObjectPtrLabelKHRPtr?.Invoke(ptr, length, label);
        private delegate void glObjectPtrLabelKHRDel(IntPtr  ptr, uint  length, string  label);
        private static glObjectPtrLabelKHRDel glObjectPtrLabelKHRPtr;
        
        // glObjectPurgeableAPPLE
        public static uint glObjectPurgeableAPPLE(uint  objectType, uint  name, uint  option) => glObjectPurgeableAPPLEPtr?.Invoke(objectType, name, option) ?? default;
        private delegate uint glObjectPurgeableAPPLEDel(uint  objectType, uint  name, uint  option);
        private static glObjectPurgeableAPPLEDel glObjectPurgeableAPPLEPtr;
        
        // glObjectUnpurgeableAPPLE
        public static uint glObjectUnpurgeableAPPLE(uint  objectType, uint  name, uint  option) => glObjectUnpurgeableAPPLEPtr?.Invoke(objectType, name, option) ?? default;
        private delegate uint glObjectUnpurgeableAPPLEDel(uint  objectType, uint  name, uint  option);
        private static glObjectUnpurgeableAPPLEDel glObjectUnpurgeableAPPLEPtr;
        
        // glOrtho
        public static void glOrtho(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar) => glOrthoPtr?.Invoke(left, right, bottom, top, zNear, zFar);
        private delegate void glOrthoDel(double  left, double  right, double  bottom, double  top, double  zNear, double  zFar);
        private static glOrthoDel glOrthoPtr;
        
        // glOrthof
        public static void glOrthof(float  l, float  r, float  b, float  t, float  n, float  f) => glOrthofPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glOrthofDel(float  l, float  r, float  b, float  t, float  n, float  f);
        private static glOrthofDel glOrthofPtr;
        
        // glOrthofOES
        public static void glOrthofOES(float  l, float  r, float  b, float  t, float  n, float  f) => glOrthofOESPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glOrthofOESDel(float  l, float  r, float  b, float  t, float  n, float  f);
        private static glOrthofOESDel glOrthofOESPtr;
        
        // glOrthox
        public static void glOrthox(int  l, int  r, int  b, int  t, int  n, int  f) => glOrthoxPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glOrthoxDel(int  l, int  r, int  b, int  t, int  n, int  f);
        private static glOrthoxDel glOrthoxPtr;
        
        // glOrthoxOES
        public static void glOrthoxOES(int  l, int  r, int  b, int  t, int  n, int  f) => glOrthoxOESPtr?.Invoke(l, r, b, t, n, f);
        private delegate void glOrthoxOESDel(int  l, int  r, int  b, int  t, int  n, int  f);
        private static glOrthoxOESDel glOrthoxOESPtr;
        
        // glPNTrianglesfATI
        public static void glPNTrianglesfATI(uint /*PNTrianglesPNameATI*/  pname, float  param) => glPNTrianglesfATIPtr?.Invoke(pname, param);
        private delegate void glPNTrianglesfATIDel(uint /*PNTrianglesPNameATI*/  pname, float  param);
        private static glPNTrianglesfATIDel glPNTrianglesfATIPtr;
        
        // glPNTrianglesiATI
        public static void glPNTrianglesiATI(uint /*PNTrianglesPNameATI*/  pname, int  param) => glPNTrianglesiATIPtr?.Invoke(pname, param);
        private delegate void glPNTrianglesiATIDel(uint /*PNTrianglesPNameATI*/  pname, int  param);
        private static glPNTrianglesiATIDel glPNTrianglesiATIPtr;
        
        // glPassTexCoordATI
        public static void glPassTexCoordATI(uint  dst, uint  coord, uint /*SwizzleOpATI*/  swizzle) => glPassTexCoordATIPtr?.Invoke(dst, coord, swizzle);
        private delegate void glPassTexCoordATIDel(uint  dst, uint  coord, uint /*SwizzleOpATI*/  swizzle);
        private static glPassTexCoordATIDel glPassTexCoordATIPtr;
        
        // glPassThrough
        public static void glPassThrough(float /*FeedbackElement*/  token) => glPassThroughPtr?.Invoke(token);
        private delegate void glPassThroughDel(float /*FeedbackElement*/  token);
        private static glPassThroughDel glPassThroughPtr;
        
        // glPassThroughxOES
        public static void glPassThroughxOES(int  token) => glPassThroughxOESPtr?.Invoke(token);
        private delegate void glPassThroughxOESDel(int  token);
        private static glPassThroughxOESDel glPassThroughxOESPtr;
        
        // glPatchParameterfv
        public static void glPatchParameterfv(uint /*PatchParameterName*/  pname, float[]  values) => glPatchParameterfvPtr?.Invoke(pname, values);
        private delegate void glPatchParameterfvDel(uint /*PatchParameterName*/  pname, float[]  values);
        private static glPatchParameterfvDel glPatchParameterfvPtr;
        
        // glPatchParameteri
        public static void glPatchParameteri(uint /*PatchParameterName*/  pname, int  value) => glPatchParameteriPtr?.Invoke(pname, value);
        private delegate void glPatchParameteriDel(uint /*PatchParameterName*/  pname, int  value);
        private static glPatchParameteriDel glPatchParameteriPtr;
        
        // glPatchParameteriEXT
        public static void glPatchParameteriEXT(uint /*PatchParameterName*/  pname, int  value) => glPatchParameteriEXTPtr?.Invoke(pname, value);
        private delegate void glPatchParameteriEXTDel(uint /*PatchParameterName*/  pname, int  value);
        private static glPatchParameteriEXTDel glPatchParameteriEXTPtr;
        
        // glPatchParameteriOES
        public static void glPatchParameteriOES(uint /*PatchParameterName*/  pname, int  value) => glPatchParameteriOESPtr?.Invoke(pname, value);
        private delegate void glPatchParameteriOESDel(uint /*PatchParameterName*/  pname, int  value);
        private static glPatchParameteriOESDel glPatchParameteriOESPtr;
        
        // glPathColorGenNV
        public static void glPathColorGenNV(uint /*PathColor*/  color, uint /*PathGenMode*/  genMode, uint /*PathColorFormat*/  colorFormat, float[]  coeffs) => glPathColorGenNVPtr?.Invoke(color, genMode, colorFormat, coeffs);
        private delegate void glPathColorGenNVDel(uint /*PathColor*/  color, uint /*PathGenMode*/  genMode, uint /*PathColorFormat*/  colorFormat, float[]  coeffs);
        private static glPathColorGenNVDel glPathColorGenNVPtr;
        
        // glPathCommandsNV
        public static void glPathCommandsNV(uint /*Path*/  path, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => glPathCommandsNVPtr?.Invoke(path, numCommands, commands, numCoords, coordType, coords);
        private delegate void glPathCommandsNVDel(uint /*Path*/  path, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords);
        private static glPathCommandsNVDel glPathCommandsNVPtr;
        
        // glPathCoordsNV
        public static void glPathCoordsNV(uint /*Path*/  path, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => glPathCoordsNVPtr?.Invoke(path, numCoords, coordType, coords);
        private delegate void glPathCoordsNVDel(uint /*Path*/  path, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords);
        private static glPathCoordsNVDel glPathCoordsNVPtr;
        
        // glPathCoverDepthFuncNV
        public static void glPathCoverDepthFuncNV(uint /*DepthFunction*/  func) => glPathCoverDepthFuncNVPtr?.Invoke(func);
        private delegate void glPathCoverDepthFuncNVDel(uint /*DepthFunction*/  func);
        private static glPathCoverDepthFuncNVDel glPathCoverDepthFuncNVPtr;
        
        // glPathDashArrayNV
        public static void glPathDashArrayNV(uint /*Path*/  path, uint  dashCount, float[]  dashArray) => glPathDashArrayNVPtr?.Invoke(path, dashCount, dashArray);
        private delegate void glPathDashArrayNVDel(uint /*Path*/  path, uint  dashCount, float[]  dashArray);
        private static glPathDashArrayNVDel glPathDashArrayNVPtr;
        
        // glPathFogGenNV
        public static void glPathFogGenNV(uint /*PathGenMode*/  genMode) => glPathFogGenNVPtr?.Invoke(genMode);
        private delegate void glPathFogGenNVDel(uint /*PathGenMode*/  genMode);
        private static glPathFogGenNVDel glPathFogGenNVPtr;
        
        // glPathGlyphIndexArrayNV
        public static uint glPathGlyphIndexArrayNV(uint  firstPathName, uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale) => glPathGlyphIndexArrayNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) ?? default;
        private delegate uint glPathGlyphIndexArrayNVDel(uint  firstPathName, uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale);
        private static glPathGlyphIndexArrayNVDel glPathGlyphIndexArrayNVPtr;
        
        // glPathGlyphIndexRangeNV
        public static uint glPathGlyphIndexRangeNV(uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  pathParameterTemplate, float  emScale, uint  baseAndCount) => glPathGlyphIndexRangeNVPtr?.Invoke(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount) ?? default;
        private delegate uint glPathGlyphIndexRangeNVDel(uint  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  pathParameterTemplate, float  emScale, uint  baseAndCount);
        private static glPathGlyphIndexRangeNVDel glPathGlyphIndexRangeNVPtr;
        
        // glPathGlyphRangeNV
        public static void glPathGlyphRangeNV(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyph, uint  numGlyphs, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale) => glPathGlyphRangeNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        private delegate void glPathGlyphRangeNVDel(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  firstGlyph, uint  numGlyphs, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale);
        private static glPathGlyphRangeNVDel glPathGlyphRangeNVPtr;
        
        // glPathGlyphsNV
        public static void glPathGlyphsNV(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  numGlyphs, uint /*PathElementType*/  type, IntPtr  charcodes, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale) => glPathGlyphsNVPtr?.Invoke(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        private delegate void glPathGlyphsNVDel(uint /*Path*/  firstPathName, uint /*PathFontTarget*/  fontTarget, IntPtr  fontName, uint /*PathFontStyle*/  fontStyle, uint  numGlyphs, uint /*PathElementType*/  type, IntPtr  charcodes, uint /*PathHandleMissingGlyphs*/  handleMissingGlyphs, uint /*Path*/  pathParameterTemplate, float  emScale);
        private static glPathGlyphsNVDel glPathGlyphsNVPtr;
        
        // glPathMemoryGlyphIndexArrayNV
        public static uint glPathMemoryGlyphIndexArrayNV(uint  firstPathName, uint  fontTarget, IntPtr  fontSize, IntPtr  fontData, uint  faceIndex, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale) => glPathMemoryGlyphIndexArrayNVPtr?.Invoke(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale) ?? default;
        private delegate uint glPathMemoryGlyphIndexArrayNVDel(uint  firstPathName, uint  fontTarget, IntPtr  fontSize, IntPtr  fontData, uint  faceIndex, uint  firstGlyphIndex, uint  numGlyphs, uint  pathParameterTemplate, float  emScale);
        private static glPathMemoryGlyphIndexArrayNVDel glPathMemoryGlyphIndexArrayNVPtr;
        
        // glPathParameterfNV
        public static void glPathParameterfNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float  value) => glPathParameterfNVPtr?.Invoke(path, pname, value);
        private delegate void glPathParameterfNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, float  value);
        private static glPathParameterfNVDel glPathParameterfNVPtr;
        
        // glPathParameterfvNV
        public static void glPathParameterfvNV(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value) => glPathParameterfvNVPtr?.Invoke(path, pname, value);
        private delegate void glPathParameterfvNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, float[]  value);
        private static glPathParameterfvNVDel glPathParameterfvNVPtr;
        
        // glPathParameteriNV
        public static void glPathParameteriNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int  value) => glPathParameteriNVPtr?.Invoke(path, pname, value);
        private delegate void glPathParameteriNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, int  value);
        private static glPathParameteriNVDel glPathParameteriNVPtr;
        
        // glPathParameterivNV
        public static void glPathParameterivNV(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value) => glPathParameterivNVPtr?.Invoke(path, pname, value);
        private delegate void glPathParameterivNVDel(uint /*Path*/  path, uint /*PathParameter*/  pname, int[]  value);
        private static glPathParameterivNVDel glPathParameterivNVPtr;
        
        // glPathStencilDepthOffsetNV
        public static void glPathStencilDepthOffsetNV(float  factor, float  units) => glPathStencilDepthOffsetNVPtr?.Invoke(factor, units);
        private delegate void glPathStencilDepthOffsetNVDel(float  factor, float  units);
        private static glPathStencilDepthOffsetNVDel glPathStencilDepthOffsetNVPtr;
        
        // glPathStencilFuncNV
        public static void glPathStencilFuncNV(uint /*StencilFunction*/  func, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => glPathStencilFuncNVPtr?.Invoke(func, refVal, mask);
        private delegate void glPathStencilFuncNVDel(uint /*StencilFunction*/  func, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask);
        private static glPathStencilFuncNVDel glPathStencilFuncNVPtr;
        
        // glPathStringNV
        public static void glPathStringNV(uint /*Path*/  path, uint /*PathStringFormat*/  format, uint  length, IntPtr  pathString) => glPathStringNVPtr?.Invoke(path, format, length, pathString);
        private delegate void glPathStringNVDel(uint /*Path*/  path, uint /*PathStringFormat*/  format, uint  length, IntPtr  pathString);
        private static glPathStringNVDel glPathStringNVPtr;
        
        // glPathSubCommandsNV
        public static void glPathSubCommandsNV(uint /*Path*/  path, uint  commandStart, uint  commandsToDelete, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => glPathSubCommandsNVPtr?.Invoke(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
        private delegate void glPathSubCommandsNVDel(uint /*Path*/  path, uint  commandStart, uint  commandsToDelete, uint  numCommands, byte[] /*PathCommand*/  commands, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords);
        private static glPathSubCommandsNVDel glPathSubCommandsNVPtr;
        
        // glPathSubCoordsNV
        public static void glPathSubCoordsNV(uint /*Path*/  path, uint  coordStart, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords) => glPathSubCoordsNVPtr?.Invoke(path, coordStart, numCoords, coordType, coords);
        private delegate void glPathSubCoordsNVDel(uint /*Path*/  path, uint  coordStart, uint  numCoords, uint /*PathCoordType*/  coordType, IntPtr  coords);
        private static glPathSubCoordsNVDel glPathSubCoordsNVPtr;
        
        // glPathTexGenNV
        public static void glPathTexGenNV(uint /*PathColor*/  texCoordSet, uint /*PathGenMode*/  genMode, int  components, float[]  coeffs) => glPathTexGenNVPtr?.Invoke(texCoordSet, genMode, components, coeffs);
        private delegate void glPathTexGenNVDel(uint /*PathColor*/  texCoordSet, uint /*PathGenMode*/  genMode, int  components, float[]  coeffs);
        private static glPathTexGenNVDel glPathTexGenNVPtr;
        
        // glPauseTransformFeedback
        public static void glPauseTransformFeedback() => glPauseTransformFeedbackPtr?.Invoke();
        private delegate void glPauseTransformFeedbackDel();
        private static glPauseTransformFeedbackDel glPauseTransformFeedbackPtr;
        
        // glPauseTransformFeedbackNV
        public static void glPauseTransformFeedbackNV() => glPauseTransformFeedbackNVPtr?.Invoke();
        private delegate void glPauseTransformFeedbackNVDel();
        private static glPauseTransformFeedbackNVDel glPauseTransformFeedbackNVPtr;
        
        // glPixelDataRangeNV
        public static void glPixelDataRangeNV(uint /*PixelDataRangeTargetNV*/  target, uint  length, IntPtr  pointer) => glPixelDataRangeNVPtr?.Invoke(target, length, pointer);
        private delegate void glPixelDataRangeNVDel(uint /*PixelDataRangeTargetNV*/  target, uint  length, IntPtr  pointer);
        private static glPixelDataRangeNVDel glPixelDataRangeNVPtr;
        
        // glPixelMapfv
        public static void glPixelMapfv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, float[]  values) => glPixelMapfvPtr?.Invoke(map, mapsize, values);
        private delegate void glPixelMapfvDel(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, float[]  values);
        private static glPixelMapfvDel glPixelMapfvPtr;
        
        // glPixelMapuiv
        public static void glPixelMapuiv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, uint[]  values) => glPixelMapuivPtr?.Invoke(map, mapsize, values);
        private delegate void glPixelMapuivDel(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, uint[]  values);
        private static glPixelMapuivDel glPixelMapuivPtr;
        
        // glPixelMapusv
        public static void glPixelMapusv(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, ushort[]  values) => glPixelMapusvPtr?.Invoke(map, mapsize, values);
        private delegate void glPixelMapusvDel(uint /*PixelMap*/  map, uint /*CheckedInt32*/  mapsize, ushort[]  values);
        private static glPixelMapusvDel glPixelMapusvPtr;
        
        // glPixelMapx
        public static void glPixelMapx(uint /*PixelMap*/  map, int  size, int[]  values) => glPixelMapxPtr?.Invoke(map, size, values);
        private delegate void glPixelMapxDel(uint /*PixelMap*/  map, int  size, int[]  values);
        private static glPixelMapxDel glPixelMapxPtr;
        
        // glPixelStoref
        public static void glPixelStoref(uint /*PixelStoreParameter*/  pname, float /*CheckedFloat32*/  param) => glPixelStorefPtr?.Invoke(pname, param);
        private delegate void glPixelStorefDel(uint /*PixelStoreParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glPixelStorefDel glPixelStorefPtr;
        
        // glPixelStorei
        public static void glPixelStorei(uint /*PixelStoreParameter*/  pname, int /*CheckedInt32*/  param) => glPixelStoreiPtr?.Invoke(pname, param);
        private delegate void glPixelStoreiDel(uint /*PixelStoreParameter*/  pname, int /*CheckedInt32*/  param);
        private static glPixelStoreiDel glPixelStoreiPtr;
        
        // glPixelStorex
        public static void glPixelStorex(uint /*PixelStoreParameter*/  pname, int  param) => glPixelStorexPtr?.Invoke(pname, param);
        private delegate void glPixelStorexDel(uint /*PixelStoreParameter*/  pname, int  param);
        private static glPixelStorexDel glPixelStorexPtr;
        
        // glPixelTexGenParameterfSGIS
        public static void glPixelTexGenParameterfSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float /*CheckedFloat32*/  param) => glPixelTexGenParameterfSGISPtr?.Invoke(pname, param);
        private delegate void glPixelTexGenParameterfSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, float /*CheckedFloat32*/  param);
        private static glPixelTexGenParameterfSGISDel glPixelTexGenParameterfSGISPtr;
        
        // glPixelTexGenParameterfvSGIS
        public static void glPixelTexGenParameterfvSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters) => glPixelTexGenParameterfvSGISPtr?.Invoke(pname, parameters);
        private delegate void glPixelTexGenParameterfvSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glPixelTexGenParameterfvSGISDel glPixelTexGenParameterfvSGISPtr;
        
        // glPixelTexGenParameteriSGIS
        public static void glPixelTexGenParameteriSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int /*CheckedInt32*/  param) => glPixelTexGenParameteriSGISPtr?.Invoke(pname, param);
        private delegate void glPixelTexGenParameteriSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, int /*CheckedInt32*/  param);
        private static glPixelTexGenParameteriSGISDel glPixelTexGenParameteriSGISPtr;
        
        // glPixelTexGenParameterivSGIS
        public static void glPixelTexGenParameterivSGIS(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters) => glPixelTexGenParameterivSGISPtr?.Invoke(pname, parameters);
        private delegate void glPixelTexGenParameterivSGISDel(uint /*PixelTexGenParameterNameSGIS*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glPixelTexGenParameterivSGISDel glPixelTexGenParameterivSGISPtr;
        
        // glPixelTexGenSGIX
        public static void glPixelTexGenSGIX(uint /*PixelTexGenModeSGIX*/  mode) => glPixelTexGenSGIXPtr?.Invoke(mode);
        private delegate void glPixelTexGenSGIXDel(uint /*PixelTexGenModeSGIX*/  mode);
        private static glPixelTexGenSGIXDel glPixelTexGenSGIXPtr;
        
        // glPixelTransferf
        public static void glPixelTransferf(uint /*PixelTransferParameter*/  pname, float /*CheckedFloat32*/  param) => glPixelTransferfPtr?.Invoke(pname, param);
        private delegate void glPixelTransferfDel(uint /*PixelTransferParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glPixelTransferfDel glPixelTransferfPtr;
        
        // glPixelTransferi
        public static void glPixelTransferi(uint /*PixelTransferParameter*/  pname, int /*CheckedInt32*/  param) => glPixelTransferiPtr?.Invoke(pname, param);
        private delegate void glPixelTransferiDel(uint /*PixelTransferParameter*/  pname, int /*CheckedInt32*/  param);
        private static glPixelTransferiDel glPixelTransferiPtr;
        
        // glPixelTransferxOES
        public static void glPixelTransferxOES(uint /*PixelTransferParameter*/  pname, int  param) => glPixelTransferxOESPtr?.Invoke(pname, param);
        private delegate void glPixelTransferxOESDel(uint /*PixelTransferParameter*/  pname, int  param);
        private static glPixelTransferxOESDel glPixelTransferxOESPtr;
        
        // glPixelTransformParameterfEXT
        public static void glPixelTransformParameterfEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float  param) => glPixelTransformParameterfEXTPtr?.Invoke(target, pname, param);
        private delegate void glPixelTransformParameterfEXTDel(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float  param);
        private static glPixelTransformParameterfEXTDel glPixelTransformParameterfEXTPtr;
        
        // glPixelTransformParameterfvEXT
        public static void glPixelTransformParameterfvEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float[]  parameters) => glPixelTransformParameterfvEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glPixelTransformParameterfvEXTDel(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, float[]  parameters);
        private static glPixelTransformParameterfvEXTDel glPixelTransformParameterfvEXTPtr;
        
        // glPixelTransformParameteriEXT
        public static void glPixelTransformParameteriEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int  param) => glPixelTransformParameteriEXTPtr?.Invoke(target, pname, param);
        private delegate void glPixelTransformParameteriEXTDel(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int  param);
        private static glPixelTransformParameteriEXTDel glPixelTransformParameteriEXTPtr;
        
        // glPixelTransformParameterivEXT
        public static void glPixelTransformParameterivEXT(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int[]  parameters) => glPixelTransformParameterivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glPixelTransformParameterivEXTDel(uint /*PixelTransformTargetEXT*/  target, uint /*PixelTransformPNameEXT*/  pname, int[]  parameters);
        private static glPixelTransformParameterivEXTDel glPixelTransformParameterivEXTPtr;
        
        // glPixelZoom
        public static void glPixelZoom(float  xfactor, float  yfactor) => glPixelZoomPtr?.Invoke(xfactor, yfactor);
        private delegate void glPixelZoomDel(float  xfactor, float  yfactor);
        private static glPixelZoomDel glPixelZoomPtr;
        
        // glPixelZoomxOES
        public static void glPixelZoomxOES(int  xfactor, int  yfactor) => glPixelZoomxOESPtr?.Invoke(xfactor, yfactor);
        private delegate void glPixelZoomxOESDel(int  xfactor, int  yfactor);
        private static glPixelZoomxOESDel glPixelZoomxOESPtr;
        
        // glPointAlongPathNV
        public static bool /*Boolean*/ glPointAlongPathNV(uint /*Path*/  path, uint  startSegment, uint  numSegments, float  distance, float[]  x, float[]  y, float[]  tangentX, float[]  tangentY) => glPointAlongPathNVPtr?.Invoke(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) ?? default;
        private delegate bool /*Boolean*/ glPointAlongPathNVDel(uint /*Path*/  path, uint  startSegment, uint  numSegments, float  distance, float[]  x, float[]  y, float[]  tangentX, float[]  tangentY);
        private static glPointAlongPathNVDel glPointAlongPathNVPtr;
        
        // glPointParameterf
        public static void glPointParameterf(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => glPointParameterfPtr?.Invoke(pname, param);
        private delegate void glPointParameterfDel(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param);
        private static glPointParameterfDel glPointParameterfPtr;
        
        // glPointParameterfARB
        public static void glPointParameterfARB(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => glPointParameterfARBPtr?.Invoke(pname, param);
        private delegate void glPointParameterfARBDel(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param);
        private static glPointParameterfARBDel glPointParameterfARBPtr;
        
        // glPointParameterfEXT
        public static void glPointParameterfEXT(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => glPointParameterfEXTPtr?.Invoke(pname, param);
        private delegate void glPointParameterfEXTDel(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param);
        private static glPointParameterfEXTDel glPointParameterfEXTPtr;
        
        // glPointParameterfSGIS
        public static void glPointParameterfSGIS(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param) => glPointParameterfSGISPtr?.Invoke(pname, param);
        private delegate void glPointParameterfSGISDel(uint /*PointParameterNameARB*/  pname, float /*CheckedFloat32*/  param);
        private static glPointParameterfSGISDel glPointParameterfSGISPtr;
        
        // glPointParameterfv
        public static void glPointParameterfv(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => glPointParameterfvPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterfvDel(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glPointParameterfvDel glPointParameterfvPtr;
        
        // glPointParameterfvARB
        public static void glPointParameterfvARB(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => glPointParameterfvARBPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterfvARBDel(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glPointParameterfvARBDel glPointParameterfvARBPtr;
        
        // glPointParameterfvEXT
        public static void glPointParameterfvEXT(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => glPointParameterfvEXTPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterfvEXTDel(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glPointParameterfvEXTDel glPointParameterfvEXTPtr;
        
        // glPointParameterfvSGIS
        public static void glPointParameterfvSGIS(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters) => glPointParameterfvSGISPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterfvSGISDel(uint /*PointParameterNameARB*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glPointParameterfvSGISDel glPointParameterfvSGISPtr;
        
        // glPointParameteri
        public static void glPointParameteri(uint /*PointParameterNameARB*/  pname, int  param) => glPointParameteriPtr?.Invoke(pname, param);
        private delegate void glPointParameteriDel(uint /*PointParameterNameARB*/  pname, int  param);
        private static glPointParameteriDel glPointParameteriPtr;
        
        // glPointParameteriNV
        public static void glPointParameteriNV(uint /*PointParameterNameARB*/  pname, int  param) => glPointParameteriNVPtr?.Invoke(pname, param);
        private delegate void glPointParameteriNVDel(uint /*PointParameterNameARB*/  pname, int  param);
        private static glPointParameteriNVDel glPointParameteriNVPtr;
        
        // glPointParameteriv
        public static void glPointParameteriv(uint /*PointParameterNameARB*/  pname, int[]  parameters) => glPointParameterivPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterivDel(uint /*PointParameterNameARB*/  pname, int[]  parameters);
        private static glPointParameterivDel glPointParameterivPtr;
        
        // glPointParameterivNV
        public static void glPointParameterivNV(uint /*PointParameterNameARB*/  pname, int[]  parameters) => glPointParameterivNVPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterivNVDel(uint /*PointParameterNameARB*/  pname, int[]  parameters);
        private static glPointParameterivNVDel glPointParameterivNVPtr;
        
        // glPointParameterx
        public static void glPointParameterx(uint /*PointParameterNameARB*/  pname, int  param) => glPointParameterxPtr?.Invoke(pname, param);
        private delegate void glPointParameterxDel(uint /*PointParameterNameARB*/  pname, int  param);
        private static glPointParameterxDel glPointParameterxPtr;
        
        // glPointParameterxOES
        public static void glPointParameterxOES(uint /*PointParameterNameARB*/  pname, int  param) => glPointParameterxOESPtr?.Invoke(pname, param);
        private delegate void glPointParameterxOESDel(uint /*PointParameterNameARB*/  pname, int  param);
        private static glPointParameterxOESDel glPointParameterxOESPtr;
        
        // glPointParameterxv
        public static void glPointParameterxv(uint /*PointParameterNameARB*/  pname, int[]  parameters) => glPointParameterxvPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterxvDel(uint /*PointParameterNameARB*/  pname, int[]  parameters);
        private static glPointParameterxvDel glPointParameterxvPtr;
        
        // glPointParameterxvOES
        public static void glPointParameterxvOES(uint /*PointParameterNameARB*/  pname, int[]  parameters) => glPointParameterxvOESPtr?.Invoke(pname, parameters);
        private delegate void glPointParameterxvOESDel(uint /*PointParameterNameARB*/  pname, int[]  parameters);
        private static glPointParameterxvOESDel glPointParameterxvOESPtr;
        
        // glPointSize
        public static void glPointSize(float /*CheckedFloat32*/  size) => glPointSizePtr?.Invoke(size);
        private delegate void glPointSizeDel(float /*CheckedFloat32*/  size);
        private static glPointSizeDel glPointSizePtr;
        
        // glPointSizePointerOES
        public static void glPointSizePointerOES(uint  type, uint  stride, IntPtr  pointer) => glPointSizePointerOESPtr?.Invoke(type, stride, pointer);
        private delegate void glPointSizePointerOESDel(uint  type, uint  stride, IntPtr  pointer);
        private static glPointSizePointerOESDel glPointSizePointerOESPtr;
        
        // glPointSizex
        public static void glPointSizex(int  size) => glPointSizexPtr?.Invoke(size);
        private delegate void glPointSizexDel(int  size);
        private static glPointSizexDel glPointSizexPtr;
        
        // glPointSizexOES
        public static void glPointSizexOES(int  size) => glPointSizexOESPtr?.Invoke(size);
        private delegate void glPointSizexOESDel(int  size);
        private static glPointSizexOESDel glPointSizexOESPtr;
        
        // glPollAsyncSGIX
        public static int glPollAsyncSGIX(uint[]  markerp) => glPollAsyncSGIXPtr?.Invoke(markerp) ?? default;
        private delegate int glPollAsyncSGIXDel(uint[]  markerp);
        private static glPollAsyncSGIXDel glPollAsyncSGIXPtr;
        
        // glPollInstrumentsSGIX
        public static int glPollInstrumentsSGIX(int[]  marker_p) => glPollInstrumentsSGIXPtr?.Invoke(marker_p) ?? default;
        private delegate int glPollInstrumentsSGIXDel(int[]  marker_p);
        private static glPollInstrumentsSGIXDel glPollInstrumentsSGIXPtr;
        
        // glPolygonMode
        public static void glPolygonMode(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode) => glPolygonModePtr?.Invoke(face, mode);
        private delegate void glPolygonModeDel(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode);
        private static glPolygonModeDel glPolygonModePtr;
        
        // glPolygonModeNV
        public static void glPolygonModeNV(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode) => glPolygonModeNVPtr?.Invoke(face, mode);
        private delegate void glPolygonModeNVDel(uint /*MaterialFace*/  face, uint /*PolygonMode*/  mode);
        private static glPolygonModeNVDel glPolygonModeNVPtr;
        
        // glPolygonOffset
        public static void glPolygonOffset(float  factor, float  units) => glPolygonOffsetPtr?.Invoke(factor, units);
        private delegate void glPolygonOffsetDel(float  factor, float  units);
        private static glPolygonOffsetDel glPolygonOffsetPtr;
        
        // glPolygonOffsetClamp
        public static void glPolygonOffsetClamp(float  factor, float  units, float  clamp) => glPolygonOffsetClampPtr?.Invoke(factor, units, clamp);
        private delegate void glPolygonOffsetClampDel(float  factor, float  units, float  clamp);
        private static glPolygonOffsetClampDel glPolygonOffsetClampPtr;
        
        // glPolygonOffsetClampEXT
        public static void glPolygonOffsetClampEXT(float  factor, float  units, float  clamp) => glPolygonOffsetClampEXTPtr?.Invoke(factor, units, clamp);
        private delegate void glPolygonOffsetClampEXTDel(float  factor, float  units, float  clamp);
        private static glPolygonOffsetClampEXTDel glPolygonOffsetClampEXTPtr;
        
        // glPolygonOffsetEXT
        public static void glPolygonOffsetEXT(float  factor, float  bias) => glPolygonOffsetEXTPtr?.Invoke(factor, bias);
        private delegate void glPolygonOffsetEXTDel(float  factor, float  bias);
        private static glPolygonOffsetEXTDel glPolygonOffsetEXTPtr;
        
        // glPolygonOffsetx
        public static void glPolygonOffsetx(int  factor, int  units) => glPolygonOffsetxPtr?.Invoke(factor, units);
        private delegate void glPolygonOffsetxDel(int  factor, int  units);
        private static glPolygonOffsetxDel glPolygonOffsetxPtr;
        
        // glPolygonOffsetxOES
        public static void glPolygonOffsetxOES(int  factor, int  units) => glPolygonOffsetxOESPtr?.Invoke(factor, units);
        private delegate void glPolygonOffsetxOESDel(int  factor, int  units);
        private static glPolygonOffsetxOESDel glPolygonOffsetxOESPtr;
        
        // glPolygonStipple
        public static void glPolygonStipple(byte[]  mask) => glPolygonStipplePtr?.Invoke(mask);
        private delegate void glPolygonStippleDel(byte[]  mask);
        private static glPolygonStippleDel glPolygonStipplePtr;
        
        // glPopAttrib
        public static void glPopAttrib() => glPopAttribPtr?.Invoke();
        private delegate void glPopAttribDel();
        private static glPopAttribDel glPopAttribPtr;
        
        // glPopClientAttrib
        public static void glPopClientAttrib() => glPopClientAttribPtr?.Invoke();
        private delegate void glPopClientAttribDel();
        private static glPopClientAttribDel glPopClientAttribPtr;
        
        // glPopDebugGroup
        public static void glPopDebugGroup() => glPopDebugGroupPtr?.Invoke();
        private delegate void glPopDebugGroupDel();
        private static glPopDebugGroupDel glPopDebugGroupPtr;
        
        // glPopDebugGroupKHR
        public static void glPopDebugGroupKHR() => glPopDebugGroupKHRPtr?.Invoke();
        private delegate void glPopDebugGroupKHRDel();
        private static glPopDebugGroupKHRDel glPopDebugGroupKHRPtr;
        
        // glPopGroupMarkerEXT
        public static void glPopGroupMarkerEXT() => glPopGroupMarkerEXTPtr?.Invoke();
        private delegate void glPopGroupMarkerEXTDel();
        private static glPopGroupMarkerEXTDel glPopGroupMarkerEXTPtr;
        
        // glPopMatrix
        public static void glPopMatrix() => glPopMatrixPtr?.Invoke();
        private delegate void glPopMatrixDel();
        private static glPopMatrixDel glPopMatrixPtr;
        
        // glPopName
        public static void glPopName() => glPopNamePtr?.Invoke();
        private delegate void glPopNameDel();
        private static glPopNameDel glPopNamePtr;
        
        // glPresentFrameDualFillNV
        public static void glPresentFrameDualFillNV(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  target1, uint  fill1, uint  target2, uint  fill2, uint  target3, uint  fill3) => glPresentFrameDualFillNVPtr?.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        private delegate void glPresentFrameDualFillNVDel(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  target1, uint  fill1, uint  target2, uint  fill2, uint  target3, uint  fill3);
        private static glPresentFrameDualFillNVDel glPresentFrameDualFillNVPtr;
        
        // glPresentFrameKeyedNV
        public static void glPresentFrameKeyedNV(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  key0, uint  target1, uint  fill1, uint  key1) => glPresentFrameKeyedNVPtr?.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        private delegate void glPresentFrameKeyedNVDel(uint  video_slot, ulong  minPresentTime, uint  beginPresentTimeId, uint  presentDurationId, uint  type, uint  target0, uint  fill0, uint  key0, uint  target1, uint  fill1, uint  key1);
        private static glPresentFrameKeyedNVDel glPresentFrameKeyedNVPtr;
        
        // glPrimitiveBoundingBox
        public static void glPrimitiveBoundingBox(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => glPrimitiveBoundingBoxPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        private delegate void glPrimitiveBoundingBoxDel(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW);
        private static glPrimitiveBoundingBoxDel glPrimitiveBoundingBoxPtr;
        
        // glPrimitiveBoundingBoxARB
        public static void glPrimitiveBoundingBoxARB(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => glPrimitiveBoundingBoxARBPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        private delegate void glPrimitiveBoundingBoxARBDel(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW);
        private static glPrimitiveBoundingBoxARBDel glPrimitiveBoundingBoxARBPtr;
        
        // glPrimitiveBoundingBoxEXT
        public static void glPrimitiveBoundingBoxEXT(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => glPrimitiveBoundingBoxEXTPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        private delegate void glPrimitiveBoundingBoxEXTDel(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW);
        private static glPrimitiveBoundingBoxEXTDel glPrimitiveBoundingBoxEXTPtr;
        
        // glPrimitiveBoundingBoxOES
        public static void glPrimitiveBoundingBoxOES(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW) => glPrimitiveBoundingBoxOESPtr?.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        private delegate void glPrimitiveBoundingBoxOESDel(float  minX, float  minY, float  minZ, float  minW, float  maxX, float  maxY, float  maxZ, float  maxW);
        private static glPrimitiveBoundingBoxOESDel glPrimitiveBoundingBoxOESPtr;
        
        // glPrimitiveRestartIndex
        public static void glPrimitiveRestartIndex(uint  index) => glPrimitiveRestartIndexPtr?.Invoke(index);
        private delegate void glPrimitiveRestartIndexDel(uint  index);
        private static glPrimitiveRestartIndexDel glPrimitiveRestartIndexPtr;
        
        // glPrimitiveRestartIndexNV
        public static void glPrimitiveRestartIndexNV(uint  index) => glPrimitiveRestartIndexNVPtr?.Invoke(index);
        private delegate void glPrimitiveRestartIndexNVDel(uint  index);
        private static glPrimitiveRestartIndexNVDel glPrimitiveRestartIndexNVPtr;
        
        // glPrimitiveRestartNV
        public static void glPrimitiveRestartNV() => glPrimitiveRestartNVPtr?.Invoke();
        private delegate void glPrimitiveRestartNVDel();
        private static glPrimitiveRestartNVDel glPrimitiveRestartNVPtr;
        
        // glPrioritizeTextures
        public static void glPrioritizeTextures(uint  n, uint[] /*Texture*/  textures, float[]  priorities) => glPrioritizeTexturesPtr?.Invoke(n, textures, priorities);
        private delegate void glPrioritizeTexturesDel(uint  n, uint[] /*Texture*/  textures, float[]  priorities);
        private static glPrioritizeTexturesDel glPrioritizeTexturesPtr;
        
        // glPrioritizeTexturesEXT
        public static void glPrioritizeTexturesEXT(uint  n, uint[] /*Texture*/  textures, float[] /*ClampedFloat32*/  priorities) => glPrioritizeTexturesEXTPtr?.Invoke(n, textures, priorities);
        private delegate void glPrioritizeTexturesEXTDel(uint  n, uint[] /*Texture*/  textures, float[] /*ClampedFloat32*/  priorities);
        private static glPrioritizeTexturesEXTDel glPrioritizeTexturesEXTPtr;
        
        // glPrioritizeTexturesxOES
        public static void glPrioritizeTexturesxOES(uint  n, uint[]  textures, int[] /*ClampedFixed*/  priorities) => glPrioritizeTexturesxOESPtr?.Invoke(n, textures, priorities);
        private delegate void glPrioritizeTexturesxOESDel(uint  n, uint[]  textures, int[] /*ClampedFixed*/  priorities);
        private static glPrioritizeTexturesxOESDel glPrioritizeTexturesxOESPtr;
        
        // glProgramBinary
        public static void glProgramBinary(uint  program, uint  binaryFormat, IntPtr  binary, uint  length) => glProgramBinaryPtr?.Invoke(program, binaryFormat, binary, length);
        private delegate void glProgramBinaryDel(uint  program, uint  binaryFormat, IntPtr  binary, uint  length);
        private static glProgramBinaryDel glProgramBinaryPtr;
        
        // glProgramBinaryOES
        public static void glProgramBinaryOES(uint  program, uint  binaryFormat, IntPtr  binary, int  length) => glProgramBinaryOESPtr?.Invoke(program, binaryFormat, binary, length);
        private delegate void glProgramBinaryOESDel(uint  program, uint  binaryFormat, IntPtr  binary, int  length);
        private static glProgramBinaryOESDel glProgramBinaryOESPtr;
        
        // glProgramBufferParametersIivNV
        public static void glProgramBufferParametersIivNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, int[]  parameters) => glProgramBufferParametersIivNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        private delegate void glProgramBufferParametersIivNVDel(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, int[]  parameters);
        private static glProgramBufferParametersIivNVDel glProgramBufferParametersIivNVPtr;
        
        // glProgramBufferParametersIuivNV
        public static void glProgramBufferParametersIuivNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, uint[]  parameters) => glProgramBufferParametersIuivNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        private delegate void glProgramBufferParametersIuivNVDel(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, uint[]  parameters);
        private static glProgramBufferParametersIuivNVDel glProgramBufferParametersIuivNVPtr;
        
        // glProgramBufferParametersfvNV
        public static void glProgramBufferParametersfvNV(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, float[]  parameters) => glProgramBufferParametersfvNVPtr?.Invoke(target, bindingIndex, wordIndex, count, parameters);
        private delegate void glProgramBufferParametersfvNVDel(uint /*ProgramTarget*/  target, uint  bindingIndex, uint  wordIndex, uint  count, float[]  parameters);
        private static glProgramBufferParametersfvNVDel glProgramBufferParametersfvNVPtr;
        
        // glProgramEnvParameter4dARB
        public static void glProgramEnvParameter4dARB(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => glProgramEnvParameter4dARBPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramEnvParameter4dARBDel(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w);
        private static glProgramEnvParameter4dARBDel glProgramEnvParameter4dARBPtr;
        
        // glProgramEnvParameter4dvARB
        public static void glProgramEnvParameter4dvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glProgramEnvParameter4dvARBPtr?.Invoke(target, index, parameters);
        private delegate void glProgramEnvParameter4dvARBDel(uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glProgramEnvParameter4dvARBDel glProgramEnvParameter4dvARBPtr;
        
        // glProgramEnvParameter4fARB
        public static void glProgramEnvParameter4fARB(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => glProgramEnvParameter4fARBPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramEnvParameter4fARBDel(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w);
        private static glProgramEnvParameter4fARBDel glProgramEnvParameter4fARBPtr;
        
        // glProgramEnvParameter4fvARB
        public static void glProgramEnvParameter4fvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glProgramEnvParameter4fvARBPtr?.Invoke(target, index, parameters);
        private delegate void glProgramEnvParameter4fvARBDel(uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glProgramEnvParameter4fvARBDel glProgramEnvParameter4fvARBPtr;
        
        // glProgramEnvParameterI4iNV
        public static void glProgramEnvParameterI4iNV(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => glProgramEnvParameterI4iNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramEnvParameterI4iNVDel(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w);
        private static glProgramEnvParameterI4iNVDel glProgramEnvParameterI4iNVPtr;
        
        // glProgramEnvParameterI4ivNV
        public static void glProgramEnvParameterI4ivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glProgramEnvParameterI4ivNVPtr?.Invoke(target, index, parameters);
        private delegate void glProgramEnvParameterI4ivNVDel(uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glProgramEnvParameterI4ivNVDel glProgramEnvParameterI4ivNVPtr;
        
        // glProgramEnvParameterI4uiNV
        public static void glProgramEnvParameterI4uiNV(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => glProgramEnvParameterI4uiNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramEnvParameterI4uiNVDel(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w);
        private static glProgramEnvParameterI4uiNVDel glProgramEnvParameterI4uiNVPtr;
        
        // glProgramEnvParameterI4uivNV
        public static void glProgramEnvParameterI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glProgramEnvParameterI4uivNVPtr?.Invoke(target, index, parameters);
        private delegate void glProgramEnvParameterI4uivNVDel(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glProgramEnvParameterI4uivNVDel glProgramEnvParameterI4uivNVPtr;
        
        // glProgramEnvParameters4fvEXT
        public static void glProgramEnvParameters4fvEXT(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => glProgramEnvParameters4fvEXTPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramEnvParameters4fvEXTDel(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters);
        private static glProgramEnvParameters4fvEXTDel glProgramEnvParameters4fvEXTPtr;
        
        // glProgramEnvParametersI4ivNV
        public static void glProgramEnvParametersI4ivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => glProgramEnvParametersI4ivNVPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramEnvParametersI4ivNVDel(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters);
        private static glProgramEnvParametersI4ivNVDel glProgramEnvParametersI4ivNVPtr;
        
        // glProgramEnvParametersI4uivNV
        public static void glProgramEnvParametersI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => glProgramEnvParametersI4uivNVPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramEnvParametersI4uivNVDel(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters);
        private static glProgramEnvParametersI4uivNVDel glProgramEnvParametersI4uivNVPtr;
        
        // glProgramLocalParameter4dARB
        public static void glProgramLocalParameter4dARB(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w) => glProgramLocalParameter4dARBPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramLocalParameter4dARBDel(uint /*ProgramTarget*/  target, uint  index, double  x, double  y, double  z, double  w);
        private static glProgramLocalParameter4dARBDel glProgramLocalParameter4dARBPtr;
        
        // glProgramLocalParameter4dvARB
        public static void glProgramLocalParameter4dvARB(uint /*ProgramTarget*/  target, uint  index, double[]  parameters) => glProgramLocalParameter4dvARBPtr?.Invoke(target, index, parameters);
        private delegate void glProgramLocalParameter4dvARBDel(uint /*ProgramTarget*/  target, uint  index, double[]  parameters);
        private static glProgramLocalParameter4dvARBDel glProgramLocalParameter4dvARBPtr;
        
        // glProgramLocalParameter4fARB
        public static void glProgramLocalParameter4fARB(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w) => glProgramLocalParameter4fARBPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramLocalParameter4fARBDel(uint /*ProgramTarget*/  target, uint  index, float  x, float  y, float  z, float  w);
        private static glProgramLocalParameter4fARBDel glProgramLocalParameter4fARBPtr;
        
        // glProgramLocalParameter4fvARB
        public static void glProgramLocalParameter4fvARB(uint /*ProgramTarget*/  target, uint  index, float[]  parameters) => glProgramLocalParameter4fvARBPtr?.Invoke(target, index, parameters);
        private delegate void glProgramLocalParameter4fvARBDel(uint /*ProgramTarget*/  target, uint  index, float[]  parameters);
        private static glProgramLocalParameter4fvARBDel glProgramLocalParameter4fvARBPtr;
        
        // glProgramLocalParameterI4iNV
        public static void glProgramLocalParameterI4iNV(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w) => glProgramLocalParameterI4iNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramLocalParameterI4iNVDel(uint /*ProgramTarget*/  target, uint  index, int  x, int  y, int  z, int  w);
        private static glProgramLocalParameterI4iNVDel glProgramLocalParameterI4iNVPtr;
        
        // glProgramLocalParameterI4ivNV
        public static void glProgramLocalParameterI4ivNV(uint /*ProgramTarget*/  target, uint  index, int[]  parameters) => glProgramLocalParameterI4ivNVPtr?.Invoke(target, index, parameters);
        private delegate void glProgramLocalParameterI4ivNVDel(uint /*ProgramTarget*/  target, uint  index, int[]  parameters);
        private static glProgramLocalParameterI4ivNVDel glProgramLocalParameterI4ivNVPtr;
        
        // glProgramLocalParameterI4uiNV
        public static void glProgramLocalParameterI4uiNV(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w) => glProgramLocalParameterI4uiNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramLocalParameterI4uiNVDel(uint /*ProgramTarget*/  target, uint  index, uint  x, uint  y, uint  z, uint  w);
        private static glProgramLocalParameterI4uiNVDel glProgramLocalParameterI4uiNVPtr;
        
        // glProgramLocalParameterI4uivNV
        public static void glProgramLocalParameterI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters) => glProgramLocalParameterI4uivNVPtr?.Invoke(target, index, parameters);
        private delegate void glProgramLocalParameterI4uivNVDel(uint /*ProgramTarget*/  target, uint  index, uint[]  parameters);
        private static glProgramLocalParameterI4uivNVDel glProgramLocalParameterI4uivNVPtr;
        
        // glProgramLocalParameters4fvEXT
        public static void glProgramLocalParameters4fvEXT(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters) => glProgramLocalParameters4fvEXTPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramLocalParameters4fvEXTDel(uint /*ProgramTarget*/  target, uint  index, uint  count, float[]  parameters);
        private static glProgramLocalParameters4fvEXTDel glProgramLocalParameters4fvEXTPtr;
        
        // glProgramLocalParametersI4ivNV
        public static void glProgramLocalParametersI4ivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters) => glProgramLocalParametersI4ivNVPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramLocalParametersI4ivNVDel(uint /*ProgramTarget*/  target, uint  index, uint  count, int[]  parameters);
        private static glProgramLocalParametersI4ivNVDel glProgramLocalParametersI4ivNVPtr;
        
        // glProgramLocalParametersI4uivNV
        public static void glProgramLocalParametersI4uivNV(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters) => glProgramLocalParametersI4uivNVPtr?.Invoke(target, index, count, parameters);
        private delegate void glProgramLocalParametersI4uivNVDel(uint /*ProgramTarget*/  target, uint  index, uint  count, uint[]  parameters);
        private static glProgramLocalParametersI4uivNVDel glProgramLocalParametersI4uivNVPtr;
        
        // glProgramNamedParameter4dNV
        public static void glProgramNamedParameter4dNV(uint  id, uint  len, byte[]  name, double  x, double  y, double  z, double  w) => glProgramNamedParameter4dNVPtr?.Invoke(id, len, name, x, y, z, w);
        private delegate void glProgramNamedParameter4dNVDel(uint  id, uint  len, byte[]  name, double  x, double  y, double  z, double  w);
        private static glProgramNamedParameter4dNVDel glProgramNamedParameter4dNVPtr;
        
        // glProgramNamedParameter4dvNV
        public static void glProgramNamedParameter4dvNV(uint  id, uint  len, byte[]  name, double[]  v) => glProgramNamedParameter4dvNVPtr?.Invoke(id, len, name, v);
        private delegate void glProgramNamedParameter4dvNVDel(uint  id, uint  len, byte[]  name, double[]  v);
        private static glProgramNamedParameter4dvNVDel glProgramNamedParameter4dvNVPtr;
        
        // glProgramNamedParameter4fNV
        public static void glProgramNamedParameter4fNV(uint  id, uint  len, byte[]  name, float  x, float  y, float  z, float  w) => glProgramNamedParameter4fNVPtr?.Invoke(id, len, name, x, y, z, w);
        private delegate void glProgramNamedParameter4fNVDel(uint  id, uint  len, byte[]  name, float  x, float  y, float  z, float  w);
        private static glProgramNamedParameter4fNVDel glProgramNamedParameter4fNVPtr;
        
        // glProgramNamedParameter4fvNV
        public static void glProgramNamedParameter4fvNV(uint  id, uint  len, byte[]  name, float[]  v) => glProgramNamedParameter4fvNVPtr?.Invoke(id, len, name, v);
        private delegate void glProgramNamedParameter4fvNVDel(uint  id, uint  len, byte[]  name, float[]  v);
        private static glProgramNamedParameter4fvNVDel glProgramNamedParameter4fvNVPtr;
        
        // glProgramParameter4dNV
        public static void glProgramParameter4dNV(uint /*VertexAttribEnumNV*/  target, uint  index, double  x, double  y, double  z, double  w) => glProgramParameter4dNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramParameter4dNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, double  x, double  y, double  z, double  w);
        private static glProgramParameter4dNVDel glProgramParameter4dNVPtr;
        
        // glProgramParameter4dvNV
        public static void glProgramParameter4dvNV(uint /*VertexAttribEnumNV*/  target, uint  index, double[]  v) => glProgramParameter4dvNVPtr?.Invoke(target, index, v);
        private delegate void glProgramParameter4dvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, double[]  v);
        private static glProgramParameter4dvNVDel glProgramParameter4dvNVPtr;
        
        // glProgramParameter4fNV
        public static void glProgramParameter4fNV(uint /*VertexAttribEnumNV*/  target, uint  index, float  x, float  y, float  z, float  w) => glProgramParameter4fNVPtr?.Invoke(target, index, x, y, z, w);
        private delegate void glProgramParameter4fNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, float  x, float  y, float  z, float  w);
        private static glProgramParameter4fNVDel glProgramParameter4fNVPtr;
        
        // glProgramParameter4fvNV
        public static void glProgramParameter4fvNV(uint /*VertexAttribEnumNV*/  target, uint  index, float[]  v) => glProgramParameter4fvNVPtr?.Invoke(target, index, v);
        private delegate void glProgramParameter4fvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, float[]  v);
        private static glProgramParameter4fvNVDel glProgramParameter4fvNVPtr;
        
        // glProgramParameteri
        public static void glProgramParameteri(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => glProgramParameteriPtr?.Invoke(program, pname, value);
        private delegate void glProgramParameteriDel(uint  program, uint /*ProgramParameterPName*/  pname, int  value);
        private static glProgramParameteriDel glProgramParameteriPtr;
        
        // glProgramParameteriARB
        public static void glProgramParameteriARB(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => glProgramParameteriARBPtr?.Invoke(program, pname, value);
        private delegate void glProgramParameteriARBDel(uint  program, uint /*ProgramParameterPName*/  pname, int  value);
        private static glProgramParameteriARBDel glProgramParameteriARBPtr;
        
        // glProgramParameteriEXT
        public static void glProgramParameteriEXT(uint  program, uint /*ProgramParameterPName*/  pname, int  value) => glProgramParameteriEXTPtr?.Invoke(program, pname, value);
        private delegate void glProgramParameteriEXTDel(uint  program, uint /*ProgramParameterPName*/  pname, int  value);
        private static glProgramParameteriEXTDel glProgramParameteriEXTPtr;
        
        // glProgramParameters4dvNV
        public static void glProgramParameters4dvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, double[]  v) => glProgramParameters4dvNVPtr?.Invoke(target, index, count, v);
        private delegate void glProgramParameters4dvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, double[]  v);
        private static glProgramParameters4dvNVDel glProgramParameters4dvNVPtr;
        
        // glProgramParameters4fvNV
        public static void glProgramParameters4fvNV(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, float[]  v) => glProgramParameters4fvNVPtr?.Invoke(target, index, count, v);
        private delegate void glProgramParameters4fvNVDel(uint /*VertexAttribEnumNV*/  target, uint  index, uint  count, float[]  v);
        private static glProgramParameters4fvNVDel glProgramParameters4fvNVPtr;
        
        // glProgramPathFragmentInputGenNV
        public static void glProgramPathFragmentInputGenNV(uint  program, int  location, uint  genMode, int  components, float[]  coeffs) => glProgramPathFragmentInputGenNVPtr?.Invoke(program, location, genMode, components, coeffs);
        private delegate void glProgramPathFragmentInputGenNVDel(uint  program, int  location, uint  genMode, int  components, float[]  coeffs);
        private static glProgramPathFragmentInputGenNVDel glProgramPathFragmentInputGenNVPtr;
        
        // glProgramStringARB
        public static void glProgramStringARB(uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str) => glProgramStringARBPtr?.Invoke(target, format, len, str);
        private delegate void glProgramStringARBDel(uint /*ProgramTarget*/  target, uint /*ProgramFormat*/  format, uint  len, IntPtr  str);
        private static glProgramStringARBDel glProgramStringARBPtr;
        
        // glProgramSubroutineParametersuivNV
        public static void glProgramSubroutineParametersuivNV(uint  target, uint  count, uint[]  parameters) => glProgramSubroutineParametersuivNVPtr?.Invoke(target, count, parameters);
        private delegate void glProgramSubroutineParametersuivNVDel(uint  target, uint  count, uint[]  parameters);
        private static glProgramSubroutineParametersuivNVDel glProgramSubroutineParametersuivNVPtr;
        
        // glProgramUniform1d
        public static void glProgramUniform1d(uint  program, int  location, double  v0) => glProgramUniform1dPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1dDel(uint  program, int  location, double  v0);
        private static glProgramUniform1dDel glProgramUniform1dPtr;
        
        // glProgramUniform1dEXT
        public static void glProgramUniform1dEXT(uint  program, int  location, double  x) => glProgramUniform1dEXTPtr?.Invoke(program, location, x);
        private delegate void glProgramUniform1dEXTDel(uint  program, int  location, double  x);
        private static glProgramUniform1dEXTDel glProgramUniform1dEXTPtr;
        
        // glProgramUniform1dv
        public static void glProgramUniform1dv(uint  program, int  location, uint  count, double[]  value) => glProgramUniform1dvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1dvDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform1dvDel glProgramUniform1dvPtr;
        
        // glProgramUniform1dvEXT
        public static void glProgramUniform1dvEXT(uint  program, int  location, uint  count, double[]  value) => glProgramUniform1dvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1dvEXTDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform1dvEXTDel glProgramUniform1dvEXTPtr;
        
        // glProgramUniform1f
        public static void glProgramUniform1f(uint  program, int  location, float  v0) => glProgramUniform1fPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1fDel(uint  program, int  location, float  v0);
        private static glProgramUniform1fDel glProgramUniform1fPtr;
        
        // glProgramUniform1fEXT
        public static void glProgramUniform1fEXT(uint  program, int  location, float  v0) => glProgramUniform1fEXTPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1fEXTDel(uint  program, int  location, float  v0);
        private static glProgramUniform1fEXTDel glProgramUniform1fEXTPtr;
        
        // glProgramUniform1fv
        public static void glProgramUniform1fv(uint  program, int  location, uint  count, float[]  value) => glProgramUniform1fvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1fvDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform1fvDel glProgramUniform1fvPtr;
        
        // glProgramUniform1fvEXT
        public static void glProgramUniform1fvEXT(uint  program, int  location, uint  count, float[]  value) => glProgramUniform1fvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1fvEXTDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform1fvEXTDel glProgramUniform1fvEXTPtr;
        
        // glProgramUniform1i
        public static void glProgramUniform1i(uint  program, int  location, int  v0) => glProgramUniform1iPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1iDel(uint  program, int  location, int  v0);
        private static glProgramUniform1iDel glProgramUniform1iPtr;
        
        // glProgramUniform1i64ARB
        public static void glProgramUniform1i64ARB(uint  program, int  location, long  x) => glProgramUniform1i64ARBPtr?.Invoke(program, location, x);
        private delegate void glProgramUniform1i64ARBDel(uint  program, int  location, long  x);
        private static glProgramUniform1i64ARBDel glProgramUniform1i64ARBPtr;
        
        // glProgramUniform1i64NV
        public static void glProgramUniform1i64NV(uint  program, int  location, long  x) => glProgramUniform1i64NVPtr?.Invoke(program, location, x);
        private delegate void glProgramUniform1i64NVDel(uint  program, int  location, long  x);
        private static glProgramUniform1i64NVDel glProgramUniform1i64NVPtr;
        
        // glProgramUniform1i64vARB
        public static void glProgramUniform1i64vARB(uint  program, int  location, uint  count, long[]  value) => glProgramUniform1i64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1i64vARBDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform1i64vARBDel glProgramUniform1i64vARBPtr;
        
        // glProgramUniform1i64vNV
        public static void glProgramUniform1i64vNV(uint  program, int  location, uint  count, long[]  value) => glProgramUniform1i64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1i64vNVDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform1i64vNVDel glProgramUniform1i64vNVPtr;
        
        // glProgramUniform1iEXT
        public static void glProgramUniform1iEXT(uint  program, int  location, int  v0) => glProgramUniform1iEXTPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1iEXTDel(uint  program, int  location, int  v0);
        private static glProgramUniform1iEXTDel glProgramUniform1iEXTPtr;
        
        // glProgramUniform1iv
        public static void glProgramUniform1iv(uint  program, int  location, uint  count, int[]  value) => glProgramUniform1ivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1ivDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform1ivDel glProgramUniform1ivPtr;
        
        // glProgramUniform1ivEXT
        public static void glProgramUniform1ivEXT(uint  program, int  location, uint  count, int[]  value) => glProgramUniform1ivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1ivEXTDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform1ivEXTDel glProgramUniform1ivEXTPtr;
        
        // glProgramUniform1ui
        public static void glProgramUniform1ui(uint  program, int  location, uint  v0) => glProgramUniform1uiPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1uiDel(uint  program, int  location, uint  v0);
        private static glProgramUniform1uiDel glProgramUniform1uiPtr;
        
        // glProgramUniform1ui64ARB
        public static void glProgramUniform1ui64ARB(uint  program, int  location, ulong  x) => glProgramUniform1ui64ARBPtr?.Invoke(program, location, x);
        private delegate void glProgramUniform1ui64ARBDel(uint  program, int  location, ulong  x);
        private static glProgramUniform1ui64ARBDel glProgramUniform1ui64ARBPtr;
        
        // glProgramUniform1ui64NV
        public static void glProgramUniform1ui64NV(uint  program, int  location, ulong  x) => glProgramUniform1ui64NVPtr?.Invoke(program, location, x);
        private delegate void glProgramUniform1ui64NVDel(uint  program, int  location, ulong  x);
        private static glProgramUniform1ui64NVDel glProgramUniform1ui64NVPtr;
        
        // glProgramUniform1ui64vARB
        public static void glProgramUniform1ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform1ui64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1ui64vARBDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform1ui64vARBDel glProgramUniform1ui64vARBPtr;
        
        // glProgramUniform1ui64vNV
        public static void glProgramUniform1ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform1ui64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1ui64vNVDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform1ui64vNVDel glProgramUniform1ui64vNVPtr;
        
        // glProgramUniform1uiEXT
        public static void glProgramUniform1uiEXT(uint  program, int  location, uint  v0) => glProgramUniform1uiEXTPtr?.Invoke(program, location, v0);
        private delegate void glProgramUniform1uiEXTDel(uint  program, int  location, uint  v0);
        private static glProgramUniform1uiEXTDel glProgramUniform1uiEXTPtr;
        
        // glProgramUniform1uiv
        public static void glProgramUniform1uiv(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform1uivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1uivDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform1uivDel glProgramUniform1uivPtr;
        
        // glProgramUniform1uivEXT
        public static void glProgramUniform1uivEXT(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform1uivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform1uivEXTDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform1uivEXTDel glProgramUniform1uivEXTPtr;
        
        // glProgramUniform2d
        public static void glProgramUniform2d(uint  program, int  location, double  v0, double  v1) => glProgramUniform2dPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2dDel(uint  program, int  location, double  v0, double  v1);
        private static glProgramUniform2dDel glProgramUniform2dPtr;
        
        // glProgramUniform2dEXT
        public static void glProgramUniform2dEXT(uint  program, int  location, double  x, double  y) => glProgramUniform2dEXTPtr?.Invoke(program, location, x, y);
        private delegate void glProgramUniform2dEXTDel(uint  program, int  location, double  x, double  y);
        private static glProgramUniform2dEXTDel glProgramUniform2dEXTPtr;
        
        // glProgramUniform2dv
        public static void glProgramUniform2dv(uint  program, int  location, uint  count, double[]  value) => glProgramUniform2dvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2dvDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform2dvDel glProgramUniform2dvPtr;
        
        // glProgramUniform2dvEXT
        public static void glProgramUniform2dvEXT(uint  program, int  location, uint  count, double[]  value) => glProgramUniform2dvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2dvEXTDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform2dvEXTDel glProgramUniform2dvEXTPtr;
        
        // glProgramUniform2f
        public static void glProgramUniform2f(uint  program, int  location, float  v0, float  v1) => glProgramUniform2fPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2fDel(uint  program, int  location, float  v0, float  v1);
        private static glProgramUniform2fDel glProgramUniform2fPtr;
        
        // glProgramUniform2fEXT
        public static void glProgramUniform2fEXT(uint  program, int  location, float  v0, float  v1) => glProgramUniform2fEXTPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2fEXTDel(uint  program, int  location, float  v0, float  v1);
        private static glProgramUniform2fEXTDel glProgramUniform2fEXTPtr;
        
        // glProgramUniform2fv
        public static void glProgramUniform2fv(uint  program, int  location, uint  count, float[]  value) => glProgramUniform2fvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2fvDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform2fvDel glProgramUniform2fvPtr;
        
        // glProgramUniform2fvEXT
        public static void glProgramUniform2fvEXT(uint  program, int  location, uint  count, float[]  value) => glProgramUniform2fvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2fvEXTDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform2fvEXTDel glProgramUniform2fvEXTPtr;
        
        // glProgramUniform2i
        public static void glProgramUniform2i(uint  program, int  location, int  v0, int  v1) => glProgramUniform2iPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2iDel(uint  program, int  location, int  v0, int  v1);
        private static glProgramUniform2iDel glProgramUniform2iPtr;
        
        // glProgramUniform2i64ARB
        public static void glProgramUniform2i64ARB(uint  program, int  location, long  x, long  y) => glProgramUniform2i64ARBPtr?.Invoke(program, location, x, y);
        private delegate void glProgramUniform2i64ARBDel(uint  program, int  location, long  x, long  y);
        private static glProgramUniform2i64ARBDel glProgramUniform2i64ARBPtr;
        
        // glProgramUniform2i64NV
        public static void glProgramUniform2i64NV(uint  program, int  location, long  x, long  y) => glProgramUniform2i64NVPtr?.Invoke(program, location, x, y);
        private delegate void glProgramUniform2i64NVDel(uint  program, int  location, long  x, long  y);
        private static glProgramUniform2i64NVDel glProgramUniform2i64NVPtr;
        
        // glProgramUniform2i64vARB
        public static void glProgramUniform2i64vARB(uint  program, int  location, uint  count, long[]  value) => glProgramUniform2i64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2i64vARBDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform2i64vARBDel glProgramUniform2i64vARBPtr;
        
        // glProgramUniform2i64vNV
        public static void glProgramUniform2i64vNV(uint  program, int  location, uint  count, long[]  value) => glProgramUniform2i64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2i64vNVDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform2i64vNVDel glProgramUniform2i64vNVPtr;
        
        // glProgramUniform2iEXT
        public static void glProgramUniform2iEXT(uint  program, int  location, int  v0, int  v1) => glProgramUniform2iEXTPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2iEXTDel(uint  program, int  location, int  v0, int  v1);
        private static glProgramUniform2iEXTDel glProgramUniform2iEXTPtr;
        
        // glProgramUniform2iv
        public static void glProgramUniform2iv(uint  program, int  location, uint  count, int[]  value) => glProgramUniform2ivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2ivDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform2ivDel glProgramUniform2ivPtr;
        
        // glProgramUniform2ivEXT
        public static void glProgramUniform2ivEXT(uint  program, int  location, uint  count, int[]  value) => glProgramUniform2ivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2ivEXTDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform2ivEXTDel glProgramUniform2ivEXTPtr;
        
        // glProgramUniform2ui
        public static void glProgramUniform2ui(uint  program, int  location, uint  v0, uint  v1) => glProgramUniform2uiPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2uiDel(uint  program, int  location, uint  v0, uint  v1);
        private static glProgramUniform2uiDel glProgramUniform2uiPtr;
        
        // glProgramUniform2ui64ARB
        public static void glProgramUniform2ui64ARB(uint  program, int  location, ulong  x, ulong  y) => glProgramUniform2ui64ARBPtr?.Invoke(program, location, x, y);
        private delegate void glProgramUniform2ui64ARBDel(uint  program, int  location, ulong  x, ulong  y);
        private static glProgramUniform2ui64ARBDel glProgramUniform2ui64ARBPtr;
        
        // glProgramUniform2ui64NV
        public static void glProgramUniform2ui64NV(uint  program, int  location, ulong  x, ulong  y) => glProgramUniform2ui64NVPtr?.Invoke(program, location, x, y);
        private delegate void glProgramUniform2ui64NVDel(uint  program, int  location, ulong  x, ulong  y);
        private static glProgramUniform2ui64NVDel glProgramUniform2ui64NVPtr;
        
        // glProgramUniform2ui64vARB
        public static void glProgramUniform2ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform2ui64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2ui64vARBDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform2ui64vARBDel glProgramUniform2ui64vARBPtr;
        
        // glProgramUniform2ui64vNV
        public static void glProgramUniform2ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform2ui64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2ui64vNVDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform2ui64vNVDel glProgramUniform2ui64vNVPtr;
        
        // glProgramUniform2uiEXT
        public static void glProgramUniform2uiEXT(uint  program, int  location, uint  v0, uint  v1) => glProgramUniform2uiEXTPtr?.Invoke(program, location, v0, v1);
        private delegate void glProgramUniform2uiEXTDel(uint  program, int  location, uint  v0, uint  v1);
        private static glProgramUniform2uiEXTDel glProgramUniform2uiEXTPtr;
        
        // glProgramUniform2uiv
        public static void glProgramUniform2uiv(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform2uivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2uivDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform2uivDel glProgramUniform2uivPtr;
        
        // glProgramUniform2uivEXT
        public static void glProgramUniform2uivEXT(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform2uivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform2uivEXTDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform2uivEXTDel glProgramUniform2uivEXTPtr;
        
        // glProgramUniform3d
        public static void glProgramUniform3d(uint  program, int  location, double  v0, double  v1, double  v2) => glProgramUniform3dPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3dDel(uint  program, int  location, double  v0, double  v1, double  v2);
        private static glProgramUniform3dDel glProgramUniform3dPtr;
        
        // glProgramUniform3dEXT
        public static void glProgramUniform3dEXT(uint  program, int  location, double  x, double  y, double  z) => glProgramUniform3dEXTPtr?.Invoke(program, location, x, y, z);
        private delegate void glProgramUniform3dEXTDel(uint  program, int  location, double  x, double  y, double  z);
        private static glProgramUniform3dEXTDel glProgramUniform3dEXTPtr;
        
        // glProgramUniform3dv
        public static void glProgramUniform3dv(uint  program, int  location, uint  count, double[]  value) => glProgramUniform3dvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3dvDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform3dvDel glProgramUniform3dvPtr;
        
        // glProgramUniform3dvEXT
        public static void glProgramUniform3dvEXT(uint  program, int  location, uint  count, double[]  value) => glProgramUniform3dvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3dvEXTDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform3dvEXTDel glProgramUniform3dvEXTPtr;
        
        // glProgramUniform3f
        public static void glProgramUniform3f(uint  program, int  location, float  v0, float  v1, float  v2) => glProgramUniform3fPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3fDel(uint  program, int  location, float  v0, float  v1, float  v2);
        private static glProgramUniform3fDel glProgramUniform3fPtr;
        
        // glProgramUniform3fEXT
        public static void glProgramUniform3fEXT(uint  program, int  location, float  v0, float  v1, float  v2) => glProgramUniform3fEXTPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3fEXTDel(uint  program, int  location, float  v0, float  v1, float  v2);
        private static glProgramUniform3fEXTDel glProgramUniform3fEXTPtr;
        
        // glProgramUniform3fv
        public static void glProgramUniform3fv(uint  program, int  location, uint  count, float[]  value) => glProgramUniform3fvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3fvDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform3fvDel glProgramUniform3fvPtr;
        
        // glProgramUniform3fvEXT
        public static void glProgramUniform3fvEXT(uint  program, int  location, uint  count, float[]  value) => glProgramUniform3fvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3fvEXTDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform3fvEXTDel glProgramUniform3fvEXTPtr;
        
        // glProgramUniform3i
        public static void glProgramUniform3i(uint  program, int  location, int  v0, int  v1, int  v2) => glProgramUniform3iPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3iDel(uint  program, int  location, int  v0, int  v1, int  v2);
        private static glProgramUniform3iDel glProgramUniform3iPtr;
        
        // glProgramUniform3i64ARB
        public static void glProgramUniform3i64ARB(uint  program, int  location, long  x, long  y, long  z) => glProgramUniform3i64ARBPtr?.Invoke(program, location, x, y, z);
        private delegate void glProgramUniform3i64ARBDel(uint  program, int  location, long  x, long  y, long  z);
        private static glProgramUniform3i64ARBDel glProgramUniform3i64ARBPtr;
        
        // glProgramUniform3i64NV
        public static void glProgramUniform3i64NV(uint  program, int  location, long  x, long  y, long  z) => glProgramUniform3i64NVPtr?.Invoke(program, location, x, y, z);
        private delegate void glProgramUniform3i64NVDel(uint  program, int  location, long  x, long  y, long  z);
        private static glProgramUniform3i64NVDel glProgramUniform3i64NVPtr;
        
        // glProgramUniform3i64vARB
        public static void glProgramUniform3i64vARB(uint  program, int  location, uint  count, long[]  value) => glProgramUniform3i64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3i64vARBDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform3i64vARBDel glProgramUniform3i64vARBPtr;
        
        // glProgramUniform3i64vNV
        public static void glProgramUniform3i64vNV(uint  program, int  location, uint  count, long[]  value) => glProgramUniform3i64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3i64vNVDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform3i64vNVDel glProgramUniform3i64vNVPtr;
        
        // glProgramUniform3iEXT
        public static void glProgramUniform3iEXT(uint  program, int  location, int  v0, int  v1, int  v2) => glProgramUniform3iEXTPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3iEXTDel(uint  program, int  location, int  v0, int  v1, int  v2);
        private static glProgramUniform3iEXTDel glProgramUniform3iEXTPtr;
        
        // glProgramUniform3iv
        public static void glProgramUniform3iv(uint  program, int  location, uint  count, int[]  value) => glProgramUniform3ivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3ivDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform3ivDel glProgramUniform3ivPtr;
        
        // glProgramUniform3ivEXT
        public static void glProgramUniform3ivEXT(uint  program, int  location, uint  count, int[]  value) => glProgramUniform3ivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3ivEXTDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform3ivEXTDel glProgramUniform3ivEXTPtr;
        
        // glProgramUniform3ui
        public static void glProgramUniform3ui(uint  program, int  location, uint  v0, uint  v1, uint  v2) => glProgramUniform3uiPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3uiDel(uint  program, int  location, uint  v0, uint  v1, uint  v2);
        private static glProgramUniform3uiDel glProgramUniform3uiPtr;
        
        // glProgramUniform3ui64ARB
        public static void glProgramUniform3ui64ARB(uint  program, int  location, ulong  x, ulong  y, ulong  z) => glProgramUniform3ui64ARBPtr?.Invoke(program, location, x, y, z);
        private delegate void glProgramUniform3ui64ARBDel(uint  program, int  location, ulong  x, ulong  y, ulong  z);
        private static glProgramUniform3ui64ARBDel glProgramUniform3ui64ARBPtr;
        
        // glProgramUniform3ui64NV
        public static void glProgramUniform3ui64NV(uint  program, int  location, ulong  x, ulong  y, ulong  z) => glProgramUniform3ui64NVPtr?.Invoke(program, location, x, y, z);
        private delegate void glProgramUniform3ui64NVDel(uint  program, int  location, ulong  x, ulong  y, ulong  z);
        private static glProgramUniform3ui64NVDel glProgramUniform3ui64NVPtr;
        
        // glProgramUniform3ui64vARB
        public static void glProgramUniform3ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform3ui64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3ui64vARBDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform3ui64vARBDel glProgramUniform3ui64vARBPtr;
        
        // glProgramUniform3ui64vNV
        public static void glProgramUniform3ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform3ui64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3ui64vNVDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform3ui64vNVDel glProgramUniform3ui64vNVPtr;
        
        // glProgramUniform3uiEXT
        public static void glProgramUniform3uiEXT(uint  program, int  location, uint  v0, uint  v1, uint  v2) => glProgramUniform3uiEXTPtr?.Invoke(program, location, v0, v1, v2);
        private delegate void glProgramUniform3uiEXTDel(uint  program, int  location, uint  v0, uint  v1, uint  v2);
        private static glProgramUniform3uiEXTDel glProgramUniform3uiEXTPtr;
        
        // glProgramUniform3uiv
        public static void glProgramUniform3uiv(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform3uivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3uivDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform3uivDel glProgramUniform3uivPtr;
        
        // glProgramUniform3uivEXT
        public static void glProgramUniform3uivEXT(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform3uivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform3uivEXTDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform3uivEXTDel glProgramUniform3uivEXTPtr;
        
        // glProgramUniform4d
        public static void glProgramUniform4d(uint  program, int  location, double  v0, double  v1, double  v2, double  v3) => glProgramUniform4dPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4dDel(uint  program, int  location, double  v0, double  v1, double  v2, double  v3);
        private static glProgramUniform4dDel glProgramUniform4dPtr;
        
        // glProgramUniform4dEXT
        public static void glProgramUniform4dEXT(uint  program, int  location, double  x, double  y, double  z, double  w) => glProgramUniform4dEXTPtr?.Invoke(program, location, x, y, z, w);
        private delegate void glProgramUniform4dEXTDel(uint  program, int  location, double  x, double  y, double  z, double  w);
        private static glProgramUniform4dEXTDel glProgramUniform4dEXTPtr;
        
        // glProgramUniform4dv
        public static void glProgramUniform4dv(uint  program, int  location, uint  count, double[]  value) => glProgramUniform4dvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4dvDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform4dvDel glProgramUniform4dvPtr;
        
        // glProgramUniform4dvEXT
        public static void glProgramUniform4dvEXT(uint  program, int  location, uint  count, double[]  value) => glProgramUniform4dvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4dvEXTDel(uint  program, int  location, uint  count, double[]  value);
        private static glProgramUniform4dvEXTDel glProgramUniform4dvEXTPtr;
        
        // glProgramUniform4f
        public static void glProgramUniform4f(uint  program, int  location, float  v0, float  v1, float  v2, float  v3) => glProgramUniform4fPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4fDel(uint  program, int  location, float  v0, float  v1, float  v2, float  v3);
        private static glProgramUniform4fDel glProgramUniform4fPtr;
        
        // glProgramUniform4fEXT
        public static void glProgramUniform4fEXT(uint  program, int  location, float  v0, float  v1, float  v2, float  v3) => glProgramUniform4fEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4fEXTDel(uint  program, int  location, float  v0, float  v1, float  v2, float  v3);
        private static glProgramUniform4fEXTDel glProgramUniform4fEXTPtr;
        
        // glProgramUniform4fv
        public static void glProgramUniform4fv(uint  program, int  location, uint  count, float[]  value) => glProgramUniform4fvPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4fvDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform4fvDel glProgramUniform4fvPtr;
        
        // glProgramUniform4fvEXT
        public static void glProgramUniform4fvEXT(uint  program, int  location, uint  count, float[]  value) => glProgramUniform4fvEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4fvEXTDel(uint  program, int  location, uint  count, float[]  value);
        private static glProgramUniform4fvEXTDel glProgramUniform4fvEXTPtr;
        
        // glProgramUniform4i
        public static void glProgramUniform4i(uint  program, int  location, int  v0, int  v1, int  v2, int  v3) => glProgramUniform4iPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4iDel(uint  program, int  location, int  v0, int  v1, int  v2, int  v3);
        private static glProgramUniform4iDel glProgramUniform4iPtr;
        
        // glProgramUniform4i64ARB
        public static void glProgramUniform4i64ARB(uint  program, int  location, long  x, long  y, long  z, long  w) => glProgramUniform4i64ARBPtr?.Invoke(program, location, x, y, z, w);
        private delegate void glProgramUniform4i64ARBDel(uint  program, int  location, long  x, long  y, long  z, long  w);
        private static glProgramUniform4i64ARBDel glProgramUniform4i64ARBPtr;
        
        // glProgramUniform4i64NV
        public static void glProgramUniform4i64NV(uint  program, int  location, long  x, long  y, long  z, long  w) => glProgramUniform4i64NVPtr?.Invoke(program, location, x, y, z, w);
        private delegate void glProgramUniform4i64NVDel(uint  program, int  location, long  x, long  y, long  z, long  w);
        private static glProgramUniform4i64NVDel glProgramUniform4i64NVPtr;
        
        // glProgramUniform4i64vARB
        public static void glProgramUniform4i64vARB(uint  program, int  location, uint  count, long[]  value) => glProgramUniform4i64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4i64vARBDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform4i64vARBDel glProgramUniform4i64vARBPtr;
        
        // glProgramUniform4i64vNV
        public static void glProgramUniform4i64vNV(uint  program, int  location, uint  count, long[]  value) => glProgramUniform4i64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4i64vNVDel(uint  program, int  location, uint  count, long[]  value);
        private static glProgramUniform4i64vNVDel glProgramUniform4i64vNVPtr;
        
        // glProgramUniform4iEXT
        public static void glProgramUniform4iEXT(uint  program, int  location, int  v0, int  v1, int  v2, int  v3) => glProgramUniform4iEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4iEXTDel(uint  program, int  location, int  v0, int  v1, int  v2, int  v3);
        private static glProgramUniform4iEXTDel glProgramUniform4iEXTPtr;
        
        // glProgramUniform4iv
        public static void glProgramUniform4iv(uint  program, int  location, uint  count, int[]  value) => glProgramUniform4ivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4ivDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform4ivDel glProgramUniform4ivPtr;
        
        // glProgramUniform4ivEXT
        public static void glProgramUniform4ivEXT(uint  program, int  location, uint  count, int[]  value) => glProgramUniform4ivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4ivEXTDel(uint  program, int  location, uint  count, int[]  value);
        private static glProgramUniform4ivEXTDel glProgramUniform4ivEXTPtr;
        
        // glProgramUniform4ui
        public static void glProgramUniform4ui(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3) => glProgramUniform4uiPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4uiDel(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3);
        private static glProgramUniform4uiDel glProgramUniform4uiPtr;
        
        // glProgramUniform4ui64ARB
        public static void glProgramUniform4ui64ARB(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w) => glProgramUniform4ui64ARBPtr?.Invoke(program, location, x, y, z, w);
        private delegate void glProgramUniform4ui64ARBDel(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w);
        private static glProgramUniform4ui64ARBDel glProgramUniform4ui64ARBPtr;
        
        // glProgramUniform4ui64NV
        public static void glProgramUniform4ui64NV(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w) => glProgramUniform4ui64NVPtr?.Invoke(program, location, x, y, z, w);
        private delegate void glProgramUniform4ui64NVDel(uint  program, int  location, ulong  x, ulong  y, ulong  z, ulong  w);
        private static glProgramUniform4ui64NVDel glProgramUniform4ui64NVPtr;
        
        // glProgramUniform4ui64vARB
        public static void glProgramUniform4ui64vARB(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform4ui64vARBPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4ui64vARBDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform4ui64vARBDel glProgramUniform4ui64vARBPtr;
        
        // glProgramUniform4ui64vNV
        public static void glProgramUniform4ui64vNV(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniform4ui64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4ui64vNVDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniform4ui64vNVDel glProgramUniform4ui64vNVPtr;
        
        // glProgramUniform4uiEXT
        public static void glProgramUniform4uiEXT(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3) => glProgramUniform4uiEXTPtr?.Invoke(program, location, v0, v1, v2, v3);
        private delegate void glProgramUniform4uiEXTDel(uint  program, int  location, uint  v0, uint  v1, uint  v2, uint  v3);
        private static glProgramUniform4uiEXTDel glProgramUniform4uiEXTPtr;
        
        // glProgramUniform4uiv
        public static void glProgramUniform4uiv(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform4uivPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4uivDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform4uivDel glProgramUniform4uivPtr;
        
        // glProgramUniform4uivEXT
        public static void glProgramUniform4uivEXT(uint  program, int  location, uint  count, uint[]  value) => glProgramUniform4uivEXTPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniform4uivEXTDel(uint  program, int  location, uint  count, uint[]  value);
        private static glProgramUniform4uivEXTDel glProgramUniform4uivEXTPtr;
        
        // glProgramUniformHandleui64ARB
        public static void glProgramUniformHandleui64ARB(uint  program, int  location, ulong  value) => glProgramUniformHandleui64ARBPtr?.Invoke(program, location, value);
        private delegate void glProgramUniformHandleui64ARBDel(uint  program, int  location, ulong  value);
        private static glProgramUniformHandleui64ARBDel glProgramUniformHandleui64ARBPtr;
        
        // glProgramUniformHandleui64IMG
        public static void glProgramUniformHandleui64IMG(uint  program, int  location, ulong  value) => glProgramUniformHandleui64IMGPtr?.Invoke(program, location, value);
        private delegate void glProgramUniformHandleui64IMGDel(uint  program, int  location, ulong  value);
        private static glProgramUniformHandleui64IMGDel glProgramUniformHandleui64IMGPtr;
        
        // glProgramUniformHandleui64NV
        public static void glProgramUniformHandleui64NV(uint  program, int  location, ulong  value) => glProgramUniformHandleui64NVPtr?.Invoke(program, location, value);
        private delegate void glProgramUniformHandleui64NVDel(uint  program, int  location, ulong  value);
        private static glProgramUniformHandleui64NVDel glProgramUniformHandleui64NVPtr;
        
        // glProgramUniformHandleui64vARB
        public static void glProgramUniformHandleui64vARB(uint  program, int  location, uint  count, ulong[]  values) => glProgramUniformHandleui64vARBPtr?.Invoke(program, location, count, values);
        private delegate void glProgramUniformHandleui64vARBDel(uint  program, int  location, uint  count, ulong[]  values);
        private static glProgramUniformHandleui64vARBDel glProgramUniformHandleui64vARBPtr;
        
        // glProgramUniformHandleui64vIMG
        public static void glProgramUniformHandleui64vIMG(uint  program, int  location, uint  count, ulong[]  values) => glProgramUniformHandleui64vIMGPtr?.Invoke(program, location, count, values);
        private delegate void glProgramUniformHandleui64vIMGDel(uint  program, int  location, uint  count, ulong[]  values);
        private static glProgramUniformHandleui64vIMGDel glProgramUniformHandleui64vIMGPtr;
        
        // glProgramUniformHandleui64vNV
        public static void glProgramUniformHandleui64vNV(uint  program, int  location, uint  count, ulong[]  values) => glProgramUniformHandleui64vNVPtr?.Invoke(program, location, count, values);
        private delegate void glProgramUniformHandleui64vNVDel(uint  program, int  location, uint  count, ulong[]  values);
        private static glProgramUniformHandleui64vNVDel glProgramUniformHandleui64vNVPtr;
        
        // glProgramUniformMatrix2dv
        public static void glProgramUniformMatrix2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2dvDel glProgramUniformMatrix2dvPtr;
        
        // glProgramUniformMatrix2dvEXT
        public static void glProgramUniformMatrix2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2dvEXTDel glProgramUniformMatrix2dvEXTPtr;
        
        // glProgramUniformMatrix2fv
        public static void glProgramUniformMatrix2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2fvDel glProgramUniformMatrix2fvPtr;
        
        // glProgramUniformMatrix2fvEXT
        public static void glProgramUniformMatrix2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2fvEXTDel glProgramUniformMatrix2fvEXTPtr;
        
        // glProgramUniformMatrix2x3dv
        public static void glProgramUniformMatrix2x3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2x3dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x3dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2x3dvDel glProgramUniformMatrix2x3dvPtr;
        
        // glProgramUniformMatrix2x3dvEXT
        public static void glProgramUniformMatrix2x3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2x3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x3dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2x3dvEXTDel glProgramUniformMatrix2x3dvEXTPtr;
        
        // glProgramUniformMatrix2x3fv
        public static void glProgramUniformMatrix2x3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2x3fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x3fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2x3fvDel glProgramUniformMatrix2x3fvPtr;
        
        // glProgramUniformMatrix2x3fvEXT
        public static void glProgramUniformMatrix2x3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2x3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x3fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2x3fvEXTDel glProgramUniformMatrix2x3fvEXTPtr;
        
        // glProgramUniformMatrix2x4dv
        public static void glProgramUniformMatrix2x4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2x4dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x4dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2x4dvDel glProgramUniformMatrix2x4dvPtr;
        
        // glProgramUniformMatrix2x4dvEXT
        public static void glProgramUniformMatrix2x4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix2x4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x4dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix2x4dvEXTDel glProgramUniformMatrix2x4dvEXTPtr;
        
        // glProgramUniformMatrix2x4fv
        public static void glProgramUniformMatrix2x4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2x4fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x4fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2x4fvDel glProgramUniformMatrix2x4fvPtr;
        
        // glProgramUniformMatrix2x4fvEXT
        public static void glProgramUniformMatrix2x4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix2x4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix2x4fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix2x4fvEXTDel glProgramUniformMatrix2x4fvEXTPtr;
        
        // glProgramUniformMatrix3dv
        public static void glProgramUniformMatrix3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3dvDel glProgramUniformMatrix3dvPtr;
        
        // glProgramUniformMatrix3dvEXT
        public static void glProgramUniformMatrix3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3dvEXTDel glProgramUniformMatrix3dvEXTPtr;
        
        // glProgramUniformMatrix3fv
        public static void glProgramUniformMatrix3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3fvDel glProgramUniformMatrix3fvPtr;
        
        // glProgramUniformMatrix3fvEXT
        public static void glProgramUniformMatrix3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3fvEXTDel glProgramUniformMatrix3fvEXTPtr;
        
        // glProgramUniformMatrix3x2dv
        public static void glProgramUniformMatrix3x2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3x2dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x2dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3x2dvDel glProgramUniformMatrix3x2dvPtr;
        
        // glProgramUniformMatrix3x2dvEXT
        public static void glProgramUniformMatrix3x2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3x2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x2dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3x2dvEXTDel glProgramUniformMatrix3x2dvEXTPtr;
        
        // glProgramUniformMatrix3x2fv
        public static void glProgramUniformMatrix3x2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3x2fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x2fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3x2fvDel glProgramUniformMatrix3x2fvPtr;
        
        // glProgramUniformMatrix3x2fvEXT
        public static void glProgramUniformMatrix3x2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3x2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x2fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3x2fvEXTDel glProgramUniformMatrix3x2fvEXTPtr;
        
        // glProgramUniformMatrix3x4dv
        public static void glProgramUniformMatrix3x4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3x4dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x4dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3x4dvDel glProgramUniformMatrix3x4dvPtr;
        
        // glProgramUniformMatrix3x4dvEXT
        public static void glProgramUniformMatrix3x4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix3x4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x4dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix3x4dvEXTDel glProgramUniformMatrix3x4dvEXTPtr;
        
        // glProgramUniformMatrix3x4fv
        public static void glProgramUniformMatrix3x4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3x4fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x4fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3x4fvDel glProgramUniformMatrix3x4fvPtr;
        
        // glProgramUniformMatrix3x4fvEXT
        public static void glProgramUniformMatrix3x4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix3x4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix3x4fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix3x4fvEXTDel glProgramUniformMatrix3x4fvEXTPtr;
        
        // glProgramUniformMatrix4dv
        public static void glProgramUniformMatrix4dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4dvDel glProgramUniformMatrix4dvPtr;
        
        // glProgramUniformMatrix4dvEXT
        public static void glProgramUniformMatrix4dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4dvEXTDel glProgramUniformMatrix4dvEXTPtr;
        
        // glProgramUniformMatrix4fv
        public static void glProgramUniformMatrix4fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4fvDel glProgramUniformMatrix4fvPtr;
        
        // glProgramUniformMatrix4fvEXT
        public static void glProgramUniformMatrix4fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4fvEXTDel glProgramUniformMatrix4fvEXTPtr;
        
        // glProgramUniformMatrix4x2dv
        public static void glProgramUniformMatrix4x2dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4x2dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x2dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4x2dvDel glProgramUniformMatrix4x2dvPtr;
        
        // glProgramUniformMatrix4x2dvEXT
        public static void glProgramUniformMatrix4x2dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4x2dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x2dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4x2dvEXTDel glProgramUniformMatrix4x2dvEXTPtr;
        
        // glProgramUniformMatrix4x2fv
        public static void glProgramUniformMatrix4x2fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4x2fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x2fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4x2fvDel glProgramUniformMatrix4x2fvPtr;
        
        // glProgramUniformMatrix4x2fvEXT
        public static void glProgramUniformMatrix4x2fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4x2fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x2fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4x2fvEXTDel glProgramUniformMatrix4x2fvEXTPtr;
        
        // glProgramUniformMatrix4x3dv
        public static void glProgramUniformMatrix4x3dv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4x3dvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x3dvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4x3dvDel glProgramUniformMatrix4x3dvPtr;
        
        // glProgramUniformMatrix4x3dvEXT
        public static void glProgramUniformMatrix4x3dvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glProgramUniformMatrix4x3dvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x3dvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glProgramUniformMatrix4x3dvEXTDel glProgramUniformMatrix4x3dvEXTPtr;
        
        // glProgramUniformMatrix4x3fv
        public static void glProgramUniformMatrix4x3fv(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4x3fvPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x3fvDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4x3fvDel glProgramUniformMatrix4x3fvPtr;
        
        // glProgramUniformMatrix4x3fvEXT
        public static void glProgramUniformMatrix4x3fvEXT(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glProgramUniformMatrix4x3fvEXTPtr?.Invoke(program, location, count, transpose, value);
        private delegate void glProgramUniformMatrix4x3fvEXTDel(uint  program, int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glProgramUniformMatrix4x3fvEXTDel glProgramUniformMatrix4x3fvEXTPtr;
        
        // glProgramUniformui64NV
        public static void glProgramUniformui64NV(uint  program, int  location, ulong  value) => glProgramUniformui64NVPtr?.Invoke(program, location, value);
        private delegate void glProgramUniformui64NVDel(uint  program, int  location, ulong  value);
        private static glProgramUniformui64NVDel glProgramUniformui64NVPtr;
        
        // glProgramUniformui64vNV
        public static void glProgramUniformui64vNV(uint  program, int  location, uint  count, ulong[]  value) => glProgramUniformui64vNVPtr?.Invoke(program, location, count, value);
        private delegate void glProgramUniformui64vNVDel(uint  program, int  location, uint  count, ulong[]  value);
        private static glProgramUniformui64vNVDel glProgramUniformui64vNVPtr;
        
        // glProgramVertexLimitNV
        public static void glProgramVertexLimitNV(uint /*ProgramTarget*/  target, int  limit) => glProgramVertexLimitNVPtr?.Invoke(target, limit);
        private delegate void glProgramVertexLimitNVDel(uint /*ProgramTarget*/  target, int  limit);
        private static glProgramVertexLimitNVDel glProgramVertexLimitNVPtr;
        
        // glProvokingVertex
        public static void glProvokingVertex(uint /*VertexProvokingMode*/  mode) => glProvokingVertexPtr?.Invoke(mode);
        private delegate void glProvokingVertexDel(uint /*VertexProvokingMode*/  mode);
        private static glProvokingVertexDel glProvokingVertexPtr;
        
        // glProvokingVertexEXT
        public static void glProvokingVertexEXT(uint /*VertexProvokingMode*/  mode) => glProvokingVertexEXTPtr?.Invoke(mode);
        private delegate void glProvokingVertexEXTDel(uint /*VertexProvokingMode*/  mode);
        private static glProvokingVertexEXTDel glProvokingVertexEXTPtr;
        
        // glPushAttrib
        public static void glPushAttrib(uint /*AttribMask*/  mask) => glPushAttribPtr?.Invoke(mask);
        private delegate void glPushAttribDel(uint /*AttribMask*/  mask);
        private static glPushAttribDel glPushAttribPtr;
        
        // glPushClientAttrib
        public static void glPushClientAttrib(uint /*ClientAttribMask*/  mask) => glPushClientAttribPtr?.Invoke(mask);
        private delegate void glPushClientAttribDel(uint /*ClientAttribMask*/  mask);
        private static glPushClientAttribDel glPushClientAttribPtr;
        
        // glPushClientAttribDefaultEXT
        public static void glPushClientAttribDefaultEXT(uint /*ClientAttribMask*/  mask) => glPushClientAttribDefaultEXTPtr?.Invoke(mask);
        private delegate void glPushClientAttribDefaultEXTDel(uint /*ClientAttribMask*/  mask);
        private static glPushClientAttribDefaultEXTDel glPushClientAttribDefaultEXTPtr;
        
        // glPushDebugGroup
        public static void glPushDebugGroup(uint /*DebugSource*/  source, uint  id, uint  length, string  message) => glPushDebugGroupPtr?.Invoke(source, id, length, message);
        private delegate void glPushDebugGroupDel(uint /*DebugSource*/  source, uint  id, uint  length, string  message);
        private static glPushDebugGroupDel glPushDebugGroupPtr;
        
        // glPushDebugGroupKHR
        public static void glPushDebugGroupKHR(uint /*DebugSource*/  source, uint  id, uint  length, string  message) => glPushDebugGroupKHRPtr?.Invoke(source, id, length, message);
        private delegate void glPushDebugGroupKHRDel(uint /*DebugSource*/  source, uint  id, uint  length, string  message);
        private static glPushDebugGroupKHRDel glPushDebugGroupKHRPtr;
        
        // glPushGroupMarkerEXT
        public static void glPushGroupMarkerEXT(uint  length, string  marker) => glPushGroupMarkerEXTPtr?.Invoke(length, marker);
        private delegate void glPushGroupMarkerEXTDel(uint  length, string  marker);
        private static glPushGroupMarkerEXTDel glPushGroupMarkerEXTPtr;
        
        // glPushMatrix
        public static void glPushMatrix() => glPushMatrixPtr?.Invoke();
        private delegate void glPushMatrixDel();
        private static glPushMatrixDel glPushMatrixPtr;
        
        // glPushName
        public static void glPushName(uint /*SelectName*/  name) => glPushNamePtr?.Invoke(name);
        private delegate void glPushNameDel(uint /*SelectName*/  name);
        private static glPushNameDel glPushNamePtr;
        
        // glQueryCounter
        public static void glQueryCounter(uint  id, uint /*QueryCounterTarget*/  target) => glQueryCounterPtr?.Invoke(id, target);
        private delegate void glQueryCounterDel(uint  id, uint /*QueryCounterTarget*/  target);
        private static glQueryCounterDel glQueryCounterPtr;
        
        // glQueryCounterEXT
        public static void glQueryCounterEXT(uint  id, uint /*QueryCounterTarget*/  target) => glQueryCounterEXTPtr?.Invoke(id, target);
        private delegate void glQueryCounterEXTDel(uint  id, uint /*QueryCounterTarget*/  target);
        private static glQueryCounterEXTDel glQueryCounterEXTPtr;
        
        // glQueryMatrixxOES
        public static uint glQueryMatrixxOES(int[]  mantissa, int[]  exponent) => glQueryMatrixxOESPtr?.Invoke(mantissa, exponent) ?? default;
        private delegate uint glQueryMatrixxOESDel(int[]  mantissa, int[]  exponent);
        private static glQueryMatrixxOESDel glQueryMatrixxOESPtr;
        
        // glQueryObjectParameteruiAMD
        public static void glQueryObjectParameteruiAMD(uint /*QueryTarget*/  target, uint  id, uint  pname, uint /*OcclusionQueryEventMaskAMD*/  param) => glQueryObjectParameteruiAMDPtr?.Invoke(target, id, pname, param);
        private delegate void glQueryObjectParameteruiAMDDel(uint /*QueryTarget*/  target, uint  id, uint  pname, uint /*OcclusionQueryEventMaskAMD*/  param);
        private static glQueryObjectParameteruiAMDDel glQueryObjectParameteruiAMDPtr;
        
        // glQueryResourceNV
        public static int glQueryResourceNV(uint  queryType, int  tagId, uint  count, int[]  buffer) => glQueryResourceNVPtr?.Invoke(queryType, tagId, count, buffer) ?? default;
        private delegate int glQueryResourceNVDel(uint  queryType, int  tagId, uint  count, int[]  buffer);
        private static glQueryResourceNVDel glQueryResourceNVPtr;
        
        // glQueryResourceTagNV
        public static void glQueryResourceTagNV(int  tagId, string  tagString) => glQueryResourceTagNVPtr?.Invoke(tagId, tagString);
        private delegate void glQueryResourceTagNVDel(int  tagId, string  tagString);
        private static glQueryResourceTagNVDel glQueryResourceTagNVPtr;
        
        // glRasterPos2d
        public static void glRasterPos2d(double /*CoordD*/  x, double /*CoordD*/  y) => glRasterPos2dPtr?.Invoke(x, y);
        private delegate void glRasterPos2dDel(double /*CoordD*/  x, double /*CoordD*/  y);
        private static glRasterPos2dDel glRasterPos2dPtr;
        
        // glRasterPos2dv
        public static void glRasterPos2dv(double[] /*CoordD*/  v) => glRasterPos2dvPtr?.Invoke(v);
        private delegate void glRasterPos2dvDel(double[] /*CoordD*/  v);
        private static glRasterPos2dvDel glRasterPos2dvPtr;
        
        // glRasterPos2f
        public static void glRasterPos2f(float /*CoordF*/  x, float /*CoordF*/  y) => glRasterPos2fPtr?.Invoke(x, y);
        private delegate void glRasterPos2fDel(float /*CoordF*/  x, float /*CoordF*/  y);
        private static glRasterPos2fDel glRasterPos2fPtr;
        
        // glRasterPos2fv
        public static void glRasterPos2fv(float[] /*CoordF*/  v) => glRasterPos2fvPtr?.Invoke(v);
        private delegate void glRasterPos2fvDel(float[] /*CoordF*/  v);
        private static glRasterPos2fvDel glRasterPos2fvPtr;
        
        // glRasterPos2i
        public static void glRasterPos2i(int /*CoordI*/  x, int /*CoordI*/  y) => glRasterPos2iPtr?.Invoke(x, y);
        private delegate void glRasterPos2iDel(int /*CoordI*/  x, int /*CoordI*/  y);
        private static glRasterPos2iDel glRasterPos2iPtr;
        
        // glRasterPos2iv
        public static void glRasterPos2iv(int[] /*CoordI*/  v) => glRasterPos2ivPtr?.Invoke(v);
        private delegate void glRasterPos2ivDel(int[] /*CoordI*/  v);
        private static glRasterPos2ivDel glRasterPos2ivPtr;
        
        // glRasterPos2s
        public static void glRasterPos2s(short /*CoordS*/  x, short /*CoordS*/  y) => glRasterPos2sPtr?.Invoke(x, y);
        private delegate void glRasterPos2sDel(short /*CoordS*/  x, short /*CoordS*/  y);
        private static glRasterPos2sDel glRasterPos2sPtr;
        
        // glRasterPos2sv
        public static void glRasterPos2sv(short[] /*CoordS*/  v) => glRasterPos2svPtr?.Invoke(v);
        private delegate void glRasterPos2svDel(short[] /*CoordS*/  v);
        private static glRasterPos2svDel glRasterPos2svPtr;
        
        // glRasterPos2xOES
        public static void glRasterPos2xOES(int  x, int  y) => glRasterPos2xOESPtr?.Invoke(x, y);
        private delegate void glRasterPos2xOESDel(int  x, int  y);
        private static glRasterPos2xOESDel glRasterPos2xOESPtr;
        
        // glRasterPos2xvOES
        public static void glRasterPos2xvOES(int[]  coords) => glRasterPos2xvOESPtr?.Invoke(coords);
        private delegate void glRasterPos2xvOESDel(int[]  coords);
        private static glRasterPos2xvOESDel glRasterPos2xvOESPtr;
        
        // glRasterPos3d
        public static void glRasterPos3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => glRasterPos3dPtr?.Invoke(x, y, z);
        private delegate void glRasterPos3dDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z);
        private static glRasterPos3dDel glRasterPos3dPtr;
        
        // glRasterPos3dv
        public static void glRasterPos3dv(double[] /*CoordD*/  v) => glRasterPos3dvPtr?.Invoke(v);
        private delegate void glRasterPos3dvDel(double[] /*CoordD*/  v);
        private static glRasterPos3dvDel glRasterPos3dvPtr;
        
        // glRasterPos3f
        public static void glRasterPos3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => glRasterPos3fPtr?.Invoke(x, y, z);
        private delegate void glRasterPos3fDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z);
        private static glRasterPos3fDel glRasterPos3fPtr;
        
        // glRasterPos3fv
        public static void glRasterPos3fv(float[] /*CoordF*/  v) => glRasterPos3fvPtr?.Invoke(v);
        private delegate void glRasterPos3fvDel(float[] /*CoordF*/  v);
        private static glRasterPos3fvDel glRasterPos3fvPtr;
        
        // glRasterPos3i
        public static void glRasterPos3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => glRasterPos3iPtr?.Invoke(x, y, z);
        private delegate void glRasterPos3iDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z);
        private static glRasterPos3iDel glRasterPos3iPtr;
        
        // glRasterPos3iv
        public static void glRasterPos3iv(int[] /*CoordI*/  v) => glRasterPos3ivPtr?.Invoke(v);
        private delegate void glRasterPos3ivDel(int[] /*CoordI*/  v);
        private static glRasterPos3ivDel glRasterPos3ivPtr;
        
        // glRasterPos3s
        public static void glRasterPos3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => glRasterPos3sPtr?.Invoke(x, y, z);
        private delegate void glRasterPos3sDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z);
        private static glRasterPos3sDel glRasterPos3sPtr;
        
        // glRasterPos3sv
        public static void glRasterPos3sv(short[] /*CoordS*/  v) => glRasterPos3svPtr?.Invoke(v);
        private delegate void glRasterPos3svDel(short[] /*CoordS*/  v);
        private static glRasterPos3svDel glRasterPos3svPtr;
        
        // glRasterPos3xOES
        public static void glRasterPos3xOES(int  x, int  y, int  z) => glRasterPos3xOESPtr?.Invoke(x, y, z);
        private delegate void glRasterPos3xOESDel(int  x, int  y, int  z);
        private static glRasterPos3xOESDel glRasterPos3xOESPtr;
        
        // glRasterPos3xvOES
        public static void glRasterPos3xvOES(int[]  coords) => glRasterPos3xvOESPtr?.Invoke(coords);
        private delegate void glRasterPos3xvOESDel(int[]  coords);
        private static glRasterPos3xvOESDel glRasterPos3xvOESPtr;
        
        // glRasterPos4d
        public static void glRasterPos4d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => glRasterPos4dPtr?.Invoke(x, y, z, w);
        private delegate void glRasterPos4dDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w);
        private static glRasterPos4dDel glRasterPos4dPtr;
        
        // glRasterPos4dv
        public static void glRasterPos4dv(double[] /*CoordD*/  v) => glRasterPos4dvPtr?.Invoke(v);
        private delegate void glRasterPos4dvDel(double[] /*CoordD*/  v);
        private static glRasterPos4dvDel glRasterPos4dvPtr;
        
        // glRasterPos4f
        public static void glRasterPos4f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => glRasterPos4fPtr?.Invoke(x, y, z, w);
        private delegate void glRasterPos4fDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w);
        private static glRasterPos4fDel glRasterPos4fPtr;
        
        // glRasterPos4fv
        public static void glRasterPos4fv(float[] /*CoordF*/  v) => glRasterPos4fvPtr?.Invoke(v);
        private delegate void glRasterPos4fvDel(float[] /*CoordF*/  v);
        private static glRasterPos4fvDel glRasterPos4fvPtr;
        
        // glRasterPos4i
        public static void glRasterPos4i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => glRasterPos4iPtr?.Invoke(x, y, z, w);
        private delegate void glRasterPos4iDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w);
        private static glRasterPos4iDel glRasterPos4iPtr;
        
        // glRasterPos4iv
        public static void glRasterPos4iv(int[] /*CoordI*/  v) => glRasterPos4ivPtr?.Invoke(v);
        private delegate void glRasterPos4ivDel(int[] /*CoordI*/  v);
        private static glRasterPos4ivDel glRasterPos4ivPtr;
        
        // glRasterPos4s
        public static void glRasterPos4s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => glRasterPos4sPtr?.Invoke(x, y, z, w);
        private delegate void glRasterPos4sDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w);
        private static glRasterPos4sDel glRasterPos4sPtr;
        
        // glRasterPos4sv
        public static void glRasterPos4sv(short[] /*CoordS*/  v) => glRasterPos4svPtr?.Invoke(v);
        private delegate void glRasterPos4svDel(short[] /*CoordS*/  v);
        private static glRasterPos4svDel glRasterPos4svPtr;
        
        // glRasterPos4xOES
        public static void glRasterPos4xOES(int  x, int  y, int  z, int  w) => glRasterPos4xOESPtr?.Invoke(x, y, z, w);
        private delegate void glRasterPos4xOESDel(int  x, int  y, int  z, int  w);
        private static glRasterPos4xOESDel glRasterPos4xOESPtr;
        
        // glRasterPos4xvOES
        public static void glRasterPos4xvOES(int[]  coords) => glRasterPos4xvOESPtr?.Invoke(coords);
        private delegate void glRasterPos4xvOESDel(int[]  coords);
        private static glRasterPos4xvOESDel glRasterPos4xvOESPtr;
        
        // glRasterSamplesEXT
        public static void glRasterSamplesEXT(uint  samples, bool /*Boolean*/  fixedsamplelocations) => glRasterSamplesEXTPtr?.Invoke(samples, fixedsamplelocations);
        private delegate void glRasterSamplesEXTDel(uint  samples, bool /*Boolean*/  fixedsamplelocations);
        private static glRasterSamplesEXTDel glRasterSamplesEXTPtr;
        
        // glReadBuffer
        public static void glReadBuffer(uint /*ReadBufferMode*/  src) => glReadBufferPtr?.Invoke(src);
        private delegate void glReadBufferDel(uint /*ReadBufferMode*/  src);
        private static glReadBufferDel glReadBufferPtr;
        
        // glReadBufferIndexedEXT
        public static void glReadBufferIndexedEXT(uint /*ReadBufferMode*/  src, int  index) => glReadBufferIndexedEXTPtr?.Invoke(src, index);
        private delegate void glReadBufferIndexedEXTDel(uint /*ReadBufferMode*/  src, int  index);
        private static glReadBufferIndexedEXTDel glReadBufferIndexedEXTPtr;
        
        // glReadBufferNV
        public static void glReadBufferNV(uint  mode) => glReadBufferNVPtr?.Invoke(mode);
        private delegate void glReadBufferNVDel(uint  mode);
        private static glReadBufferNVDel glReadBufferNVPtr;
        
        // glReadInstrumentsSGIX
        public static void glReadInstrumentsSGIX(int  marker) => glReadInstrumentsSGIXPtr?.Invoke(marker);
        private delegate void glReadInstrumentsSGIXDel(int  marker);
        private static glReadInstrumentsSGIXDel glReadInstrumentsSGIXPtr;
        
        // glReadPixels
        public static void glReadPixels(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glReadPixelsPtr?.Invoke(x, y, width, height, format, type, pixels);
        private delegate void glReadPixelsDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glReadPixelsDel glReadPixelsPtr;
        
        // glReadnPixels
        public static void glReadnPixels(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => glReadnPixelsPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        private delegate void glReadnPixelsDel(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data);
        private static glReadnPixelsDel glReadnPixelsPtr;
        
        // glReadnPixelsARB
        public static void glReadnPixelsARB(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => glReadnPixelsARBPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        private delegate void glReadnPixelsARBDel(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data);
        private static glReadnPixelsARBDel glReadnPixelsARBPtr;
        
        // glReadnPixelsEXT
        public static void glReadnPixelsEXT(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => glReadnPixelsEXTPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        private delegate void glReadnPixelsEXTDel(int  x, int  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data);
        private static glReadnPixelsEXTDel glReadnPixelsEXTPtr;
        
        // glReadnPixelsKHR
        public static void glReadnPixelsKHR(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data) => glReadnPixelsKHRPtr?.Invoke(x, y, width, height, format, type, bufSize, data);
        private delegate void glReadnPixelsKHRDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, uint  bufSize, IntPtr  data);
        private static glReadnPixelsKHRDel glReadnPixelsKHRPtr;
        
        // glReleaseKeyedMutexWin32EXT
        public static bool /*Boolean*/ glReleaseKeyedMutexWin32EXT(uint  memory, ulong  key) => glReleaseKeyedMutexWin32EXTPtr?.Invoke(memory, key) ?? default;
        private delegate bool /*Boolean*/ glReleaseKeyedMutexWin32EXTDel(uint  memory, ulong  key);
        private static glReleaseKeyedMutexWin32EXTDel glReleaseKeyedMutexWin32EXTPtr;
        
        // glRectd
        public static void glRectd(double /*CoordD*/  x1, double /*CoordD*/  y1, double /*CoordD*/  x2, double /*CoordD*/  y2) => glRectdPtr?.Invoke(x1, y1, x2, y2);
        private delegate void glRectdDel(double /*CoordD*/  x1, double /*CoordD*/  y1, double /*CoordD*/  x2, double /*CoordD*/  y2);
        private static glRectdDel glRectdPtr;
        
        // glRectdv
        public static void glRectdv(double[] /*CoordD*/  v1, double[] /*CoordD*/  v2) => glRectdvPtr?.Invoke(v1, v2);
        private delegate void glRectdvDel(double[] /*CoordD*/  v1, double[] /*CoordD*/  v2);
        private static glRectdvDel glRectdvPtr;
        
        // glRectf
        public static void glRectf(float /*CoordF*/  x1, float /*CoordF*/  y1, float /*CoordF*/  x2, float /*CoordF*/  y2) => glRectfPtr?.Invoke(x1, y1, x2, y2);
        private delegate void glRectfDel(float /*CoordF*/  x1, float /*CoordF*/  y1, float /*CoordF*/  x2, float /*CoordF*/  y2);
        private static glRectfDel glRectfPtr;
        
        // glRectfv
        public static void glRectfv(float[] /*CoordF*/  v1, float[] /*CoordF*/  v2) => glRectfvPtr?.Invoke(v1, v2);
        private delegate void glRectfvDel(float[] /*CoordF*/  v1, float[] /*CoordF*/  v2);
        private static glRectfvDel glRectfvPtr;
        
        // glRecti
        public static void glRecti(int /*CoordI*/  x1, int /*CoordI*/  y1, int /*CoordI*/  x2, int /*CoordI*/  y2) => glRectiPtr?.Invoke(x1, y1, x2, y2);
        private delegate void glRectiDel(int /*CoordI*/  x1, int /*CoordI*/  y1, int /*CoordI*/  x2, int /*CoordI*/  y2);
        private static glRectiDel glRectiPtr;
        
        // glRectiv
        public static void glRectiv(int[] /*CoordI*/  v1, int[] /*CoordI*/  v2) => glRectivPtr?.Invoke(v1, v2);
        private delegate void glRectivDel(int[] /*CoordI*/  v1, int[] /*CoordI*/  v2);
        private static glRectivDel glRectivPtr;
        
        // glRects
        public static void glRects(short /*CoordS*/  x1, short /*CoordS*/  y1, short /*CoordS*/  x2, short /*CoordS*/  y2) => glRectsPtr?.Invoke(x1, y1, x2, y2);
        private delegate void glRectsDel(short /*CoordS*/  x1, short /*CoordS*/  y1, short /*CoordS*/  x2, short /*CoordS*/  y2);
        private static glRectsDel glRectsPtr;
        
        // glRectsv
        public static void glRectsv(short[] /*CoordS*/  v1, short[] /*CoordS*/  v2) => glRectsvPtr?.Invoke(v1, v2);
        private delegate void glRectsvDel(short[] /*CoordS*/  v1, short[] /*CoordS*/  v2);
        private static glRectsvDel glRectsvPtr;
        
        // glRectxOES
        public static void glRectxOES(int  x1, int  y1, int  x2, int  y2) => glRectxOESPtr?.Invoke(x1, y1, x2, y2);
        private delegate void glRectxOESDel(int  x1, int  y1, int  x2, int  y2);
        private static glRectxOESDel glRectxOESPtr;
        
        // glRectxvOES
        public static void glRectxvOES(int[]  v1, int[]  v2) => glRectxvOESPtr?.Invoke(v1, v2);
        private delegate void glRectxvOESDel(int[]  v1, int[]  v2);
        private static glRectxvOESDel glRectxvOESPtr;
        
        // glReferencePlaneSGIX
        public static void glReferencePlaneSGIX(double[]  equation) => glReferencePlaneSGIXPtr?.Invoke(equation);
        private delegate void glReferencePlaneSGIXDel(double[]  equation);
        private static glReferencePlaneSGIXDel glReferencePlaneSGIXPtr;
        
        // glReleaseShaderCompiler
        public static void glReleaseShaderCompiler() => glReleaseShaderCompilerPtr?.Invoke();
        private delegate void glReleaseShaderCompilerDel();
        private static glReleaseShaderCompilerDel glReleaseShaderCompilerPtr;
        
        // glRenderGpuMaskNV
        public static void glRenderGpuMaskNV(uint  mask) => glRenderGpuMaskNVPtr?.Invoke(mask);
        private delegate void glRenderGpuMaskNVDel(uint  mask);
        private static glRenderGpuMaskNVDel glRenderGpuMaskNVPtr;
        
        // glRenderMode
        public static int glRenderMode(uint /*RenderingMode*/  mode) => glRenderModePtr?.Invoke(mode) ?? default;
        private delegate int glRenderModeDel(uint /*RenderingMode*/  mode);
        private static glRenderModeDel glRenderModePtr;
        
        // glRenderbufferStorage
        public static void glRenderbufferStorage(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStoragePtr?.Invoke(target, internalformat, width, height);
        private delegate void glRenderbufferStorageDel(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageDel glRenderbufferStoragePtr;
        
        // glRenderbufferStorageEXT
        public static void glRenderbufferStorageEXT(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageEXTPtr?.Invoke(target, internalformat, width, height);
        private delegate void glRenderbufferStorageEXTDel(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageEXTDel glRenderbufferStorageEXTPtr;
        
        // glRenderbufferStorageMultisample
        public static void glRenderbufferStorageMultisample(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisamplePtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleDel glRenderbufferStorageMultisamplePtr;
        
        // glRenderbufferStorageMultisampleANGLE
        public static void glRenderbufferStorageMultisampleANGLE(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleANGLEPtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleANGLEDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleANGLEDel glRenderbufferStorageMultisampleANGLEPtr;
        
        // glRenderbufferStorageMultisampleAPPLE
        public static void glRenderbufferStorageMultisampleAPPLE(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleAPPLEPtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleAPPLEDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleAPPLEDel glRenderbufferStorageMultisampleAPPLEPtr;
        
        // glRenderbufferStorageMultisampleAdvancedAMD
        public static void glRenderbufferStorageMultisampleAdvancedAMD(uint /*RenderbufferTarget*/  target, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleAdvancedAMDPtr?.Invoke(target, samples, storageSamples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleAdvancedAMDDel(uint /*RenderbufferTarget*/  target, uint  samples, uint  storageSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleAdvancedAMDDel glRenderbufferStorageMultisampleAdvancedAMDPtr;
        
        // glRenderbufferStorageMultisampleCoverageNV
        public static void glRenderbufferStorageMultisampleCoverageNV(uint /*RenderbufferTarget*/  target, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleCoverageNVDel(uint /*RenderbufferTarget*/  target, uint  coverageSamples, uint  colorSamples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleCoverageNVDel glRenderbufferStorageMultisampleCoverageNVPtr;
        
        // glRenderbufferStorageMultisampleEXT
        public static void glRenderbufferStorageMultisampleEXT(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleEXTPtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleEXTDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleEXTDel glRenderbufferStorageMultisampleEXTPtr;
        
        // glRenderbufferStorageMultisampleIMG
        public static void glRenderbufferStorageMultisampleIMG(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleIMGPtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleIMGDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleIMGDel glRenderbufferStorageMultisampleIMGPtr;
        
        // glRenderbufferStorageMultisampleNV
        public static void glRenderbufferStorageMultisampleNV(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageMultisampleNVPtr?.Invoke(target, samples, internalformat, width, height);
        private delegate void glRenderbufferStorageMultisampleNVDel(uint /*RenderbufferTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageMultisampleNVDel glRenderbufferStorageMultisampleNVPtr;
        
        // glRenderbufferStorageOES
        public static void glRenderbufferStorageOES(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glRenderbufferStorageOESPtr?.Invoke(target, internalformat, width, height);
        private delegate void glRenderbufferStorageOESDel(uint /*RenderbufferTarget*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glRenderbufferStorageOESDel glRenderbufferStorageOESPtr;
        
        // glReplacementCodePointerSUN
        public static void glReplacementCodePointerSUN(uint /*ReplacementCodeTypeSUN*/  type, uint  stride, IntPtr  pointer) => glReplacementCodePointerSUNPtr?.Invoke(type, stride, pointer);
        private delegate void glReplacementCodePointerSUNDel(uint /*ReplacementCodeTypeSUN*/  type, uint  stride, IntPtr  pointer);
        private static glReplacementCodePointerSUNDel glReplacementCodePointerSUNPtr;
        
        // glReplacementCodeubSUN
        public static void glReplacementCodeubSUN(byte  code) => glReplacementCodeubSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeubSUNDel(byte  code);
        private static glReplacementCodeubSUNDel glReplacementCodeubSUNPtr;
        
        // glReplacementCodeubvSUN
        public static void glReplacementCodeubvSUN(byte[]  code) => glReplacementCodeubvSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeubvSUNDel(byte[]  code);
        private static glReplacementCodeubvSUNDel glReplacementCodeubvSUNPtr;
        
        // glReplacementCodeuiColor3fVertex3fSUN
        public static void glReplacementCodeuiColor3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  x, float  y, float  z) => glReplacementCodeuiColor3fVertex3fSUNPtr?.Invoke(rc, r, g, b, x, y, z);
        private delegate void glReplacementCodeuiColor3fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  x, float  y, float  z);
        private static glReplacementCodeuiColor3fVertex3fSUNDel glReplacementCodeuiColor3fVertex3fSUNPtr;
        
        // glReplacementCodeuiColor3fVertex3fvSUN
        public static void glReplacementCodeuiColor3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  v) => glReplacementCodeuiColor3fVertex3fvSUNPtr?.Invoke(rc, c, v);
        private delegate void glReplacementCodeuiColor3fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  v);
        private static glReplacementCodeuiColor3fVertex3fvSUNDel glReplacementCodeuiColor3fVertex3fvSUNPtr;
        
        // glReplacementCodeuiColor4fNormal3fVertex3fSUN
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr?.Invoke(rc, r, g, b, a, nx, ny, nz, x, y, z);
        private delegate void glReplacementCodeuiColor4fNormal3fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glReplacementCodeuiColor4fNormal3fVertex3fSUNDel glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr;
        
        // glReplacementCodeuiColor4fNormal3fVertex3fvSUN
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  n, float[]  v) => glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr?.Invoke(rc, c, n, v);
        private delegate void glReplacementCodeuiColor4fNormal3fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  c, float[]  n, float[]  v);
        private static glReplacementCodeuiColor4fNormal3fVertex3fvSUNDel glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr;
        
        // glReplacementCodeuiColor4ubVertex3fSUN
        public static void glReplacementCodeuiColor4ubVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => glReplacementCodeuiColor4ubVertex3fSUNPtr?.Invoke(rc, r, g, b, a, x, y, z);
        private delegate void glReplacementCodeuiColor4ubVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z);
        private static glReplacementCodeuiColor4ubVertex3fSUNDel glReplacementCodeuiColor4ubVertex3fSUNPtr;
        
        // glReplacementCodeuiColor4ubVertex3fvSUN
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, byte[]  c, float[]  v) => glReplacementCodeuiColor4ubVertex3fvSUNPtr?.Invoke(rc, c, v);
        private delegate void glReplacementCodeuiColor4ubVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, byte[]  c, float[]  v);
        private static glReplacementCodeuiColor4ubVertex3fvSUNDel glReplacementCodeuiColor4ubVertex3fvSUNPtr;
        
        // glReplacementCodeuiNormal3fVertex3fSUN
        public static void glReplacementCodeuiNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glReplacementCodeuiNormal3fVertex3fSUNPtr?.Invoke(rc, nx, ny, nz, x, y, z);
        private delegate void glReplacementCodeuiNormal3fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glReplacementCodeuiNormal3fVertex3fSUNDel glReplacementCodeuiNormal3fVertex3fSUNPtr;
        
        // glReplacementCodeuiNormal3fVertex3fvSUN
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  n, float[]  v) => glReplacementCodeuiNormal3fVertex3fvSUNPtr?.Invoke(rc, n, v);
        private delegate void glReplacementCodeuiNormal3fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  n, float[]  v);
        private static glReplacementCodeuiNormal3fVertex3fvSUNDel glReplacementCodeuiNormal3fVertex3fvSUNPtr;
        
        // glReplacementCodeuiSUN
        public static void glReplacementCodeuiSUN(uint  code) => glReplacementCodeuiSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeuiSUNDel(uint  code);
        private static glReplacementCodeuiSUNDel glReplacementCodeuiSUNPtr;
        
        // glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr?.Invoke(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        private delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNDel glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr;
        
        // glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  c, float[]  n, float[]  v) => glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr?.Invoke(rc, tc, c, n, v);
        private delegate void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  c, float[]  n, float[]  v);
        private static glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNDel glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr;
        
        // glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr?.Invoke(rc, s, t, nx, ny, nz, x, y, z);
        private delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNDel glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr;
        
        // glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  n, float[]  v) => glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr?.Invoke(rc, tc, n, v);
        private delegate void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  n, float[]  v);
        private static glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNDel glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr;
        
        // glReplacementCodeuiTexCoord2fVertex3fSUN
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  x, float  y, float  z) => glReplacementCodeuiTexCoord2fVertex3fSUNPtr?.Invoke(rc, s, t, x, y, z);
        private delegate void glReplacementCodeuiTexCoord2fVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  s, float  t, float  x, float  y, float  z);
        private static glReplacementCodeuiTexCoord2fVertex3fSUNDel glReplacementCodeuiTexCoord2fVertex3fSUNPtr;
        
        // glReplacementCodeuiTexCoord2fVertex3fvSUN
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  v) => glReplacementCodeuiTexCoord2fVertex3fvSUNPtr?.Invoke(rc, tc, v);
        private delegate void glReplacementCodeuiTexCoord2fVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  tc, float[]  v);
        private static glReplacementCodeuiTexCoord2fVertex3fvSUNDel glReplacementCodeuiTexCoord2fVertex3fvSUNPtr;
        
        // glReplacementCodeuiVertex3fSUN
        public static void glReplacementCodeuiVertex3fSUN(uint /*ReplacementCodeSUN*/  rc, float  x, float  y, float  z) => glReplacementCodeuiVertex3fSUNPtr?.Invoke(rc, x, y, z);
        private delegate void glReplacementCodeuiVertex3fSUNDel(uint /*ReplacementCodeSUN*/  rc, float  x, float  y, float  z);
        private static glReplacementCodeuiVertex3fSUNDel glReplacementCodeuiVertex3fSUNPtr;
        
        // glReplacementCodeuiVertex3fvSUN
        public static void glReplacementCodeuiVertex3fvSUN(uint[] /*ReplacementCodeSUN*/  rc, float[]  v) => glReplacementCodeuiVertex3fvSUNPtr?.Invoke(rc, v);
        private delegate void glReplacementCodeuiVertex3fvSUNDel(uint[] /*ReplacementCodeSUN*/  rc, float[]  v);
        private static glReplacementCodeuiVertex3fvSUNDel glReplacementCodeuiVertex3fvSUNPtr;
        
        // glReplacementCodeuivSUN
        public static void glReplacementCodeuivSUN(uint[]  code) => glReplacementCodeuivSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeuivSUNDel(uint[]  code);
        private static glReplacementCodeuivSUNDel glReplacementCodeuivSUNPtr;
        
        // glReplacementCodeusSUN
        public static void glReplacementCodeusSUN(ushort  code) => glReplacementCodeusSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeusSUNDel(ushort  code);
        private static glReplacementCodeusSUNDel glReplacementCodeusSUNPtr;
        
        // glReplacementCodeusvSUN
        public static void glReplacementCodeusvSUN(ushort[]  code) => glReplacementCodeusvSUNPtr?.Invoke(code);
        private delegate void glReplacementCodeusvSUNDel(ushort[]  code);
        private static glReplacementCodeusvSUNDel glReplacementCodeusvSUNPtr;
        
        // glRequestResidentProgramsNV
        public static void glRequestResidentProgramsNV(uint  n, uint[]  programs) => glRequestResidentProgramsNVPtr?.Invoke(n, programs);
        private delegate void glRequestResidentProgramsNVDel(uint  n, uint[]  programs);
        private static glRequestResidentProgramsNVDel glRequestResidentProgramsNVPtr;
        
        // glResetHistogram
        public static void glResetHistogram(uint /*HistogramTargetEXT*/  target) => glResetHistogramPtr?.Invoke(target);
        private delegate void glResetHistogramDel(uint /*HistogramTargetEXT*/  target);
        private static glResetHistogramDel glResetHistogramPtr;
        
        // glResetHistogramEXT
        public static void glResetHistogramEXT(uint /*HistogramTargetEXT*/  target) => glResetHistogramEXTPtr?.Invoke(target);
        private delegate void glResetHistogramEXTDel(uint /*HistogramTargetEXT*/  target);
        private static glResetHistogramEXTDel glResetHistogramEXTPtr;
        
        // glResetMemoryObjectParameterNV
        public static void glResetMemoryObjectParameterNV(uint  memory, uint  pname) => glResetMemoryObjectParameterNVPtr?.Invoke(memory, pname);
        private delegate void glResetMemoryObjectParameterNVDel(uint  memory, uint  pname);
        private static glResetMemoryObjectParameterNVDel glResetMemoryObjectParameterNVPtr;
        
        // glResetMinmax
        public static void glResetMinmax(uint /*MinmaxTargetEXT*/  target) => glResetMinmaxPtr?.Invoke(target);
        private delegate void glResetMinmaxDel(uint /*MinmaxTargetEXT*/  target);
        private static glResetMinmaxDel glResetMinmaxPtr;
        
        // glResetMinmaxEXT
        public static void glResetMinmaxEXT(uint /*MinmaxTargetEXT*/  target) => glResetMinmaxEXTPtr?.Invoke(target);
        private delegate void glResetMinmaxEXTDel(uint /*MinmaxTargetEXT*/  target);
        private static glResetMinmaxEXTDel glResetMinmaxEXTPtr;
        
        // glResizeBuffersMESA
        public static void glResizeBuffersMESA() => glResizeBuffersMESAPtr?.Invoke();
        private delegate void glResizeBuffersMESADel();
        private static glResizeBuffersMESADel glResizeBuffersMESAPtr;
        
        // glResolveDepthValuesNV
        public static void glResolveDepthValuesNV() => glResolveDepthValuesNVPtr?.Invoke();
        private delegate void glResolveDepthValuesNVDel();
        private static glResolveDepthValuesNVDel glResolveDepthValuesNVPtr;
        
        // glResolveMultisampleFramebufferAPPLE
        public static void glResolveMultisampleFramebufferAPPLE() => glResolveMultisampleFramebufferAPPLEPtr?.Invoke();
        private delegate void glResolveMultisampleFramebufferAPPLEDel();
        private static glResolveMultisampleFramebufferAPPLEDel glResolveMultisampleFramebufferAPPLEPtr;
        
        // glResumeTransformFeedback
        public static void glResumeTransformFeedback() => glResumeTransformFeedbackPtr?.Invoke();
        private delegate void glResumeTransformFeedbackDel();
        private static glResumeTransformFeedbackDel glResumeTransformFeedbackPtr;
        
        // glResumeTransformFeedbackNV
        public static void glResumeTransformFeedbackNV() => glResumeTransformFeedbackNVPtr?.Invoke();
        private delegate void glResumeTransformFeedbackNVDel();
        private static glResumeTransformFeedbackNVDel glResumeTransformFeedbackNVPtr;
        
        // glRotated
        public static void glRotated(double  angle, double  x, double  y, double  z) => glRotatedPtr?.Invoke(angle, x, y, z);
        private delegate void glRotatedDel(double  angle, double  x, double  y, double  z);
        private static glRotatedDel glRotatedPtr;
        
        // glRotatef
        public static void glRotatef(float  angle, float  x, float  y, float  z) => glRotatefPtr?.Invoke(angle, x, y, z);
        private delegate void glRotatefDel(float  angle, float  x, float  y, float  z);
        private static glRotatefDel glRotatefPtr;
        
        // glRotatex
        public static void glRotatex(int  angle, int  x, int  y, int  z) => glRotatexPtr?.Invoke(angle, x, y, z);
        private delegate void glRotatexDel(int  angle, int  x, int  y, int  z);
        private static glRotatexDel glRotatexPtr;
        
        // glRotatexOES
        public static void glRotatexOES(int  angle, int  x, int  y, int  z) => glRotatexOESPtr?.Invoke(angle, x, y, z);
        private delegate void glRotatexOESDel(int  angle, int  x, int  y, int  z);
        private static glRotatexOESDel glRotatexOESPtr;
        
        // glSampleCoverage
        public static void glSampleCoverage(float  value, bool /*Boolean*/  invert) => glSampleCoveragePtr?.Invoke(value, invert);
        private delegate void glSampleCoverageDel(float  value, bool /*Boolean*/  invert);
        private static glSampleCoverageDel glSampleCoveragePtr;
        
        // glSampleCoverageARB
        public static void glSampleCoverageARB(float  value, bool /*Boolean*/  invert) => glSampleCoverageARBPtr?.Invoke(value, invert);
        private delegate void glSampleCoverageARBDel(float  value, bool /*Boolean*/  invert);
        private static glSampleCoverageARBDel glSampleCoverageARBPtr;
        
        // glSampleCoveragex
        public static void glSampleCoveragex(int /*GLclampx*/  value, bool /*Boolean*/  invert) => glSampleCoveragexPtr?.Invoke(value, invert);
        private delegate void glSampleCoveragexDel(int /*GLclampx*/  value, bool /*Boolean*/  invert);
        private static glSampleCoveragexDel glSampleCoveragexPtr;
        
        // glSampleCoveragexOES
        public static void glSampleCoveragexOES(int /*GLclampx*/  value, bool /*Boolean*/  invert) => glSampleCoveragexOESPtr?.Invoke(value, invert);
        private delegate void glSampleCoveragexOESDel(int /*GLclampx*/  value, bool /*Boolean*/  invert);
        private static glSampleCoveragexOESDel glSampleCoveragexOESPtr;
        
        // glSampleMapATI
        public static void glSampleMapATI(uint  dst, uint  interp, uint /*SwizzleOpATI*/  swizzle) => glSampleMapATIPtr?.Invoke(dst, interp, swizzle);
        private delegate void glSampleMapATIDel(uint  dst, uint  interp, uint /*SwizzleOpATI*/  swizzle);
        private static glSampleMapATIDel glSampleMapATIPtr;
        
        // glSampleMaskEXT
        public static void glSampleMaskEXT(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert) => glSampleMaskEXTPtr?.Invoke(value, invert);
        private delegate void glSampleMaskEXTDel(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert);
        private static glSampleMaskEXTDel glSampleMaskEXTPtr;
        
        // glSampleMaskIndexedNV
        public static void glSampleMaskIndexedNV(uint  index, uint /*SampleMaskNV*/  mask) => glSampleMaskIndexedNVPtr?.Invoke(index, mask);
        private delegate void glSampleMaskIndexedNVDel(uint  index, uint /*SampleMaskNV*/  mask);
        private static glSampleMaskIndexedNVDel glSampleMaskIndexedNVPtr;
        
        // glSampleMaskSGIS
        public static void glSampleMaskSGIS(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert) => glSampleMaskSGISPtr?.Invoke(value, invert);
        private delegate void glSampleMaskSGISDel(float /*ClampedFloat32*/  value, bool /*Boolean*/  invert);
        private static glSampleMaskSGISDel glSampleMaskSGISPtr;
        
        // glSampleMaski
        public static void glSampleMaski(uint  maskNumber, uint  mask) => glSampleMaskiPtr?.Invoke(maskNumber, mask);
        private delegate void glSampleMaskiDel(uint  maskNumber, uint  mask);
        private static glSampleMaskiDel glSampleMaskiPtr;
        
        // glSamplePatternEXT
        public static void glSamplePatternEXT(uint /*SamplePatternEXT*/  pattern) => glSamplePatternEXTPtr?.Invoke(pattern);
        private delegate void glSamplePatternEXTDel(uint /*SamplePatternEXT*/  pattern);
        private static glSamplePatternEXTDel glSamplePatternEXTPtr;
        
        // glSamplePatternSGIS
        public static void glSamplePatternSGIS(uint /*SamplePatternSGIS*/  pattern) => glSamplePatternSGISPtr?.Invoke(pattern);
        private delegate void glSamplePatternSGISDel(uint /*SamplePatternSGIS*/  pattern);
        private static glSamplePatternSGISDel glSamplePatternSGISPtr;
        
        // glSamplerParameterIiv
        public static void glSamplerParameterIiv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => glSamplerParameterIivPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIivDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param);
        private static glSamplerParameterIivDel glSamplerParameterIivPtr;
        
        // glSamplerParameterIivEXT
        public static void glSamplerParameterIivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => glSamplerParameterIivEXTPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIivEXTDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param);
        private static glSamplerParameterIivEXTDel glSamplerParameterIivEXTPtr;
        
        // glSamplerParameterIivOES
        public static void glSamplerParameterIivOES(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => glSamplerParameterIivOESPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIivOESDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param);
        private static glSamplerParameterIivOESDel glSamplerParameterIivOESPtr;
        
        // glSamplerParameterIuiv
        public static void glSamplerParameterIuiv(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => glSamplerParameterIuivPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIuivDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param);
        private static glSamplerParameterIuivDel glSamplerParameterIuivPtr;
        
        // glSamplerParameterIuivEXT
        public static void glSamplerParameterIuivEXT(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => glSamplerParameterIuivEXTPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIuivEXTDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param);
        private static glSamplerParameterIuivEXTDel glSamplerParameterIuivEXTPtr;
        
        // glSamplerParameterIuivOES
        public static void glSamplerParameterIuivOES(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param) => glSamplerParameterIuivOESPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterIuivOESDel(uint  sampler, uint /*SamplerParameterI*/  pname, uint[]  param);
        private static glSamplerParameterIuivOESDel glSamplerParameterIuivOESPtr;
        
        // glSamplerParameterf
        public static void glSamplerParameterf(uint  sampler, uint /*SamplerParameterF*/  pname, float  param) => glSamplerParameterfPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterfDel(uint  sampler, uint /*SamplerParameterF*/  pname, float  param);
        private static glSamplerParameterfDel glSamplerParameterfPtr;
        
        // glSamplerParameterfv
        public static void glSamplerParameterfv(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  param) => glSamplerParameterfvPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterfvDel(uint  sampler, uint /*SamplerParameterF*/  pname, float[]  param);
        private static glSamplerParameterfvDel glSamplerParameterfvPtr;
        
        // glSamplerParameteri
        public static void glSamplerParameteri(uint  sampler, uint /*SamplerParameterI*/  pname, int  param) => glSamplerParameteriPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameteriDel(uint  sampler, uint /*SamplerParameterI*/  pname, int  param);
        private static glSamplerParameteriDel glSamplerParameteriPtr;
        
        // glSamplerParameteriv
        public static void glSamplerParameteriv(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param) => glSamplerParameterivPtr?.Invoke(sampler, pname, param);
        private delegate void glSamplerParameterivDel(uint  sampler, uint /*SamplerParameterI*/  pname, int[]  param);
        private static glSamplerParameterivDel glSamplerParameterivPtr;
        
        // glScaled
        public static void glScaled(double  x, double  y, double  z) => glScaledPtr?.Invoke(x, y, z);
        private delegate void glScaledDel(double  x, double  y, double  z);
        private static glScaledDel glScaledPtr;
        
        // glScalef
        public static void glScalef(float  x, float  y, float  z) => glScalefPtr?.Invoke(x, y, z);
        private delegate void glScalefDel(float  x, float  y, float  z);
        private static glScalefDel glScalefPtr;
        
        // glScalex
        public static void glScalex(int  x, int  y, int  z) => glScalexPtr?.Invoke(x, y, z);
        private delegate void glScalexDel(int  x, int  y, int  z);
        private static glScalexDel glScalexPtr;
        
        // glScalexOES
        public static void glScalexOES(int  x, int  y, int  z) => glScalexOESPtr?.Invoke(x, y, z);
        private delegate void glScalexOESDel(int  x, int  y, int  z);
        private static glScalexOESDel glScalexOESPtr;
        
        // glScissor
        public static void glScissor(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glScissorPtr?.Invoke(x, y, width, height);
        private delegate void glScissorDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glScissorDel glScissorPtr;
        
        // glScissorArrayv
        public static void glScissorArrayv(uint  first, uint  count, int[]  v) => glScissorArrayvPtr?.Invoke(first, count, v);
        private delegate void glScissorArrayvDel(uint  first, uint  count, int[]  v);
        private static glScissorArrayvDel glScissorArrayvPtr;
        
        // glScissorArrayvNV
        public static void glScissorArrayvNV(uint  first, uint  count, int[]  v) => glScissorArrayvNVPtr?.Invoke(first, count, v);
        private delegate void glScissorArrayvNVDel(uint  first, uint  count, int[]  v);
        private static glScissorArrayvNVDel glScissorArrayvNVPtr;
        
        // glScissorArrayvOES
        public static void glScissorArrayvOES(uint  first, uint  count, int[]  v) => glScissorArrayvOESPtr?.Invoke(first, count, v);
        private delegate void glScissorArrayvOESDel(uint  first, uint  count, int[]  v);
        private static glScissorArrayvOESDel glScissorArrayvOESPtr;
        
        // glScissorExclusiveArrayvNV
        public static void glScissorExclusiveArrayvNV(uint  first, uint  count, int[]  v) => glScissorExclusiveArrayvNVPtr?.Invoke(first, count, v);
        private delegate void glScissorExclusiveArrayvNVDel(uint  first, uint  count, int[]  v);
        private static glScissorExclusiveArrayvNVDel glScissorExclusiveArrayvNVPtr;
        
        // glScissorExclusiveNV
        public static void glScissorExclusiveNV(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glScissorExclusiveNVPtr?.Invoke(x, y, width, height);
        private delegate void glScissorExclusiveNVDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glScissorExclusiveNVDel glScissorExclusiveNVPtr;
        
        // glScissorIndexed
        public static void glScissorIndexed(uint  index, int  left, int  bottom, uint  width, uint  height) => glScissorIndexedPtr?.Invoke(index, left, bottom, width, height);
        private delegate void glScissorIndexedDel(uint  index, int  left, int  bottom, uint  width, uint  height);
        private static glScissorIndexedDel glScissorIndexedPtr;
        
        // glScissorIndexedNV
        public static void glScissorIndexedNV(uint  index, int  left, int  bottom, uint  width, uint  height) => glScissorIndexedNVPtr?.Invoke(index, left, bottom, width, height);
        private delegate void glScissorIndexedNVDel(uint  index, int  left, int  bottom, uint  width, uint  height);
        private static glScissorIndexedNVDel glScissorIndexedNVPtr;
        
        // glScissorIndexedOES
        public static void glScissorIndexedOES(uint  index, int  left, int  bottom, uint  width, uint  height) => glScissorIndexedOESPtr?.Invoke(index, left, bottom, width, height);
        private delegate void glScissorIndexedOESDel(uint  index, int  left, int  bottom, uint  width, uint  height);
        private static glScissorIndexedOESDel glScissorIndexedOESPtr;
        
        // glScissorIndexedv
        public static void glScissorIndexedv(uint  index, int[]  v) => glScissorIndexedvPtr?.Invoke(index, v);
        private delegate void glScissorIndexedvDel(uint  index, int[]  v);
        private static glScissorIndexedvDel glScissorIndexedvPtr;
        
        // glScissorIndexedvNV
        public static void glScissorIndexedvNV(uint  index, int[]  v) => glScissorIndexedvNVPtr?.Invoke(index, v);
        private delegate void glScissorIndexedvNVDel(uint  index, int[]  v);
        private static glScissorIndexedvNVDel glScissorIndexedvNVPtr;
        
        // glScissorIndexedvOES
        public static void glScissorIndexedvOES(uint  index, int[]  v) => glScissorIndexedvOESPtr?.Invoke(index, v);
        private delegate void glScissorIndexedvOESDel(uint  index, int[]  v);
        private static glScissorIndexedvOESDel glScissorIndexedvOESPtr;
        
        // glSecondaryColor3b
        public static void glSecondaryColor3b(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => glSecondaryColor3bPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3bDel(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue);
        private static glSecondaryColor3bDel glSecondaryColor3bPtr;
        
        // glSecondaryColor3bEXT
        public static void glSecondaryColor3bEXT(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue) => glSecondaryColor3bEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3bEXTDel(sbyte /*ColorB*/  red, sbyte /*ColorB*/  green, sbyte /*ColorB*/  blue);
        private static glSecondaryColor3bEXTDel glSecondaryColor3bEXTPtr;
        
        // glSecondaryColor3bv
        public static void glSecondaryColor3bv(sbyte[] /*ColorB*/  v) => glSecondaryColor3bvPtr?.Invoke(v);
        private delegate void glSecondaryColor3bvDel(sbyte[] /*ColorB*/  v);
        private static glSecondaryColor3bvDel glSecondaryColor3bvPtr;
        
        // glSecondaryColor3bvEXT
        public static void glSecondaryColor3bvEXT(sbyte[] /*ColorB*/  v) => glSecondaryColor3bvEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3bvEXTDel(sbyte[] /*ColorB*/  v);
        private static glSecondaryColor3bvEXTDel glSecondaryColor3bvEXTPtr;
        
        // glSecondaryColor3d
        public static void glSecondaryColor3d(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => glSecondaryColor3dPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3dDel(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue);
        private static glSecondaryColor3dDel glSecondaryColor3dPtr;
        
        // glSecondaryColor3dEXT
        public static void glSecondaryColor3dEXT(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue) => glSecondaryColor3dEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3dEXTDel(double /*ColorD*/  red, double /*ColorD*/  green, double /*ColorD*/  blue);
        private static glSecondaryColor3dEXTDel glSecondaryColor3dEXTPtr;
        
        // glSecondaryColor3dv
        public static void glSecondaryColor3dv(double[] /*ColorD*/  v) => glSecondaryColor3dvPtr?.Invoke(v);
        private delegate void glSecondaryColor3dvDel(double[] /*ColorD*/  v);
        private static glSecondaryColor3dvDel glSecondaryColor3dvPtr;
        
        // glSecondaryColor3dvEXT
        public static void glSecondaryColor3dvEXT(double[] /*ColorD*/  v) => glSecondaryColor3dvEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3dvEXTDel(double[] /*ColorD*/  v);
        private static glSecondaryColor3dvEXTDel glSecondaryColor3dvEXTPtr;
        
        // glSecondaryColor3f
        public static void glSecondaryColor3f(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => glSecondaryColor3fPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3fDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue);
        private static glSecondaryColor3fDel glSecondaryColor3fPtr;
        
        // glSecondaryColor3fEXT
        public static void glSecondaryColor3fEXT(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue) => glSecondaryColor3fEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3fEXTDel(float /*ColorF*/  red, float /*ColorF*/  green, float /*ColorF*/  blue);
        private static glSecondaryColor3fEXTDel glSecondaryColor3fEXTPtr;
        
        // glSecondaryColor3fv
        public static void glSecondaryColor3fv(float[] /*ColorF*/  v) => glSecondaryColor3fvPtr?.Invoke(v);
        private delegate void glSecondaryColor3fvDel(float[] /*ColorF*/  v);
        private static glSecondaryColor3fvDel glSecondaryColor3fvPtr;
        
        // glSecondaryColor3fvEXT
        public static void glSecondaryColor3fvEXT(float[] /*ColorF*/  v) => glSecondaryColor3fvEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3fvEXTDel(float[] /*ColorF*/  v);
        private static glSecondaryColor3fvEXTDel glSecondaryColor3fvEXTPtr;
        
        // glSecondaryColor3hNV
        public static void glSecondaryColor3hNV(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue) => glSecondaryColor3hNVPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3hNVDel(ushort /*Half16NV*/  red, ushort /*Half16NV*/  green, ushort /*Half16NV*/  blue);
        private static glSecondaryColor3hNVDel glSecondaryColor3hNVPtr;
        
        // glSecondaryColor3hvNV
        public static void glSecondaryColor3hvNV(ushort[] /*Half16NV*/  v) => glSecondaryColor3hvNVPtr?.Invoke(v);
        private delegate void glSecondaryColor3hvNVDel(ushort[] /*Half16NV*/  v);
        private static glSecondaryColor3hvNVDel glSecondaryColor3hvNVPtr;
        
        // glSecondaryColor3i
        public static void glSecondaryColor3i(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => glSecondaryColor3iPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3iDel(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue);
        private static glSecondaryColor3iDel glSecondaryColor3iPtr;
        
        // glSecondaryColor3iEXT
        public static void glSecondaryColor3iEXT(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue) => glSecondaryColor3iEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3iEXTDel(int /*ColorI*/  red, int /*ColorI*/  green, int /*ColorI*/  blue);
        private static glSecondaryColor3iEXTDel glSecondaryColor3iEXTPtr;
        
        // glSecondaryColor3iv
        public static void glSecondaryColor3iv(int[] /*ColorI*/  v) => glSecondaryColor3ivPtr?.Invoke(v);
        private delegate void glSecondaryColor3ivDel(int[] /*ColorI*/  v);
        private static glSecondaryColor3ivDel glSecondaryColor3ivPtr;
        
        // glSecondaryColor3ivEXT
        public static void glSecondaryColor3ivEXT(int[] /*ColorI*/  v) => glSecondaryColor3ivEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3ivEXTDel(int[] /*ColorI*/  v);
        private static glSecondaryColor3ivEXTDel glSecondaryColor3ivEXTPtr;
        
        // glSecondaryColor3s
        public static void glSecondaryColor3s(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => glSecondaryColor3sPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3sDel(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue);
        private static glSecondaryColor3sDel glSecondaryColor3sPtr;
        
        // glSecondaryColor3sEXT
        public static void glSecondaryColor3sEXT(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue) => glSecondaryColor3sEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3sEXTDel(short /*ColorS*/  red, short /*ColorS*/  green, short /*ColorS*/  blue);
        private static glSecondaryColor3sEXTDel glSecondaryColor3sEXTPtr;
        
        // glSecondaryColor3sv
        public static void glSecondaryColor3sv(short[] /*ColorS*/  v) => glSecondaryColor3svPtr?.Invoke(v);
        private delegate void glSecondaryColor3svDel(short[] /*ColorS*/  v);
        private static glSecondaryColor3svDel glSecondaryColor3svPtr;
        
        // glSecondaryColor3svEXT
        public static void glSecondaryColor3svEXT(short[] /*ColorS*/  v) => glSecondaryColor3svEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3svEXTDel(short[] /*ColorS*/  v);
        private static glSecondaryColor3svEXTDel glSecondaryColor3svEXTPtr;
        
        // glSecondaryColor3ub
        public static void glSecondaryColor3ub(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => glSecondaryColor3ubPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3ubDel(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue);
        private static glSecondaryColor3ubDel glSecondaryColor3ubPtr;
        
        // glSecondaryColor3ubEXT
        public static void glSecondaryColor3ubEXT(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue) => glSecondaryColor3ubEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3ubEXTDel(byte /*ColorUB*/  red, byte /*ColorUB*/  green, byte /*ColorUB*/  blue);
        private static glSecondaryColor3ubEXTDel glSecondaryColor3ubEXTPtr;
        
        // glSecondaryColor3ubv
        public static void glSecondaryColor3ubv(byte[] /*ColorUB*/  v) => glSecondaryColor3ubvPtr?.Invoke(v);
        private delegate void glSecondaryColor3ubvDel(byte[] /*ColorUB*/  v);
        private static glSecondaryColor3ubvDel glSecondaryColor3ubvPtr;
        
        // glSecondaryColor3ubvEXT
        public static void glSecondaryColor3ubvEXT(byte[] /*ColorUB*/  v) => glSecondaryColor3ubvEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3ubvEXTDel(byte[] /*ColorUB*/  v);
        private static glSecondaryColor3ubvEXTDel glSecondaryColor3ubvEXTPtr;
        
        // glSecondaryColor3ui
        public static void glSecondaryColor3ui(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => glSecondaryColor3uiPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3uiDel(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue);
        private static glSecondaryColor3uiDel glSecondaryColor3uiPtr;
        
        // glSecondaryColor3uiEXT
        public static void glSecondaryColor3uiEXT(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue) => glSecondaryColor3uiEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3uiEXTDel(uint /*ColorUI*/  red, uint /*ColorUI*/  green, uint /*ColorUI*/  blue);
        private static glSecondaryColor3uiEXTDel glSecondaryColor3uiEXTPtr;
        
        // glSecondaryColor3uiv
        public static void glSecondaryColor3uiv(uint[] /*ColorUI*/  v) => glSecondaryColor3uivPtr?.Invoke(v);
        private delegate void glSecondaryColor3uivDel(uint[] /*ColorUI*/  v);
        private static glSecondaryColor3uivDel glSecondaryColor3uivPtr;
        
        // glSecondaryColor3uivEXT
        public static void glSecondaryColor3uivEXT(uint[] /*ColorUI*/  v) => glSecondaryColor3uivEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3uivEXTDel(uint[] /*ColorUI*/  v);
        private static glSecondaryColor3uivEXTDel glSecondaryColor3uivEXTPtr;
        
        // glSecondaryColor3us
        public static void glSecondaryColor3us(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => glSecondaryColor3usPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3usDel(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue);
        private static glSecondaryColor3usDel glSecondaryColor3usPtr;
        
        // glSecondaryColor3usEXT
        public static void glSecondaryColor3usEXT(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue) => glSecondaryColor3usEXTPtr?.Invoke(red, green, blue);
        private delegate void glSecondaryColor3usEXTDel(ushort /*ColorUS*/  red, ushort /*ColorUS*/  green, ushort /*ColorUS*/  blue);
        private static glSecondaryColor3usEXTDel glSecondaryColor3usEXTPtr;
        
        // glSecondaryColor3usv
        public static void glSecondaryColor3usv(ushort[] /*ColorUS*/  v) => glSecondaryColor3usvPtr?.Invoke(v);
        private delegate void glSecondaryColor3usvDel(ushort[] /*ColorUS*/  v);
        private static glSecondaryColor3usvDel glSecondaryColor3usvPtr;
        
        // glSecondaryColor3usvEXT
        public static void glSecondaryColor3usvEXT(ushort[] /*ColorUS*/  v) => glSecondaryColor3usvEXTPtr?.Invoke(v);
        private delegate void glSecondaryColor3usvEXTDel(ushort[] /*ColorUS*/  v);
        private static glSecondaryColor3usvEXTDel glSecondaryColor3usvEXTPtr;
        
        // glSecondaryColorFormatNV
        public static void glSecondaryColorFormatNV(int  size, uint /*ColorPointerType*/  type, uint  stride) => glSecondaryColorFormatNVPtr?.Invoke(size, type, stride);
        private delegate void glSecondaryColorFormatNVDel(int  size, uint /*ColorPointerType*/  type, uint  stride);
        private static glSecondaryColorFormatNVDel glSecondaryColorFormatNVPtr;
        
        // glSecondaryColorP3ui
        public static void glSecondaryColorP3ui(uint /*ColorPointerType*/  type, uint  color) => glSecondaryColorP3uiPtr?.Invoke(type, color);
        private delegate void glSecondaryColorP3uiDel(uint /*ColorPointerType*/  type, uint  color);
        private static glSecondaryColorP3uiDel glSecondaryColorP3uiPtr;
        
        // glSecondaryColorP3uiv
        public static void glSecondaryColorP3uiv(uint /*ColorPointerType*/  type, uint[]  color) => glSecondaryColorP3uivPtr?.Invoke(type, color);
        private delegate void glSecondaryColorP3uivDel(uint /*ColorPointerType*/  type, uint[]  color);
        private static glSecondaryColorP3uivDel glSecondaryColorP3uivPtr;
        
        // glSecondaryColorPointer
        public static void glSecondaryColorPointer(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => glSecondaryColorPointerPtr?.Invoke(size, type, stride, pointer);
        private delegate void glSecondaryColorPointerDel(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glSecondaryColorPointerDel glSecondaryColorPointerPtr;
        
        // glSecondaryColorPointerEXT
        public static void glSecondaryColorPointerEXT(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer) => glSecondaryColorPointerEXTPtr?.Invoke(size, type, stride, pointer);
        private delegate void glSecondaryColorPointerEXTDel(int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glSecondaryColorPointerEXTDel glSecondaryColorPointerEXTPtr;
        
        // glSecondaryColorPointerListIBM
        public static void glSecondaryColorPointerListIBM(int  size, uint /*SecondaryColorPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glSecondaryColorPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        private delegate void glSecondaryColorPointerListIBMDel(int  size, uint /*SecondaryColorPointerTypeIBM*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glSecondaryColorPointerListIBMDel glSecondaryColorPointerListIBMPtr;
        
        // glSelectBuffer
        public static void glSelectBuffer(uint  size, uint[] /*SelectName*/  buffer) => glSelectBufferPtr?.Invoke(size, buffer);
        private delegate void glSelectBufferDel(uint  size, uint[] /*SelectName*/  buffer);
        private static glSelectBufferDel glSelectBufferPtr;
        
        // glSelectPerfMonitorCountersAMD
        public static void glSelectPerfMonitorCountersAMD(uint  monitor, bool /*Boolean*/  enable, uint  group, int  numCounters, uint[]  counterList) => glSelectPerfMonitorCountersAMDPtr?.Invoke(monitor, enable, group, numCounters, counterList);
        private delegate void glSelectPerfMonitorCountersAMDDel(uint  monitor, bool /*Boolean*/  enable, uint  group, int  numCounters, uint[]  counterList);
        private static glSelectPerfMonitorCountersAMDDel glSelectPerfMonitorCountersAMDPtr;
        
        // glSemaphoreParameterui64vEXT
        public static void glSemaphoreParameterui64vEXT(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters) => glSemaphoreParameterui64vEXTPtr?.Invoke(semaphore, pname, parameters);
        private delegate void glSemaphoreParameterui64vEXTDel(uint  semaphore, uint /*SemaphoreParameterName*/  pname, ulong[]  parameters);
        private static glSemaphoreParameterui64vEXTDel glSemaphoreParameterui64vEXTPtr;
        
        // glSeparableFilter2D
        public static void glSeparableFilter2D(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column) => glSeparableFilter2DPtr?.Invoke(target, internalformat, width, height, format, type, row, column);
        private delegate void glSeparableFilter2DDel(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column);
        private static glSeparableFilter2DDel glSeparableFilter2DPtr;
        
        // glSeparableFilter2DEXT
        public static void glSeparableFilter2DEXT(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column) => glSeparableFilter2DEXTPtr?.Invoke(target, internalformat, width, height, format, type, row, column);
        private delegate void glSeparableFilter2DEXTDel(uint /*SeparableTargetEXT*/  target, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  row, IntPtr  column);
        private static glSeparableFilter2DEXTDel glSeparableFilter2DEXTPtr;
        
        // glSetFenceAPPLE
        public static void glSetFenceAPPLE(uint /*FenceNV*/  fence) => glSetFenceAPPLEPtr?.Invoke(fence);
        private delegate void glSetFenceAPPLEDel(uint /*FenceNV*/  fence);
        private static glSetFenceAPPLEDel glSetFenceAPPLEPtr;
        
        // glSetFenceNV
        public static void glSetFenceNV(uint /*FenceNV*/  fence, uint /*FenceConditionNV*/  condition) => glSetFenceNVPtr?.Invoke(fence, condition);
        private delegate void glSetFenceNVDel(uint /*FenceNV*/  fence, uint /*FenceConditionNV*/  condition);
        private static glSetFenceNVDel glSetFenceNVPtr;
        
        // glSetFragmentShaderConstantATI
        public static void glSetFragmentShaderConstantATI(uint  dst, float[]  value) => glSetFragmentShaderConstantATIPtr?.Invoke(dst, value);
        private delegate void glSetFragmentShaderConstantATIDel(uint  dst, float[]  value);
        private static glSetFragmentShaderConstantATIDel glSetFragmentShaderConstantATIPtr;
        
        // glSetInvariantEXT
        public static void glSetInvariantEXT(uint  id, uint /*ScalarType*/  type, IntPtr  addr) => glSetInvariantEXTPtr?.Invoke(id, type, addr);
        private delegate void glSetInvariantEXTDel(uint  id, uint /*ScalarType*/  type, IntPtr  addr);
        private static glSetInvariantEXTDel glSetInvariantEXTPtr;
        
        // glSetLocalConstantEXT
        public static void glSetLocalConstantEXT(uint  id, uint /*ScalarType*/  type, IntPtr  addr) => glSetLocalConstantEXTPtr?.Invoke(id, type, addr);
        private delegate void glSetLocalConstantEXTDel(uint  id, uint /*ScalarType*/  type, IntPtr  addr);
        private static glSetLocalConstantEXTDel glSetLocalConstantEXTPtr;
        
        // glSetMultisamplefvAMD
        public static void glSetMultisamplefvAMD(uint  pname, uint  index, float[]  val) => glSetMultisamplefvAMDPtr?.Invoke(pname, index, val);
        private delegate void glSetMultisamplefvAMDDel(uint  pname, uint  index, float[]  val);
        private static glSetMultisamplefvAMDDel glSetMultisamplefvAMDPtr;
        
        // glShadeModel
        public static void glShadeModel(uint /*ShadingModel*/  mode) => glShadeModelPtr?.Invoke(mode);
        private delegate void glShadeModelDel(uint /*ShadingModel*/  mode);
        private static glShadeModelDel glShadeModelPtr;
        
        // glShaderBinary
        public static void glShaderBinary(uint  count, uint[]  shaders, uint  binaryformat, IntPtr  binary, uint  length) => glShaderBinaryPtr?.Invoke(count, shaders, binaryformat, binary, length);
        private delegate void glShaderBinaryDel(uint  count, uint[]  shaders, uint  binaryformat, IntPtr  binary, uint  length);
        private static glShaderBinaryDel glShaderBinaryPtr;
        
        // glShaderOp1EXT
        public static void glShaderOp1EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1) => glShaderOp1EXTPtr?.Invoke(op, res, arg1);
        private delegate void glShaderOp1EXTDel(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1);
        private static glShaderOp1EXTDel glShaderOp1EXTPtr;
        
        // glShaderOp2EXT
        public static void glShaderOp2EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2) => glShaderOp2EXTPtr?.Invoke(op, res, arg1, arg2);
        private delegate void glShaderOp2EXTDel(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2);
        private static glShaderOp2EXTDel glShaderOp2EXTPtr;
        
        // glShaderOp3EXT
        public static void glShaderOp3EXT(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2, uint  arg3) => glShaderOp3EXTPtr?.Invoke(op, res, arg1, arg2, arg3);
        private delegate void glShaderOp3EXTDel(uint /*VertexShaderOpEXT*/  op, uint  res, uint  arg1, uint  arg2, uint  arg3);
        private static glShaderOp3EXTDel glShaderOp3EXTPtr;
        
        // glShaderSource
        public static void glShaderSource(uint  shader, uint  count, string  str, int[]  length) => glShaderSourcePtr?.Invoke(shader, count, str, length);
        private delegate void glShaderSourceDel(uint  shader, uint  count, string  str, int[]  length);
        private static glShaderSourceDel glShaderSourcePtr;
        
        // glShaderSourceARB
        public static void glShaderSourceARB(IntPtr /*handleARB*/  shaderObj, uint  count, string  str, int[]  length) => glShaderSourceARBPtr?.Invoke(shaderObj, count, str, length);
        private delegate void glShaderSourceARBDel(IntPtr /*handleARB*/  shaderObj, uint  count, string  str, int[]  length);
        private static glShaderSourceARBDel glShaderSourceARBPtr;
        
        // glShaderStorageBlockBinding
        public static void glShaderStorageBlockBinding(uint  program, uint  storageBlockIndex, uint  storageBlockBinding) => glShaderStorageBlockBindingPtr?.Invoke(program, storageBlockIndex, storageBlockBinding);
        private delegate void glShaderStorageBlockBindingDel(uint  program, uint  storageBlockIndex, uint  storageBlockBinding);
        private static glShaderStorageBlockBindingDel glShaderStorageBlockBindingPtr;
        
        // glShadingRateImageBarrierNV
        public static void glShadingRateImageBarrierNV(bool /*Boolean*/  synchronize) => glShadingRateImageBarrierNVPtr?.Invoke(synchronize);
        private delegate void glShadingRateImageBarrierNVDel(bool /*Boolean*/  synchronize);
        private static glShadingRateImageBarrierNVDel glShadingRateImageBarrierNVPtr;
        
        // glShadingRateQCOM
        public static void glShadingRateQCOM(uint /*ShadingRateQCOM*/  rate) => glShadingRateQCOMPtr?.Invoke(rate);
        private delegate void glShadingRateQCOMDel(uint /*ShadingRateQCOM*/  rate);
        private static glShadingRateQCOMDel glShadingRateQCOMPtr;
        
        // glShadingRateImagePaletteNV
        public static void glShadingRateImagePaletteNV(uint  viewport, uint  first, uint  count, uint[]  rates) => glShadingRateImagePaletteNVPtr?.Invoke(viewport, first, count, rates);
        private delegate void glShadingRateImagePaletteNVDel(uint  viewport, uint  first, uint  count, uint[]  rates);
        private static glShadingRateImagePaletteNVDel glShadingRateImagePaletteNVPtr;
        
        // glShadingRateSampleOrderNV
        public static void glShadingRateSampleOrderNV(uint  order) => glShadingRateSampleOrderNVPtr?.Invoke(order);
        private delegate void glShadingRateSampleOrderNVDel(uint  order);
        private static glShadingRateSampleOrderNVDel glShadingRateSampleOrderNVPtr;
        
        // glShadingRateSampleOrderCustomNV
        public static void glShadingRateSampleOrderCustomNV(uint  rate, uint  samples, int[]  locations) => glShadingRateSampleOrderCustomNVPtr?.Invoke(rate, samples, locations);
        private delegate void glShadingRateSampleOrderCustomNVDel(uint  rate, uint  samples, int[]  locations);
        private static glShadingRateSampleOrderCustomNVDel glShadingRateSampleOrderCustomNVPtr;
        
        // glSharpenTexFuncSGIS
        public static void glSharpenTexFuncSGIS(uint /*TextureTarget*/  target, uint  n, float[]  points) => glSharpenTexFuncSGISPtr?.Invoke(target, n, points);
        private delegate void glSharpenTexFuncSGISDel(uint /*TextureTarget*/  target, uint  n, float[]  points);
        private static glSharpenTexFuncSGISDel glSharpenTexFuncSGISPtr;
        
        // glSignalSemaphoreEXT
        public static void glSignalSemaphoreEXT(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  dstLayouts) => glSignalSemaphoreEXTPtr?.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
        private delegate void glSignalSemaphoreEXTDel(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  dstLayouts);
        private static glSignalSemaphoreEXTDel glSignalSemaphoreEXTPtr;
        
        // glSignalSemaphoreui64NVX
        public static void glSignalSemaphoreui64NVX(uint  signalGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => glSignalSemaphoreui64NVXPtr?.Invoke(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        private delegate void glSignalSemaphoreui64NVXDel(uint  signalGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray);
        private static glSignalSemaphoreui64NVXDel glSignalSemaphoreui64NVXPtr;
        
        // glSpecializeShader
        public static void glSpecializeShader(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue) => glSpecializeShaderPtr?.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        private delegate void glSpecializeShaderDel(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue);
        private static glSpecializeShaderDel glSpecializeShaderPtr;
        
        // glSpecializeShaderARB
        public static void glSpecializeShaderARB(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue) => glSpecializeShaderARBPtr?.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
        private delegate void glSpecializeShaderARBDel(uint  shader, string  pEntryPoint, uint  numSpecializationConstants, uint[]  pConstantIndex, uint[]  pConstantValue);
        private static glSpecializeShaderARBDel glSpecializeShaderARBPtr;
        
        // glSpriteParameterfSGIX
        public static void glSpriteParameterfSGIX(uint /*SpriteParameterNameSGIX*/  pname, float /*CheckedFloat32*/  param) => glSpriteParameterfSGIXPtr?.Invoke(pname, param);
        private delegate void glSpriteParameterfSGIXDel(uint /*SpriteParameterNameSGIX*/  pname, float /*CheckedFloat32*/  param);
        private static glSpriteParameterfSGIXDel glSpriteParameterfSGIXPtr;
        
        // glSpriteParameterfvSGIX
        public static void glSpriteParameterfvSGIX(uint /*SpriteParameterNameSGIX*/  pname, float[] /*CheckedFloat32*/  parameters) => glSpriteParameterfvSGIXPtr?.Invoke(pname, parameters);
        private delegate void glSpriteParameterfvSGIXDel(uint /*SpriteParameterNameSGIX*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glSpriteParameterfvSGIXDel glSpriteParameterfvSGIXPtr;
        
        // glSpriteParameteriSGIX
        public static void glSpriteParameteriSGIX(uint /*SpriteParameterNameSGIX*/  pname, int /*CheckedInt32*/  param) => glSpriteParameteriSGIXPtr?.Invoke(pname, param);
        private delegate void glSpriteParameteriSGIXDel(uint /*SpriteParameterNameSGIX*/  pname, int /*CheckedInt32*/  param);
        private static glSpriteParameteriSGIXDel glSpriteParameteriSGIXPtr;
        
        // glSpriteParameterivSGIX
        public static void glSpriteParameterivSGIX(uint /*SpriteParameterNameSGIX*/  pname, int[] /*CheckedInt32*/  parameters) => glSpriteParameterivSGIXPtr?.Invoke(pname, parameters);
        private delegate void glSpriteParameterivSGIXDel(uint /*SpriteParameterNameSGIX*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glSpriteParameterivSGIXDel glSpriteParameterivSGIXPtr;
        
        // glStartInstrumentsSGIX
        public static void glStartInstrumentsSGIX() => glStartInstrumentsSGIXPtr?.Invoke();
        private delegate void glStartInstrumentsSGIXDel();
        private static glStartInstrumentsSGIXDel glStartInstrumentsSGIXPtr;
        
        // glStartTilingQCOM
        public static void glStartTilingQCOM(uint  x, uint  y, uint  width, uint  height, uint /*BufferBitQCOM*/  preserveMask) => glStartTilingQCOMPtr?.Invoke(x, y, width, height, preserveMask);
        private delegate void glStartTilingQCOMDel(uint  x, uint  y, uint  width, uint  height, uint /*BufferBitQCOM*/  preserveMask);
        private static glStartTilingQCOMDel glStartTilingQCOMPtr;
        
        // glStateCaptureNV
        public static void glStateCaptureNV(uint  state, uint  mode) => glStateCaptureNVPtr?.Invoke(state, mode);
        private delegate void glStateCaptureNVDel(uint  state, uint  mode);
        private static glStateCaptureNVDel glStateCaptureNVPtr;
        
        // glStencilClearTagEXT
        public static void glStencilClearTagEXT(uint  stencilTagBits, uint  stencilClearTag) => glStencilClearTagEXTPtr?.Invoke(stencilTagBits, stencilClearTag);
        private delegate void glStencilClearTagEXTDel(uint  stencilTagBits, uint  stencilClearTag);
        private static glStencilClearTagEXTDel glStencilClearTagEXTPtr;
        
        // glStencilFillPathInstancedNV
        public static void glStencilFillPathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues) => glStencilFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
        private delegate void glStencilFillPathInstancedNVDel(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues);
        private static glStencilFillPathInstancedNVDel glStencilFillPathInstancedNVPtr;
        
        // glStencilFillPathNV
        public static void glStencilFillPathNV(uint /*Path*/  path, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask) => glStencilFillPathNVPtr?.Invoke(path, fillMode, mask);
        private delegate void glStencilFillPathNVDel(uint /*Path*/  path, uint /*PathFillMode*/  fillMode, uint /*MaskedStencilValue*/  mask);
        private static glStencilFillPathNVDel glStencilFillPathNVPtr;
        
        // glStencilFunc
        public static void glStencilFunc(uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => glStencilFuncPtr?.Invoke(func, refVal, mask);
        private delegate void glStencilFuncDel(uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask);
        private static glStencilFuncDel glStencilFuncPtr;
        
        // glStencilFuncSeparate
        public static void glStencilFuncSeparate(uint /*StencilFaceDirection*/  face, uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => glStencilFuncSeparatePtr?.Invoke(face, func, refVal, mask);
        private delegate void glStencilFuncSeparateDel(uint /*StencilFaceDirection*/  face, uint /*StencilFunction*/  func, int /*StencilValue*/  refVal, uint /*MaskedStencilValue*/  mask);
        private static glStencilFuncSeparateDel glStencilFuncSeparatePtr;
        
        // glStencilFuncSeparateATI
        public static void glStencilFuncSeparateATI(uint /*StencilFunction*/  frontfunc, uint /*StencilFunction*/  backfunc, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask) => glStencilFuncSeparateATIPtr?.Invoke(frontfunc, backfunc, refVal, mask);
        private delegate void glStencilFuncSeparateATIDel(uint /*StencilFunction*/  frontfunc, uint /*StencilFunction*/  backfunc, int /*ClampedStencilValue*/  refVal, uint /*MaskedStencilValue*/  mask);
        private static glStencilFuncSeparateATIDel glStencilFuncSeparateATIPtr;
        
        // glStencilMask
        public static void glStencilMask(uint /*MaskedStencilValue*/  mask) => glStencilMaskPtr?.Invoke(mask);
        private delegate void glStencilMaskDel(uint /*MaskedStencilValue*/  mask);
        private static glStencilMaskDel glStencilMaskPtr;
        
        // glStencilMaskSeparate
        public static void glStencilMaskSeparate(uint /*StencilFaceDirection*/  face, uint /*MaskedStencilValue*/  mask) => glStencilMaskSeparatePtr?.Invoke(face, mask);
        private delegate void glStencilMaskSeparateDel(uint /*StencilFaceDirection*/  face, uint /*MaskedStencilValue*/  mask);
        private static glStencilMaskSeparateDel glStencilMaskSeparatePtr;
        
        // glStencilOp
        public static void glStencilOp(uint /*StencilOp*/  fail, uint /*StencilOp*/  zfail, uint /*StencilOp*/  zpass) => glStencilOpPtr?.Invoke(fail, zfail, zpass);
        private delegate void glStencilOpDel(uint /*StencilOp*/  fail, uint /*StencilOp*/  zfail, uint /*StencilOp*/  zpass);
        private static glStencilOpDel glStencilOpPtr;
        
        // glStencilOpSeparate
        public static void glStencilOpSeparate(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass) => glStencilOpSeparatePtr?.Invoke(face, sfail, dpfail, dppass);
        private delegate void glStencilOpSeparateDel(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass);
        private static glStencilOpSeparateDel glStencilOpSeparatePtr;
        
        // glStencilOpSeparateATI
        public static void glStencilOpSeparateATI(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass) => glStencilOpSeparateATIPtr?.Invoke(face, sfail, dpfail, dppass);
        private delegate void glStencilOpSeparateATIDel(uint /*StencilFaceDirection*/  face, uint /*StencilOp*/  sfail, uint /*StencilOp*/  dpfail, uint /*StencilOp*/  dppass);
        private static glStencilOpSeparateATIDel glStencilOpSeparateATIPtr;
        
        // glStencilOpValueAMD
        public static void glStencilOpValueAMD(uint /*StencilFaceDirection*/  face, uint  value) => glStencilOpValueAMDPtr?.Invoke(face, value);
        private delegate void glStencilOpValueAMDDel(uint /*StencilFaceDirection*/  face, uint  value);
        private static glStencilOpValueAMDDel glStencilOpValueAMDPtr;
        
        // glStencilStrokePathInstancedNV
        public static void glStencilStrokePathInstancedNV(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues) => glStencilStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
        private delegate void glStencilStrokePathInstancedNVDel(uint  numPaths, uint /*PathElementType*/  pathNameType, IntPtr /*PathElement*/  paths, uint /*Path*/  pathBase, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask, uint /*PathTransformType*/  transformType, float[]  transformValues);
        private static glStencilStrokePathInstancedNVDel glStencilStrokePathInstancedNVPtr;
        
        // glStencilStrokePathNV
        public static void glStencilStrokePathNV(uint /*Path*/  path, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask) => glStencilStrokePathNVPtr?.Invoke(path, reference, mask);
        private delegate void glStencilStrokePathNVDel(uint /*Path*/  path, int /*StencilValue*/  reference, uint /*MaskedStencilValue*/  mask);
        private static glStencilStrokePathNVDel glStencilStrokePathNVPtr;
        
        // glStencilThenCoverFillPathInstancedNV
        public static void glStencilThenCoverFillPathInstancedNV(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, uint  fillMode, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues) => glStencilThenCoverFillPathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);
        private delegate void glStencilThenCoverFillPathInstancedNVDel(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, uint  fillMode, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues);
        private static glStencilThenCoverFillPathInstancedNVDel glStencilThenCoverFillPathInstancedNVPtr;
        
        // glStencilThenCoverFillPathNV
        public static void glStencilThenCoverFillPathNV(uint  path, uint  fillMode, uint  mask, uint  coverMode) => glStencilThenCoverFillPathNVPtr?.Invoke(path, fillMode, mask, coverMode);
        private delegate void glStencilThenCoverFillPathNVDel(uint  path, uint  fillMode, uint  mask, uint  coverMode);
        private static glStencilThenCoverFillPathNVDel glStencilThenCoverFillPathNVPtr;
        
        // glStencilThenCoverStrokePathInstancedNV
        public static void glStencilThenCoverStrokePathInstancedNV(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, int  reference, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues) => glStencilThenCoverStrokePathInstancedNVPtr?.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);
        private delegate void glStencilThenCoverStrokePathInstancedNVDel(uint  numPaths, uint  pathNameType, IntPtr  paths, uint  pathBase, int  reference, uint  mask, uint  coverMode, uint  transformType, float[]  transformValues);
        private static glStencilThenCoverStrokePathInstancedNVDel glStencilThenCoverStrokePathInstancedNVPtr;
        
        // glStencilThenCoverStrokePathNV
        public static void glStencilThenCoverStrokePathNV(uint  path, int  reference, uint  mask, uint  coverMode) => glStencilThenCoverStrokePathNVPtr?.Invoke(path, reference, mask, coverMode);
        private delegate void glStencilThenCoverStrokePathNVDel(uint  path, int  reference, uint  mask, uint  coverMode);
        private static glStencilThenCoverStrokePathNVDel glStencilThenCoverStrokePathNVPtr;
        
        // glStopInstrumentsSGIX
        public static void glStopInstrumentsSGIX(int  marker) => glStopInstrumentsSGIXPtr?.Invoke(marker);
        private delegate void glStopInstrumentsSGIXDel(int  marker);
        private static glStopInstrumentsSGIXDel glStopInstrumentsSGIXPtr;
        
        // glStringMarkerGREMEDY
        public static void glStringMarkerGREMEDY(uint  len, IntPtr  str) => glStringMarkerGREMEDYPtr?.Invoke(len, str);
        private delegate void glStringMarkerGREMEDYDel(uint  len, IntPtr  str);
        private static glStringMarkerGREMEDYDel glStringMarkerGREMEDYPtr;
        
        // glSubpixelPrecisionBiasNV
        public static void glSubpixelPrecisionBiasNV(uint  xbits, uint  ybits) => glSubpixelPrecisionBiasNVPtr?.Invoke(xbits, ybits);
        private delegate void glSubpixelPrecisionBiasNVDel(uint  xbits, uint  ybits);
        private static glSubpixelPrecisionBiasNVDel glSubpixelPrecisionBiasNVPtr;
        
        // glSwizzleEXT
        public static void glSwizzleEXT(uint  res, uint  inp, uint /*VertexShaderCoordOutEXT*/  outX, uint /*VertexShaderCoordOutEXT*/  outY, uint /*VertexShaderCoordOutEXT*/  outZ, uint /*VertexShaderCoordOutEXT*/  outW) => glSwizzleEXTPtr?.Invoke(res, inp, outX, outY, outZ, outW);
        private delegate void glSwizzleEXTDel(uint  res, uint  inp, uint /*VertexShaderCoordOutEXT*/  outX, uint /*VertexShaderCoordOutEXT*/  outY, uint /*VertexShaderCoordOutEXT*/  outZ, uint /*VertexShaderCoordOutEXT*/  outW);
        private static glSwizzleEXTDel glSwizzleEXTPtr;
        
        // glSyncTextureINTEL
        public static void glSyncTextureINTEL(uint  texture) => glSyncTextureINTELPtr?.Invoke(texture);
        private delegate void glSyncTextureINTELDel(uint  texture);
        private static glSyncTextureINTELDel glSyncTextureINTELPtr;
        
        // glTagSampleBufferSGIX
        public static void glTagSampleBufferSGIX() => glTagSampleBufferSGIXPtr?.Invoke();
        private delegate void glTagSampleBufferSGIXDel();
        private static glTagSampleBufferSGIXDel glTagSampleBufferSGIXPtr;
        
        // glTangent3bEXT
        public static void glTangent3bEXT(sbyte  tx, sbyte  ty, sbyte  tz) => glTangent3bEXTPtr?.Invoke(tx, ty, tz);
        private delegate void glTangent3bEXTDel(sbyte  tx, sbyte  ty, sbyte  tz);
        private static glTangent3bEXTDel glTangent3bEXTPtr;
        
        // glTangent3bvEXT
        public static void glTangent3bvEXT(sbyte[]  v) => glTangent3bvEXTPtr?.Invoke(v);
        private delegate void glTangent3bvEXTDel(sbyte[]  v);
        private static glTangent3bvEXTDel glTangent3bvEXTPtr;
        
        // glTangent3dEXT
        public static void glTangent3dEXT(double /*CoordD*/  tx, double /*CoordD*/  ty, double /*CoordD*/  tz) => glTangent3dEXTPtr?.Invoke(tx, ty, tz);
        private delegate void glTangent3dEXTDel(double /*CoordD*/  tx, double /*CoordD*/  ty, double /*CoordD*/  tz);
        private static glTangent3dEXTDel glTangent3dEXTPtr;
        
        // glTangent3dvEXT
        public static void glTangent3dvEXT(double[] /*CoordD*/  v) => glTangent3dvEXTPtr?.Invoke(v);
        private delegate void glTangent3dvEXTDel(double[] /*CoordD*/  v);
        private static glTangent3dvEXTDel glTangent3dvEXTPtr;
        
        // glTangent3fEXT
        public static void glTangent3fEXT(float /*CoordF*/  tx, float /*CoordF*/  ty, float /*CoordF*/  tz) => glTangent3fEXTPtr?.Invoke(tx, ty, tz);
        private delegate void glTangent3fEXTDel(float /*CoordF*/  tx, float /*CoordF*/  ty, float /*CoordF*/  tz);
        private static glTangent3fEXTDel glTangent3fEXTPtr;
        
        // glTangent3fvEXT
        public static void glTangent3fvEXT(float[] /*CoordF*/  v) => glTangent3fvEXTPtr?.Invoke(v);
        private delegate void glTangent3fvEXTDel(float[] /*CoordF*/  v);
        private static glTangent3fvEXTDel glTangent3fvEXTPtr;
        
        // glTangent3iEXT
        public static void glTangent3iEXT(int  tx, int  ty, int  tz) => glTangent3iEXTPtr?.Invoke(tx, ty, tz);
        private delegate void glTangent3iEXTDel(int  tx, int  ty, int  tz);
        private static glTangent3iEXTDel glTangent3iEXTPtr;
        
        // glTangent3ivEXT
        public static void glTangent3ivEXT(int[]  v) => glTangent3ivEXTPtr?.Invoke(v);
        private delegate void glTangent3ivEXTDel(int[]  v);
        private static glTangent3ivEXTDel glTangent3ivEXTPtr;
        
        // glTangent3sEXT
        public static void glTangent3sEXT(short  tx, short  ty, short  tz) => glTangent3sEXTPtr?.Invoke(tx, ty, tz);
        private delegate void glTangent3sEXTDel(short  tx, short  ty, short  tz);
        private static glTangent3sEXTDel glTangent3sEXTPtr;
        
        // glTangent3svEXT
        public static void glTangent3svEXT(short[]  v) => glTangent3svEXTPtr?.Invoke(v);
        private delegate void glTangent3svEXTDel(short[]  v);
        private static glTangent3svEXTDel glTangent3svEXTPtr;
        
        // glTangentPointerEXT
        public static void glTangentPointerEXT(uint /*TangentPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => glTangentPointerEXTPtr?.Invoke(type, stride, pointer);
        private delegate void glTangentPointerEXTDel(uint /*TangentPointerTypeEXT*/  type, uint  stride, IntPtr  pointer);
        private static glTangentPointerEXTDel glTangentPointerEXTPtr;
        
        // glTbufferMask3DFX
        public static void glTbufferMask3DFX(uint  mask) => glTbufferMask3DFXPtr?.Invoke(mask);
        private delegate void glTbufferMask3DFXDel(uint  mask);
        private static glTbufferMask3DFXDel glTbufferMask3DFXPtr;
        
        // glTessellationFactorAMD
        public static void glTessellationFactorAMD(float  factor) => glTessellationFactorAMDPtr?.Invoke(factor);
        private delegate void glTessellationFactorAMDDel(float  factor);
        private static glTessellationFactorAMDDel glTessellationFactorAMDPtr;
        
        // glTessellationModeAMD
        public static void glTessellationModeAMD(uint  mode) => glTessellationModeAMDPtr?.Invoke(mode);
        private delegate void glTessellationModeAMDDel(uint  mode);
        private static glTessellationModeAMDDel glTessellationModeAMDPtr;
        
        // glTestFenceAPPLE
        public static bool /*Boolean*/ glTestFenceAPPLE(uint /*FenceNV*/  fence) => glTestFenceAPPLEPtr?.Invoke(fence) ?? default;
        private delegate bool /*Boolean*/ glTestFenceAPPLEDel(uint /*FenceNV*/  fence);
        private static glTestFenceAPPLEDel glTestFenceAPPLEPtr;
        
        // glTestFenceNV
        public static bool /*Boolean*/ glTestFenceNV(uint /*FenceNV*/  fence) => glTestFenceNVPtr?.Invoke(fence) ?? default;
        private delegate bool /*Boolean*/ glTestFenceNVDel(uint /*FenceNV*/  fence);
        private static glTestFenceNVDel glTestFenceNVPtr;
        
        // glTestObjectAPPLE
        public static bool /*Boolean*/ glTestObjectAPPLE(uint /*ObjectTypeAPPLE*/  obj, uint  name) => glTestObjectAPPLEPtr?.Invoke(obj, name) ?? default;
        private delegate bool /*Boolean*/ glTestObjectAPPLEDel(uint /*ObjectTypeAPPLE*/  obj, uint  name);
        private static glTestObjectAPPLEDel glTestObjectAPPLEPtr;
        
        // glTexAttachMemoryNV
        public static void glTexAttachMemoryNV(uint /*TextureTarget*/  target, uint  memory, ulong  offset) => glTexAttachMemoryNVPtr?.Invoke(target, memory, offset);
        private delegate void glTexAttachMemoryNVDel(uint /*TextureTarget*/  target, uint  memory, ulong  offset);
        private static glTexAttachMemoryNVDel glTexAttachMemoryNVPtr;
        
        // glTexBuffer
        public static void glTexBuffer(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => glTexBufferPtr?.Invoke(target, internalformat, buffer);
        private delegate void glTexBufferDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTexBufferDel glTexBufferPtr;
        
        // glTexBufferARB
        public static void glTexBufferARB(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => glTexBufferARBPtr?.Invoke(target, internalformat, buffer);
        private delegate void glTexBufferARBDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTexBufferARBDel glTexBufferARBPtr;
        
        // glTexBufferEXT
        public static void glTexBufferEXT(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => glTexBufferEXTPtr?.Invoke(target, internalformat, buffer);
        private delegate void glTexBufferEXTDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTexBufferEXTDel glTexBufferEXTPtr;
        
        // glTexBufferOES
        public static void glTexBufferOES(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => glTexBufferOESPtr?.Invoke(target, internalformat, buffer);
        private delegate void glTexBufferOESDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTexBufferOESDel glTexBufferOESPtr;
        
        // glTexBufferRange
        public static void glTexBufferRange(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glTexBufferRangePtr?.Invoke(target, internalformat, buffer, offset, size);
        private delegate void glTexBufferRangeDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glTexBufferRangeDel glTexBufferRangePtr;
        
        // glTexBufferRangeEXT
        public static void glTexBufferRangeEXT(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glTexBufferRangeEXTPtr?.Invoke(target, internalformat, buffer, offset, size);
        private delegate void glTexBufferRangeEXTDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glTexBufferRangeEXTDel glTexBufferRangeEXTPtr;
        
        // glTexBufferRangeOES
        public static void glTexBufferRangeOES(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glTexBufferRangeOESPtr?.Invoke(target, internalformat, buffer, offset, size);
        private delegate void glTexBufferRangeOESDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glTexBufferRangeOESDel glTexBufferRangeOESPtr;
        
        // glTexBumpParameterfvATI
        public static void glTexBumpParameterfvATI(uint /*TexBumpParameterATI*/  pname, float[]  param) => glTexBumpParameterfvATIPtr?.Invoke(pname, param);
        private delegate void glTexBumpParameterfvATIDel(uint /*TexBumpParameterATI*/  pname, float[]  param);
        private static glTexBumpParameterfvATIDel glTexBumpParameterfvATIPtr;
        
        // glTexBumpParameterivATI
        public static void glTexBumpParameterivATI(uint /*TexBumpParameterATI*/  pname, int[]  param) => glTexBumpParameterivATIPtr?.Invoke(pname, param);
        private delegate void glTexBumpParameterivATIDel(uint /*TexBumpParameterATI*/  pname, int[]  param);
        private static glTexBumpParameterivATIDel glTexBumpParameterivATIPtr;
        
        // glTexCoord1bOES
        public static void glTexCoord1bOES(sbyte  s) => glTexCoord1bOESPtr?.Invoke(s);
        private delegate void glTexCoord1bOESDel(sbyte  s);
        private static glTexCoord1bOESDel glTexCoord1bOESPtr;
        
        // glTexCoord1bvOES
        public static void glTexCoord1bvOES(sbyte[]  coords) => glTexCoord1bvOESPtr?.Invoke(coords);
        private delegate void glTexCoord1bvOESDel(sbyte[]  coords);
        private static glTexCoord1bvOESDel glTexCoord1bvOESPtr;
        
        // glTexCoord1d
        public static void glTexCoord1d(double /*CoordD*/  s) => glTexCoord1dPtr?.Invoke(s);
        private delegate void glTexCoord1dDel(double /*CoordD*/  s);
        private static glTexCoord1dDel glTexCoord1dPtr;
        
        // glTexCoord1dv
        public static void glTexCoord1dv(double[] /*CoordD*/  v) => glTexCoord1dvPtr?.Invoke(v);
        private delegate void glTexCoord1dvDel(double[] /*CoordD*/  v);
        private static glTexCoord1dvDel glTexCoord1dvPtr;
        
        // glTexCoord1f
        public static void glTexCoord1f(float /*CoordF*/  s) => glTexCoord1fPtr?.Invoke(s);
        private delegate void glTexCoord1fDel(float /*CoordF*/  s);
        private static glTexCoord1fDel glTexCoord1fPtr;
        
        // glTexCoord1fv
        public static void glTexCoord1fv(float[] /*CoordF*/  v) => glTexCoord1fvPtr?.Invoke(v);
        private delegate void glTexCoord1fvDel(float[] /*CoordF*/  v);
        private static glTexCoord1fvDel glTexCoord1fvPtr;
        
        // glTexCoord1hNV
        public static void glTexCoord1hNV(ushort /*Half16NV*/  s) => glTexCoord1hNVPtr?.Invoke(s);
        private delegate void glTexCoord1hNVDel(ushort /*Half16NV*/  s);
        private static glTexCoord1hNVDel glTexCoord1hNVPtr;
        
        // glTexCoord1hvNV
        public static void glTexCoord1hvNV(ushort[] /*Half16NV*/  v) => glTexCoord1hvNVPtr?.Invoke(v);
        private delegate void glTexCoord1hvNVDel(ushort[] /*Half16NV*/  v);
        private static glTexCoord1hvNVDel glTexCoord1hvNVPtr;
        
        // glTexCoord1i
        public static void glTexCoord1i(int /*CoordI*/  s) => glTexCoord1iPtr?.Invoke(s);
        private delegate void glTexCoord1iDel(int /*CoordI*/  s);
        private static glTexCoord1iDel glTexCoord1iPtr;
        
        // glTexCoord1iv
        public static void glTexCoord1iv(int[] /*CoordI*/  v) => glTexCoord1ivPtr?.Invoke(v);
        private delegate void glTexCoord1ivDel(int[] /*CoordI*/  v);
        private static glTexCoord1ivDel glTexCoord1ivPtr;
        
        // glTexCoord1s
        public static void glTexCoord1s(short /*CoordS*/  s) => glTexCoord1sPtr?.Invoke(s);
        private delegate void glTexCoord1sDel(short /*CoordS*/  s);
        private static glTexCoord1sDel glTexCoord1sPtr;
        
        // glTexCoord1sv
        public static void glTexCoord1sv(short[] /*CoordS*/  v) => glTexCoord1svPtr?.Invoke(v);
        private delegate void glTexCoord1svDel(short[] /*CoordS*/  v);
        private static glTexCoord1svDel glTexCoord1svPtr;
        
        // glTexCoord1xOES
        public static void glTexCoord1xOES(int  s) => glTexCoord1xOESPtr?.Invoke(s);
        private delegate void glTexCoord1xOESDel(int  s);
        private static glTexCoord1xOESDel glTexCoord1xOESPtr;
        
        // glTexCoord1xvOES
        public static void glTexCoord1xvOES(int[]  coords) => glTexCoord1xvOESPtr?.Invoke(coords);
        private delegate void glTexCoord1xvOESDel(int[]  coords);
        private static glTexCoord1xvOESDel glTexCoord1xvOESPtr;
        
        // glTexCoord2bOES
        public static void glTexCoord2bOES(sbyte  s, sbyte  t) => glTexCoord2bOESPtr?.Invoke(s, t);
        private delegate void glTexCoord2bOESDel(sbyte  s, sbyte  t);
        private static glTexCoord2bOESDel glTexCoord2bOESPtr;
        
        // glTexCoord2bvOES
        public static void glTexCoord2bvOES(sbyte[]  coords) => glTexCoord2bvOESPtr?.Invoke(coords);
        private delegate void glTexCoord2bvOESDel(sbyte[]  coords);
        private static glTexCoord2bvOESDel glTexCoord2bvOESPtr;
        
        // glTexCoord2d
        public static void glTexCoord2d(double /*CoordD*/  s, double /*CoordD*/  t) => glTexCoord2dPtr?.Invoke(s, t);
        private delegate void glTexCoord2dDel(double /*CoordD*/  s, double /*CoordD*/  t);
        private static glTexCoord2dDel glTexCoord2dPtr;
        
        // glTexCoord2dv
        public static void glTexCoord2dv(double[] /*CoordD*/  v) => glTexCoord2dvPtr?.Invoke(v);
        private delegate void glTexCoord2dvDel(double[] /*CoordD*/  v);
        private static glTexCoord2dvDel glTexCoord2dvPtr;
        
        // glTexCoord2f
        public static void glTexCoord2f(float /*CoordF*/  s, float /*CoordF*/  t) => glTexCoord2fPtr?.Invoke(s, t);
        private delegate void glTexCoord2fDel(float /*CoordF*/  s, float /*CoordF*/  t);
        private static glTexCoord2fDel glTexCoord2fPtr;
        
        // glTexCoord2fColor3fVertex3fSUN
        public static void glTexCoord2fColor3fVertex3fSUN(float  s, float  t, float  r, float  g, float  b, float  x, float  y, float  z) => glTexCoord2fColor3fVertex3fSUNPtr?.Invoke(s, t, r, g, b, x, y, z);
        private delegate void glTexCoord2fColor3fVertex3fSUNDel(float  s, float  t, float  r, float  g, float  b, float  x, float  y, float  z);
        private static glTexCoord2fColor3fVertex3fSUNDel glTexCoord2fColor3fVertex3fSUNPtr;
        
        // glTexCoord2fColor3fVertex3fvSUN
        public static void glTexCoord2fColor3fVertex3fvSUN(float[]  tc, float[]  c, float[]  v) => glTexCoord2fColor3fVertex3fvSUNPtr?.Invoke(tc, c, v);
        private delegate void glTexCoord2fColor3fVertex3fvSUNDel(float[]  tc, float[]  c, float[]  v);
        private static glTexCoord2fColor3fVertex3fvSUNDel glTexCoord2fColor3fVertex3fvSUNPtr;
        
        // glTexCoord2fColor4fNormal3fVertex3fSUN
        public static void glTexCoord2fColor4fNormal3fVertex3fSUN(float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glTexCoord2fColor4fNormal3fVertex3fSUNPtr?.Invoke(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        private delegate void glTexCoord2fColor4fNormal3fVertex3fSUNDel(float  s, float  t, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glTexCoord2fColor4fNormal3fVertex3fSUNDel glTexCoord2fColor4fNormal3fVertex3fSUNPtr;
        
        // glTexCoord2fColor4fNormal3fVertex3fvSUN
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[]  tc, float[]  c, float[]  n, float[]  v) => glTexCoord2fColor4fNormal3fVertex3fvSUNPtr?.Invoke(tc, c, n, v);
        private delegate void glTexCoord2fColor4fNormal3fVertex3fvSUNDel(float[]  tc, float[]  c, float[]  n, float[]  v);
        private static glTexCoord2fColor4fNormal3fVertex3fvSUNDel glTexCoord2fColor4fNormal3fVertex3fvSUNPtr;
        
        // glTexCoord2fColor4ubVertex3fSUN
        public static void glTexCoord2fColor4ubVertex3fSUN(float  s, float  t, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z) => glTexCoord2fColor4ubVertex3fSUNPtr?.Invoke(s, t, r, g, b, a, x, y, z);
        private delegate void glTexCoord2fColor4ubVertex3fSUNDel(float  s, float  t, byte  r, byte  g, byte  b, byte  a, float  x, float  y, float  z);
        private static glTexCoord2fColor4ubVertex3fSUNDel glTexCoord2fColor4ubVertex3fSUNPtr;
        
        // glTexCoord2fColor4ubVertex3fvSUN
        public static void glTexCoord2fColor4ubVertex3fvSUN(float[]  tc, byte[]  c, float[]  v) => glTexCoord2fColor4ubVertex3fvSUNPtr?.Invoke(tc, c, v);
        private delegate void glTexCoord2fColor4ubVertex3fvSUNDel(float[]  tc, byte[]  c, float[]  v);
        private static glTexCoord2fColor4ubVertex3fvSUNDel glTexCoord2fColor4ubVertex3fvSUNPtr;
        
        // glTexCoord2fNormal3fVertex3fSUN
        public static void glTexCoord2fNormal3fVertex3fSUN(float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z) => glTexCoord2fNormal3fVertex3fSUNPtr?.Invoke(s, t, nx, ny, nz, x, y, z);
        private delegate void glTexCoord2fNormal3fVertex3fSUNDel(float  s, float  t, float  nx, float  ny, float  nz, float  x, float  y, float  z);
        private static glTexCoord2fNormal3fVertex3fSUNDel glTexCoord2fNormal3fVertex3fSUNPtr;
        
        // glTexCoord2fNormal3fVertex3fvSUN
        public static void glTexCoord2fNormal3fVertex3fvSUN(float[]  tc, float[]  n, float[]  v) => glTexCoord2fNormal3fVertex3fvSUNPtr?.Invoke(tc, n, v);
        private delegate void glTexCoord2fNormal3fVertex3fvSUNDel(float[]  tc, float[]  n, float[]  v);
        private static glTexCoord2fNormal3fVertex3fvSUNDel glTexCoord2fNormal3fVertex3fvSUNPtr;
        
        // glTexCoord2fVertex3fSUN
        public static void glTexCoord2fVertex3fSUN(float  s, float  t, float  x, float  y, float  z) => glTexCoord2fVertex3fSUNPtr?.Invoke(s, t, x, y, z);
        private delegate void glTexCoord2fVertex3fSUNDel(float  s, float  t, float  x, float  y, float  z);
        private static glTexCoord2fVertex3fSUNDel glTexCoord2fVertex3fSUNPtr;
        
        // glTexCoord2fVertex3fvSUN
        public static void glTexCoord2fVertex3fvSUN(float[]  tc, float[]  v) => glTexCoord2fVertex3fvSUNPtr?.Invoke(tc, v);
        private delegate void glTexCoord2fVertex3fvSUNDel(float[]  tc, float[]  v);
        private static glTexCoord2fVertex3fvSUNDel glTexCoord2fVertex3fvSUNPtr;
        
        // glTexCoord2fv
        public static void glTexCoord2fv(float[] /*CoordF*/  v) => glTexCoord2fvPtr?.Invoke(v);
        private delegate void glTexCoord2fvDel(float[] /*CoordF*/  v);
        private static glTexCoord2fvDel glTexCoord2fvPtr;
        
        // glTexCoord2hNV
        public static void glTexCoord2hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t) => glTexCoord2hNVPtr?.Invoke(s, t);
        private delegate void glTexCoord2hNVDel(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t);
        private static glTexCoord2hNVDel glTexCoord2hNVPtr;
        
        // glTexCoord2hvNV
        public static void glTexCoord2hvNV(ushort[] /*Half16NV*/  v) => glTexCoord2hvNVPtr?.Invoke(v);
        private delegate void glTexCoord2hvNVDel(ushort[] /*Half16NV*/  v);
        private static glTexCoord2hvNVDel glTexCoord2hvNVPtr;
        
        // glTexCoord2i
        public static void glTexCoord2i(int /*CoordI*/  s, int /*CoordI*/  t) => glTexCoord2iPtr?.Invoke(s, t);
        private delegate void glTexCoord2iDel(int /*CoordI*/  s, int /*CoordI*/  t);
        private static glTexCoord2iDel glTexCoord2iPtr;
        
        // glTexCoord2iv
        public static void glTexCoord2iv(int[] /*CoordI*/  v) => glTexCoord2ivPtr?.Invoke(v);
        private delegate void glTexCoord2ivDel(int[] /*CoordI*/  v);
        private static glTexCoord2ivDel glTexCoord2ivPtr;
        
        // glTexCoord2s
        public static void glTexCoord2s(short /*CoordS*/  s, short /*CoordS*/  t) => glTexCoord2sPtr?.Invoke(s, t);
        private delegate void glTexCoord2sDel(short /*CoordS*/  s, short /*CoordS*/  t);
        private static glTexCoord2sDel glTexCoord2sPtr;
        
        // glTexCoord2sv
        public static void glTexCoord2sv(short[] /*CoordS*/  v) => glTexCoord2svPtr?.Invoke(v);
        private delegate void glTexCoord2svDel(short[] /*CoordS*/  v);
        private static glTexCoord2svDel glTexCoord2svPtr;
        
        // glTexCoord2xOES
        public static void glTexCoord2xOES(int  s, int  t) => glTexCoord2xOESPtr?.Invoke(s, t);
        private delegate void glTexCoord2xOESDel(int  s, int  t);
        private static glTexCoord2xOESDel glTexCoord2xOESPtr;
        
        // glTexCoord2xvOES
        public static void glTexCoord2xvOES(int[]  coords) => glTexCoord2xvOESPtr?.Invoke(coords);
        private delegate void glTexCoord2xvOESDel(int[]  coords);
        private static glTexCoord2xvOESDel glTexCoord2xvOESPtr;
        
        // glTexCoord3bOES
        public static void glTexCoord3bOES(sbyte  s, sbyte  t, sbyte  r) => glTexCoord3bOESPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3bOESDel(sbyte  s, sbyte  t, sbyte  r);
        private static glTexCoord3bOESDel glTexCoord3bOESPtr;
        
        // glTexCoord3bvOES
        public static void glTexCoord3bvOES(sbyte[]  coords) => glTexCoord3bvOESPtr?.Invoke(coords);
        private delegate void glTexCoord3bvOESDel(sbyte[]  coords);
        private static glTexCoord3bvOESDel glTexCoord3bvOESPtr;
        
        // glTexCoord3d
        public static void glTexCoord3d(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r) => glTexCoord3dPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3dDel(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r);
        private static glTexCoord3dDel glTexCoord3dPtr;
        
        // glTexCoord3dv
        public static void glTexCoord3dv(double[] /*CoordD*/  v) => glTexCoord3dvPtr?.Invoke(v);
        private delegate void glTexCoord3dvDel(double[] /*CoordD*/  v);
        private static glTexCoord3dvDel glTexCoord3dvPtr;
        
        // glTexCoord3f
        public static void glTexCoord3f(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r) => glTexCoord3fPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3fDel(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r);
        private static glTexCoord3fDel glTexCoord3fPtr;
        
        // glTexCoord3fv
        public static void glTexCoord3fv(float[] /*CoordF*/  v) => glTexCoord3fvPtr?.Invoke(v);
        private delegate void glTexCoord3fvDel(float[] /*CoordF*/  v);
        private static glTexCoord3fvDel glTexCoord3fvPtr;
        
        // glTexCoord3hNV
        public static void glTexCoord3hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r) => glTexCoord3hNVPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3hNVDel(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r);
        private static glTexCoord3hNVDel glTexCoord3hNVPtr;
        
        // glTexCoord3hvNV
        public static void glTexCoord3hvNV(ushort[] /*Half16NV*/  v) => glTexCoord3hvNVPtr?.Invoke(v);
        private delegate void glTexCoord3hvNVDel(ushort[] /*Half16NV*/  v);
        private static glTexCoord3hvNVDel glTexCoord3hvNVPtr;
        
        // glTexCoord3i
        public static void glTexCoord3i(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r) => glTexCoord3iPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3iDel(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r);
        private static glTexCoord3iDel glTexCoord3iPtr;
        
        // glTexCoord3iv
        public static void glTexCoord3iv(int[] /*CoordI*/  v) => glTexCoord3ivPtr?.Invoke(v);
        private delegate void glTexCoord3ivDel(int[] /*CoordI*/  v);
        private static glTexCoord3ivDel glTexCoord3ivPtr;
        
        // glTexCoord3s
        public static void glTexCoord3s(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r) => glTexCoord3sPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3sDel(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r);
        private static glTexCoord3sDel glTexCoord3sPtr;
        
        // glTexCoord3sv
        public static void glTexCoord3sv(short[] /*CoordS*/  v) => glTexCoord3svPtr?.Invoke(v);
        private delegate void glTexCoord3svDel(short[] /*CoordS*/  v);
        private static glTexCoord3svDel glTexCoord3svPtr;
        
        // glTexCoord3xOES
        public static void glTexCoord3xOES(int  s, int  t, int  r) => glTexCoord3xOESPtr?.Invoke(s, t, r);
        private delegate void glTexCoord3xOESDel(int  s, int  t, int  r);
        private static glTexCoord3xOESDel glTexCoord3xOESPtr;
        
        // glTexCoord3xvOES
        public static void glTexCoord3xvOES(int[]  coords) => glTexCoord3xvOESPtr?.Invoke(coords);
        private delegate void glTexCoord3xvOESDel(int[]  coords);
        private static glTexCoord3xvOESDel glTexCoord3xvOESPtr;
        
        // glTexCoord4bOES
        public static void glTexCoord4bOES(sbyte  s, sbyte  t, sbyte  r, sbyte  q) => glTexCoord4bOESPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4bOESDel(sbyte  s, sbyte  t, sbyte  r, sbyte  q);
        private static glTexCoord4bOESDel glTexCoord4bOESPtr;
        
        // glTexCoord4bvOES
        public static void glTexCoord4bvOES(sbyte[]  coords) => glTexCoord4bvOESPtr?.Invoke(coords);
        private delegate void glTexCoord4bvOESDel(sbyte[]  coords);
        private static glTexCoord4bvOESDel glTexCoord4bvOESPtr;
        
        // glTexCoord4d
        public static void glTexCoord4d(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q) => glTexCoord4dPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4dDel(double /*CoordD*/  s, double /*CoordD*/  t, double /*CoordD*/  r, double /*CoordD*/  q);
        private static glTexCoord4dDel glTexCoord4dPtr;
        
        // glTexCoord4dv
        public static void glTexCoord4dv(double[] /*CoordD*/  v) => glTexCoord4dvPtr?.Invoke(v);
        private delegate void glTexCoord4dvDel(double[] /*CoordD*/  v);
        private static glTexCoord4dvDel glTexCoord4dvPtr;
        
        // glTexCoord4f
        public static void glTexCoord4f(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q) => glTexCoord4fPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4fDel(float /*CoordF*/  s, float /*CoordF*/  t, float /*CoordF*/  r, float /*CoordF*/  q);
        private static glTexCoord4fDel glTexCoord4fPtr;
        
        // glTexCoord4fColor4fNormal3fVertex4fSUN
        public static void glTexCoord4fColor4fNormal3fVertex4fSUN(float  s, float  t, float  p, float  q, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z, float  w) => glTexCoord4fColor4fNormal3fVertex4fSUNPtr?.Invoke(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        private delegate void glTexCoord4fColor4fNormal3fVertex4fSUNDel(float  s, float  t, float  p, float  q, float  r, float  g, float  b, float  a, float  nx, float  ny, float  nz, float  x, float  y, float  z, float  w);
        private static glTexCoord4fColor4fNormal3fVertex4fSUNDel glTexCoord4fColor4fNormal3fVertex4fSUNPtr;
        
        // glTexCoord4fColor4fNormal3fVertex4fvSUN
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[]  tc, float[]  c, float[]  n, float[]  v) => glTexCoord4fColor4fNormal3fVertex4fvSUNPtr?.Invoke(tc, c, n, v);
        private delegate void glTexCoord4fColor4fNormal3fVertex4fvSUNDel(float[]  tc, float[]  c, float[]  n, float[]  v);
        private static glTexCoord4fColor4fNormal3fVertex4fvSUNDel glTexCoord4fColor4fNormal3fVertex4fvSUNPtr;
        
        // glTexCoord4fVertex4fSUN
        public static void glTexCoord4fVertex4fSUN(float  s, float  t, float  p, float  q, float  x, float  y, float  z, float  w) => glTexCoord4fVertex4fSUNPtr?.Invoke(s, t, p, q, x, y, z, w);
        private delegate void glTexCoord4fVertex4fSUNDel(float  s, float  t, float  p, float  q, float  x, float  y, float  z, float  w);
        private static glTexCoord4fVertex4fSUNDel glTexCoord4fVertex4fSUNPtr;
        
        // glTexCoord4fVertex4fvSUN
        public static void glTexCoord4fVertex4fvSUN(float[]  tc, float[]  v) => glTexCoord4fVertex4fvSUNPtr?.Invoke(tc, v);
        private delegate void glTexCoord4fVertex4fvSUNDel(float[]  tc, float[]  v);
        private static glTexCoord4fVertex4fvSUNDel glTexCoord4fVertex4fvSUNPtr;
        
        // glTexCoord4fv
        public static void glTexCoord4fv(float[] /*CoordF*/  v) => glTexCoord4fvPtr?.Invoke(v);
        private delegate void glTexCoord4fvDel(float[] /*CoordF*/  v);
        private static glTexCoord4fvDel glTexCoord4fvPtr;
        
        // glTexCoord4hNV
        public static void glTexCoord4hNV(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q) => glTexCoord4hNVPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4hNVDel(ushort /*Half16NV*/  s, ushort /*Half16NV*/  t, ushort /*Half16NV*/  r, ushort /*Half16NV*/  q);
        private static glTexCoord4hNVDel glTexCoord4hNVPtr;
        
        // glTexCoord4hvNV
        public static void glTexCoord4hvNV(ushort[] /*Half16NV*/  v) => glTexCoord4hvNVPtr?.Invoke(v);
        private delegate void glTexCoord4hvNVDel(ushort[] /*Half16NV*/  v);
        private static glTexCoord4hvNVDel glTexCoord4hvNVPtr;
        
        // glTexCoord4i
        public static void glTexCoord4i(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q) => glTexCoord4iPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4iDel(int /*CoordI*/  s, int /*CoordI*/  t, int /*CoordI*/  r, int /*CoordI*/  q);
        private static glTexCoord4iDel glTexCoord4iPtr;
        
        // glTexCoord4iv
        public static void glTexCoord4iv(int[] /*CoordI*/  v) => glTexCoord4ivPtr?.Invoke(v);
        private delegate void glTexCoord4ivDel(int[] /*CoordI*/  v);
        private static glTexCoord4ivDel glTexCoord4ivPtr;
        
        // glTexCoord4s
        public static void glTexCoord4s(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q) => glTexCoord4sPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4sDel(short /*CoordS*/  s, short /*CoordS*/  t, short /*CoordS*/  r, short /*CoordS*/  q);
        private static glTexCoord4sDel glTexCoord4sPtr;
        
        // glTexCoord4sv
        public static void glTexCoord4sv(short[] /*CoordS*/  v) => glTexCoord4svPtr?.Invoke(v);
        private delegate void glTexCoord4svDel(short[] /*CoordS*/  v);
        private static glTexCoord4svDel glTexCoord4svPtr;
        
        // glTexCoord4xOES
        public static void glTexCoord4xOES(int  s, int  t, int  r, int  q) => glTexCoord4xOESPtr?.Invoke(s, t, r, q);
        private delegate void glTexCoord4xOESDel(int  s, int  t, int  r, int  q);
        private static glTexCoord4xOESDel glTexCoord4xOESPtr;
        
        // glTexCoord4xvOES
        public static void glTexCoord4xvOES(int[]  coords) => glTexCoord4xvOESPtr?.Invoke(coords);
        private delegate void glTexCoord4xvOESDel(int[]  coords);
        private static glTexCoord4xvOESDel glTexCoord4xvOESPtr;
        
        // glTexCoordFormatNV
        public static void glTexCoordFormatNV(int  size, uint  type, uint  stride) => glTexCoordFormatNVPtr?.Invoke(size, type, stride);
        private delegate void glTexCoordFormatNVDel(int  size, uint  type, uint  stride);
        private static glTexCoordFormatNVDel glTexCoordFormatNVPtr;
        
        // glTexCoordP1ui
        public static void glTexCoordP1ui(uint /*TexCoordPointerType*/  type, uint  coords) => glTexCoordP1uiPtr?.Invoke(type, coords);
        private delegate void glTexCoordP1uiDel(uint /*TexCoordPointerType*/  type, uint  coords);
        private static glTexCoordP1uiDel glTexCoordP1uiPtr;
        
        // glTexCoordP1uiv
        public static void glTexCoordP1uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => glTexCoordP1uivPtr?.Invoke(type, coords);
        private delegate void glTexCoordP1uivDel(uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glTexCoordP1uivDel glTexCoordP1uivPtr;
        
        // glTexCoordP2ui
        public static void glTexCoordP2ui(uint /*TexCoordPointerType*/  type, uint  coords) => glTexCoordP2uiPtr?.Invoke(type, coords);
        private delegate void glTexCoordP2uiDel(uint /*TexCoordPointerType*/  type, uint  coords);
        private static glTexCoordP2uiDel glTexCoordP2uiPtr;
        
        // glTexCoordP2uiv
        public static void glTexCoordP2uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => glTexCoordP2uivPtr?.Invoke(type, coords);
        private delegate void glTexCoordP2uivDel(uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glTexCoordP2uivDel glTexCoordP2uivPtr;
        
        // glTexCoordP3ui
        public static void glTexCoordP3ui(uint /*TexCoordPointerType*/  type, uint  coords) => glTexCoordP3uiPtr?.Invoke(type, coords);
        private delegate void glTexCoordP3uiDel(uint /*TexCoordPointerType*/  type, uint  coords);
        private static glTexCoordP3uiDel glTexCoordP3uiPtr;
        
        // glTexCoordP3uiv
        public static void glTexCoordP3uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => glTexCoordP3uivPtr?.Invoke(type, coords);
        private delegate void glTexCoordP3uivDel(uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glTexCoordP3uivDel glTexCoordP3uivPtr;
        
        // glTexCoordP4ui
        public static void glTexCoordP4ui(uint /*TexCoordPointerType*/  type, uint  coords) => glTexCoordP4uiPtr?.Invoke(type, coords);
        private delegate void glTexCoordP4uiDel(uint /*TexCoordPointerType*/  type, uint  coords);
        private static glTexCoordP4uiDel glTexCoordP4uiPtr;
        
        // glTexCoordP4uiv
        public static void glTexCoordP4uiv(uint /*TexCoordPointerType*/  type, uint[]  coords) => glTexCoordP4uivPtr?.Invoke(type, coords);
        private delegate void glTexCoordP4uivDel(uint /*TexCoordPointerType*/  type, uint[]  coords);
        private static glTexCoordP4uivDel glTexCoordP4uivPtr;
        
        // glTexCoordPointer
        public static void glTexCoordPointer(int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer) => glTexCoordPointerPtr?.Invoke(size, type, stride, pointer);
        private delegate void glTexCoordPointerDel(int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glTexCoordPointerDel glTexCoordPointerPtr;
        
        // glTexCoordPointerEXT
        public static void glTexCoordPointerEXT(int  size, uint /*TexCoordPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => glTexCoordPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        private delegate void glTexCoordPointerEXTDel(int  size, uint /*TexCoordPointerType*/  type, uint  stride, uint  count, IntPtr  pointer);
        private static glTexCoordPointerEXTDel glTexCoordPointerEXTPtr;
        
        // glTexCoordPointerListIBM
        public static void glTexCoordPointerListIBM(int  size, uint /*TexCoordPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glTexCoordPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        private delegate void glTexCoordPointerListIBMDel(int  size, uint /*TexCoordPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glTexCoordPointerListIBMDel glTexCoordPointerListIBMPtr;
        
        // glTexCoordPointervINTEL
        public static void glTexCoordPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => glTexCoordPointervINTELPtr?.Invoke(size, type, pointer);
        private delegate void glTexCoordPointervINTELDel(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer);
        private static glTexCoordPointervINTELDel glTexCoordPointervINTELPtr;
        
        // glTexEnvf
        public static void glTexEnvf(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param) => glTexEnvfPtr?.Invoke(target, pname, param);
        private delegate void glTexEnvfDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glTexEnvfDel glTexEnvfPtr;
        
        // glTexEnvfv
        public static void glTexEnvfv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glTexEnvfvPtr?.Invoke(target, pname, parameters);
        private delegate void glTexEnvfvDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glTexEnvfvDel glTexEnvfvPtr;
        
        // glTexEnvi
        public static void glTexEnvi(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param) => glTexEnviPtr?.Invoke(target, pname, param);
        private delegate void glTexEnviDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int /*CheckedInt32*/  param);
        private static glTexEnviDel glTexEnviPtr;
        
        // glTexEnviv
        public static void glTexEnviv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glTexEnvivPtr?.Invoke(target, pname, parameters);
        private delegate void glTexEnvivDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glTexEnvivDel glTexEnvivPtr;
        
        // glTexEnvx
        public static void glTexEnvx(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param) => glTexEnvxPtr?.Invoke(target, pname, param);
        private delegate void glTexEnvxDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param);
        private static glTexEnvxDel glTexEnvxPtr;
        
        // glTexEnvxOES
        public static void glTexEnvxOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param) => glTexEnvxOESPtr?.Invoke(target, pname, param);
        private delegate void glTexEnvxOESDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int  param);
        private static glTexEnvxOESDel glTexEnvxOESPtr;
        
        // glTexEnvxv
        public static void glTexEnvxv(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glTexEnvxvPtr?.Invoke(target, pname, parameters);
        private delegate void glTexEnvxvDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glTexEnvxvDel glTexEnvxvPtr;
        
        // glTexEnvxvOES
        public static void glTexEnvxvOES(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters) => glTexEnvxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glTexEnvxvOESDel(uint /*TextureEnvTarget*/  target, uint /*TextureEnvParameter*/  pname, int[]  parameters);
        private static glTexEnvxvOESDel glTexEnvxvOESPtr;
        
        // glTexEstimateMotionQCOM
        public static void glTexEstimateMotionQCOM(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output) => glTexEstimateMotionQCOMPtr?.Invoke(refVal, target, output);
        private delegate void glTexEstimateMotionQCOMDel(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output);
        private static glTexEstimateMotionQCOMDel glTexEstimateMotionQCOMPtr;
        
        // glTexEstimateMotionRegionsQCOM
        public static void glTexEstimateMotionRegionsQCOM(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output, uint /*Texture*/  mask) => glTexEstimateMotionRegionsQCOMPtr?.Invoke(refVal, target, output, mask);
        private delegate void glTexEstimateMotionRegionsQCOMDel(uint /*Texture*/  refVal, uint /*Texture*/  target, uint /*Texture*/  output, uint /*Texture*/  mask);
        private static glTexEstimateMotionRegionsQCOMDel glTexEstimateMotionRegionsQCOMPtr;
        
        // glTexFilterFuncSGIS
        public static void glTexFilterFuncSGIS(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, uint  n, float[]  weights) => glTexFilterFuncSGISPtr?.Invoke(target, filter, n, weights);
        private delegate void glTexFilterFuncSGISDel(uint /*TextureTarget*/  target, uint /*TextureFilterSGIS*/  filter, uint  n, float[]  weights);
        private static glTexFilterFuncSGISDel glTexFilterFuncSGISPtr;
        
        // glTexGend
        public static void glTexGend(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param) => glTexGendPtr?.Invoke(coord, pname, param);
        private delegate void glTexGendDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double  param);
        private static glTexGendDel glTexGendPtr;
        
        // glTexGendv
        public static void glTexGendv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters) => glTexGendvPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGendvDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, double[]  parameters);
        private static glTexGendvDel glTexGendvPtr;
        
        // glTexGenf
        public static void glTexGenf(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param) => glTexGenfPtr?.Invoke(coord, pname, param);
        private delegate void glTexGenfDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float /*CheckedFloat32*/  param);
        private static glTexGenfDel glTexGenfPtr;
        
        // glTexGenfOES
        public static void glTexGenfOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float  param) => glTexGenfOESPtr?.Invoke(coord, pname, param);
        private delegate void glTexGenfOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float  param);
        private static glTexGenfOESDel glTexGenfOESPtr;
        
        // glTexGenfv
        public static void glTexGenfv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters) => glTexGenfvPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGenfvDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glTexGenfvDel glTexGenfvPtr;
        
        // glTexGenfvOES
        public static void glTexGenfvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters) => glTexGenfvOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGenfvOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, float[]  parameters);
        private static glTexGenfvOESDel glTexGenfvOESPtr;
        
        // glTexGeni
        public static void glTexGeni(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param) => glTexGeniPtr?.Invoke(coord, pname, param);
        private delegate void glTexGeniDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int /*CheckedInt32*/  param);
        private static glTexGeniDel glTexGeniPtr;
        
        // glTexGeniOES
        public static void glTexGeniOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param) => glTexGeniOESPtr?.Invoke(coord, pname, param);
        private delegate void glTexGeniOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param);
        private static glTexGeniOESDel glTexGeniOESPtr;
        
        // glTexGeniv
        public static void glTexGeniv(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters) => glTexGenivPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGenivDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glTexGenivDel glTexGenivPtr;
        
        // glTexGenivOES
        public static void glTexGenivOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glTexGenivOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGenivOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glTexGenivOESDel glTexGenivOESPtr;
        
        // glTexGenxOES
        public static void glTexGenxOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param) => glTexGenxOESPtr?.Invoke(coord, pname, param);
        private delegate void glTexGenxOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int  param);
        private static glTexGenxOESDel glTexGenxOESPtr;
        
        // glTexGenxvOES
        public static void glTexGenxvOES(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters) => glTexGenxvOESPtr?.Invoke(coord, pname, parameters);
        private delegate void glTexGenxvOESDel(uint /*TextureCoordName*/  coord, uint /*TextureGenParameter*/  pname, int[]  parameters);
        private static glTexGenxvOESDel glTexGenxvOESPtr;
        
        // glTexImage1D
        public static void glTexImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage1DPtr?.Invoke(target, level, internalformat, width, border, format, type, pixels);
        private delegate void glTexImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage1DDel glTexImage1DPtr;
        
        // glTexImage2D
        public static void glTexImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage2DPtr?.Invoke(target, level, internalformat, width, height, border, format, type, pixels);
        private delegate void glTexImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage2DDel glTexImage2DPtr;
        
        // glTexImage2DMultisample
        public static void glTexImage2DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => glTexImage2DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);
        private delegate void glTexImage2DMultisampleDel(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations);
        private static glTexImage2DMultisampleDel glTexImage2DMultisamplePtr;
        
        // glTexImage2DMultisampleCoverageNV
        public static void glTexImage2DMultisampleCoverageNV(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => glTexImage2DMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        private delegate void glTexImage2DMultisampleCoverageNVDel(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations);
        private static glTexImage2DMultisampleCoverageNVDel glTexImage2DMultisampleCoverageNVPtr;
        
        // glTexImage3D
        public static void glTexImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage3DPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        private delegate void glTexImage3DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage3DDel glTexImage3DPtr;
        
        // glTexImage3DEXT
        public static void glTexImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage3DEXTPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        private delegate void glTexImage3DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage3DEXTDel glTexImage3DEXTPtr;
        
        // glTexImage3DMultisample
        public static void glTexImage3DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => glTexImage3DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        private delegate void glTexImage3DMultisampleDel(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations);
        private static glTexImage3DMultisampleDel glTexImage3DMultisamplePtr;
        
        // glTexImage3DMultisampleCoverageNV
        public static void glTexImage3DMultisampleCoverageNV(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => glTexImage3DMultisampleCoverageNVPtr?.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        private delegate void glTexImage3DMultisampleCoverageNVDel(uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations);
        private static glTexImage3DMultisampleCoverageNVDel glTexImage3DMultisampleCoverageNVPtr;
        
        // glTexImage3DOES
        public static void glTexImage3DOES(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage3DOESPtr?.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);
        private delegate void glTexImage3DOESDel(uint /*TextureTarget*/  target, int  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage3DOESDel glTexImage3DOESPtr;
        
        // glTexImage4DSGIS
        public static void glTexImage4DSGIS(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, uint  size4d, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexImage4DSGISPtr?.Invoke(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        private delegate void glTexImage4DSGISDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, uint  size4d, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexImage4DSGISDel glTexImage4DSGISPtr;
        
        // glTexPageCommitmentARB
        public static void glTexPageCommitmentARB(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => glTexPageCommitmentARBPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        private delegate void glTexPageCommitmentARBDel(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit);
        private static glTexPageCommitmentARBDel glTexPageCommitmentARBPtr;
        
        // glTexPageCommitmentEXT
        public static void glTexPageCommitmentEXT(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => glTexPageCommitmentEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        private delegate void glTexPageCommitmentEXTDel(uint  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit);
        private static glTexPageCommitmentEXTDel glTexPageCommitmentEXTPtr;
        
        // glTexParameterIiv
        public static void glTexParameterIiv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => glTexParameterIivPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIivDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters);
        private static glTexParameterIivDel glTexParameterIivPtr;
        
        // glTexParameterIivEXT
        public static void glTexParameterIivEXT(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => glTexParameterIivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIivEXTDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters);
        private static glTexParameterIivEXTDel glTexParameterIivEXTPtr;
        
        // glTexParameterIivOES
        public static void glTexParameterIivOES(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters) => glTexParameterIivOESPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIivOESDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[]  parameters);
        private static glTexParameterIivOESDel glTexParameterIivOESPtr;
        
        // glTexParameterIuiv
        public static void glTexParameterIuiv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => glTexParameterIuivPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIuivDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glTexParameterIuivDel glTexParameterIuivPtr;
        
        // glTexParameterIuivEXT
        public static void glTexParameterIuivEXT(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => glTexParameterIuivEXTPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIuivEXTDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glTexParameterIuivEXTDel glTexParameterIuivEXTPtr;
        
        // glTexParameterIuivOES
        public static void glTexParameterIuivOES(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => glTexParameterIuivOESPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterIuivOESDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glTexParameterIuivOESDel glTexParameterIuivOESPtr;
        
        // glTexParameterf
        public static void glTexParameterf(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => glTexParameterfPtr?.Invoke(target, pname, param);
        private delegate void glTexParameterfDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param);
        private static glTexParameterfDel glTexParameterfPtr;
        
        // glTexParameterfv
        public static void glTexParameterfv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => glTexParameterfvPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterfvDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glTexParameterfvDel glTexParameterfvPtr;
        
        // glTexParameteri
        public static void glTexParameteri(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => glTexParameteriPtr?.Invoke(target, pname, param);
        private delegate void glTexParameteriDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param);
        private static glTexParameteriDel glTexParameteriPtr;
        
        // glTexParameteriv
        public static void glTexParameteriv(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glTexParameterivPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterivDel(uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glTexParameterivDel glTexParameterivPtr;
        
        // glTexParameterx
        public static void glTexParameterx(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param) => glTexParameterxPtr?.Invoke(target, pname, param);
        private delegate void glTexParameterxDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param);
        private static glTexParameterxDel glTexParameterxPtr;
        
        // glTexParameterxOES
        public static void glTexParameterxOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param) => glTexParameterxOESPtr?.Invoke(target, pname, param);
        private delegate void glTexParameterxOESDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int  param);
        private static glTexParameterxOESDel glTexParameterxOESPtr;
        
        // glTexParameterxv
        public static void glTexParameterxv(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glTexParameterxvPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterxvDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glTexParameterxvDel glTexParameterxvPtr;
        
        // glTexParameterxvOES
        public static void glTexParameterxvOES(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters) => glTexParameterxvOESPtr?.Invoke(target, pname, parameters);
        private delegate void glTexParameterxvOESDel(uint /*TextureTarget*/  target, uint /*GetTextureParameter*/  pname, int[]  parameters);
        private static glTexParameterxvOESDel glTexParameterxvOESPtr;
        
        // glTexRenderbufferNV
        public static void glTexRenderbufferNV(uint /*TextureTarget*/  target, uint  renderbuffer) => glTexRenderbufferNVPtr?.Invoke(target, renderbuffer);
        private delegate void glTexRenderbufferNVDel(uint /*TextureTarget*/  target, uint  renderbuffer);
        private static glTexRenderbufferNVDel glTexRenderbufferNVPtr;
        
        // glTexStorage1D
        public static void glTexStorage1D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => glTexStorage1DPtr?.Invoke(target, levels, internalformat, width);
        private delegate void glTexStorage1DDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width);
        private static glTexStorage1DDel glTexStorage1DPtr;
        
        // glTexStorage1DEXT
        public static void glTexStorage1DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => glTexStorage1DEXTPtr?.Invoke(target, levels, internalformat, width);
        private delegate void glTexStorage1DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width);
        private static glTexStorage1DEXTDel glTexStorage1DEXTPtr;
        
        // glTexStorage2D
        public static void glTexStorage2D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glTexStorage2DPtr?.Invoke(target, levels, internalformat, width, height);
        private delegate void glTexStorage2DDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glTexStorage2DDel glTexStorage2DPtr;
        
        // glTexStorage2DEXT
        public static void glTexStorage2DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glTexStorage2DEXTPtr?.Invoke(target, levels, internalformat, width, height);
        private delegate void glTexStorage2DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glTexStorage2DEXTDel glTexStorage2DEXTPtr;
        
        // glTexStorage2DMultisample
        public static void glTexStorage2DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => glTexStorage2DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);
        private delegate void glTexStorage2DMultisampleDel(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations);
        private static glTexStorage2DMultisampleDel glTexStorage2DMultisamplePtr;
        
        // glTexStorage3D
        public static void glTexStorage3D(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => glTexStorage3DPtr?.Invoke(target, levels, internalformat, width, height, depth);
        private delegate void glTexStorage3DDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth);
        private static glTexStorage3DDel glTexStorage3DPtr;
        
        // glTexStorage3DEXT
        public static void glTexStorage3DEXT(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => glTexStorage3DEXTPtr?.Invoke(target, levels, internalformat, width, height, depth);
        private delegate void glTexStorage3DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth);
        private static glTexStorage3DEXTDel glTexStorage3DEXTPtr;
        
        // glTexStorage3DMultisample
        public static void glTexStorage3DMultisample(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => glTexStorage3DMultisamplePtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        private delegate void glTexStorage3DMultisampleDel(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations);
        private static glTexStorage3DMultisampleDel glTexStorage3DMultisamplePtr;
        
        // glTexStorage3DMultisampleOES
        public static void glTexStorage3DMultisampleOES(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => glTexStorage3DMultisampleOESPtr?.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        private delegate void glTexStorage3DMultisampleOESDel(uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations);
        private static glTexStorage3DMultisampleOESDel glTexStorage3DMultisampleOESPtr;
        
        // glTexStorageMem1DEXT
        public static void glTexStorageMem1DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset) => glTexStorageMem1DEXTPtr?.Invoke(target, levels, internalFormat, width, memory, offset);
        private delegate void glTexStorageMem1DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset);
        private static glTexStorageMem1DEXTDel glTexStorageMem1DEXTPtr;
        
        // glTexStorageMem2DEXT
        public static void glTexStorageMem2DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset) => glTexStorageMem2DEXTPtr?.Invoke(target, levels, internalFormat, width, height, memory, offset);
        private delegate void glTexStorageMem2DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset);
        private static glTexStorageMem2DEXTDel glTexStorageMem2DEXTPtr;
        
        // glTexStorageMem2DMultisampleEXT
        public static void glTexStorageMem2DMultisampleEXT(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => glTexStorageMem2DMultisampleEXTPtr?.Invoke(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        private delegate void glTexStorageMem2DMultisampleEXTDel(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset);
        private static glTexStorageMem2DMultisampleEXTDel glTexStorageMem2DMultisampleEXTPtr;
        
        // glTexStorageMem3DEXT
        public static void glTexStorageMem3DEXT(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset) => glTexStorageMem3DEXTPtr?.Invoke(target, levels, internalFormat, width, height, depth, memory, offset);
        private delegate void glTexStorageMem3DEXTDel(uint /*TextureTarget*/  target, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset);
        private static glTexStorageMem3DEXTDel glTexStorageMem3DEXTPtr;
        
        // glTexStorageMem3DMultisampleEXT
        public static void glTexStorageMem3DMultisampleEXT(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => glTexStorageMem3DMultisampleEXTPtr?.Invoke(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        private delegate void glTexStorageMem3DMultisampleEXTDel(uint /*TextureTarget*/  target, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset);
        private static glTexStorageMem3DMultisampleEXTDel glTexStorageMem3DMultisampleEXTPtr;
        
        // glTexStorageSparseAMD
        public static void glTexStorageSparseAMD(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags) => glTexStorageSparseAMDPtr?.Invoke(target, internalFormat, width, height, depth, layers, flags);
        private delegate void glTexStorageSparseAMDDel(uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags);
        private static glTexStorageSparseAMDDel glTexStorageSparseAMDPtr;
        
        // glTexSubImage1D
        public static void glTexSubImage1D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage1DPtr?.Invoke(target, level, xoffset, width, format, type, pixels);
        private delegate void glTexSubImage1DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage1DDel glTexSubImage1DPtr;
        
        // glTexSubImage1DEXT
        public static void glTexSubImage1DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage1DEXTPtr?.Invoke(target, level, xoffset, width, format, type, pixels);
        private delegate void glTexSubImage1DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage1DEXTDel glTexSubImage1DEXTPtr;
        
        // glTexSubImage2D
        public static void glTexSubImage2D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage2DPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);
        private delegate void glTexSubImage2DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage2DDel glTexSubImage2DPtr;
        
        // glTexSubImage2DEXT
        public static void glTexSubImage2DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage2DEXTPtr?.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);
        private delegate void glTexSubImage2DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage2DEXTDel glTexSubImage2DEXTPtr;
        
        // glTexSubImage3D
        public static void glTexSubImage3D(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage3DPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glTexSubImage3DDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage3DDel glTexSubImage3DPtr;
        
        // glTexSubImage3DEXT
        public static void glTexSubImage3DEXT(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage3DEXTPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glTexSubImage3DEXTDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage3DEXTDel glTexSubImage3DEXTPtr;
        
        // glTexSubImage3DOES
        public static void glTexSubImage3DOES(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage3DOESPtr?.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glTexSubImage3DOESDel(uint /*TextureTarget*/  target, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage3DOESDel glTexSubImage3DOESPtr;
        
        // glTexSubImage4DSGIS
        public static void glTexSubImage4DSGIS(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*CheckedInt32*/  woffset, uint  width, uint  height, uint  depth, uint  size4d, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTexSubImage4DSGISPtr?.Invoke(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        private delegate void glTexSubImage4DSGISDel(uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, int /*CheckedInt32*/  woffset, uint  width, uint  height, uint  depth, uint  size4d, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTexSubImage4DSGISDel glTexSubImage4DSGISPtr;
        
        // glTextureAttachMemoryNV
        public static void glTextureAttachMemoryNV(uint  texture, uint  memory, ulong  offset) => glTextureAttachMemoryNVPtr?.Invoke(texture, memory, offset);
        private delegate void glTextureAttachMemoryNVDel(uint  texture, uint  memory, ulong  offset);
        private static glTextureAttachMemoryNVDel glTextureAttachMemoryNVPtr;
        
        // glTextureBarrier
        public static void glTextureBarrier() => glTextureBarrierPtr?.Invoke();
        private delegate void glTextureBarrierDel();
        private static glTextureBarrierDel glTextureBarrierPtr;
        
        // glTextureBarrierNV
        public static void glTextureBarrierNV() => glTextureBarrierNVPtr?.Invoke();
        private delegate void glTextureBarrierNVDel();
        private static glTextureBarrierNVDel glTextureBarrierNVPtr;
        
        // glTextureBuffer
        public static void glTextureBuffer(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer) => glTextureBufferPtr?.Invoke(texture, internalformat, buffer);
        private delegate void glTextureBufferDel(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTextureBufferDel glTextureBufferPtr;
        
        // glTextureBufferEXT
        public static void glTextureBufferEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer) => glTextureBufferEXTPtr?.Invoke(texture, target, internalformat, buffer);
        private delegate void glTextureBufferEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer);
        private static glTextureBufferEXTDel glTextureBufferEXTPtr;
        
        // glTextureBufferRange
        public static void glTextureBufferRange(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size) => glTextureBufferRangePtr?.Invoke(texture, internalformat, buffer, offset, size);
        private delegate void glTextureBufferRangeDel(uint  texture, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size);
        private static glTextureBufferRangeDel glTextureBufferRangePtr;
        
        // glTextureBufferRangeEXT
        public static void glTextureBufferRangeEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size) => glTextureBufferRangeEXTPtr?.Invoke(texture, target, internalformat, buffer, offset, size);
        private delegate void glTextureBufferRangeEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*InternalFormat*/  internalformat, uint  buffer, IntPtr /*BufferOffset*/  offset, IntPtr /*BufferSize*/  size);
        private static glTextureBufferRangeEXTDel glTextureBufferRangeEXTPtr;
        
        // glTextureColorMaskSGIS
        public static void glTextureColorMaskSGIS(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha) => glTextureColorMaskSGISPtr?.Invoke(red, green, blue, alpha);
        private delegate void glTextureColorMaskSGISDel(bool /*Boolean*/  red, bool /*Boolean*/  green, bool /*Boolean*/  blue, bool /*Boolean*/  alpha);
        private static glTextureColorMaskSGISDel glTextureColorMaskSGISPtr;
        
        // glTextureFoveationParametersQCOM
        public static void glTextureFoveationParametersQCOM(uint /*Texture*/  texture, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea) => glTextureFoveationParametersQCOMPtr?.Invoke(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        private delegate void glTextureFoveationParametersQCOMDel(uint /*Texture*/  texture, uint  layer, uint  focalPoint, float /*CheckedFloat32*/  focalX, float /*CheckedFloat32*/  focalY, float /*CheckedFloat32*/  gainX, float /*CheckedFloat32*/  gainY, float /*CheckedFloat32*/  foveaArea);
        private static glTextureFoveationParametersQCOMDel glTextureFoveationParametersQCOMPtr;
        
        // glTextureImage1DEXT
        public static void glTextureImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureImage1DEXTPtr?.Invoke(texture, target, level, internalformat, width, border, format, type, pixels);
        private delegate void glTextureImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureImage1DEXTDel glTextureImage1DEXTPtr;
        
        // glTextureImage2DEXT
        public static void glTextureImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureImage2DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, border, format, type, pixels);
        private delegate void glTextureImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureImage2DEXTDel glTextureImage2DEXTPtr;
        
        // glTextureImage2DMultisampleCoverageNV
        public static void glTextureImage2DMultisampleCoverageNV(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => glTextureImage2DMultisampleCoverageNVPtr?.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        private delegate void glTextureImage2DMultisampleCoverageNVDel(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations);
        private static glTextureImage2DMultisampleCoverageNVDel glTextureImage2DMultisampleCoverageNVPtr;
        
        // glTextureImage2DMultisampleNV
        public static void glTextureImage2DMultisampleNV(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations) => glTextureImage2DMultisampleNVPtr?.Invoke(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        private delegate void glTextureImage2DMultisampleNVDel(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations);
        private static glTextureImage2DMultisampleNVDel glTextureImage2DMultisampleNVPtr;
        
        // glTextureImage3DEXT
        public static void glTextureImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureImage3DEXTPtr?.Invoke(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
        private delegate void glTextureImage3DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, int /*CheckedInt32*/  border, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureImage3DEXTDel glTextureImage3DEXTPtr;
        
        // glTextureImage3DMultisampleCoverageNV
        public static void glTextureImage3DMultisampleCoverageNV(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => glTextureImage3DMultisampleCoverageNVPtr?.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        private delegate void glTextureImage3DMultisampleCoverageNVDel(uint  texture, uint /*TextureTarget*/  target, uint  coverageSamples, uint  colorSamples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations);
        private static glTextureImage3DMultisampleCoverageNVDel glTextureImage3DMultisampleCoverageNVPtr;
        
        // glTextureImage3DMultisampleNV
        public static void glTextureImage3DMultisampleNV(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations) => glTextureImage3DMultisampleNVPtr?.Invoke(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        private delegate void glTextureImage3DMultisampleNVDel(uint  texture, uint /*TextureTarget*/  target, uint  samples, int  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations);
        private static glTextureImage3DMultisampleNVDel glTextureImage3DMultisampleNVPtr;
        
        // glTextureLightEXT
        public static void glTextureLightEXT(uint /*LightTexturePNameEXT*/  pname) => glTextureLightEXTPtr?.Invoke(pname);
        private delegate void glTextureLightEXTDel(uint /*LightTexturePNameEXT*/  pname);
        private static glTextureLightEXTDel glTextureLightEXTPtr;
        
        // glTextureMaterialEXT
        public static void glTextureMaterialEXT(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode) => glTextureMaterialEXTPtr?.Invoke(face, mode);
        private delegate void glTextureMaterialEXTDel(uint /*MaterialFace*/  face, uint /*MaterialParameter*/  mode);
        private static glTextureMaterialEXTDel glTextureMaterialEXTPtr;
        
        // glTextureNormalEXT
        public static void glTextureNormalEXT(uint /*TextureNormalModeEXT*/  mode) => glTextureNormalEXTPtr?.Invoke(mode);
        private delegate void glTextureNormalEXTDel(uint /*TextureNormalModeEXT*/  mode);
        private static glTextureNormalEXTDel glTextureNormalEXTPtr;
        
        // glTexturePageCommitmentEXT
        public static void glTexturePageCommitmentEXT(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit) => glTexturePageCommitmentEXTPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        private delegate void glTexturePageCommitmentEXTDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, bool /*Boolean*/  commit);
        private static glTexturePageCommitmentEXTDel glTexturePageCommitmentEXTPtr;
        
        // glTextureParameterIiv
        public static void glTextureParameterIiv(uint  texture, uint /*TextureParameterName*/  pname, int[]  parameters) => glTextureParameterIivPtr?.Invoke(texture, pname, parameters);
        private delegate void glTextureParameterIivDel(uint  texture, uint /*TextureParameterName*/  pname, int[]  parameters);
        private static glTextureParameterIivDel glTextureParameterIivPtr;
        
        // glTextureParameterIivEXT
        public static void glTextureParameterIivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glTextureParameterIivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glTextureParameterIivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glTextureParameterIivEXTDel glTextureParameterIivEXTPtr;
        
        // glTextureParameterIuiv
        public static void glTextureParameterIuiv(uint  texture, uint /*TextureParameterName*/  pname, uint[]  parameters) => glTextureParameterIuivPtr?.Invoke(texture, pname, parameters);
        private delegate void glTextureParameterIuivDel(uint  texture, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glTextureParameterIuivDel glTextureParameterIuivPtr;
        
        // glTextureParameterIuivEXT
        public static void glTextureParameterIuivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters) => glTextureParameterIuivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glTextureParameterIuivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, uint[]  parameters);
        private static glTextureParameterIuivEXTDel glTextureParameterIuivEXTPtr;
        
        // glTextureParameterf
        public static void glTextureParameterf(uint  texture, uint /*TextureParameterName*/  pname, float  param) => glTextureParameterfPtr?.Invoke(texture, pname, param);
        private delegate void glTextureParameterfDel(uint  texture, uint /*TextureParameterName*/  pname, float  param);
        private static glTextureParameterfDel glTextureParameterfPtr;
        
        // glTextureParameterfEXT
        public static void glTextureParameterfEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param) => glTextureParameterfEXTPtr?.Invoke(texture, target, pname, param);
        private delegate void glTextureParameterfEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float /*CheckedFloat32*/  param);
        private static glTextureParameterfEXTDel glTextureParameterfEXTPtr;
        
        // glTextureParameterfv
        public static void glTextureParameterfv(uint  texture, uint /*TextureParameterName*/  pname, float[]  param) => glTextureParameterfvPtr?.Invoke(texture, pname, param);
        private delegate void glTextureParameterfvDel(uint  texture, uint /*TextureParameterName*/  pname, float[]  param);
        private static glTextureParameterfvDel glTextureParameterfvPtr;
        
        // glTextureParameterfvEXT
        public static void glTextureParameterfvEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters) => glTextureParameterfvEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glTextureParameterfvEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, float[] /*CheckedFloat32*/  parameters);
        private static glTextureParameterfvEXTDel glTextureParameterfvEXTPtr;
        
        // glTextureParameteri
        public static void glTextureParameteri(uint  texture, uint /*TextureParameterName*/  pname, int  param) => glTextureParameteriPtr?.Invoke(texture, pname, param);
        private delegate void glTextureParameteriDel(uint  texture, uint /*TextureParameterName*/  pname, int  param);
        private static glTextureParameteriDel glTextureParameteriPtr;
        
        // glTextureParameteriEXT
        public static void glTextureParameteriEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param) => glTextureParameteriEXTPtr?.Invoke(texture, target, pname, param);
        private delegate void glTextureParameteriEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int /*CheckedInt32*/  param);
        private static glTextureParameteriEXTDel glTextureParameteriEXTPtr;
        
        // glTextureParameteriv
        public static void glTextureParameteriv(uint  texture, uint /*TextureParameterName*/  pname, int[]  param) => glTextureParameterivPtr?.Invoke(texture, pname, param);
        private delegate void glTextureParameterivDel(uint  texture, uint /*TextureParameterName*/  pname, int[]  param);
        private static glTextureParameterivDel glTextureParameterivPtr;
        
        // glTextureParameterivEXT
        public static void glTextureParameterivEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters) => glTextureParameterivEXTPtr?.Invoke(texture, target, pname, parameters);
        private delegate void glTextureParameterivEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint /*TextureParameterName*/  pname, int[] /*CheckedInt32*/  parameters);
        private static glTextureParameterivEXTDel glTextureParameterivEXTPtr;
        
        // glTextureRangeAPPLE
        public static void glTextureRangeAPPLE(uint  target, uint  length, IntPtr  pointer) => glTextureRangeAPPLEPtr?.Invoke(target, length, pointer);
        private delegate void glTextureRangeAPPLEDel(uint  target, uint  length, IntPtr  pointer);
        private static glTextureRangeAPPLEDel glTextureRangeAPPLEPtr;
        
        // glTextureRenderbufferEXT
        public static void glTextureRenderbufferEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  renderbuffer) => glTextureRenderbufferEXTPtr?.Invoke(texture, target, renderbuffer);
        private delegate void glTextureRenderbufferEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  renderbuffer);
        private static glTextureRenderbufferEXTDel glTextureRenderbufferEXTPtr;
        
        // glTextureStorage1D
        public static void glTextureStorage1D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => glTextureStorage1DPtr?.Invoke(texture, levels, internalformat, width);
        private delegate void glTextureStorage1DDel(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width);
        private static glTextureStorage1DDel glTextureStorage1DPtr;
        
        // glTextureStorage1DEXT
        public static void glTextureStorage1DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width) => glTextureStorage1DEXTPtr?.Invoke(texture, target, levels, internalformat, width);
        private delegate void glTextureStorage1DEXTDel(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width);
        private static glTextureStorage1DEXTDel glTextureStorage1DEXTPtr;
        
        // glTextureStorage2D
        public static void glTextureStorage2D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glTextureStorage2DPtr?.Invoke(texture, levels, internalformat, width, height);
        private delegate void glTextureStorage2DDel(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glTextureStorage2DDel glTextureStorage2DPtr;
        
        // glTextureStorage2DEXT
        public static void glTextureStorage2DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height) => glTextureStorage2DEXTPtr?.Invoke(texture, target, levels, internalformat, width, height);
        private delegate void glTextureStorage2DEXTDel(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height);
        private static glTextureStorage2DEXTDel glTextureStorage2DEXTPtr;
        
        // glTextureStorage2DMultisample
        public static void glTextureStorage2DMultisample(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => glTextureStorage2DMultisamplePtr?.Invoke(texture, samples, internalformat, width, height, fixedsamplelocations);
        private delegate void glTextureStorage2DMultisampleDel(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations);
        private static glTextureStorage2DMultisampleDel glTextureStorage2DMultisamplePtr;
        
        // glTextureStorage2DMultisampleEXT
        public static void glTextureStorage2DMultisampleEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations) => glTextureStorage2DMultisampleEXTPtr?.Invoke(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        private delegate void glTextureStorage2DMultisampleEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, bool /*Boolean*/  fixedsamplelocations);
        private static glTextureStorage2DMultisampleEXTDel glTextureStorage2DMultisampleEXTPtr;
        
        // glTextureStorage3D
        public static void glTextureStorage3D(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => glTextureStorage3DPtr?.Invoke(texture, levels, internalformat, width, height, depth);
        private delegate void glTextureStorage3DDel(uint  texture, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth);
        private static glTextureStorage3DDel glTextureStorage3DPtr;
        
        // glTextureStorage3DEXT
        public static void glTextureStorage3DEXT(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth) => glTextureStorage3DEXTPtr?.Invoke(texture, target, levels, internalformat, width, height, depth);
        private delegate void glTextureStorage3DEXTDel(uint  texture, uint  target, uint  levels, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth);
        private static glTextureStorage3DEXTDel glTextureStorage3DEXTPtr;
        
        // glTextureStorage3DMultisample
        public static void glTextureStorage3DMultisample(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => glTextureStorage3DMultisamplePtr?.Invoke(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        private delegate void glTextureStorage3DMultisampleDel(uint  texture, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations);
        private static glTextureStorage3DMultisampleDel glTextureStorage3DMultisamplePtr;
        
        // glTextureStorage3DMultisampleEXT
        public static void glTextureStorage3DMultisampleEXT(uint  texture, uint  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations) => glTextureStorage3DMultisampleEXTPtr?.Invoke(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        private delegate void glTextureStorage3DMultisampleEXTDel(uint  texture, uint  target, uint  samples, uint /*InternalFormat*/  internalformat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedsamplelocations);
        private static glTextureStorage3DMultisampleEXTDel glTextureStorage3DMultisampleEXTPtr;
        
        // glTextureStorageMem1DEXT
        public static void glTextureStorageMem1DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset) => glTextureStorageMem1DEXTPtr?.Invoke(texture, levels, internalFormat, width, memory, offset);
        private delegate void glTextureStorageMem1DEXTDel(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  memory, ulong  offset);
        private static glTextureStorageMem1DEXTDel glTextureStorageMem1DEXTPtr;
        
        // glTextureStorageMem2DEXT
        public static void glTextureStorageMem2DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset) => glTextureStorageMem2DEXTPtr?.Invoke(texture, levels, internalFormat, width, height, memory, offset);
        private delegate void glTextureStorageMem2DEXTDel(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  memory, ulong  offset);
        private static glTextureStorageMem2DEXTDel glTextureStorageMem2DEXTPtr;
        
        // glTextureStorageMem2DMultisampleEXT
        public static void glTextureStorageMem2DMultisampleEXT(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => glTextureStorageMem2DMultisampleEXTPtr?.Invoke(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        private delegate void glTextureStorageMem2DMultisampleEXTDel(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset);
        private static glTextureStorageMem2DMultisampleEXTDel glTextureStorageMem2DMultisampleEXTPtr;
        
        // glTextureStorageMem3DEXT
        public static void glTextureStorageMem3DEXT(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset) => glTextureStorageMem3DEXTPtr?.Invoke(texture, levels, internalFormat, width, height, depth, memory, offset);
        private delegate void glTextureStorageMem3DEXTDel(uint  texture, uint  levels, uint  internalFormat, uint  width, uint  height, uint  depth, uint  memory, ulong  offset);
        private static glTextureStorageMem3DEXTDel glTextureStorageMem3DEXTPtr;
        
        // glTextureStorageMem3DMultisampleEXT
        public static void glTextureStorageMem3DMultisampleEXT(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset) => glTextureStorageMem3DMultisampleEXTPtr?.Invoke(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        private delegate void glTextureStorageMem3DMultisampleEXTDel(uint  texture, uint  samples, uint  internalFormat, uint  width, uint  height, uint  depth, bool /*Boolean*/  fixedSampleLocations, uint  memory, ulong  offset);
        private static glTextureStorageMem3DMultisampleEXTDel glTextureStorageMem3DMultisampleEXTPtr;
        
        // glTextureStorageSparseAMD
        public static void glTextureStorageSparseAMD(uint  texture, uint  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags) => glTextureStorageSparseAMDPtr?.Invoke(texture, target, internalFormat, width, height, depth, layers, flags);
        private delegate void glTextureStorageSparseAMDDel(uint  texture, uint  target, uint /*InternalFormat*/  internalFormat, uint  width, uint  height, uint  depth, uint  layers, uint /*TextureStorageMaskAMD*/  flags);
        private static glTextureStorageSparseAMDDel glTextureStorageSparseAMDPtr;
        
        // glTextureSubImage1D
        public static void glTextureSubImage1D(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage1DPtr?.Invoke(texture, level, xoffset, width, format, type, pixels);
        private delegate void glTextureSubImage1DDel(uint  texture, int  level, int  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage1DDel glTextureSubImage1DPtr;
        
        // glTextureSubImage1DEXT
        public static void glTextureSubImage1DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage1DEXTPtr?.Invoke(texture, target, level, xoffset, width, format, type, pixels);
        private delegate void glTextureSubImage1DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, uint  width, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage1DEXTDel glTextureSubImage1DEXTPtr;
        
        // glTextureSubImage2D
        public static void glTextureSubImage2D(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage2DPtr?.Invoke(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        private delegate void glTextureSubImage2DDel(uint  texture, int  level, int  xoffset, int  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage2DDel glTextureSubImage2DPtr;
        
        // glTextureSubImage2DEXT
        public static void glTextureSubImage2DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage2DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
        private delegate void glTextureSubImage2DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, uint  width, uint  height, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage2DEXTDel glTextureSubImage2DEXTPtr;
        
        // glTextureSubImage3D
        public static void glTextureSubImage3D(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage3DPtr?.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glTextureSubImage3DDel(uint  texture, int  level, int  xoffset, int  yoffset, int  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage3DDel glTextureSubImage3DPtr;
        
        // glTextureSubImage3DEXT
        public static void glTextureSubImage3DEXT(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels) => glTextureSubImage3DEXTPtr?.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        private delegate void glTextureSubImage3DEXTDel(uint /*Texture*/  texture, uint /*TextureTarget*/  target, int /*CheckedInt32*/  level, int /*CheckedInt32*/  xoffset, int /*CheckedInt32*/  yoffset, int /*CheckedInt32*/  zoffset, uint  width, uint  height, uint  depth, uint /*PixelFormat*/  format, uint /*PixelType*/  type, IntPtr  pixels);
        private static glTextureSubImage3DEXTDel glTextureSubImage3DEXTPtr;
        
        // glTextureView
        public static void glTextureView(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => glTextureViewPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        private delegate void glTextureViewDel(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers);
        private static glTextureViewDel glTextureViewPtr;
        
        // glTextureViewEXT
        public static void glTextureViewEXT(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => glTextureViewEXTPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        private delegate void glTextureViewEXTDel(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers);
        private static glTextureViewEXTDel glTextureViewEXTPtr;
        
        // glTextureViewOES
        public static void glTextureViewOES(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers) => glTextureViewOESPtr?.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        private delegate void glTextureViewOESDel(uint  texture, uint /*TextureTarget*/  target, uint  origtexture, uint /*InternalFormat*/  internalformat, uint  minlevel, uint  numlevels, uint  minlayer, uint  numlayers);
        private static glTextureViewOESDel glTextureViewOESPtr;
        
        // glTrackMatrixNV
        public static void glTrackMatrixNV(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  matrix, uint /*VertexAttribEnumNV*/  transform) => glTrackMatrixNVPtr?.Invoke(target, address, matrix, transform);
        private delegate void glTrackMatrixNVDel(uint /*VertexAttribEnumNV*/  target, uint  address, uint /*VertexAttribEnumNV*/  matrix, uint /*VertexAttribEnumNV*/  transform);
        private static glTrackMatrixNVDel glTrackMatrixNVPtr;
        
        // glTransformFeedbackAttribsNV
        public static void glTransformFeedbackAttribsNV(uint  count, int[]  attribs, uint  bufferMode) => glTransformFeedbackAttribsNVPtr?.Invoke(count, attribs, bufferMode);
        private delegate void glTransformFeedbackAttribsNVDel(uint  count, int[]  attribs, uint  bufferMode);
        private static glTransformFeedbackAttribsNVDel glTransformFeedbackAttribsNVPtr;
        
        // glTransformFeedbackBufferBase
        public static void glTransformFeedbackBufferBase(uint  xfb, uint  index, uint  buffer) => glTransformFeedbackBufferBasePtr?.Invoke(xfb, index, buffer);
        private delegate void glTransformFeedbackBufferBaseDel(uint  xfb, uint  index, uint  buffer);
        private static glTransformFeedbackBufferBaseDel glTransformFeedbackBufferBasePtr;
        
        // glTransformFeedbackBufferRange
        public static void glTransformFeedbackBufferRange(uint  xfb, uint  index, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size) => glTransformFeedbackBufferRangePtr?.Invoke(xfb, index, buffer, offset, size);
        private delegate void glTransformFeedbackBufferRangeDel(uint  xfb, uint  index, uint  buffer, IntPtr  offset, IntPtr /*BufferSize*/  size);
        private static glTransformFeedbackBufferRangeDel glTransformFeedbackBufferRangePtr;
        
        // glTransformFeedbackStreamAttribsNV
        public static void glTransformFeedbackStreamAttribsNV(uint  count, int[]  attribs, uint  nbuffers, int[]  bufstreams, uint  bufferMode) => glTransformFeedbackStreamAttribsNVPtr?.Invoke(count, attribs, nbuffers, bufstreams, bufferMode);
        private delegate void glTransformFeedbackStreamAttribsNVDel(uint  count, int[]  attribs, uint  nbuffers, int[]  bufstreams, uint  bufferMode);
        private static glTransformFeedbackStreamAttribsNVDel glTransformFeedbackStreamAttribsNVPtr;
        
        // glTransformFeedbackVaryings
        public static void glTransformFeedbackVaryings(uint  program, uint  count, string  varyings, uint /*TransformFeedbackBufferMode*/  bufferMode) => glTransformFeedbackVaryingsPtr?.Invoke(program, count, varyings, bufferMode);
        private delegate void glTransformFeedbackVaryingsDel(uint  program, uint  count, string  varyings, uint /*TransformFeedbackBufferMode*/  bufferMode);
        private static glTransformFeedbackVaryingsDel glTransformFeedbackVaryingsPtr;
        
        // glTransformFeedbackVaryingsEXT
        public static void glTransformFeedbackVaryingsEXT(uint  program, uint  count, string  varyings, uint  bufferMode) => glTransformFeedbackVaryingsEXTPtr?.Invoke(program, count, varyings, bufferMode);
        private delegate void glTransformFeedbackVaryingsEXTDel(uint  program, uint  count, string  varyings, uint  bufferMode);
        private static glTransformFeedbackVaryingsEXTDel glTransformFeedbackVaryingsEXTPtr;
        
        // glTransformFeedbackVaryingsNV
        public static void glTransformFeedbackVaryingsNV(uint  program, uint  count, int[]  locations, uint  bufferMode) => glTransformFeedbackVaryingsNVPtr?.Invoke(program, count, locations, bufferMode);
        private delegate void glTransformFeedbackVaryingsNVDel(uint  program, uint  count, int[]  locations, uint  bufferMode);
        private static glTransformFeedbackVaryingsNVDel glTransformFeedbackVaryingsNVPtr;
        
        // glTransformPathNV
        public static void glTransformPathNV(uint /*Path*/  resultPath, uint /*Path*/  srcPath, uint /*PathTransformType*/  transformType, float[]  transformValues) => glTransformPathNVPtr?.Invoke(resultPath, srcPath, transformType, transformValues);
        private delegate void glTransformPathNVDel(uint /*Path*/  resultPath, uint /*Path*/  srcPath, uint /*PathTransformType*/  transformType, float[]  transformValues);
        private static glTransformPathNVDel glTransformPathNVPtr;
        
        // glTranslated
        public static void glTranslated(double  x, double  y, double  z) => glTranslatedPtr?.Invoke(x, y, z);
        private delegate void glTranslatedDel(double  x, double  y, double  z);
        private static glTranslatedDel glTranslatedPtr;
        
        // glTranslatef
        public static void glTranslatef(float  x, float  y, float  z) => glTranslatefPtr?.Invoke(x, y, z);
        private delegate void glTranslatefDel(float  x, float  y, float  z);
        private static glTranslatefDel glTranslatefPtr;
        
        // glTranslatex
        public static void glTranslatex(int  x, int  y, int  z) => glTranslatexPtr?.Invoke(x, y, z);
        private delegate void glTranslatexDel(int  x, int  y, int  z);
        private static glTranslatexDel glTranslatexPtr;
        
        // glTranslatexOES
        public static void glTranslatexOES(int  x, int  y, int  z) => glTranslatexOESPtr?.Invoke(x, y, z);
        private delegate void glTranslatexOESDel(int  x, int  y, int  z);
        private static glTranslatexOESDel glTranslatexOESPtr;
        
        // glUniform1d
        public static void glUniform1d(int  location, double  x) => glUniform1dPtr?.Invoke(location, x);
        private delegate void glUniform1dDel(int  location, double  x);
        private static glUniform1dDel glUniform1dPtr;
        
        // glUniform1dv
        public static void glUniform1dv(int  location, uint  count, double[]  value) => glUniform1dvPtr?.Invoke(location, count, value);
        private delegate void glUniform1dvDel(int  location, uint  count, double[]  value);
        private static glUniform1dvDel glUniform1dvPtr;
        
        // glUniform1f
        public static void glUniform1f(int  location, float  v0) => glUniform1fPtr?.Invoke(location, v0);
        private delegate void glUniform1fDel(int  location, float  v0);
        private static glUniform1fDel glUniform1fPtr;
        
        // glUniform1fARB
        public static void glUniform1fARB(int  location, float  v0) => glUniform1fARBPtr?.Invoke(location, v0);
        private delegate void glUniform1fARBDel(int  location, float  v0);
        private static glUniform1fARBDel glUniform1fARBPtr;
        
        // glUniform1fv
        public static void glUniform1fv(int  location, uint  count, float[]  value) => glUniform1fvPtr?.Invoke(location, count, value);
        private delegate void glUniform1fvDel(int  location, uint  count, float[]  value);
        private static glUniform1fvDel glUniform1fvPtr;
        
        // glUniform1fvARB
        public static void glUniform1fvARB(int  location, uint  count, float[]  value) => glUniform1fvARBPtr?.Invoke(location, count, value);
        private delegate void glUniform1fvARBDel(int  location, uint  count, float[]  value);
        private static glUniform1fvARBDel glUniform1fvARBPtr;
        
        // glUniform1i
        public static void glUniform1i(int  location, int  v0) => glUniform1iPtr?.Invoke(location, v0);
        private delegate void glUniform1iDel(int  location, int  v0);
        private static glUniform1iDel glUniform1iPtr;
        
        // glUniform1i64ARB
        public static void glUniform1i64ARB(int  location, long  x) => glUniform1i64ARBPtr?.Invoke(location, x);
        private delegate void glUniform1i64ARBDel(int  location, long  x);
        private static glUniform1i64ARBDel glUniform1i64ARBPtr;
        
        // glUniform1i64NV
        public static void glUniform1i64NV(int  location, long  x) => glUniform1i64NVPtr?.Invoke(location, x);
        private delegate void glUniform1i64NVDel(int  location, long  x);
        private static glUniform1i64NVDel glUniform1i64NVPtr;
        
        // glUniform1i64vARB
        public static void glUniform1i64vARB(int  location, uint  count, long[]  value) => glUniform1i64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform1i64vARBDel(int  location, uint  count, long[]  value);
        private static glUniform1i64vARBDel glUniform1i64vARBPtr;
        
        // glUniform1i64vNV
        public static void glUniform1i64vNV(int  location, uint  count, long[]  value) => glUniform1i64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform1i64vNVDel(int  location, uint  count, long[]  value);
        private static glUniform1i64vNVDel glUniform1i64vNVPtr;
        
        // glUniform1iARB
        public static void glUniform1iARB(int  location, int  v0) => glUniform1iARBPtr?.Invoke(location, v0);
        private delegate void glUniform1iARBDel(int  location, int  v0);
        private static glUniform1iARBDel glUniform1iARBPtr;
        
        // glUniform1iv
        public static void glUniform1iv(int  location, uint  count, int[]  value) => glUniform1ivPtr?.Invoke(location, count, value);
        private delegate void glUniform1ivDel(int  location, uint  count, int[]  value);
        private static glUniform1ivDel glUniform1ivPtr;
        
        // glUniform1ivARB
        public static void glUniform1ivARB(int  location, uint  count, int[]  value) => glUniform1ivARBPtr?.Invoke(location, count, value);
        private delegate void glUniform1ivARBDel(int  location, uint  count, int[]  value);
        private static glUniform1ivARBDel glUniform1ivARBPtr;
        
        // glUniform1ui
        public static void glUniform1ui(int  location, uint  v0) => glUniform1uiPtr?.Invoke(location, v0);
        private delegate void glUniform1uiDel(int  location, uint  v0);
        private static glUniform1uiDel glUniform1uiPtr;
        
        // glUniform1ui64ARB
        public static void glUniform1ui64ARB(int  location, ulong  x) => glUniform1ui64ARBPtr?.Invoke(location, x);
        private delegate void glUniform1ui64ARBDel(int  location, ulong  x);
        private static glUniform1ui64ARBDel glUniform1ui64ARBPtr;
        
        // glUniform1ui64NV
        public static void glUniform1ui64NV(int  location, ulong  x) => glUniform1ui64NVPtr?.Invoke(location, x);
        private delegate void glUniform1ui64NVDel(int  location, ulong  x);
        private static glUniform1ui64NVDel glUniform1ui64NVPtr;
        
        // glUniform1ui64vARB
        public static void glUniform1ui64vARB(int  location, uint  count, ulong[]  value) => glUniform1ui64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform1ui64vARBDel(int  location, uint  count, ulong[]  value);
        private static glUniform1ui64vARBDel glUniform1ui64vARBPtr;
        
        // glUniform1ui64vNV
        public static void glUniform1ui64vNV(int  location, uint  count, ulong[]  value) => glUniform1ui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform1ui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniform1ui64vNVDel glUniform1ui64vNVPtr;
        
        // glUniform1uiEXT
        public static void glUniform1uiEXT(int  location, uint  v0) => glUniform1uiEXTPtr?.Invoke(location, v0);
        private delegate void glUniform1uiEXTDel(int  location, uint  v0);
        private static glUniform1uiEXTDel glUniform1uiEXTPtr;
        
        // glUniform1uiv
        public static void glUniform1uiv(int  location, uint  count, uint[]  value) => glUniform1uivPtr?.Invoke(location, count, value);
        private delegate void glUniform1uivDel(int  location, uint  count, uint[]  value);
        private static glUniform1uivDel glUniform1uivPtr;
        
        // glUniform1uivEXT
        public static void glUniform1uivEXT(int  location, uint  count, uint[]  value) => glUniform1uivEXTPtr?.Invoke(location, count, value);
        private delegate void glUniform1uivEXTDel(int  location, uint  count, uint[]  value);
        private static glUniform1uivEXTDel glUniform1uivEXTPtr;
        
        // glUniform2d
        public static void glUniform2d(int  location, double  x, double  y) => glUniform2dPtr?.Invoke(location, x, y);
        private delegate void glUniform2dDel(int  location, double  x, double  y);
        private static glUniform2dDel glUniform2dPtr;
        
        // glUniform2dv
        public static void glUniform2dv(int  location, uint  count, double[]  value) => glUniform2dvPtr?.Invoke(location, count, value);
        private delegate void glUniform2dvDel(int  location, uint  count, double[]  value);
        private static glUniform2dvDel glUniform2dvPtr;
        
        // glUniform2f
        public static void glUniform2f(int  location, float  v0, float  v1) => glUniform2fPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2fDel(int  location, float  v0, float  v1);
        private static glUniform2fDel glUniform2fPtr;
        
        // glUniform2fARB
        public static void glUniform2fARB(int  location, float  v0, float  v1) => glUniform2fARBPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2fARBDel(int  location, float  v0, float  v1);
        private static glUniform2fARBDel glUniform2fARBPtr;
        
        // glUniform2fv
        public static void glUniform2fv(int  location, uint  count, float[]  value) => glUniform2fvPtr?.Invoke(location, count, value);
        private delegate void glUniform2fvDel(int  location, uint  count, float[]  value);
        private static glUniform2fvDel glUniform2fvPtr;
        
        // glUniform2fvARB
        public static void glUniform2fvARB(int  location, uint  count, float[]  value) => glUniform2fvARBPtr?.Invoke(location, count, value);
        private delegate void glUniform2fvARBDel(int  location, uint  count, float[]  value);
        private static glUniform2fvARBDel glUniform2fvARBPtr;
        
        // glUniform2i
        public static void glUniform2i(int  location, int  v0, int  v1) => glUniform2iPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2iDel(int  location, int  v0, int  v1);
        private static glUniform2iDel glUniform2iPtr;
        
        // glUniform2i64ARB
        public static void glUniform2i64ARB(int  location, long  x, long  y) => glUniform2i64ARBPtr?.Invoke(location, x, y);
        private delegate void glUniform2i64ARBDel(int  location, long  x, long  y);
        private static glUniform2i64ARBDel glUniform2i64ARBPtr;
        
        // glUniform2i64NV
        public static void glUniform2i64NV(int  location, long  x, long  y) => glUniform2i64NVPtr?.Invoke(location, x, y);
        private delegate void glUniform2i64NVDel(int  location, long  x, long  y);
        private static glUniform2i64NVDel glUniform2i64NVPtr;
        
        // glUniform2i64vARB
        public static void glUniform2i64vARB(int  location, uint  count, long[]  value) => glUniform2i64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform2i64vARBDel(int  location, uint  count, long[]  value);
        private static glUniform2i64vARBDel glUniform2i64vARBPtr;
        
        // glUniform2i64vNV
        public static void glUniform2i64vNV(int  location, uint  count, long[]  value) => glUniform2i64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform2i64vNVDel(int  location, uint  count, long[]  value);
        private static glUniform2i64vNVDel glUniform2i64vNVPtr;
        
        // glUniform2iARB
        public static void glUniform2iARB(int  location, int  v0, int  v1) => glUniform2iARBPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2iARBDel(int  location, int  v0, int  v1);
        private static glUniform2iARBDel glUniform2iARBPtr;
        
        // glUniform2iv
        public static void glUniform2iv(int  location, uint  count, int[]  value) => glUniform2ivPtr?.Invoke(location, count, value);
        private delegate void glUniform2ivDel(int  location, uint  count, int[]  value);
        private static glUniform2ivDel glUniform2ivPtr;
        
        // glUniform2ivARB
        public static void glUniform2ivARB(int  location, uint  count, int[]  value) => glUniform2ivARBPtr?.Invoke(location, count, value);
        private delegate void glUniform2ivARBDel(int  location, uint  count, int[]  value);
        private static glUniform2ivARBDel glUniform2ivARBPtr;
        
        // glUniform2ui
        public static void glUniform2ui(int  location, uint  v0, uint  v1) => glUniform2uiPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2uiDel(int  location, uint  v0, uint  v1);
        private static glUniform2uiDel glUniform2uiPtr;
        
        // glUniform2ui64ARB
        public static void glUniform2ui64ARB(int  location, ulong  x, ulong  y) => glUniform2ui64ARBPtr?.Invoke(location, x, y);
        private delegate void glUniform2ui64ARBDel(int  location, ulong  x, ulong  y);
        private static glUniform2ui64ARBDel glUniform2ui64ARBPtr;
        
        // glUniform2ui64NV
        public static void glUniform2ui64NV(int  location, ulong  x, ulong  y) => glUniform2ui64NVPtr?.Invoke(location, x, y);
        private delegate void glUniform2ui64NVDel(int  location, ulong  x, ulong  y);
        private static glUniform2ui64NVDel glUniform2ui64NVPtr;
        
        // glUniform2ui64vARB
        public static void glUniform2ui64vARB(int  location, uint  count, ulong[]  value) => glUniform2ui64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform2ui64vARBDel(int  location, uint  count, ulong[]  value);
        private static glUniform2ui64vARBDel glUniform2ui64vARBPtr;
        
        // glUniform2ui64vNV
        public static void glUniform2ui64vNV(int  location, uint  count, ulong[]  value) => glUniform2ui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform2ui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniform2ui64vNVDel glUniform2ui64vNVPtr;
        
        // glUniform2uiEXT
        public static void glUniform2uiEXT(int  location, uint  v0, uint  v1) => glUniform2uiEXTPtr?.Invoke(location, v0, v1);
        private delegate void glUniform2uiEXTDel(int  location, uint  v0, uint  v1);
        private static glUniform2uiEXTDel glUniform2uiEXTPtr;
        
        // glUniform2uiv
        public static void glUniform2uiv(int  location, uint  count, uint[]  value) => glUniform2uivPtr?.Invoke(location, count, value);
        private delegate void glUniform2uivDel(int  location, uint  count, uint[]  value);
        private static glUniform2uivDel glUniform2uivPtr;
        
        // glUniform2uivEXT
        public static void glUniform2uivEXT(int  location, uint  count, uint[]  value) => glUniform2uivEXTPtr?.Invoke(location, count, value);
        private delegate void glUniform2uivEXTDel(int  location, uint  count, uint[]  value);
        private static glUniform2uivEXTDel glUniform2uivEXTPtr;
        
        // glUniform3d
        public static void glUniform3d(int  location, double  x, double  y, double  z) => glUniform3dPtr?.Invoke(location, x, y, z);
        private delegate void glUniform3dDel(int  location, double  x, double  y, double  z);
        private static glUniform3dDel glUniform3dPtr;
        
        // glUniform3dv
        public static void glUniform3dv(int  location, uint  count, double[]  value) => glUniform3dvPtr?.Invoke(location, count, value);
        private delegate void glUniform3dvDel(int  location, uint  count, double[]  value);
        private static glUniform3dvDel glUniform3dvPtr;
        
        // glUniform3f
        public static void glUniform3f(int  location, float  v0, float  v1, float  v2) => glUniform3fPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3fDel(int  location, float  v0, float  v1, float  v2);
        private static glUniform3fDel glUniform3fPtr;
        
        // glUniform3fARB
        public static void glUniform3fARB(int  location, float  v0, float  v1, float  v2) => glUniform3fARBPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3fARBDel(int  location, float  v0, float  v1, float  v2);
        private static glUniform3fARBDel glUniform3fARBPtr;
        
        // glUniform3fv
        public static void glUniform3fv(int  location, uint  count, float[]  value) => glUniform3fvPtr?.Invoke(location, count, value);
        private delegate void glUniform3fvDel(int  location, uint  count, float[]  value);
        private static glUniform3fvDel glUniform3fvPtr;
        
        // glUniform3fvARB
        public static void glUniform3fvARB(int  location, uint  count, float[]  value) => glUniform3fvARBPtr?.Invoke(location, count, value);
        private delegate void glUniform3fvARBDel(int  location, uint  count, float[]  value);
        private static glUniform3fvARBDel glUniform3fvARBPtr;
        
        // glUniform3i
        public static void glUniform3i(int  location, int  v0, int  v1, int  v2) => glUniform3iPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3iDel(int  location, int  v0, int  v1, int  v2);
        private static glUniform3iDel glUniform3iPtr;
        
        // glUniform3i64ARB
        public static void glUniform3i64ARB(int  location, long  x, long  y, long  z) => glUniform3i64ARBPtr?.Invoke(location, x, y, z);
        private delegate void glUniform3i64ARBDel(int  location, long  x, long  y, long  z);
        private static glUniform3i64ARBDel glUniform3i64ARBPtr;
        
        // glUniform3i64NV
        public static void glUniform3i64NV(int  location, long  x, long  y, long  z) => glUniform3i64NVPtr?.Invoke(location, x, y, z);
        private delegate void glUniform3i64NVDel(int  location, long  x, long  y, long  z);
        private static glUniform3i64NVDel glUniform3i64NVPtr;
        
        // glUniform3i64vARB
        public static void glUniform3i64vARB(int  location, uint  count, long[]  value) => glUniform3i64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform3i64vARBDel(int  location, uint  count, long[]  value);
        private static glUniform3i64vARBDel glUniform3i64vARBPtr;
        
        // glUniform3i64vNV
        public static void glUniform3i64vNV(int  location, uint  count, long[]  value) => glUniform3i64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform3i64vNVDel(int  location, uint  count, long[]  value);
        private static glUniform3i64vNVDel glUniform3i64vNVPtr;
        
        // glUniform3iARB
        public static void glUniform3iARB(int  location, int  v0, int  v1, int  v2) => glUniform3iARBPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3iARBDel(int  location, int  v0, int  v1, int  v2);
        private static glUniform3iARBDel glUniform3iARBPtr;
        
        // glUniform3iv
        public static void glUniform3iv(int  location, uint  count, int[]  value) => glUniform3ivPtr?.Invoke(location, count, value);
        private delegate void glUniform3ivDel(int  location, uint  count, int[]  value);
        private static glUniform3ivDel glUniform3ivPtr;
        
        // glUniform3ivARB
        public static void glUniform3ivARB(int  location, uint  count, int[]  value) => glUniform3ivARBPtr?.Invoke(location, count, value);
        private delegate void glUniform3ivARBDel(int  location, uint  count, int[]  value);
        private static glUniform3ivARBDel glUniform3ivARBPtr;
        
        // glUniform3ui
        public static void glUniform3ui(int  location, uint  v0, uint  v1, uint  v2) => glUniform3uiPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3uiDel(int  location, uint  v0, uint  v1, uint  v2);
        private static glUniform3uiDel glUniform3uiPtr;
        
        // glUniform3ui64ARB
        public static void glUniform3ui64ARB(int  location, ulong  x, ulong  y, ulong  z) => glUniform3ui64ARBPtr?.Invoke(location, x, y, z);
        private delegate void glUniform3ui64ARBDel(int  location, ulong  x, ulong  y, ulong  z);
        private static glUniform3ui64ARBDel glUniform3ui64ARBPtr;
        
        // glUniform3ui64NV
        public static void glUniform3ui64NV(int  location, ulong  x, ulong  y, ulong  z) => glUniform3ui64NVPtr?.Invoke(location, x, y, z);
        private delegate void glUniform3ui64NVDel(int  location, ulong  x, ulong  y, ulong  z);
        private static glUniform3ui64NVDel glUniform3ui64NVPtr;
        
        // glUniform3ui64vARB
        public static void glUniform3ui64vARB(int  location, uint  count, ulong[]  value) => glUniform3ui64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform3ui64vARBDel(int  location, uint  count, ulong[]  value);
        private static glUniform3ui64vARBDel glUniform3ui64vARBPtr;
        
        // glUniform3ui64vNV
        public static void glUniform3ui64vNV(int  location, uint  count, ulong[]  value) => glUniform3ui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform3ui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniform3ui64vNVDel glUniform3ui64vNVPtr;
        
        // glUniform3uiEXT
        public static void glUniform3uiEXT(int  location, uint  v0, uint  v1, uint  v2) => glUniform3uiEXTPtr?.Invoke(location, v0, v1, v2);
        private delegate void glUniform3uiEXTDel(int  location, uint  v0, uint  v1, uint  v2);
        private static glUniform3uiEXTDel glUniform3uiEXTPtr;
        
        // glUniform3uiv
        public static void glUniform3uiv(int  location, uint  count, uint[]  value) => glUniform3uivPtr?.Invoke(location, count, value);
        private delegate void glUniform3uivDel(int  location, uint  count, uint[]  value);
        private static glUniform3uivDel glUniform3uivPtr;
        
        // glUniform3uivEXT
        public static void glUniform3uivEXT(int  location, uint  count, uint[]  value) => glUniform3uivEXTPtr?.Invoke(location, count, value);
        private delegate void glUniform3uivEXTDel(int  location, uint  count, uint[]  value);
        private static glUniform3uivEXTDel glUniform3uivEXTPtr;
        
        // glUniform4d
        public static void glUniform4d(int  location, double  x, double  y, double  z, double  w) => glUniform4dPtr?.Invoke(location, x, y, z, w);
        private delegate void glUniform4dDel(int  location, double  x, double  y, double  z, double  w);
        private static glUniform4dDel glUniform4dPtr;
        
        // glUniform4dv
        public static void glUniform4dv(int  location, uint  count, double[]  value) => glUniform4dvPtr?.Invoke(location, count, value);
        private delegate void glUniform4dvDel(int  location, uint  count, double[]  value);
        private static glUniform4dvDel glUniform4dvPtr;
        
        // glUniform4f
        public static void glUniform4f(int  location, float  v0, float  v1, float  v2, float  v3) => glUniform4fPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4fDel(int  location, float  v0, float  v1, float  v2, float  v3);
        private static glUniform4fDel glUniform4fPtr;
        
        // glUniform4fARB
        public static void glUniform4fARB(int  location, float  v0, float  v1, float  v2, float  v3) => glUniform4fARBPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4fARBDel(int  location, float  v0, float  v1, float  v2, float  v3);
        private static glUniform4fARBDel glUniform4fARBPtr;
        
        // glUniform4fv
        public static void glUniform4fv(int  location, uint  count, float[]  value) => glUniform4fvPtr?.Invoke(location, count, value);
        private delegate void glUniform4fvDel(int  location, uint  count, float[]  value);
        private static glUniform4fvDel glUniform4fvPtr;
        
        // glUniform4fvARB
        public static void glUniform4fvARB(int  location, uint  count, float[]  value) => glUniform4fvARBPtr?.Invoke(location, count, value);
        private delegate void glUniform4fvARBDel(int  location, uint  count, float[]  value);
        private static glUniform4fvARBDel glUniform4fvARBPtr;
        
        // glUniform4i
        public static void glUniform4i(int  location, int  v0, int  v1, int  v2, int  v3) => glUniform4iPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4iDel(int  location, int  v0, int  v1, int  v2, int  v3);
        private static glUniform4iDel glUniform4iPtr;
        
        // glUniform4i64ARB
        public static void glUniform4i64ARB(int  location, long  x, long  y, long  z, long  w) => glUniform4i64ARBPtr?.Invoke(location, x, y, z, w);
        private delegate void glUniform4i64ARBDel(int  location, long  x, long  y, long  z, long  w);
        private static glUniform4i64ARBDel glUniform4i64ARBPtr;
        
        // glUniform4i64NV
        public static void glUniform4i64NV(int  location, long  x, long  y, long  z, long  w) => glUniform4i64NVPtr?.Invoke(location, x, y, z, w);
        private delegate void glUniform4i64NVDel(int  location, long  x, long  y, long  z, long  w);
        private static glUniform4i64NVDel glUniform4i64NVPtr;
        
        // glUniform4i64vARB
        public static void glUniform4i64vARB(int  location, uint  count, long[]  value) => glUniform4i64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform4i64vARBDel(int  location, uint  count, long[]  value);
        private static glUniform4i64vARBDel glUniform4i64vARBPtr;
        
        // glUniform4i64vNV
        public static void glUniform4i64vNV(int  location, uint  count, long[]  value) => glUniform4i64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform4i64vNVDel(int  location, uint  count, long[]  value);
        private static glUniform4i64vNVDel glUniform4i64vNVPtr;
        
        // glUniform4iARB
        public static void glUniform4iARB(int  location, int  v0, int  v1, int  v2, int  v3) => glUniform4iARBPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4iARBDel(int  location, int  v0, int  v1, int  v2, int  v3);
        private static glUniform4iARBDel glUniform4iARBPtr;
        
        // glUniform4iv
        public static void glUniform4iv(int  location, uint  count, int[]  value) => glUniform4ivPtr?.Invoke(location, count, value);
        private delegate void glUniform4ivDel(int  location, uint  count, int[]  value);
        private static glUniform4ivDel glUniform4ivPtr;
        
        // glUniform4ivARB
        public static void glUniform4ivARB(int  location, uint  count, int[]  value) => glUniform4ivARBPtr?.Invoke(location, count, value);
        private delegate void glUniform4ivARBDel(int  location, uint  count, int[]  value);
        private static glUniform4ivARBDel glUniform4ivARBPtr;
        
        // glUniform4ui
        public static void glUniform4ui(int  location, uint  v0, uint  v1, uint  v2, uint  v3) => glUniform4uiPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4uiDel(int  location, uint  v0, uint  v1, uint  v2, uint  v3);
        private static glUniform4uiDel glUniform4uiPtr;
        
        // glUniform4ui64ARB
        public static void glUniform4ui64ARB(int  location, ulong  x, ulong  y, ulong  z, ulong  w) => glUniform4ui64ARBPtr?.Invoke(location, x, y, z, w);
        private delegate void glUniform4ui64ARBDel(int  location, ulong  x, ulong  y, ulong  z, ulong  w);
        private static glUniform4ui64ARBDel glUniform4ui64ARBPtr;
        
        // glUniform4ui64NV
        public static void glUniform4ui64NV(int  location, ulong  x, ulong  y, ulong  z, ulong  w) => glUniform4ui64NVPtr?.Invoke(location, x, y, z, w);
        private delegate void glUniform4ui64NVDel(int  location, ulong  x, ulong  y, ulong  z, ulong  w);
        private static glUniform4ui64NVDel glUniform4ui64NVPtr;
        
        // glUniform4ui64vARB
        public static void glUniform4ui64vARB(int  location, uint  count, ulong[]  value) => glUniform4ui64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniform4ui64vARBDel(int  location, uint  count, ulong[]  value);
        private static glUniform4ui64vARBDel glUniform4ui64vARBPtr;
        
        // glUniform4ui64vNV
        public static void glUniform4ui64vNV(int  location, uint  count, ulong[]  value) => glUniform4ui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniform4ui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniform4ui64vNVDel glUniform4ui64vNVPtr;
        
        // glUniform4uiEXT
        public static void glUniform4uiEXT(int  location, uint  v0, uint  v1, uint  v2, uint  v3) => glUniform4uiEXTPtr?.Invoke(location, v0, v1, v2, v3);
        private delegate void glUniform4uiEXTDel(int  location, uint  v0, uint  v1, uint  v2, uint  v3);
        private static glUniform4uiEXTDel glUniform4uiEXTPtr;
        
        // glUniform4uiv
        public static void glUniform4uiv(int  location, uint  count, uint[]  value) => glUniform4uivPtr?.Invoke(location, count, value);
        private delegate void glUniform4uivDel(int  location, uint  count, uint[]  value);
        private static glUniform4uivDel glUniform4uivPtr;
        
        // glUniform4uivEXT
        public static void glUniform4uivEXT(int  location, uint  count, uint[]  value) => glUniform4uivEXTPtr?.Invoke(location, count, value);
        private delegate void glUniform4uivEXTDel(int  location, uint  count, uint[]  value);
        private static glUniform4uivEXTDel glUniform4uivEXTPtr;
        
        // glUniformBlockBinding
        public static void glUniformBlockBinding(uint  program, uint  uniformBlockIndex, uint  uniformBlockBinding) => glUniformBlockBindingPtr?.Invoke(program, uniformBlockIndex, uniformBlockBinding);
        private delegate void glUniformBlockBindingDel(uint  program, uint  uniformBlockIndex, uint  uniformBlockBinding);
        private static glUniformBlockBindingDel glUniformBlockBindingPtr;
        
        // glUniformBufferEXT
        public static void glUniformBufferEXT(uint  program, int  location, uint  buffer) => glUniformBufferEXTPtr?.Invoke(program, location, buffer);
        private delegate void glUniformBufferEXTDel(uint  program, int  location, uint  buffer);
        private static glUniformBufferEXTDel glUniformBufferEXTPtr;
        
        // glUniformHandleui64ARB
        public static void glUniformHandleui64ARB(int  location, ulong  value) => glUniformHandleui64ARBPtr?.Invoke(location, value);
        private delegate void glUniformHandleui64ARBDel(int  location, ulong  value);
        private static glUniformHandleui64ARBDel glUniformHandleui64ARBPtr;
        
        // glUniformHandleui64IMG
        public static void glUniformHandleui64IMG(int  location, ulong  value) => glUniformHandleui64IMGPtr?.Invoke(location, value);
        private delegate void glUniformHandleui64IMGDel(int  location, ulong  value);
        private static glUniformHandleui64IMGDel glUniformHandleui64IMGPtr;
        
        // glUniformHandleui64NV
        public static void glUniformHandleui64NV(int  location, ulong  value) => glUniformHandleui64NVPtr?.Invoke(location, value);
        private delegate void glUniformHandleui64NVDel(int  location, ulong  value);
        private static glUniformHandleui64NVDel glUniformHandleui64NVPtr;
        
        // glUniformHandleui64vARB
        public static void glUniformHandleui64vARB(int  location, uint  count, ulong[]  value) => glUniformHandleui64vARBPtr?.Invoke(location, count, value);
        private delegate void glUniformHandleui64vARBDel(int  location, uint  count, ulong[]  value);
        private static glUniformHandleui64vARBDel glUniformHandleui64vARBPtr;
        
        // glUniformHandleui64vIMG
        public static void glUniformHandleui64vIMG(int  location, uint  count, ulong[]  value) => glUniformHandleui64vIMGPtr?.Invoke(location, count, value);
        private delegate void glUniformHandleui64vIMGDel(int  location, uint  count, ulong[]  value);
        private static glUniformHandleui64vIMGDel glUniformHandleui64vIMGPtr;
        
        // glUniformHandleui64vNV
        public static void glUniformHandleui64vNV(int  location, uint  count, ulong[]  value) => glUniformHandleui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniformHandleui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniformHandleui64vNVDel glUniformHandleui64vNVPtr;
        
        // glUniformMatrix2dv
        public static void glUniformMatrix2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix2dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix2dvDel glUniformMatrix2dvPtr;
        
        // glUniformMatrix2fv
        public static void glUniformMatrix2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2fvDel glUniformMatrix2fvPtr;
        
        // glUniformMatrix2fvARB
        public static void glUniformMatrix2fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2fvARBPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2fvARBDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2fvARBDel glUniformMatrix2fvARBPtr;
        
        // glUniformMatrix2x3dv
        public static void glUniformMatrix2x3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix2x3dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x3dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix2x3dvDel glUniformMatrix2x3dvPtr;
        
        // glUniformMatrix2x3fv
        public static void glUniformMatrix2x3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2x3fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x3fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2x3fvDel glUniformMatrix2x3fvPtr;
        
        // glUniformMatrix2x3fvNV
        public static void glUniformMatrix2x3fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2x3fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x3fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2x3fvNVDel glUniformMatrix2x3fvNVPtr;
        
        // glUniformMatrix2x4dv
        public static void glUniformMatrix2x4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix2x4dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x4dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix2x4dvDel glUniformMatrix2x4dvPtr;
        
        // glUniformMatrix2x4fv
        public static void glUniformMatrix2x4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2x4fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x4fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2x4fvDel glUniformMatrix2x4fvPtr;
        
        // glUniformMatrix2x4fvNV
        public static void glUniformMatrix2x4fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix2x4fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix2x4fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix2x4fvNVDel glUniformMatrix2x4fvNVPtr;
        
        // glUniformMatrix3dv
        public static void glUniformMatrix3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix3dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix3dvDel glUniformMatrix3dvPtr;
        
        // glUniformMatrix3fv
        public static void glUniformMatrix3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3fvDel glUniformMatrix3fvPtr;
        
        // glUniformMatrix3fvARB
        public static void glUniformMatrix3fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3fvARBPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3fvARBDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3fvARBDel glUniformMatrix3fvARBPtr;
        
        // glUniformMatrix3x2dv
        public static void glUniformMatrix3x2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix3x2dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x2dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix3x2dvDel glUniformMatrix3x2dvPtr;
        
        // glUniformMatrix3x2fv
        public static void glUniformMatrix3x2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3x2fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x2fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3x2fvDel glUniformMatrix3x2fvPtr;
        
        // glUniformMatrix3x2fvNV
        public static void glUniformMatrix3x2fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3x2fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x2fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3x2fvNVDel glUniformMatrix3x2fvNVPtr;
        
        // glUniformMatrix3x4dv
        public static void glUniformMatrix3x4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix3x4dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x4dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix3x4dvDel glUniformMatrix3x4dvPtr;
        
        // glUniformMatrix3x4fv
        public static void glUniformMatrix3x4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3x4fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x4fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3x4fvDel glUniformMatrix3x4fvPtr;
        
        // glUniformMatrix3x4fvNV
        public static void glUniformMatrix3x4fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix3x4fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix3x4fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix3x4fvNVDel glUniformMatrix3x4fvNVPtr;
        
        // glUniformMatrix4dv
        public static void glUniformMatrix4dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix4dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix4dvDel glUniformMatrix4dvPtr;
        
        // glUniformMatrix4fv
        public static void glUniformMatrix4fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4fvDel glUniformMatrix4fvPtr;
        
        // glUniformMatrix4fvARB
        public static void glUniformMatrix4fvARB(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4fvARBPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4fvARBDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4fvARBDel glUniformMatrix4fvARBPtr;
        
        // glUniformMatrix4x2dv
        public static void glUniformMatrix4x2dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix4x2dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x2dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix4x2dvDel glUniformMatrix4x2dvPtr;
        
        // glUniformMatrix4x2fv
        public static void glUniformMatrix4x2fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4x2fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x2fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4x2fvDel glUniformMatrix4x2fvPtr;
        
        // glUniformMatrix4x2fvNV
        public static void glUniformMatrix4x2fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4x2fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x2fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4x2fvNVDel glUniformMatrix4x2fvNVPtr;
        
        // glUniformMatrix4x3dv
        public static void glUniformMatrix4x3dv(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value) => glUniformMatrix4x3dvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x3dvDel(int  location, uint  count, bool /*Boolean*/  transpose, double[]  value);
        private static glUniformMatrix4x3dvDel glUniformMatrix4x3dvPtr;
        
        // glUniformMatrix4x3fv
        public static void glUniformMatrix4x3fv(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4x3fvPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x3fvDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4x3fvDel glUniformMatrix4x3fvPtr;
        
        // glUniformMatrix4x3fvNV
        public static void glUniformMatrix4x3fvNV(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value) => glUniformMatrix4x3fvNVPtr?.Invoke(location, count, transpose, value);
        private delegate void glUniformMatrix4x3fvNVDel(int  location, uint  count, bool /*Boolean*/  transpose, float[]  value);
        private static glUniformMatrix4x3fvNVDel glUniformMatrix4x3fvNVPtr;
        
        // glUniformSubroutinesuiv
        public static void glUniformSubroutinesuiv(uint /*ShaderType*/  shadertype, uint  count, uint[]  indices) => glUniformSubroutinesuivPtr?.Invoke(shadertype, count, indices);
        private delegate void glUniformSubroutinesuivDel(uint /*ShaderType*/  shadertype, uint  count, uint[]  indices);
        private static glUniformSubroutinesuivDel glUniformSubroutinesuivPtr;
        
        // glUniformui64NV
        public static void glUniformui64NV(int  location, ulong  value) => glUniformui64NVPtr?.Invoke(location, value);
        private delegate void glUniformui64NVDel(int  location, ulong  value);
        private static glUniformui64NVDel glUniformui64NVPtr;
        
        // glUniformui64vNV
        public static void glUniformui64vNV(int  location, uint  count, ulong[]  value) => glUniformui64vNVPtr?.Invoke(location, count, value);
        private delegate void glUniformui64vNVDel(int  location, uint  count, ulong[]  value);
        private static glUniformui64vNVDel glUniformui64vNVPtr;
        
        // glUnlockArraysEXT
        public static void glUnlockArraysEXT() => glUnlockArraysEXTPtr?.Invoke();
        private delegate void glUnlockArraysEXTDel();
        private static glUnlockArraysEXTDel glUnlockArraysEXTPtr;
        
        // glUnmapBuffer
        public static bool /*Boolean*/ glUnmapBuffer(uint /*BufferTargetARB*/  target) => glUnmapBufferPtr?.Invoke(target) ?? default;
        private delegate bool /*Boolean*/ glUnmapBufferDel(uint /*BufferTargetARB*/  target);
        private static glUnmapBufferDel glUnmapBufferPtr;
        
        // glUnmapBufferARB
        public static bool /*Boolean*/ glUnmapBufferARB(uint /*BufferTargetARB*/  target) => glUnmapBufferARBPtr?.Invoke(target) ?? default;
        private delegate bool /*Boolean*/ glUnmapBufferARBDel(uint /*BufferTargetARB*/  target);
        private static glUnmapBufferARBDel glUnmapBufferARBPtr;
        
        // glUnmapBufferOES
        public static bool /*Boolean*/ glUnmapBufferOES(uint  target) => glUnmapBufferOESPtr?.Invoke(target) ?? default;
        private delegate bool /*Boolean*/ glUnmapBufferOESDel(uint  target);
        private static glUnmapBufferOESDel glUnmapBufferOESPtr;
        
        // glUnmapNamedBuffer
        public static bool /*Boolean*/ glUnmapNamedBuffer(uint  buffer) => glUnmapNamedBufferPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glUnmapNamedBufferDel(uint  buffer);
        private static glUnmapNamedBufferDel glUnmapNamedBufferPtr;
        
        // glUnmapNamedBufferEXT
        public static bool /*Boolean*/ glUnmapNamedBufferEXT(uint  buffer) => glUnmapNamedBufferEXTPtr?.Invoke(buffer) ?? default;
        private delegate bool /*Boolean*/ glUnmapNamedBufferEXTDel(uint  buffer);
        private static glUnmapNamedBufferEXTDel glUnmapNamedBufferEXTPtr;
        
        // glUnmapObjectBufferATI
        public static void glUnmapObjectBufferATI(uint  buffer) => glUnmapObjectBufferATIPtr?.Invoke(buffer);
        private delegate void glUnmapObjectBufferATIDel(uint  buffer);
        private static glUnmapObjectBufferATIDel glUnmapObjectBufferATIPtr;
        
        // glUnmapTexture2DINTEL
        public static void glUnmapTexture2DINTEL(uint  texture, int  level) => glUnmapTexture2DINTELPtr?.Invoke(texture, level);
        private delegate void glUnmapTexture2DINTELDel(uint  texture, int  level);
        private static glUnmapTexture2DINTELDel glUnmapTexture2DINTELPtr;
        
        // glUpdateObjectBufferATI
        public static void glUpdateObjectBufferATI(uint  buffer, uint  offset, uint  size, IntPtr  pointer, uint /*PreserveModeATI*/  preserve) => glUpdateObjectBufferATIPtr?.Invoke(buffer, offset, size, pointer, preserve);
        private delegate void glUpdateObjectBufferATIDel(uint  buffer, uint  offset, uint  size, IntPtr  pointer, uint /*PreserveModeATI*/  preserve);
        private static glUpdateObjectBufferATIDel glUpdateObjectBufferATIPtr;
        
        // glUploadGpuMaskNVX
        public static void glUploadGpuMaskNVX(uint  mask) => glUploadGpuMaskNVXPtr?.Invoke(mask);
        private delegate void glUploadGpuMaskNVXDel(uint  mask);
        private static glUploadGpuMaskNVXDel glUploadGpuMaskNVXPtr;
        
        // glUseProgram
        public static void glUseProgram(uint  program) => glUseProgramPtr?.Invoke(program);
        private delegate void glUseProgramDel(uint  program);
        private static glUseProgramDel glUseProgramPtr;
        
        // glUseProgramObjectARB
        public static void glUseProgramObjectARB(IntPtr /*handleARB*/  programObj) => glUseProgramObjectARBPtr?.Invoke(programObj);
        private delegate void glUseProgramObjectARBDel(IntPtr /*handleARB*/  programObj);
        private static glUseProgramObjectARBDel glUseProgramObjectARBPtr;
        
        // glUseProgramStages
        public static void glUseProgramStages(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program) => glUseProgramStagesPtr?.Invoke(pipeline, stages, program);
        private delegate void glUseProgramStagesDel(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program);
        private static glUseProgramStagesDel glUseProgramStagesPtr;
        
        // glUseProgramStagesEXT
        public static void glUseProgramStagesEXT(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program) => glUseProgramStagesEXTPtr?.Invoke(pipeline, stages, program);
        private delegate void glUseProgramStagesEXTDel(uint  pipeline, uint /*UseProgramStageMask*/  stages, uint  program);
        private static glUseProgramStagesEXTDel glUseProgramStagesEXTPtr;
        
        // glUseShaderProgramEXT
        public static void glUseShaderProgramEXT(uint  type, uint  program) => glUseShaderProgramEXTPtr?.Invoke(type, program);
        private delegate void glUseShaderProgramEXTDel(uint  type, uint  program);
        private static glUseShaderProgramEXTDel glUseShaderProgramEXTPtr;
        
        // glVDPAUFiniNV
        public static void glVDPAUFiniNV() => glVDPAUFiniNVPtr?.Invoke();
        private delegate void glVDPAUFiniNVDel();
        private static glVDPAUFiniNVDel glVDPAUFiniNVPtr;
        
        // glVDPAUGetSurfaceivNV
        public static void glVDPAUGetSurfaceivNV(IntPtr /*vdpauSurfaceNV*/  surface, uint  pname, uint  count, uint[]  length, int[]  values) => glVDPAUGetSurfaceivNVPtr?.Invoke(surface, pname, count, length, values);
        private delegate void glVDPAUGetSurfaceivNVDel(IntPtr /*vdpauSurfaceNV*/  surface, uint  pname, uint  count, uint[]  length, int[]  values);
        private static glVDPAUGetSurfaceivNVDel glVDPAUGetSurfaceivNVPtr;
        
        // glVDPAUInitNV
        public static void glVDPAUInitNV(IntPtr  vdpDevice, IntPtr  getProcAddress) => glVDPAUInitNVPtr?.Invoke(vdpDevice, getProcAddress);
        private delegate void glVDPAUInitNVDel(IntPtr  vdpDevice, IntPtr  getProcAddress);
        private static glVDPAUInitNVDel glVDPAUInitNVPtr;
        
        // glVDPAUIsSurfaceNV
        public static bool /*Boolean*/ glVDPAUIsSurfaceNV(IntPtr /*vdpauSurfaceNV*/  surface) => glVDPAUIsSurfaceNVPtr?.Invoke(surface) ?? default;
        private delegate bool /*Boolean*/ glVDPAUIsSurfaceNVDel(IntPtr /*vdpauSurfaceNV*/  surface);
        private static glVDPAUIsSurfaceNVDel glVDPAUIsSurfaceNVPtr;
        
        // glVDPAUMapSurfacesNV
        public static void glVDPAUMapSurfacesNV(uint  numSurfaces, IntPtr[] /*vdpauSurfaceNV*/  surfaces) => glVDPAUMapSurfacesNVPtr?.Invoke(numSurfaces, surfaces);
        private delegate void glVDPAUMapSurfacesNVDel(uint  numSurfaces, IntPtr[] /*vdpauSurfaceNV*/  surfaces);
        private static glVDPAUMapSurfacesNVDel glVDPAUMapSurfacesNVPtr;
        
        // glVDPAURegisterOutputSurfaceNV
        public static IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterOutputSurfaceNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames) => glVDPAURegisterOutputSurfaceNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames) ?? default;
        private delegate IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterOutputSurfaceNVDel(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames);
        private static glVDPAURegisterOutputSurfaceNVDel glVDPAURegisterOutputSurfaceNVPtr;
        
        // glVDPAURegisterVideoSurfaceNV
        public static IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterVideoSurfaceNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames) => glVDPAURegisterVideoSurfaceNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames) ?? default;
        private delegate IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterVideoSurfaceNVDel(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames);
        private static glVDPAURegisterVideoSurfaceNVDel glVDPAURegisterVideoSurfaceNVPtr;
        
        // glVDPAURegisterVideoSurfaceWithPictureStructureNV
        public static IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames, bool /*Boolean*/  isFrameStructure) => glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr?.Invoke(vdpSurface, target, numTextureNames, textureNames, isFrameStructure) ?? default;
        private delegate IntPtr /*vdpauSurfaceNV*/ glVDPAURegisterVideoSurfaceWithPictureStructureNVDel(IntPtr  vdpSurface, uint  target, uint  numTextureNames, uint[]  textureNames, bool /*Boolean*/  isFrameStructure);
        private static glVDPAURegisterVideoSurfaceWithPictureStructureNVDel glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr;
        
        // glVDPAUSurfaceAccessNV
        public static void glVDPAUSurfaceAccessNV(IntPtr /*vdpauSurfaceNV*/  surface, uint  access) => glVDPAUSurfaceAccessNVPtr?.Invoke(surface, access);
        private delegate void glVDPAUSurfaceAccessNVDel(IntPtr /*vdpauSurfaceNV*/  surface, uint  access);
        private static glVDPAUSurfaceAccessNVDel glVDPAUSurfaceAccessNVPtr;
        
        // glVDPAUUnmapSurfacesNV
        public static void glVDPAUUnmapSurfacesNV(uint  numSurface, IntPtr[] /*vdpauSurfaceNV*/  surfaces) => glVDPAUUnmapSurfacesNVPtr?.Invoke(numSurface, surfaces);
        private delegate void glVDPAUUnmapSurfacesNVDel(uint  numSurface, IntPtr[] /*vdpauSurfaceNV*/  surfaces);
        private static glVDPAUUnmapSurfacesNVDel glVDPAUUnmapSurfacesNVPtr;
        
        // glVDPAUUnregisterSurfaceNV
        public static void glVDPAUUnregisterSurfaceNV(IntPtr /*vdpauSurfaceNV*/  surface) => glVDPAUUnregisterSurfaceNVPtr?.Invoke(surface);
        private delegate void glVDPAUUnregisterSurfaceNVDel(IntPtr /*vdpauSurfaceNV*/  surface);
        private static glVDPAUUnregisterSurfaceNVDel glVDPAUUnregisterSurfaceNVPtr;
        
        // glValidateProgram
        public static void glValidateProgram(uint  program) => glValidateProgramPtr?.Invoke(program);
        private delegate void glValidateProgramDel(uint  program);
        private static glValidateProgramDel glValidateProgramPtr;
        
        // glValidateProgramARB
        public static void glValidateProgramARB(IntPtr /*handleARB*/  programObj) => glValidateProgramARBPtr?.Invoke(programObj);
        private delegate void glValidateProgramARBDel(IntPtr /*handleARB*/  programObj);
        private static glValidateProgramARBDel glValidateProgramARBPtr;
        
        // glValidateProgramPipeline
        public static void glValidateProgramPipeline(uint  pipeline) => glValidateProgramPipelinePtr?.Invoke(pipeline);
        private delegate void glValidateProgramPipelineDel(uint  pipeline);
        private static glValidateProgramPipelineDel glValidateProgramPipelinePtr;
        
        // glValidateProgramPipelineEXT
        public static void glValidateProgramPipelineEXT(uint  pipeline) => glValidateProgramPipelineEXTPtr?.Invoke(pipeline);
        private delegate void glValidateProgramPipelineEXTDel(uint  pipeline);
        private static glValidateProgramPipelineEXTDel glValidateProgramPipelineEXTPtr;
        
        // glVariantArrayObjectATI
        public static void glVariantArrayObjectATI(uint  id, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset) => glVariantArrayObjectATIPtr?.Invoke(id, type, stride, buffer, offset);
        private delegate void glVariantArrayObjectATIDel(uint  id, uint /*ScalarType*/  type, uint  stride, uint  buffer, uint  offset);
        private static glVariantArrayObjectATIDel glVariantArrayObjectATIPtr;
        
        // glVariantPointerEXT
        public static void glVariantPointerEXT(uint  id, uint /*ScalarType*/  type, uint  stride, IntPtr  addr) => glVariantPointerEXTPtr?.Invoke(id, type, stride, addr);
        private delegate void glVariantPointerEXTDel(uint  id, uint /*ScalarType*/  type, uint  stride, IntPtr  addr);
        private static glVariantPointerEXTDel glVariantPointerEXTPtr;
        
        // glVariantbvEXT
        public static void glVariantbvEXT(uint  id, sbyte[]  addr) => glVariantbvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantbvEXTDel(uint  id, sbyte[]  addr);
        private static glVariantbvEXTDel glVariantbvEXTPtr;
        
        // glVariantdvEXT
        public static void glVariantdvEXT(uint  id, double[]  addr) => glVariantdvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantdvEXTDel(uint  id, double[]  addr);
        private static glVariantdvEXTDel glVariantdvEXTPtr;
        
        // glVariantfvEXT
        public static void glVariantfvEXT(uint  id, float[]  addr) => glVariantfvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantfvEXTDel(uint  id, float[]  addr);
        private static glVariantfvEXTDel glVariantfvEXTPtr;
        
        // glVariantivEXT
        public static void glVariantivEXT(uint  id, int[]  addr) => glVariantivEXTPtr?.Invoke(id, addr);
        private delegate void glVariantivEXTDel(uint  id, int[]  addr);
        private static glVariantivEXTDel glVariantivEXTPtr;
        
        // glVariantsvEXT
        public static void glVariantsvEXT(uint  id, short[]  addr) => glVariantsvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantsvEXTDel(uint  id, short[]  addr);
        private static glVariantsvEXTDel glVariantsvEXTPtr;
        
        // glVariantubvEXT
        public static void glVariantubvEXT(uint  id, byte[]  addr) => glVariantubvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantubvEXTDel(uint  id, byte[]  addr);
        private static glVariantubvEXTDel glVariantubvEXTPtr;
        
        // glVariantuivEXT
        public static void glVariantuivEXT(uint  id, uint[]  addr) => glVariantuivEXTPtr?.Invoke(id, addr);
        private delegate void glVariantuivEXTDel(uint  id, uint[]  addr);
        private static glVariantuivEXTDel glVariantuivEXTPtr;
        
        // glVariantusvEXT
        public static void glVariantusvEXT(uint  id, ushort[]  addr) => glVariantusvEXTPtr?.Invoke(id, addr);
        private delegate void glVariantusvEXTDel(uint  id, ushort[]  addr);
        private static glVariantusvEXTDel glVariantusvEXTPtr;
        
        // glVertex2bOES
        public static void glVertex2bOES(sbyte  x, sbyte  y) => glVertex2bOESPtr?.Invoke(x, y);
        private delegate void glVertex2bOESDel(sbyte  x, sbyte  y);
        private static glVertex2bOESDel glVertex2bOESPtr;
        
        // glVertex2bvOES
        public static void glVertex2bvOES(sbyte[]  coords) => glVertex2bvOESPtr?.Invoke(coords);
        private delegate void glVertex2bvOESDel(sbyte[]  coords);
        private static glVertex2bvOESDel glVertex2bvOESPtr;
        
        // glVertex2d
        public static void glVertex2d(double /*CoordD*/  x, double /*CoordD*/  y) => glVertex2dPtr?.Invoke(x, y);
        private delegate void glVertex2dDel(double /*CoordD*/  x, double /*CoordD*/  y);
        private static glVertex2dDel glVertex2dPtr;
        
        // glVertex2dv
        public static void glVertex2dv(double[] /*CoordD*/  v) => glVertex2dvPtr?.Invoke(v);
        private delegate void glVertex2dvDel(double[] /*CoordD*/  v);
        private static glVertex2dvDel glVertex2dvPtr;
        
        // glVertex2f
        public static void glVertex2f(float /*CoordF*/  x, float /*CoordF*/  y) => glVertex2fPtr?.Invoke(x, y);
        private delegate void glVertex2fDel(float /*CoordF*/  x, float /*CoordF*/  y);
        private static glVertex2fDel glVertex2fPtr;
        
        // glVertex2fv
        public static void glVertex2fv(float[] /*CoordF*/  v) => glVertex2fvPtr?.Invoke(v);
        private delegate void glVertex2fvDel(float[] /*CoordF*/  v);
        private static glVertex2fvDel glVertex2fvPtr;
        
        // glVertex2hNV
        public static void glVertex2hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y) => glVertex2hNVPtr?.Invoke(x, y);
        private delegate void glVertex2hNVDel(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y);
        private static glVertex2hNVDel glVertex2hNVPtr;
        
        // glVertex2hvNV
        public static void glVertex2hvNV(ushort[] /*Half16NV*/  v) => glVertex2hvNVPtr?.Invoke(v);
        private delegate void glVertex2hvNVDel(ushort[] /*Half16NV*/  v);
        private static glVertex2hvNVDel glVertex2hvNVPtr;
        
        // glVertex2i
        public static void glVertex2i(int /*CoordI*/  x, int /*CoordI*/  y) => glVertex2iPtr?.Invoke(x, y);
        private delegate void glVertex2iDel(int /*CoordI*/  x, int /*CoordI*/  y);
        private static glVertex2iDel glVertex2iPtr;
        
        // glVertex2iv
        public static void glVertex2iv(int[] /*CoordI*/  v) => glVertex2ivPtr?.Invoke(v);
        private delegate void glVertex2ivDel(int[] /*CoordI*/  v);
        private static glVertex2ivDel glVertex2ivPtr;
        
        // glVertex2s
        public static void glVertex2s(short /*CoordS*/  x, short /*CoordS*/  y) => glVertex2sPtr?.Invoke(x, y);
        private delegate void glVertex2sDel(short /*CoordS*/  x, short /*CoordS*/  y);
        private static glVertex2sDel glVertex2sPtr;
        
        // glVertex2sv
        public static void glVertex2sv(short[] /*CoordS*/  v) => glVertex2svPtr?.Invoke(v);
        private delegate void glVertex2svDel(short[] /*CoordS*/  v);
        private static glVertex2svDel glVertex2svPtr;
        
        // glVertex2xOES
        public static void glVertex2xOES(int  x) => glVertex2xOESPtr?.Invoke(x);
        private delegate void glVertex2xOESDel(int  x);
        private static glVertex2xOESDel glVertex2xOESPtr;
        
        // glVertex2xvOES
        public static void glVertex2xvOES(int[]  coords) => glVertex2xvOESPtr?.Invoke(coords);
        private delegate void glVertex2xvOESDel(int[]  coords);
        private static glVertex2xvOESDel glVertex2xvOESPtr;
        
        // glVertex3bOES
        public static void glVertex3bOES(sbyte  x, sbyte  y, sbyte  z) => glVertex3bOESPtr?.Invoke(x, y, z);
        private delegate void glVertex3bOESDel(sbyte  x, sbyte  y, sbyte  z);
        private static glVertex3bOESDel glVertex3bOESPtr;
        
        // glVertex3bvOES
        public static void glVertex3bvOES(sbyte[]  coords) => glVertex3bvOESPtr?.Invoke(coords);
        private delegate void glVertex3bvOESDel(sbyte[]  coords);
        private static glVertex3bvOESDel glVertex3bvOESPtr;
        
        // glVertex3d
        public static void glVertex3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => glVertex3dPtr?.Invoke(x, y, z);
        private delegate void glVertex3dDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z);
        private static glVertex3dDel glVertex3dPtr;
        
        // glVertex3dv
        public static void glVertex3dv(double[] /*CoordD*/  v) => glVertex3dvPtr?.Invoke(v);
        private delegate void glVertex3dvDel(double[] /*CoordD*/  v);
        private static glVertex3dvDel glVertex3dvPtr;
        
        // glVertex3f
        public static void glVertex3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => glVertex3fPtr?.Invoke(x, y, z);
        private delegate void glVertex3fDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z);
        private static glVertex3fDel glVertex3fPtr;
        
        // glVertex3fv
        public static void glVertex3fv(float[] /*CoordF*/  v) => glVertex3fvPtr?.Invoke(v);
        private delegate void glVertex3fvDel(float[] /*CoordF*/  v);
        private static glVertex3fvDel glVertex3fvPtr;
        
        // glVertex3hNV
        public static void glVertex3hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z) => glVertex3hNVPtr?.Invoke(x, y, z);
        private delegate void glVertex3hNVDel(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z);
        private static glVertex3hNVDel glVertex3hNVPtr;
        
        // glVertex3hvNV
        public static void glVertex3hvNV(ushort[] /*Half16NV*/  v) => glVertex3hvNVPtr?.Invoke(v);
        private delegate void glVertex3hvNVDel(ushort[] /*Half16NV*/  v);
        private static glVertex3hvNVDel glVertex3hvNVPtr;
        
        // glVertex3i
        public static void glVertex3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => glVertex3iPtr?.Invoke(x, y, z);
        private delegate void glVertex3iDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z);
        private static glVertex3iDel glVertex3iPtr;
        
        // glVertex3iv
        public static void glVertex3iv(int[] /*CoordI*/  v) => glVertex3ivPtr?.Invoke(v);
        private delegate void glVertex3ivDel(int[] /*CoordI*/  v);
        private static glVertex3ivDel glVertex3ivPtr;
        
        // glVertex3s
        public static void glVertex3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => glVertex3sPtr?.Invoke(x, y, z);
        private delegate void glVertex3sDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z);
        private static glVertex3sDel glVertex3sPtr;
        
        // glVertex3sv
        public static void glVertex3sv(short[] /*CoordS*/  v) => glVertex3svPtr?.Invoke(v);
        private delegate void glVertex3svDel(short[] /*CoordS*/  v);
        private static glVertex3svDel glVertex3svPtr;
        
        // glVertex3xOES
        public static void glVertex3xOES(int  x, int  y) => glVertex3xOESPtr?.Invoke(x, y);
        private delegate void glVertex3xOESDel(int  x, int  y);
        private static glVertex3xOESDel glVertex3xOESPtr;
        
        // glVertex3xvOES
        public static void glVertex3xvOES(int[]  coords) => glVertex3xvOESPtr?.Invoke(coords);
        private delegate void glVertex3xvOESDel(int[]  coords);
        private static glVertex3xvOESDel glVertex3xvOESPtr;
        
        // glVertex4bOES
        public static void glVertex4bOES(sbyte  x, sbyte  y, sbyte  z, sbyte  w) => glVertex4bOESPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4bOESDel(sbyte  x, sbyte  y, sbyte  z, sbyte  w);
        private static glVertex4bOESDel glVertex4bOESPtr;
        
        // glVertex4bvOES
        public static void glVertex4bvOES(sbyte[]  coords) => glVertex4bvOESPtr?.Invoke(coords);
        private delegate void glVertex4bvOESDel(sbyte[]  coords);
        private static glVertex4bvOESDel glVertex4bvOESPtr;
        
        // glVertex4d
        public static void glVertex4d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => glVertex4dPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4dDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w);
        private static glVertex4dDel glVertex4dPtr;
        
        // glVertex4dv
        public static void glVertex4dv(double[] /*CoordD*/  v) => glVertex4dvPtr?.Invoke(v);
        private delegate void glVertex4dvDel(double[] /*CoordD*/  v);
        private static glVertex4dvDel glVertex4dvPtr;
        
        // glVertex4f
        public static void glVertex4f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => glVertex4fPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4fDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w);
        private static glVertex4fDel glVertex4fPtr;
        
        // glVertex4fv
        public static void glVertex4fv(float[] /*CoordF*/  v) => glVertex4fvPtr?.Invoke(v);
        private delegate void glVertex4fvDel(float[] /*CoordF*/  v);
        private static glVertex4fvDel glVertex4fvPtr;
        
        // glVertex4hNV
        public static void glVertex4hNV(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w) => glVertex4hNVPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4hNVDel(ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w);
        private static glVertex4hNVDel glVertex4hNVPtr;
        
        // glVertex4hvNV
        public static void glVertex4hvNV(ushort[] /*Half16NV*/  v) => glVertex4hvNVPtr?.Invoke(v);
        private delegate void glVertex4hvNVDel(ushort[] /*Half16NV*/  v);
        private static glVertex4hvNVDel glVertex4hvNVPtr;
        
        // glVertex4i
        public static void glVertex4i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => glVertex4iPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4iDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w);
        private static glVertex4iDel glVertex4iPtr;
        
        // glVertex4iv
        public static void glVertex4iv(int[] /*CoordI*/  v) => glVertex4ivPtr?.Invoke(v);
        private delegate void glVertex4ivDel(int[] /*CoordI*/  v);
        private static glVertex4ivDel glVertex4ivPtr;
        
        // glVertex4s
        public static void glVertex4s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => glVertex4sPtr?.Invoke(x, y, z, w);
        private delegate void glVertex4sDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w);
        private static glVertex4sDel glVertex4sPtr;
        
        // glVertex4sv
        public static void glVertex4sv(short[] /*CoordS*/  v) => glVertex4svPtr?.Invoke(v);
        private delegate void glVertex4svDel(short[] /*CoordS*/  v);
        private static glVertex4svDel glVertex4svPtr;
        
        // glVertex4xOES
        public static void glVertex4xOES(int  x, int  y, int  z) => glVertex4xOESPtr?.Invoke(x, y, z);
        private delegate void glVertex4xOESDel(int  x, int  y, int  z);
        private static glVertex4xOESDel glVertex4xOESPtr;
        
        // glVertex4xvOES
        public static void glVertex4xvOES(int[]  coords) => glVertex4xvOESPtr?.Invoke(coords);
        private delegate void glVertex4xvOESDel(int[]  coords);
        private static glVertex4xvOESDel glVertex4xvOESPtr;
        
        // glVertexArrayAttribBinding
        public static void glVertexArrayAttribBinding(uint  vaobj, uint  attribindex, uint  bindingindex) => glVertexArrayAttribBindingPtr?.Invoke(vaobj, attribindex, bindingindex);
        private delegate void glVertexArrayAttribBindingDel(uint  vaobj, uint  attribindex, uint  bindingindex);
        private static glVertexArrayAttribBindingDel glVertexArrayAttribBindingPtr;
        
        // glVertexArrayAttribFormat
        public static void glVertexArrayAttribFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => glVertexArrayAttribFormatPtr?.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);
        private delegate void glVertexArrayAttribFormatDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset);
        private static glVertexArrayAttribFormatDel glVertexArrayAttribFormatPtr;
        
        // glVertexArrayAttribIFormat
        public static void glVertexArrayAttribIFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => glVertexArrayAttribIFormatPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        private delegate void glVertexArrayAttribIFormatDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset);
        private static glVertexArrayAttribIFormatDel glVertexArrayAttribIFormatPtr;
        
        // glVertexArrayAttribLFormat
        public static void glVertexArrayAttribLFormat(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => glVertexArrayAttribLFormatPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        private delegate void glVertexArrayAttribLFormatDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset);
        private static glVertexArrayAttribLFormatDel glVertexArrayAttribLFormatPtr;
        
        // glVertexArrayBindVertexBufferEXT
        public static void glVertexArrayBindVertexBufferEXT(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride) => glVertexArrayBindVertexBufferEXTPtr?.Invoke(vaobj, bindingindex, buffer, offset, stride);
        private delegate void glVertexArrayBindVertexBufferEXTDel(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr /*BufferOffset*/  offset, uint  stride);
        private static glVertexArrayBindVertexBufferEXTDel glVertexArrayBindVertexBufferEXTPtr;
        
        // glVertexArrayBindingDivisor
        public static void glVertexArrayBindingDivisor(uint  vaobj, uint  bindingindex, uint  divisor) => glVertexArrayBindingDivisorPtr?.Invoke(vaobj, bindingindex, divisor);
        private delegate void glVertexArrayBindingDivisorDel(uint  vaobj, uint  bindingindex, uint  divisor);
        private static glVertexArrayBindingDivisorDel glVertexArrayBindingDivisorPtr;
        
        // glVertexArrayColorOffsetEXT
        public static void glVertexArrayColorOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayColorOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        private delegate void glVertexArrayColorOffsetEXTDel(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayColorOffsetEXTDel glVertexArrayColorOffsetEXTPtr;
        
        // glVertexArrayEdgeFlagOffsetEXT
        public static void glVertexArrayEdgeFlagOffsetEXT(uint  vaobj, uint  buffer, uint  stride, IntPtr  offset) => glVertexArrayEdgeFlagOffsetEXTPtr?.Invoke(vaobj, buffer, stride, offset);
        private delegate void glVertexArrayEdgeFlagOffsetEXTDel(uint  vaobj, uint  buffer, uint  stride, IntPtr  offset);
        private static glVertexArrayEdgeFlagOffsetEXTDel glVertexArrayEdgeFlagOffsetEXTPtr;
        
        // glVertexArrayElementBuffer
        public static void glVertexArrayElementBuffer(uint  vaobj, uint  buffer) => glVertexArrayElementBufferPtr?.Invoke(vaobj, buffer);
        private delegate void glVertexArrayElementBufferDel(uint  vaobj, uint  buffer);
        private static glVertexArrayElementBufferDel glVertexArrayElementBufferPtr;
        
        // glVertexArrayFogCoordOffsetEXT
        public static void glVertexArrayFogCoordOffsetEXT(uint  vaobj, uint  buffer, uint /*FogCoordinatePointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayFogCoordOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        private delegate void glVertexArrayFogCoordOffsetEXTDel(uint  vaobj, uint  buffer, uint /*FogCoordinatePointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayFogCoordOffsetEXTDel glVertexArrayFogCoordOffsetEXTPtr;
        
        // glVertexArrayIndexOffsetEXT
        public static void glVertexArrayIndexOffsetEXT(uint  vaobj, uint  buffer, uint /*IndexPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayIndexOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        private delegate void glVertexArrayIndexOffsetEXTDel(uint  vaobj, uint  buffer, uint /*IndexPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayIndexOffsetEXTDel glVertexArrayIndexOffsetEXTPtr;
        
        // glVertexArrayMultiTexCoordOffsetEXT
        public static void glVertexArrayMultiTexCoordOffsetEXT(uint  vaobj, uint  buffer, uint  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayMultiTexCoordOffsetEXTPtr?.Invoke(vaobj, buffer, texunit, size, type, stride, offset);
        private delegate void glVertexArrayMultiTexCoordOffsetEXTDel(uint  vaobj, uint  buffer, uint  texunit, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayMultiTexCoordOffsetEXTDel glVertexArrayMultiTexCoordOffsetEXTPtr;
        
        // glVertexArrayNormalOffsetEXT
        public static void glVertexArrayNormalOffsetEXT(uint  vaobj, uint  buffer, uint /*NormalPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayNormalOffsetEXTPtr?.Invoke(vaobj, buffer, type, stride, offset);
        private delegate void glVertexArrayNormalOffsetEXTDel(uint  vaobj, uint  buffer, uint /*NormalPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayNormalOffsetEXTDel glVertexArrayNormalOffsetEXTPtr;
        
        // glVertexArrayParameteriAPPLE
        public static void glVertexArrayParameteriAPPLE(uint /*VertexArrayPNameAPPLE*/  pname, int  param) => glVertexArrayParameteriAPPLEPtr?.Invoke(pname, param);
        private delegate void glVertexArrayParameteriAPPLEDel(uint /*VertexArrayPNameAPPLE*/  pname, int  param);
        private static glVertexArrayParameteriAPPLEDel glVertexArrayParameteriAPPLEPtr;
        
        // glVertexArrayRangeAPPLE
        public static void glVertexArrayRangeAPPLE(uint  length, IntPtr  pointer) => glVertexArrayRangeAPPLEPtr?.Invoke(length, pointer);
        private delegate void glVertexArrayRangeAPPLEDel(uint  length, IntPtr  pointer);
        private static glVertexArrayRangeAPPLEDel glVertexArrayRangeAPPLEPtr;
        
        // glVertexArrayRangeNV
        public static void glVertexArrayRangeNV(uint  length, IntPtr  pointer) => glVertexArrayRangeNVPtr?.Invoke(length, pointer);
        private delegate void glVertexArrayRangeNVDel(uint  length, IntPtr  pointer);
        private static glVertexArrayRangeNVDel glVertexArrayRangeNVPtr;
        
        // glVertexArraySecondaryColorOffsetEXT
        public static void glVertexArraySecondaryColorOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArraySecondaryColorOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        private delegate void glVertexArraySecondaryColorOffsetEXTDel(uint  vaobj, uint  buffer, int  size, uint /*ColorPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArraySecondaryColorOffsetEXTDel glVertexArraySecondaryColorOffsetEXTPtr;
        
        // glVertexArrayTexCoordOffsetEXT
        public static void glVertexArrayTexCoordOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayTexCoordOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        private delegate void glVertexArrayTexCoordOffsetEXTDel(uint  vaobj, uint  buffer, int  size, uint /*TexCoordPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayTexCoordOffsetEXTDel glVertexArrayTexCoordOffsetEXTPtr;
        
        // glVertexArrayVertexAttribBindingEXT
        public static void glVertexArrayVertexAttribBindingEXT(uint  vaobj, uint  attribindex, uint  bindingindex) => glVertexArrayVertexAttribBindingEXTPtr?.Invoke(vaobj, attribindex, bindingindex);
        private delegate void glVertexArrayVertexAttribBindingEXTDel(uint  vaobj, uint  attribindex, uint  bindingindex);
        private static glVertexArrayVertexAttribBindingEXTDel glVertexArrayVertexAttribBindingEXTPtr;
        
        // glVertexArrayVertexAttribDivisorEXT
        public static void glVertexArrayVertexAttribDivisorEXT(uint  vaobj, uint  index, uint  divisor) => glVertexArrayVertexAttribDivisorEXTPtr?.Invoke(vaobj, index, divisor);
        private delegate void glVertexArrayVertexAttribDivisorEXTDel(uint  vaobj, uint  index, uint  divisor);
        private static glVertexArrayVertexAttribDivisorEXTDel glVertexArrayVertexAttribDivisorEXTPtr;
        
        // glVertexArrayVertexAttribFormatEXT
        public static void glVertexArrayVertexAttribFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => glVertexArrayVertexAttribFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);
        private delegate void glVertexArrayVertexAttribFormatEXTDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset);
        private static glVertexArrayVertexAttribFormatEXTDel glVertexArrayVertexAttribFormatEXTPtr;
        
        // glVertexArrayVertexAttribIFormatEXT
        public static void glVertexArrayVertexAttribIFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => glVertexArrayVertexAttribIFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        private delegate void glVertexArrayVertexAttribIFormatEXTDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset);
        private static glVertexArrayVertexAttribIFormatEXTDel glVertexArrayVertexAttribIFormatEXTPtr;
        
        // glVertexArrayVertexAttribIOffsetEXT
        public static void glVertexArrayVertexAttribIOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribType*/  type, uint  stride, IntPtr  offset) => glVertexArrayVertexAttribIOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, stride, offset);
        private delegate void glVertexArrayVertexAttribIOffsetEXTDel(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayVertexAttribIOffsetEXTDel glVertexArrayVertexAttribIOffsetEXTPtr;
        
        // glVertexArrayVertexAttribLFormatEXT
        public static void glVertexArrayVertexAttribLFormatEXT(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => glVertexArrayVertexAttribLFormatEXTPtr?.Invoke(vaobj, attribindex, size, type, relativeoffset);
        private delegate void glVertexArrayVertexAttribLFormatEXTDel(uint  vaobj, uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset);
        private static glVertexArrayVertexAttribLFormatEXTDel glVertexArrayVertexAttribLFormatEXTPtr;
        
        // glVertexArrayVertexAttribLOffsetEXT
        public static void glVertexArrayVertexAttribLOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr /*BufferOffset*/  offset) => glVertexArrayVertexAttribLOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, stride, offset);
        private delegate void glVertexArrayVertexAttribLOffsetEXTDel(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr /*BufferOffset*/  offset);
        private static glVertexArrayVertexAttribLOffsetEXTDel glVertexArrayVertexAttribLOffsetEXTPtr;
        
        // glVertexArrayVertexAttribOffsetEXT
        public static void glVertexArrayVertexAttribOffsetEXT(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  offset) => glVertexArrayVertexAttribOffsetEXTPtr?.Invoke(vaobj, buffer, index, size, type, normalized, stride, offset);
        private delegate void glVertexArrayVertexAttribOffsetEXTDel(uint  vaobj, uint  buffer, uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  offset);
        private static glVertexArrayVertexAttribOffsetEXTDel glVertexArrayVertexAttribOffsetEXTPtr;
        
        // glVertexArrayVertexBindingDivisorEXT
        public static void glVertexArrayVertexBindingDivisorEXT(uint  vaobj, uint  bindingindex, uint  divisor) => glVertexArrayVertexBindingDivisorEXTPtr?.Invoke(vaobj, bindingindex, divisor);
        private delegate void glVertexArrayVertexBindingDivisorEXTDel(uint  vaobj, uint  bindingindex, uint  divisor);
        private static glVertexArrayVertexBindingDivisorEXTDel glVertexArrayVertexBindingDivisorEXTPtr;
        
        // glVertexArrayVertexBuffer
        public static void glVertexArrayVertexBuffer(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr  offset, uint  stride) => glVertexArrayVertexBufferPtr?.Invoke(vaobj, bindingindex, buffer, offset, stride);
        private delegate void glVertexArrayVertexBufferDel(uint  vaobj, uint  bindingindex, uint  buffer, IntPtr  offset, uint  stride);
        private static glVertexArrayVertexBufferDel glVertexArrayVertexBufferPtr;
        
        // glVertexArrayVertexBuffers
        public static void glVertexArrayVertexBuffers(uint  vaobj, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides) => glVertexArrayVertexBuffersPtr?.Invoke(vaobj, first, count, buffers, offsets, strides);
        private delegate void glVertexArrayVertexBuffersDel(uint  vaobj, uint  first, uint  count, uint[]  buffers, IntPtr[]  offsets, uint[]  strides);
        private static glVertexArrayVertexBuffersDel glVertexArrayVertexBuffersPtr;
        
        // glVertexArrayVertexOffsetEXT
        public static void glVertexArrayVertexOffsetEXT(uint  vaobj, uint  buffer, int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  offset) => glVertexArrayVertexOffsetEXTPtr?.Invoke(vaobj, buffer, size, type, stride, offset);
        private delegate void glVertexArrayVertexOffsetEXTDel(uint  vaobj, uint  buffer, int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  offset);
        private static glVertexArrayVertexOffsetEXTDel glVertexArrayVertexOffsetEXTPtr;
        
        // glVertexAttrib1d
        public static void glVertexAttrib1d(uint  index, double  x) => glVertexAttrib1dPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1dDel(uint  index, double  x);
        private static glVertexAttrib1dDel glVertexAttrib1dPtr;
        
        // glVertexAttrib1dARB
        public static void glVertexAttrib1dARB(uint  index, double  x) => glVertexAttrib1dARBPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1dARBDel(uint  index, double  x);
        private static glVertexAttrib1dARBDel glVertexAttrib1dARBPtr;
        
        // glVertexAttrib1dNV
        public static void glVertexAttrib1dNV(uint  index, double  x) => glVertexAttrib1dNVPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1dNVDel(uint  index, double  x);
        private static glVertexAttrib1dNVDel glVertexAttrib1dNVPtr;
        
        // glVertexAttrib1dv
        public static void glVertexAttrib1dv(uint  index, double[]  v) => glVertexAttrib1dvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1dvDel(uint  index, double[]  v);
        private static glVertexAttrib1dvDel glVertexAttrib1dvPtr;
        
        // glVertexAttrib1dvARB
        public static void glVertexAttrib1dvARB(uint  index, double[]  v) => glVertexAttrib1dvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1dvARBDel(uint  index, double[]  v);
        private static glVertexAttrib1dvARBDel glVertexAttrib1dvARBPtr;
        
        // glVertexAttrib1dvNV
        public static void glVertexAttrib1dvNV(uint  index, double[]  v) => glVertexAttrib1dvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1dvNVDel(uint  index, double[]  v);
        private static glVertexAttrib1dvNVDel glVertexAttrib1dvNVPtr;
        
        // glVertexAttrib1f
        public static void glVertexAttrib1f(uint  index, float  x) => glVertexAttrib1fPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1fDel(uint  index, float  x);
        private static glVertexAttrib1fDel glVertexAttrib1fPtr;
        
        // glVertexAttrib1fARB
        public static void glVertexAttrib1fARB(uint  index, float  x) => glVertexAttrib1fARBPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1fARBDel(uint  index, float  x);
        private static glVertexAttrib1fARBDel glVertexAttrib1fARBPtr;
        
        // glVertexAttrib1fNV
        public static void glVertexAttrib1fNV(uint  index, float  x) => glVertexAttrib1fNVPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1fNVDel(uint  index, float  x);
        private static glVertexAttrib1fNVDel glVertexAttrib1fNVPtr;
        
        // glVertexAttrib1fv
        public static void glVertexAttrib1fv(uint  index, float[]  v) => glVertexAttrib1fvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1fvDel(uint  index, float[]  v);
        private static glVertexAttrib1fvDel glVertexAttrib1fvPtr;
        
        // glVertexAttrib1fvARB
        public static void glVertexAttrib1fvARB(uint  index, float[]  v) => glVertexAttrib1fvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1fvARBDel(uint  index, float[]  v);
        private static glVertexAttrib1fvARBDel glVertexAttrib1fvARBPtr;
        
        // glVertexAttrib1fvNV
        public static void glVertexAttrib1fvNV(uint  index, float[]  v) => glVertexAttrib1fvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1fvNVDel(uint  index, float[]  v);
        private static glVertexAttrib1fvNVDel glVertexAttrib1fvNVPtr;
        
        // glVertexAttrib1hNV
        public static void glVertexAttrib1hNV(uint  index, ushort /*Half16NV*/  x) => glVertexAttrib1hNVPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1hNVDel(uint  index, ushort /*Half16NV*/  x);
        private static glVertexAttrib1hNVDel glVertexAttrib1hNVPtr;
        
        // glVertexAttrib1hvNV
        public static void glVertexAttrib1hvNV(uint  index, ushort[] /*Half16NV*/  v) => glVertexAttrib1hvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1hvNVDel(uint  index, ushort[] /*Half16NV*/  v);
        private static glVertexAttrib1hvNVDel glVertexAttrib1hvNVPtr;
        
        // glVertexAttrib1s
        public static void glVertexAttrib1s(uint  index, short  x) => glVertexAttrib1sPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1sDel(uint  index, short  x);
        private static glVertexAttrib1sDel glVertexAttrib1sPtr;
        
        // glVertexAttrib1sARB
        public static void glVertexAttrib1sARB(uint  index, short  x) => glVertexAttrib1sARBPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1sARBDel(uint  index, short  x);
        private static glVertexAttrib1sARBDel glVertexAttrib1sARBPtr;
        
        // glVertexAttrib1sNV
        public static void glVertexAttrib1sNV(uint  index, short  x) => glVertexAttrib1sNVPtr?.Invoke(index, x);
        private delegate void glVertexAttrib1sNVDel(uint  index, short  x);
        private static glVertexAttrib1sNVDel glVertexAttrib1sNVPtr;
        
        // glVertexAttrib1sv
        public static void glVertexAttrib1sv(uint  index, short[]  v) => glVertexAttrib1svPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1svDel(uint  index, short[]  v);
        private static glVertexAttrib1svDel glVertexAttrib1svPtr;
        
        // glVertexAttrib1svARB
        public static void glVertexAttrib1svARB(uint  index, short[]  v) => glVertexAttrib1svARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1svARBDel(uint  index, short[]  v);
        private static glVertexAttrib1svARBDel glVertexAttrib1svARBPtr;
        
        // glVertexAttrib1svNV
        public static void glVertexAttrib1svNV(uint  index, short[]  v) => glVertexAttrib1svNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib1svNVDel(uint  index, short[]  v);
        private static glVertexAttrib1svNVDel glVertexAttrib1svNVPtr;
        
        // glVertexAttrib2d
        public static void glVertexAttrib2d(uint  index, double  x, double  y) => glVertexAttrib2dPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2dDel(uint  index, double  x, double  y);
        private static glVertexAttrib2dDel glVertexAttrib2dPtr;
        
        // glVertexAttrib2dARB
        public static void glVertexAttrib2dARB(uint  index, double  x, double  y) => glVertexAttrib2dARBPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2dARBDel(uint  index, double  x, double  y);
        private static glVertexAttrib2dARBDel glVertexAttrib2dARBPtr;
        
        // glVertexAttrib2dNV
        public static void glVertexAttrib2dNV(uint  index, double  x, double  y) => glVertexAttrib2dNVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2dNVDel(uint  index, double  x, double  y);
        private static glVertexAttrib2dNVDel glVertexAttrib2dNVPtr;
        
        // glVertexAttrib2dv
        public static void glVertexAttrib2dv(uint  index, double[]  v) => glVertexAttrib2dvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2dvDel(uint  index, double[]  v);
        private static glVertexAttrib2dvDel glVertexAttrib2dvPtr;
        
        // glVertexAttrib2dvARB
        public static void glVertexAttrib2dvARB(uint  index, double[]  v) => glVertexAttrib2dvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2dvARBDel(uint  index, double[]  v);
        private static glVertexAttrib2dvARBDel glVertexAttrib2dvARBPtr;
        
        // glVertexAttrib2dvNV
        public static void glVertexAttrib2dvNV(uint  index, double[]  v) => glVertexAttrib2dvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2dvNVDel(uint  index, double[]  v);
        private static glVertexAttrib2dvNVDel glVertexAttrib2dvNVPtr;
        
        // glVertexAttrib2f
        public static void glVertexAttrib2f(uint  index, float  x, float  y) => glVertexAttrib2fPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2fDel(uint  index, float  x, float  y);
        private static glVertexAttrib2fDel glVertexAttrib2fPtr;
        
        // glVertexAttrib2fARB
        public static void glVertexAttrib2fARB(uint  index, float  x, float  y) => glVertexAttrib2fARBPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2fARBDel(uint  index, float  x, float  y);
        private static glVertexAttrib2fARBDel glVertexAttrib2fARBPtr;
        
        // glVertexAttrib2fNV
        public static void glVertexAttrib2fNV(uint  index, float  x, float  y) => glVertexAttrib2fNVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2fNVDel(uint  index, float  x, float  y);
        private static glVertexAttrib2fNVDel glVertexAttrib2fNVPtr;
        
        // glVertexAttrib2fv
        public static void glVertexAttrib2fv(uint  index, float[]  v) => glVertexAttrib2fvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2fvDel(uint  index, float[]  v);
        private static glVertexAttrib2fvDel glVertexAttrib2fvPtr;
        
        // glVertexAttrib2fvARB
        public static void glVertexAttrib2fvARB(uint  index, float[]  v) => glVertexAttrib2fvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2fvARBDel(uint  index, float[]  v);
        private static glVertexAttrib2fvARBDel glVertexAttrib2fvARBPtr;
        
        // glVertexAttrib2fvNV
        public static void glVertexAttrib2fvNV(uint  index, float[]  v) => glVertexAttrib2fvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2fvNVDel(uint  index, float[]  v);
        private static glVertexAttrib2fvNVDel glVertexAttrib2fvNVPtr;
        
        // glVertexAttrib2hNV
        public static void glVertexAttrib2hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y) => glVertexAttrib2hNVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2hNVDel(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y);
        private static glVertexAttrib2hNVDel glVertexAttrib2hNVPtr;
        
        // glVertexAttrib2hvNV
        public static void glVertexAttrib2hvNV(uint  index, ushort[] /*Half16NV*/  v) => glVertexAttrib2hvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2hvNVDel(uint  index, ushort[] /*Half16NV*/  v);
        private static glVertexAttrib2hvNVDel glVertexAttrib2hvNVPtr;
        
        // glVertexAttrib2s
        public static void glVertexAttrib2s(uint  index, short  x, short  y) => glVertexAttrib2sPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2sDel(uint  index, short  x, short  y);
        private static glVertexAttrib2sDel glVertexAttrib2sPtr;
        
        // glVertexAttrib2sARB
        public static void glVertexAttrib2sARB(uint  index, short  x, short  y) => glVertexAttrib2sARBPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2sARBDel(uint  index, short  x, short  y);
        private static glVertexAttrib2sARBDel glVertexAttrib2sARBPtr;
        
        // glVertexAttrib2sNV
        public static void glVertexAttrib2sNV(uint  index, short  x, short  y) => glVertexAttrib2sNVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttrib2sNVDel(uint  index, short  x, short  y);
        private static glVertexAttrib2sNVDel glVertexAttrib2sNVPtr;
        
        // glVertexAttrib2sv
        public static void glVertexAttrib2sv(uint  index, short[]  v) => glVertexAttrib2svPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2svDel(uint  index, short[]  v);
        private static glVertexAttrib2svDel glVertexAttrib2svPtr;
        
        // glVertexAttrib2svARB
        public static void glVertexAttrib2svARB(uint  index, short[]  v) => glVertexAttrib2svARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2svARBDel(uint  index, short[]  v);
        private static glVertexAttrib2svARBDel glVertexAttrib2svARBPtr;
        
        // glVertexAttrib2svNV
        public static void glVertexAttrib2svNV(uint  index, short[]  v) => glVertexAttrib2svNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib2svNVDel(uint  index, short[]  v);
        private static glVertexAttrib2svNVDel glVertexAttrib2svNVPtr;
        
        // glVertexAttrib3d
        public static void glVertexAttrib3d(uint  index, double  x, double  y, double  z) => glVertexAttrib3dPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3dDel(uint  index, double  x, double  y, double  z);
        private static glVertexAttrib3dDel glVertexAttrib3dPtr;
        
        // glVertexAttrib3dARB
        public static void glVertexAttrib3dARB(uint  index, double  x, double  y, double  z) => glVertexAttrib3dARBPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3dARBDel(uint  index, double  x, double  y, double  z);
        private static glVertexAttrib3dARBDel glVertexAttrib3dARBPtr;
        
        // glVertexAttrib3dNV
        public static void glVertexAttrib3dNV(uint  index, double  x, double  y, double  z) => glVertexAttrib3dNVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3dNVDel(uint  index, double  x, double  y, double  z);
        private static glVertexAttrib3dNVDel glVertexAttrib3dNVPtr;
        
        // glVertexAttrib3dv
        public static void glVertexAttrib3dv(uint  index, double[]  v) => glVertexAttrib3dvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3dvDel(uint  index, double[]  v);
        private static glVertexAttrib3dvDel glVertexAttrib3dvPtr;
        
        // glVertexAttrib3dvARB
        public static void glVertexAttrib3dvARB(uint  index, double[]  v) => glVertexAttrib3dvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3dvARBDel(uint  index, double[]  v);
        private static glVertexAttrib3dvARBDel glVertexAttrib3dvARBPtr;
        
        // glVertexAttrib3dvNV
        public static void glVertexAttrib3dvNV(uint  index, double[]  v) => glVertexAttrib3dvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3dvNVDel(uint  index, double[]  v);
        private static glVertexAttrib3dvNVDel glVertexAttrib3dvNVPtr;
        
        // glVertexAttrib3f
        public static void glVertexAttrib3f(uint  index, float  x, float  y, float  z) => glVertexAttrib3fPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3fDel(uint  index, float  x, float  y, float  z);
        private static glVertexAttrib3fDel glVertexAttrib3fPtr;
        
        // glVertexAttrib3fARB
        public static void glVertexAttrib3fARB(uint  index, float  x, float  y, float  z) => glVertexAttrib3fARBPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3fARBDel(uint  index, float  x, float  y, float  z);
        private static glVertexAttrib3fARBDel glVertexAttrib3fARBPtr;
        
        // glVertexAttrib3fNV
        public static void glVertexAttrib3fNV(uint  index, float  x, float  y, float  z) => glVertexAttrib3fNVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3fNVDel(uint  index, float  x, float  y, float  z);
        private static glVertexAttrib3fNVDel glVertexAttrib3fNVPtr;
        
        // glVertexAttrib3fv
        public static void glVertexAttrib3fv(uint  index, float[]  v) => glVertexAttrib3fvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3fvDel(uint  index, float[]  v);
        private static glVertexAttrib3fvDel glVertexAttrib3fvPtr;
        
        // glVertexAttrib3fvARB
        public static void glVertexAttrib3fvARB(uint  index, float[]  v) => glVertexAttrib3fvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3fvARBDel(uint  index, float[]  v);
        private static glVertexAttrib3fvARBDel glVertexAttrib3fvARBPtr;
        
        // glVertexAttrib3fvNV
        public static void glVertexAttrib3fvNV(uint  index, float[]  v) => glVertexAttrib3fvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3fvNVDel(uint  index, float[]  v);
        private static glVertexAttrib3fvNVDel glVertexAttrib3fvNVPtr;
        
        // glVertexAttrib3hNV
        public static void glVertexAttrib3hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z) => glVertexAttrib3hNVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3hNVDel(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z);
        private static glVertexAttrib3hNVDel glVertexAttrib3hNVPtr;
        
        // glVertexAttrib3hvNV
        public static void glVertexAttrib3hvNV(uint  index, ushort[] /*Half16NV*/  v) => glVertexAttrib3hvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3hvNVDel(uint  index, ushort[] /*Half16NV*/  v);
        private static glVertexAttrib3hvNVDel glVertexAttrib3hvNVPtr;
        
        // glVertexAttrib3s
        public static void glVertexAttrib3s(uint  index, short  x, short  y, short  z) => glVertexAttrib3sPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3sDel(uint  index, short  x, short  y, short  z);
        private static glVertexAttrib3sDel glVertexAttrib3sPtr;
        
        // glVertexAttrib3sARB
        public static void glVertexAttrib3sARB(uint  index, short  x, short  y, short  z) => glVertexAttrib3sARBPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3sARBDel(uint  index, short  x, short  y, short  z);
        private static glVertexAttrib3sARBDel glVertexAttrib3sARBPtr;
        
        // glVertexAttrib3sNV
        public static void glVertexAttrib3sNV(uint  index, short  x, short  y, short  z) => glVertexAttrib3sNVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttrib3sNVDel(uint  index, short  x, short  y, short  z);
        private static glVertexAttrib3sNVDel glVertexAttrib3sNVPtr;
        
        // glVertexAttrib3sv
        public static void glVertexAttrib3sv(uint  index, short[]  v) => glVertexAttrib3svPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3svDel(uint  index, short[]  v);
        private static glVertexAttrib3svDel glVertexAttrib3svPtr;
        
        // glVertexAttrib3svARB
        public static void glVertexAttrib3svARB(uint  index, short[]  v) => glVertexAttrib3svARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3svARBDel(uint  index, short[]  v);
        private static glVertexAttrib3svARBDel glVertexAttrib3svARBPtr;
        
        // glVertexAttrib3svNV
        public static void glVertexAttrib3svNV(uint  index, short[]  v) => glVertexAttrib3svNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib3svNVDel(uint  index, short[]  v);
        private static glVertexAttrib3svNVDel glVertexAttrib3svNVPtr;
        
        // glVertexAttrib4Nbv
        public static void glVertexAttrib4Nbv(uint  index, sbyte[]  v) => glVertexAttrib4NbvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NbvDel(uint  index, sbyte[]  v);
        private static glVertexAttrib4NbvDel glVertexAttrib4NbvPtr;
        
        // glVertexAttrib4NbvARB
        public static void glVertexAttrib4NbvARB(uint  index, sbyte[]  v) => glVertexAttrib4NbvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NbvARBDel(uint  index, sbyte[]  v);
        private static glVertexAttrib4NbvARBDel glVertexAttrib4NbvARBPtr;
        
        // glVertexAttrib4Niv
        public static void glVertexAttrib4Niv(uint  index, int[]  v) => glVertexAttrib4NivPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NivDel(uint  index, int[]  v);
        private static glVertexAttrib4NivDel glVertexAttrib4NivPtr;
        
        // glVertexAttrib4NivARB
        public static void glVertexAttrib4NivARB(uint  index, int[]  v) => glVertexAttrib4NivARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NivARBDel(uint  index, int[]  v);
        private static glVertexAttrib4NivARBDel glVertexAttrib4NivARBPtr;
        
        // glVertexAttrib4Nsv
        public static void glVertexAttrib4Nsv(uint  index, short[]  v) => glVertexAttrib4NsvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NsvDel(uint  index, short[]  v);
        private static glVertexAttrib4NsvDel glVertexAttrib4NsvPtr;
        
        // glVertexAttrib4NsvARB
        public static void glVertexAttrib4NsvARB(uint  index, short[]  v) => glVertexAttrib4NsvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NsvARBDel(uint  index, short[]  v);
        private static glVertexAttrib4NsvARBDel glVertexAttrib4NsvARBPtr;
        
        // glVertexAttrib4Nub
        public static void glVertexAttrib4Nub(uint  index, byte  x, byte  y, byte  z, byte  w) => glVertexAttrib4NubPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4NubDel(uint  index, byte  x, byte  y, byte  z, byte  w);
        private static glVertexAttrib4NubDel glVertexAttrib4NubPtr;
        
        // glVertexAttrib4NubARB
        public static void glVertexAttrib4NubARB(uint  index, byte  x, byte  y, byte  z, byte  w) => glVertexAttrib4NubARBPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4NubARBDel(uint  index, byte  x, byte  y, byte  z, byte  w);
        private static glVertexAttrib4NubARBDel glVertexAttrib4NubARBPtr;
        
        // glVertexAttrib4Nubv
        public static void glVertexAttrib4Nubv(uint  index, byte[]  v) => glVertexAttrib4NubvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NubvDel(uint  index, byte[]  v);
        private static glVertexAttrib4NubvDel glVertexAttrib4NubvPtr;
        
        // glVertexAttrib4NubvARB
        public static void glVertexAttrib4NubvARB(uint  index, byte[]  v) => glVertexAttrib4NubvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NubvARBDel(uint  index, byte[]  v);
        private static glVertexAttrib4NubvARBDel glVertexAttrib4NubvARBPtr;
        
        // glVertexAttrib4Nuiv
        public static void glVertexAttrib4Nuiv(uint  index, uint[]  v) => glVertexAttrib4NuivPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NuivDel(uint  index, uint[]  v);
        private static glVertexAttrib4NuivDel glVertexAttrib4NuivPtr;
        
        // glVertexAttrib4NuivARB
        public static void glVertexAttrib4NuivARB(uint  index, uint[]  v) => glVertexAttrib4NuivARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NuivARBDel(uint  index, uint[]  v);
        private static glVertexAttrib4NuivARBDel glVertexAttrib4NuivARBPtr;
        
        // glVertexAttrib4Nusv
        public static void glVertexAttrib4Nusv(uint  index, ushort[]  v) => glVertexAttrib4NusvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NusvDel(uint  index, ushort[]  v);
        private static glVertexAttrib4NusvDel glVertexAttrib4NusvPtr;
        
        // glVertexAttrib4NusvARB
        public static void glVertexAttrib4NusvARB(uint  index, ushort[]  v) => glVertexAttrib4NusvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4NusvARBDel(uint  index, ushort[]  v);
        private static glVertexAttrib4NusvARBDel glVertexAttrib4NusvARBPtr;
        
        // glVertexAttrib4bv
        public static void glVertexAttrib4bv(uint  index, sbyte[]  v) => glVertexAttrib4bvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4bvDel(uint  index, sbyte[]  v);
        private static glVertexAttrib4bvDel glVertexAttrib4bvPtr;
        
        // glVertexAttrib4bvARB
        public static void glVertexAttrib4bvARB(uint  index, sbyte[]  v) => glVertexAttrib4bvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4bvARBDel(uint  index, sbyte[]  v);
        private static glVertexAttrib4bvARBDel glVertexAttrib4bvARBPtr;
        
        // glVertexAttrib4d
        public static void glVertexAttrib4d(uint  index, double  x, double  y, double  z, double  w) => glVertexAttrib4dPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4dDel(uint  index, double  x, double  y, double  z, double  w);
        private static glVertexAttrib4dDel glVertexAttrib4dPtr;
        
        // glVertexAttrib4dARB
        public static void glVertexAttrib4dARB(uint  index, double  x, double  y, double  z, double  w) => glVertexAttrib4dARBPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4dARBDel(uint  index, double  x, double  y, double  z, double  w);
        private static glVertexAttrib4dARBDel glVertexAttrib4dARBPtr;
        
        // glVertexAttrib4dNV
        public static void glVertexAttrib4dNV(uint  index, double  x, double  y, double  z, double  w) => glVertexAttrib4dNVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4dNVDel(uint  index, double  x, double  y, double  z, double  w);
        private static glVertexAttrib4dNVDel glVertexAttrib4dNVPtr;
        
        // glVertexAttrib4dv
        public static void glVertexAttrib4dv(uint  index, double[]  v) => glVertexAttrib4dvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4dvDel(uint  index, double[]  v);
        private static glVertexAttrib4dvDel glVertexAttrib4dvPtr;
        
        // glVertexAttrib4dvARB
        public static void glVertexAttrib4dvARB(uint  index, double[]  v) => glVertexAttrib4dvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4dvARBDel(uint  index, double[]  v);
        private static glVertexAttrib4dvARBDel glVertexAttrib4dvARBPtr;
        
        // glVertexAttrib4dvNV
        public static void glVertexAttrib4dvNV(uint  index, double[]  v) => glVertexAttrib4dvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4dvNVDel(uint  index, double[]  v);
        private static glVertexAttrib4dvNVDel glVertexAttrib4dvNVPtr;
        
        // glVertexAttrib4f
        public static void glVertexAttrib4f(uint  index, float  x, float  y, float  z, float  w) => glVertexAttrib4fPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4fDel(uint  index, float  x, float  y, float  z, float  w);
        private static glVertexAttrib4fDel glVertexAttrib4fPtr;
        
        // glVertexAttrib4fARB
        public static void glVertexAttrib4fARB(uint  index, float  x, float  y, float  z, float  w) => glVertexAttrib4fARBPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4fARBDel(uint  index, float  x, float  y, float  z, float  w);
        private static glVertexAttrib4fARBDel glVertexAttrib4fARBPtr;
        
        // glVertexAttrib4fNV
        public static void glVertexAttrib4fNV(uint  index, float  x, float  y, float  z, float  w) => glVertexAttrib4fNVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4fNVDel(uint  index, float  x, float  y, float  z, float  w);
        private static glVertexAttrib4fNVDel glVertexAttrib4fNVPtr;
        
        // glVertexAttrib4fv
        public static void glVertexAttrib4fv(uint  index, float[]  v) => glVertexAttrib4fvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4fvDel(uint  index, float[]  v);
        private static glVertexAttrib4fvDel glVertexAttrib4fvPtr;
        
        // glVertexAttrib4fvARB
        public static void glVertexAttrib4fvARB(uint  index, float[]  v) => glVertexAttrib4fvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4fvARBDel(uint  index, float[]  v);
        private static glVertexAttrib4fvARBDel glVertexAttrib4fvARBPtr;
        
        // glVertexAttrib4fvNV
        public static void glVertexAttrib4fvNV(uint  index, float[]  v) => glVertexAttrib4fvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4fvNVDel(uint  index, float[]  v);
        private static glVertexAttrib4fvNVDel glVertexAttrib4fvNVPtr;
        
        // glVertexAttrib4hNV
        public static void glVertexAttrib4hNV(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w) => glVertexAttrib4hNVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4hNVDel(uint  index, ushort /*Half16NV*/  x, ushort /*Half16NV*/  y, ushort /*Half16NV*/  z, ushort /*Half16NV*/  w);
        private static glVertexAttrib4hNVDel glVertexAttrib4hNVPtr;
        
        // glVertexAttrib4hvNV
        public static void glVertexAttrib4hvNV(uint  index, ushort[] /*Half16NV*/  v) => glVertexAttrib4hvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4hvNVDel(uint  index, ushort[] /*Half16NV*/  v);
        private static glVertexAttrib4hvNVDel glVertexAttrib4hvNVPtr;
        
        // glVertexAttrib4iv
        public static void glVertexAttrib4iv(uint  index, int[]  v) => glVertexAttrib4ivPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4ivDel(uint  index, int[]  v);
        private static glVertexAttrib4ivDel glVertexAttrib4ivPtr;
        
        // glVertexAttrib4ivARB
        public static void glVertexAttrib4ivARB(uint  index, int[]  v) => glVertexAttrib4ivARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4ivARBDel(uint  index, int[]  v);
        private static glVertexAttrib4ivARBDel glVertexAttrib4ivARBPtr;
        
        // glVertexAttrib4s
        public static void glVertexAttrib4s(uint  index, short  x, short  y, short  z, short  w) => glVertexAttrib4sPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4sDel(uint  index, short  x, short  y, short  z, short  w);
        private static glVertexAttrib4sDel glVertexAttrib4sPtr;
        
        // glVertexAttrib4sARB
        public static void glVertexAttrib4sARB(uint  index, short  x, short  y, short  z, short  w) => glVertexAttrib4sARBPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4sARBDel(uint  index, short  x, short  y, short  z, short  w);
        private static glVertexAttrib4sARBDel glVertexAttrib4sARBPtr;
        
        // glVertexAttrib4sNV
        public static void glVertexAttrib4sNV(uint  index, short  x, short  y, short  z, short  w) => glVertexAttrib4sNVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4sNVDel(uint  index, short  x, short  y, short  z, short  w);
        private static glVertexAttrib4sNVDel glVertexAttrib4sNVPtr;
        
        // glVertexAttrib4sv
        public static void glVertexAttrib4sv(uint  index, short[]  v) => glVertexAttrib4svPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4svDel(uint  index, short[]  v);
        private static glVertexAttrib4svDel glVertexAttrib4svPtr;
        
        // glVertexAttrib4svARB
        public static void glVertexAttrib4svARB(uint  index, short[]  v) => glVertexAttrib4svARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4svARBDel(uint  index, short[]  v);
        private static glVertexAttrib4svARBDel glVertexAttrib4svARBPtr;
        
        // glVertexAttrib4svNV
        public static void glVertexAttrib4svNV(uint  index, short[]  v) => glVertexAttrib4svNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4svNVDel(uint  index, short[]  v);
        private static glVertexAttrib4svNVDel glVertexAttrib4svNVPtr;
        
        // glVertexAttrib4ubNV
        public static void glVertexAttrib4ubNV(uint  index, byte /*ColorUB*/  x, byte /*ColorUB*/  y, byte /*ColorUB*/  z, byte /*ColorUB*/  w) => glVertexAttrib4ubNVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttrib4ubNVDel(uint  index, byte /*ColorUB*/  x, byte /*ColorUB*/  y, byte /*ColorUB*/  z, byte /*ColorUB*/  w);
        private static glVertexAttrib4ubNVDel glVertexAttrib4ubNVPtr;
        
        // glVertexAttrib4ubv
        public static void glVertexAttrib4ubv(uint  index, byte[]  v) => glVertexAttrib4ubvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4ubvDel(uint  index, byte[]  v);
        private static glVertexAttrib4ubvDel glVertexAttrib4ubvPtr;
        
        // glVertexAttrib4ubvARB
        public static void glVertexAttrib4ubvARB(uint  index, byte[]  v) => glVertexAttrib4ubvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4ubvARBDel(uint  index, byte[]  v);
        private static glVertexAttrib4ubvARBDel glVertexAttrib4ubvARBPtr;
        
        // glVertexAttrib4ubvNV
        public static void glVertexAttrib4ubvNV(uint  index, byte[] /*ColorUB*/  v) => glVertexAttrib4ubvNVPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4ubvNVDel(uint  index, byte[] /*ColorUB*/  v);
        private static glVertexAttrib4ubvNVDel glVertexAttrib4ubvNVPtr;
        
        // glVertexAttrib4uiv
        public static void glVertexAttrib4uiv(uint  index, uint[]  v) => glVertexAttrib4uivPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4uivDel(uint  index, uint[]  v);
        private static glVertexAttrib4uivDel glVertexAttrib4uivPtr;
        
        // glVertexAttrib4uivARB
        public static void glVertexAttrib4uivARB(uint  index, uint[]  v) => glVertexAttrib4uivARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4uivARBDel(uint  index, uint[]  v);
        private static glVertexAttrib4uivARBDel glVertexAttrib4uivARBPtr;
        
        // glVertexAttrib4usv
        public static void glVertexAttrib4usv(uint  index, ushort[]  v) => glVertexAttrib4usvPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4usvDel(uint  index, ushort[]  v);
        private static glVertexAttrib4usvDel glVertexAttrib4usvPtr;
        
        // glVertexAttrib4usvARB
        public static void glVertexAttrib4usvARB(uint  index, ushort[]  v) => glVertexAttrib4usvARBPtr?.Invoke(index, v);
        private delegate void glVertexAttrib4usvARBDel(uint  index, ushort[]  v);
        private static glVertexAttrib4usvARBDel glVertexAttrib4usvARBPtr;
        
        // glVertexAttribArrayObjectATI
        public static void glVertexAttribArrayObjectATI(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, uint  buffer, uint  offset) => glVertexAttribArrayObjectATIPtr?.Invoke(index, size, type, normalized, stride, buffer, offset);
        private delegate void glVertexAttribArrayObjectATIDel(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, uint  buffer, uint  offset);
        private static glVertexAttribArrayObjectATIDel glVertexAttribArrayObjectATIPtr;
        
        // glVertexAttribBinding
        public static void glVertexAttribBinding(uint  attribindex, uint  bindingindex) => glVertexAttribBindingPtr?.Invoke(attribindex, bindingindex);
        private delegate void glVertexAttribBindingDel(uint  attribindex, uint  bindingindex);
        private static glVertexAttribBindingDel glVertexAttribBindingPtr;
        
        // glVertexAttribDivisor
        public static void glVertexAttribDivisor(uint  index, uint  divisor) => glVertexAttribDivisorPtr?.Invoke(index, divisor);
        private delegate void glVertexAttribDivisorDel(uint  index, uint  divisor);
        private static glVertexAttribDivisorDel glVertexAttribDivisorPtr;
        
        // glVertexAttribDivisorANGLE
        public static void glVertexAttribDivisorANGLE(uint  index, uint  divisor) => glVertexAttribDivisorANGLEPtr?.Invoke(index, divisor);
        private delegate void glVertexAttribDivisorANGLEDel(uint  index, uint  divisor);
        private static glVertexAttribDivisorANGLEDel glVertexAttribDivisorANGLEPtr;
        
        // glVertexAttribDivisorARB
        public static void glVertexAttribDivisorARB(uint  index, uint  divisor) => glVertexAttribDivisorARBPtr?.Invoke(index, divisor);
        private delegate void glVertexAttribDivisorARBDel(uint  index, uint  divisor);
        private static glVertexAttribDivisorARBDel glVertexAttribDivisorARBPtr;
        
        // glVertexAttribDivisorEXT
        public static void glVertexAttribDivisorEXT(uint  index, uint  divisor) => glVertexAttribDivisorEXTPtr?.Invoke(index, divisor);
        private delegate void glVertexAttribDivisorEXTDel(uint  index, uint  divisor);
        private static glVertexAttribDivisorEXTDel glVertexAttribDivisorEXTPtr;
        
        // glVertexAttribDivisorNV
        public static void glVertexAttribDivisorNV(uint  index, uint  divisor) => glVertexAttribDivisorNVPtr?.Invoke(index, divisor);
        private delegate void glVertexAttribDivisorNVDel(uint  index, uint  divisor);
        private static glVertexAttribDivisorNVDel glVertexAttribDivisorNVPtr;
        
        // glVertexAttribFormat
        public static void glVertexAttribFormat(uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset) => glVertexAttribFormatPtr?.Invoke(attribindex, size, type, normalized, relativeoffset);
        private delegate void glVertexAttribFormatDel(uint  attribindex, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  relativeoffset);
        private static glVertexAttribFormatDel glVertexAttribFormatPtr;
        
        // glVertexAttribFormatNV
        public static void glVertexAttribFormatNV(uint  index, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  stride) => glVertexAttribFormatNVPtr?.Invoke(index, size, type, normalized, stride);
        private delegate void glVertexAttribFormatNVDel(uint  index, int  size, uint /*VertexAttribType*/  type, bool /*Boolean*/  normalized, uint  stride);
        private static glVertexAttribFormatNVDel glVertexAttribFormatNVPtr;
        
        // glVertexAttribI1i
        public static void glVertexAttribI1i(uint  index, int  x) => glVertexAttribI1iPtr?.Invoke(index, x);
        private delegate void glVertexAttribI1iDel(uint  index, int  x);
        private static glVertexAttribI1iDel glVertexAttribI1iPtr;
        
        // glVertexAttribI1iEXT
        public static void glVertexAttribI1iEXT(uint  index, int  x) => glVertexAttribI1iEXTPtr?.Invoke(index, x);
        private delegate void glVertexAttribI1iEXTDel(uint  index, int  x);
        private static glVertexAttribI1iEXTDel glVertexAttribI1iEXTPtr;
        
        // glVertexAttribI1iv
        public static void glVertexAttribI1iv(uint  index, int[]  v) => glVertexAttribI1ivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI1ivDel(uint  index, int[]  v);
        private static glVertexAttribI1ivDel glVertexAttribI1ivPtr;
        
        // glVertexAttribI1ivEXT
        public static void glVertexAttribI1ivEXT(uint  index, int[]  v) => glVertexAttribI1ivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI1ivEXTDel(uint  index, int[]  v);
        private static glVertexAttribI1ivEXTDel glVertexAttribI1ivEXTPtr;
        
        // glVertexAttribI1ui
        public static void glVertexAttribI1ui(uint  index, uint  x) => glVertexAttribI1uiPtr?.Invoke(index, x);
        private delegate void glVertexAttribI1uiDel(uint  index, uint  x);
        private static glVertexAttribI1uiDel glVertexAttribI1uiPtr;
        
        // glVertexAttribI1uiEXT
        public static void glVertexAttribI1uiEXT(uint  index, uint  x) => glVertexAttribI1uiEXTPtr?.Invoke(index, x);
        private delegate void glVertexAttribI1uiEXTDel(uint  index, uint  x);
        private static glVertexAttribI1uiEXTDel glVertexAttribI1uiEXTPtr;
        
        // glVertexAttribI1uiv
        public static void glVertexAttribI1uiv(uint  index, uint[]  v) => glVertexAttribI1uivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI1uivDel(uint  index, uint[]  v);
        private static glVertexAttribI1uivDel glVertexAttribI1uivPtr;
        
        // glVertexAttribI1uivEXT
        public static void glVertexAttribI1uivEXT(uint  index, uint[]  v) => glVertexAttribI1uivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI1uivEXTDel(uint  index, uint[]  v);
        private static glVertexAttribI1uivEXTDel glVertexAttribI1uivEXTPtr;
        
        // glVertexAttribI2i
        public static void glVertexAttribI2i(uint  index, int  x, int  y) => glVertexAttribI2iPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribI2iDel(uint  index, int  x, int  y);
        private static glVertexAttribI2iDel glVertexAttribI2iPtr;
        
        // glVertexAttribI2iEXT
        public static void glVertexAttribI2iEXT(uint  index, int  x, int  y) => glVertexAttribI2iEXTPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribI2iEXTDel(uint  index, int  x, int  y);
        private static glVertexAttribI2iEXTDel glVertexAttribI2iEXTPtr;
        
        // glVertexAttribI2iv
        public static void glVertexAttribI2iv(uint  index, int[]  v) => glVertexAttribI2ivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI2ivDel(uint  index, int[]  v);
        private static glVertexAttribI2ivDel glVertexAttribI2ivPtr;
        
        // glVertexAttribI2ivEXT
        public static void glVertexAttribI2ivEXT(uint  index, int[]  v) => glVertexAttribI2ivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI2ivEXTDel(uint  index, int[]  v);
        private static glVertexAttribI2ivEXTDel glVertexAttribI2ivEXTPtr;
        
        // glVertexAttribI2ui
        public static void glVertexAttribI2ui(uint  index, uint  x, uint  y) => glVertexAttribI2uiPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribI2uiDel(uint  index, uint  x, uint  y);
        private static glVertexAttribI2uiDel glVertexAttribI2uiPtr;
        
        // glVertexAttribI2uiEXT
        public static void glVertexAttribI2uiEXT(uint  index, uint  x, uint  y) => glVertexAttribI2uiEXTPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribI2uiEXTDel(uint  index, uint  x, uint  y);
        private static glVertexAttribI2uiEXTDel glVertexAttribI2uiEXTPtr;
        
        // glVertexAttribI2uiv
        public static void glVertexAttribI2uiv(uint  index, uint[]  v) => glVertexAttribI2uivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI2uivDel(uint  index, uint[]  v);
        private static glVertexAttribI2uivDel glVertexAttribI2uivPtr;
        
        // glVertexAttribI2uivEXT
        public static void glVertexAttribI2uivEXT(uint  index, uint[]  v) => glVertexAttribI2uivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI2uivEXTDel(uint  index, uint[]  v);
        private static glVertexAttribI2uivEXTDel glVertexAttribI2uivEXTPtr;
        
        // glVertexAttribI3i
        public static void glVertexAttribI3i(uint  index, int  x, int  y, int  z) => glVertexAttribI3iPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribI3iDel(uint  index, int  x, int  y, int  z);
        private static glVertexAttribI3iDel glVertexAttribI3iPtr;
        
        // glVertexAttribI3iEXT
        public static void glVertexAttribI3iEXT(uint  index, int  x, int  y, int  z) => glVertexAttribI3iEXTPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribI3iEXTDel(uint  index, int  x, int  y, int  z);
        private static glVertexAttribI3iEXTDel glVertexAttribI3iEXTPtr;
        
        // glVertexAttribI3iv
        public static void glVertexAttribI3iv(uint  index, int[]  v) => glVertexAttribI3ivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI3ivDel(uint  index, int[]  v);
        private static glVertexAttribI3ivDel glVertexAttribI3ivPtr;
        
        // glVertexAttribI3ivEXT
        public static void glVertexAttribI3ivEXT(uint  index, int[]  v) => glVertexAttribI3ivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI3ivEXTDel(uint  index, int[]  v);
        private static glVertexAttribI3ivEXTDel glVertexAttribI3ivEXTPtr;
        
        // glVertexAttribI3ui
        public static void glVertexAttribI3ui(uint  index, uint  x, uint  y, uint  z) => glVertexAttribI3uiPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribI3uiDel(uint  index, uint  x, uint  y, uint  z);
        private static glVertexAttribI3uiDel glVertexAttribI3uiPtr;
        
        // glVertexAttribI3uiEXT
        public static void glVertexAttribI3uiEXT(uint  index, uint  x, uint  y, uint  z) => glVertexAttribI3uiEXTPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribI3uiEXTDel(uint  index, uint  x, uint  y, uint  z);
        private static glVertexAttribI3uiEXTDel glVertexAttribI3uiEXTPtr;
        
        // glVertexAttribI3uiv
        public static void glVertexAttribI3uiv(uint  index, uint[]  v) => glVertexAttribI3uivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI3uivDel(uint  index, uint[]  v);
        private static glVertexAttribI3uivDel glVertexAttribI3uivPtr;
        
        // glVertexAttribI3uivEXT
        public static void glVertexAttribI3uivEXT(uint  index, uint[]  v) => glVertexAttribI3uivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI3uivEXTDel(uint  index, uint[]  v);
        private static glVertexAttribI3uivEXTDel glVertexAttribI3uivEXTPtr;
        
        // glVertexAttribI4bv
        public static void glVertexAttribI4bv(uint  index, sbyte[]  v) => glVertexAttribI4bvPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4bvDel(uint  index, sbyte[]  v);
        private static glVertexAttribI4bvDel glVertexAttribI4bvPtr;
        
        // glVertexAttribI4bvEXT
        public static void glVertexAttribI4bvEXT(uint  index, sbyte[]  v) => glVertexAttribI4bvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4bvEXTDel(uint  index, sbyte[]  v);
        private static glVertexAttribI4bvEXTDel glVertexAttribI4bvEXTPtr;
        
        // glVertexAttribI4i
        public static void glVertexAttribI4i(uint  index, int  x, int  y, int  z, int  w) => glVertexAttribI4iPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribI4iDel(uint  index, int  x, int  y, int  z, int  w);
        private static glVertexAttribI4iDel glVertexAttribI4iPtr;
        
        // glVertexAttribI4iEXT
        public static void glVertexAttribI4iEXT(uint  index, int  x, int  y, int  z, int  w) => glVertexAttribI4iEXTPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribI4iEXTDel(uint  index, int  x, int  y, int  z, int  w);
        private static glVertexAttribI4iEXTDel glVertexAttribI4iEXTPtr;
        
        // glVertexAttribI4iv
        public static void glVertexAttribI4iv(uint  index, int[]  v) => glVertexAttribI4ivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4ivDel(uint  index, int[]  v);
        private static glVertexAttribI4ivDel glVertexAttribI4ivPtr;
        
        // glVertexAttribI4ivEXT
        public static void glVertexAttribI4ivEXT(uint  index, int[]  v) => glVertexAttribI4ivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4ivEXTDel(uint  index, int[]  v);
        private static glVertexAttribI4ivEXTDel glVertexAttribI4ivEXTPtr;
        
        // glVertexAttribI4sv
        public static void glVertexAttribI4sv(uint  index, short[]  v) => glVertexAttribI4svPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4svDel(uint  index, short[]  v);
        private static glVertexAttribI4svDel glVertexAttribI4svPtr;
        
        // glVertexAttribI4svEXT
        public static void glVertexAttribI4svEXT(uint  index, short[]  v) => glVertexAttribI4svEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4svEXTDel(uint  index, short[]  v);
        private static glVertexAttribI4svEXTDel glVertexAttribI4svEXTPtr;
        
        // glVertexAttribI4ubv
        public static void glVertexAttribI4ubv(uint  index, byte[]  v) => glVertexAttribI4ubvPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4ubvDel(uint  index, byte[]  v);
        private static glVertexAttribI4ubvDel glVertexAttribI4ubvPtr;
        
        // glVertexAttribI4ubvEXT
        public static void glVertexAttribI4ubvEXT(uint  index, byte[]  v) => glVertexAttribI4ubvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4ubvEXTDel(uint  index, byte[]  v);
        private static glVertexAttribI4ubvEXTDel glVertexAttribI4ubvEXTPtr;
        
        // glVertexAttribI4ui
        public static void glVertexAttribI4ui(uint  index, uint  x, uint  y, uint  z, uint  w) => glVertexAttribI4uiPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribI4uiDel(uint  index, uint  x, uint  y, uint  z, uint  w);
        private static glVertexAttribI4uiDel glVertexAttribI4uiPtr;
        
        // glVertexAttribI4uiEXT
        public static void glVertexAttribI4uiEXT(uint  index, uint  x, uint  y, uint  z, uint  w) => glVertexAttribI4uiEXTPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribI4uiEXTDel(uint  index, uint  x, uint  y, uint  z, uint  w);
        private static glVertexAttribI4uiEXTDel glVertexAttribI4uiEXTPtr;
        
        // glVertexAttribI4uiv
        public static void glVertexAttribI4uiv(uint  index, uint[]  v) => glVertexAttribI4uivPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4uivDel(uint  index, uint[]  v);
        private static glVertexAttribI4uivDel glVertexAttribI4uivPtr;
        
        // glVertexAttribI4uivEXT
        public static void glVertexAttribI4uivEXT(uint  index, uint[]  v) => glVertexAttribI4uivEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4uivEXTDel(uint  index, uint[]  v);
        private static glVertexAttribI4uivEXTDel glVertexAttribI4uivEXTPtr;
        
        // glVertexAttribI4usv
        public static void glVertexAttribI4usv(uint  index, ushort[]  v) => glVertexAttribI4usvPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4usvDel(uint  index, ushort[]  v);
        private static glVertexAttribI4usvDel glVertexAttribI4usvPtr;
        
        // glVertexAttribI4usvEXT
        public static void glVertexAttribI4usvEXT(uint  index, ushort[]  v) => glVertexAttribI4usvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribI4usvEXTDel(uint  index, ushort[]  v);
        private static glVertexAttribI4usvEXTDel glVertexAttribI4usvEXTPtr;
        
        // glVertexAttribIFormat
        public static void glVertexAttribIFormat(uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset) => glVertexAttribIFormatPtr?.Invoke(attribindex, size, type, relativeoffset);
        private delegate void glVertexAttribIFormatDel(uint  attribindex, int  size, uint /*VertexAttribIType*/  type, uint  relativeoffset);
        private static glVertexAttribIFormatDel glVertexAttribIFormatPtr;
        
        // glVertexAttribIFormatNV
        public static void glVertexAttribIFormatNV(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride) => glVertexAttribIFormatNVPtr?.Invoke(index, size, type, stride);
        private delegate void glVertexAttribIFormatNVDel(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride);
        private static glVertexAttribIFormatNVDel glVertexAttribIFormatNVPtr;
        
        // glVertexAttribIPointer
        public static void glVertexAttribIPointer(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer) => glVertexAttribIPointerPtr?.Invoke(index, size, type, stride, pointer);
        private delegate void glVertexAttribIPointerDel(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer);
        private static glVertexAttribIPointerDel glVertexAttribIPointerPtr;
        
        // glVertexAttribIPointerEXT
        public static void glVertexAttribIPointerEXT(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer) => glVertexAttribIPointerEXTPtr?.Invoke(index, size, type, stride, pointer);
        private delegate void glVertexAttribIPointerEXTDel(uint  index, int  size, uint /*VertexAttribIType*/  type, uint  stride, IntPtr  pointer);
        private static glVertexAttribIPointerEXTDel glVertexAttribIPointerEXTPtr;
        
        // glVertexAttribL1d
        public static void glVertexAttribL1d(uint  index, double  x) => glVertexAttribL1dPtr?.Invoke(index, x);
        private delegate void glVertexAttribL1dDel(uint  index, double  x);
        private static glVertexAttribL1dDel glVertexAttribL1dPtr;
        
        // glVertexAttribL1dEXT
        public static void glVertexAttribL1dEXT(uint  index, double  x) => glVertexAttribL1dEXTPtr?.Invoke(index, x);
        private delegate void glVertexAttribL1dEXTDel(uint  index, double  x);
        private static glVertexAttribL1dEXTDel glVertexAttribL1dEXTPtr;
        
        // glVertexAttribL1dv
        public static void glVertexAttribL1dv(uint  index, double[]  v) => glVertexAttribL1dvPtr?.Invoke(index, v);
        private delegate void glVertexAttribL1dvDel(uint  index, double[]  v);
        private static glVertexAttribL1dvDel glVertexAttribL1dvPtr;
        
        // glVertexAttribL1dvEXT
        public static void glVertexAttribL1dvEXT(uint  index, double[]  v) => glVertexAttribL1dvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribL1dvEXTDel(uint  index, double[]  v);
        private static glVertexAttribL1dvEXTDel glVertexAttribL1dvEXTPtr;
        
        // glVertexAttribL1i64NV
        public static void glVertexAttribL1i64NV(uint  index, long  x) => glVertexAttribL1i64NVPtr?.Invoke(index, x);
        private delegate void glVertexAttribL1i64NVDel(uint  index, long  x);
        private static glVertexAttribL1i64NVDel glVertexAttribL1i64NVPtr;
        
        // glVertexAttribL1i64vNV
        public static void glVertexAttribL1i64vNV(uint  index, long[]  v) => glVertexAttribL1i64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL1i64vNVDel(uint  index, long[]  v);
        private static glVertexAttribL1i64vNVDel glVertexAttribL1i64vNVPtr;
        
        // glVertexAttribL1ui64ARB
        public static void glVertexAttribL1ui64ARB(uint  index, ulong  x) => glVertexAttribL1ui64ARBPtr?.Invoke(index, x);
        private delegate void glVertexAttribL1ui64ARBDel(uint  index, ulong  x);
        private static glVertexAttribL1ui64ARBDel glVertexAttribL1ui64ARBPtr;
        
        // glVertexAttribL1ui64NV
        public static void glVertexAttribL1ui64NV(uint  index, ulong  x) => glVertexAttribL1ui64NVPtr?.Invoke(index, x);
        private delegate void glVertexAttribL1ui64NVDel(uint  index, ulong  x);
        private static glVertexAttribL1ui64NVDel glVertexAttribL1ui64NVPtr;
        
        // glVertexAttribL1ui64vARB
        public static void glVertexAttribL1ui64vARB(uint  index, ulong[]  v) => glVertexAttribL1ui64vARBPtr?.Invoke(index, v);
        private delegate void glVertexAttribL1ui64vARBDel(uint  index, ulong[]  v);
        private static glVertexAttribL1ui64vARBDel glVertexAttribL1ui64vARBPtr;
        
        // glVertexAttribL1ui64vNV
        public static void glVertexAttribL1ui64vNV(uint  index, ulong[]  v) => glVertexAttribL1ui64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL1ui64vNVDel(uint  index, ulong[]  v);
        private static glVertexAttribL1ui64vNVDel glVertexAttribL1ui64vNVPtr;
        
        // glVertexAttribL2d
        public static void glVertexAttribL2d(uint  index, double  x, double  y) => glVertexAttribL2dPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribL2dDel(uint  index, double  x, double  y);
        private static glVertexAttribL2dDel glVertexAttribL2dPtr;
        
        // glVertexAttribL2dEXT
        public static void glVertexAttribL2dEXT(uint  index, double  x, double  y) => glVertexAttribL2dEXTPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribL2dEXTDel(uint  index, double  x, double  y);
        private static glVertexAttribL2dEXTDel glVertexAttribL2dEXTPtr;
        
        // glVertexAttribL2dv
        public static void glVertexAttribL2dv(uint  index, double[]  v) => glVertexAttribL2dvPtr?.Invoke(index, v);
        private delegate void glVertexAttribL2dvDel(uint  index, double[]  v);
        private static glVertexAttribL2dvDel glVertexAttribL2dvPtr;
        
        // glVertexAttribL2dvEXT
        public static void glVertexAttribL2dvEXT(uint  index, double[]  v) => glVertexAttribL2dvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribL2dvEXTDel(uint  index, double[]  v);
        private static glVertexAttribL2dvEXTDel glVertexAttribL2dvEXTPtr;
        
        // glVertexAttribL2i64NV
        public static void glVertexAttribL2i64NV(uint  index, long  x, long  y) => glVertexAttribL2i64NVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribL2i64NVDel(uint  index, long  x, long  y);
        private static glVertexAttribL2i64NVDel glVertexAttribL2i64NVPtr;
        
        // glVertexAttribL2i64vNV
        public static void glVertexAttribL2i64vNV(uint  index, long[]  v) => glVertexAttribL2i64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL2i64vNVDel(uint  index, long[]  v);
        private static glVertexAttribL2i64vNVDel glVertexAttribL2i64vNVPtr;
        
        // glVertexAttribL2ui64NV
        public static void glVertexAttribL2ui64NV(uint  index, ulong  x, ulong  y) => glVertexAttribL2ui64NVPtr?.Invoke(index, x, y);
        private delegate void glVertexAttribL2ui64NVDel(uint  index, ulong  x, ulong  y);
        private static glVertexAttribL2ui64NVDel glVertexAttribL2ui64NVPtr;
        
        // glVertexAttribL2ui64vNV
        public static void glVertexAttribL2ui64vNV(uint  index, ulong[]  v) => glVertexAttribL2ui64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL2ui64vNVDel(uint  index, ulong[]  v);
        private static glVertexAttribL2ui64vNVDel glVertexAttribL2ui64vNVPtr;
        
        // glVertexAttribL3d
        public static void glVertexAttribL3d(uint  index, double  x, double  y, double  z) => glVertexAttribL3dPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribL3dDel(uint  index, double  x, double  y, double  z);
        private static glVertexAttribL3dDel glVertexAttribL3dPtr;
        
        // glVertexAttribL3dEXT
        public static void glVertexAttribL3dEXT(uint  index, double  x, double  y, double  z) => glVertexAttribL3dEXTPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribL3dEXTDel(uint  index, double  x, double  y, double  z);
        private static glVertexAttribL3dEXTDel glVertexAttribL3dEXTPtr;
        
        // glVertexAttribL3dv
        public static void glVertexAttribL3dv(uint  index, double[]  v) => glVertexAttribL3dvPtr?.Invoke(index, v);
        private delegate void glVertexAttribL3dvDel(uint  index, double[]  v);
        private static glVertexAttribL3dvDel glVertexAttribL3dvPtr;
        
        // glVertexAttribL3dvEXT
        public static void glVertexAttribL3dvEXT(uint  index, double[]  v) => glVertexAttribL3dvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribL3dvEXTDel(uint  index, double[]  v);
        private static glVertexAttribL3dvEXTDel glVertexAttribL3dvEXTPtr;
        
        // glVertexAttribL3i64NV
        public static void glVertexAttribL3i64NV(uint  index, long  x, long  y, long  z) => glVertexAttribL3i64NVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribL3i64NVDel(uint  index, long  x, long  y, long  z);
        private static glVertexAttribL3i64NVDel glVertexAttribL3i64NVPtr;
        
        // glVertexAttribL3i64vNV
        public static void glVertexAttribL3i64vNV(uint  index, long[]  v) => glVertexAttribL3i64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL3i64vNVDel(uint  index, long[]  v);
        private static glVertexAttribL3i64vNVDel glVertexAttribL3i64vNVPtr;
        
        // glVertexAttribL3ui64NV
        public static void glVertexAttribL3ui64NV(uint  index, ulong  x, ulong  y, ulong  z) => glVertexAttribL3ui64NVPtr?.Invoke(index, x, y, z);
        private delegate void glVertexAttribL3ui64NVDel(uint  index, ulong  x, ulong  y, ulong  z);
        private static glVertexAttribL3ui64NVDel glVertexAttribL3ui64NVPtr;
        
        // glVertexAttribL3ui64vNV
        public static void glVertexAttribL3ui64vNV(uint  index, ulong[]  v) => glVertexAttribL3ui64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL3ui64vNVDel(uint  index, ulong[]  v);
        private static glVertexAttribL3ui64vNVDel glVertexAttribL3ui64vNVPtr;
        
        // glVertexAttribL4d
        public static void glVertexAttribL4d(uint  index, double  x, double  y, double  z, double  w) => glVertexAttribL4dPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribL4dDel(uint  index, double  x, double  y, double  z, double  w);
        private static glVertexAttribL4dDel glVertexAttribL4dPtr;
        
        // glVertexAttribL4dEXT
        public static void glVertexAttribL4dEXT(uint  index, double  x, double  y, double  z, double  w) => glVertexAttribL4dEXTPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribL4dEXTDel(uint  index, double  x, double  y, double  z, double  w);
        private static glVertexAttribL4dEXTDel glVertexAttribL4dEXTPtr;
        
        // glVertexAttribL4dv
        public static void glVertexAttribL4dv(uint  index, double[]  v) => glVertexAttribL4dvPtr?.Invoke(index, v);
        private delegate void glVertexAttribL4dvDel(uint  index, double[]  v);
        private static glVertexAttribL4dvDel glVertexAttribL4dvPtr;
        
        // glVertexAttribL4dvEXT
        public static void glVertexAttribL4dvEXT(uint  index, double[]  v) => glVertexAttribL4dvEXTPtr?.Invoke(index, v);
        private delegate void glVertexAttribL4dvEXTDel(uint  index, double[]  v);
        private static glVertexAttribL4dvEXTDel glVertexAttribL4dvEXTPtr;
        
        // glVertexAttribL4i64NV
        public static void glVertexAttribL4i64NV(uint  index, long  x, long  y, long  z, long  w) => glVertexAttribL4i64NVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribL4i64NVDel(uint  index, long  x, long  y, long  z, long  w);
        private static glVertexAttribL4i64NVDel glVertexAttribL4i64NVPtr;
        
        // glVertexAttribL4i64vNV
        public static void glVertexAttribL4i64vNV(uint  index, long[]  v) => glVertexAttribL4i64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL4i64vNVDel(uint  index, long[]  v);
        private static glVertexAttribL4i64vNVDel glVertexAttribL4i64vNVPtr;
        
        // glVertexAttribL4ui64NV
        public static void glVertexAttribL4ui64NV(uint  index, ulong  x, ulong  y, ulong  z, ulong  w) => glVertexAttribL4ui64NVPtr?.Invoke(index, x, y, z, w);
        private delegate void glVertexAttribL4ui64NVDel(uint  index, ulong  x, ulong  y, ulong  z, ulong  w);
        private static glVertexAttribL4ui64NVDel glVertexAttribL4ui64NVPtr;
        
        // glVertexAttribL4ui64vNV
        public static void glVertexAttribL4ui64vNV(uint  index, ulong[]  v) => glVertexAttribL4ui64vNVPtr?.Invoke(index, v);
        private delegate void glVertexAttribL4ui64vNVDel(uint  index, ulong[]  v);
        private static glVertexAttribL4ui64vNVDel glVertexAttribL4ui64vNVPtr;
        
        // glVertexAttribLFormat
        public static void glVertexAttribLFormat(uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset) => glVertexAttribLFormatPtr?.Invoke(attribindex, size, type, relativeoffset);
        private delegate void glVertexAttribLFormatDel(uint  attribindex, int  size, uint /*VertexAttribLType*/  type, uint  relativeoffset);
        private static glVertexAttribLFormatDel glVertexAttribLFormatPtr;
        
        // glVertexAttribLFormatNV
        public static void glVertexAttribLFormatNV(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride) => glVertexAttribLFormatNVPtr?.Invoke(index, size, type, stride);
        private delegate void glVertexAttribLFormatNVDel(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride);
        private static glVertexAttribLFormatNVDel glVertexAttribLFormatNVPtr;
        
        // glVertexAttribLPointer
        public static void glVertexAttribLPointer(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer) => glVertexAttribLPointerPtr?.Invoke(index, size, type, stride, pointer);
        private delegate void glVertexAttribLPointerDel(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer);
        private static glVertexAttribLPointerDel glVertexAttribLPointerPtr;
        
        // glVertexAttribLPointerEXT
        public static void glVertexAttribLPointerEXT(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer) => glVertexAttribLPointerEXTPtr?.Invoke(index, size, type, stride, pointer);
        private delegate void glVertexAttribLPointerEXTDel(uint  index, int  size, uint /*VertexAttribLType*/  type, uint  stride, IntPtr  pointer);
        private static glVertexAttribLPointerEXTDel glVertexAttribLPointerEXTPtr;
        
        // glVertexAttribP1ui
        public static void glVertexAttribP1ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => glVertexAttribP1uiPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP1uiDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value);
        private static glVertexAttribP1uiDel glVertexAttribP1uiPtr;
        
        // glVertexAttribP1uiv
        public static void glVertexAttribP1uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => glVertexAttribP1uivPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP1uivDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value);
        private static glVertexAttribP1uivDel glVertexAttribP1uivPtr;
        
        // glVertexAttribP2ui
        public static void glVertexAttribP2ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => glVertexAttribP2uiPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP2uiDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value);
        private static glVertexAttribP2uiDel glVertexAttribP2uiPtr;
        
        // glVertexAttribP2uiv
        public static void glVertexAttribP2uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => glVertexAttribP2uivPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP2uivDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value);
        private static glVertexAttribP2uivDel glVertexAttribP2uivPtr;
        
        // glVertexAttribP3ui
        public static void glVertexAttribP3ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => glVertexAttribP3uiPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP3uiDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value);
        private static glVertexAttribP3uiDel glVertexAttribP3uiPtr;
        
        // glVertexAttribP3uiv
        public static void glVertexAttribP3uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => glVertexAttribP3uivPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP3uivDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value);
        private static glVertexAttribP3uivDel glVertexAttribP3uivPtr;
        
        // glVertexAttribP4ui
        public static void glVertexAttribP4ui(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value) => glVertexAttribP4uiPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP4uiDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  value);
        private static glVertexAttribP4uiDel glVertexAttribP4uiPtr;
        
        // glVertexAttribP4uiv
        public static void glVertexAttribP4uiv(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value) => glVertexAttribP4uivPtr?.Invoke(index, type, normalized, value);
        private delegate void glVertexAttribP4uivDel(uint  index, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint[]  value);
        private static glVertexAttribP4uivDel glVertexAttribP4uivPtr;
        
        // glVertexAttribParameteriAMD
        public static void glVertexAttribParameteriAMD(uint  index, uint  pname, int  param) => glVertexAttribParameteriAMDPtr?.Invoke(index, pname, param);
        private delegate void glVertexAttribParameteriAMDDel(uint  index, uint  pname, int  param);
        private static glVertexAttribParameteriAMDDel glVertexAttribParameteriAMDPtr;
        
        // glVertexAttribPointer
        public static void glVertexAttribPointer(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer) => glVertexAttribPointerPtr?.Invoke(index, size, type, normalized, stride, pointer);
        private delegate void glVertexAttribPointerDel(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer);
        private static glVertexAttribPointerDel glVertexAttribPointerPtr;
        
        // glVertexAttribPointerARB
        public static void glVertexAttribPointerARB(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer) => glVertexAttribPointerARBPtr?.Invoke(index, size, type, normalized, stride, pointer);
        private delegate void glVertexAttribPointerARBDel(uint  index, int  size, uint /*VertexAttribPointerType*/  type, bool /*Boolean*/  normalized, uint  stride, IntPtr  pointer);
        private static glVertexAttribPointerARBDel glVertexAttribPointerARBPtr;
        
        // glVertexAttribPointerNV
        public static void glVertexAttribPointerNV(uint  index, int  fsize, uint /*VertexAttribEnumNV*/  type, uint  stride, IntPtr  pointer) => glVertexAttribPointerNVPtr?.Invoke(index, fsize, type, stride, pointer);
        private delegate void glVertexAttribPointerNVDel(uint  index, int  fsize, uint /*VertexAttribEnumNV*/  type, uint  stride, IntPtr  pointer);
        private static glVertexAttribPointerNVDel glVertexAttribPointerNVPtr;
        
        // glVertexAttribs1dvNV
        public static void glVertexAttribs1dvNV(uint  index, uint  count, double[]  v) => glVertexAttribs1dvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs1dvNVDel(uint  index, uint  count, double[]  v);
        private static glVertexAttribs1dvNVDel glVertexAttribs1dvNVPtr;
        
        // glVertexAttribs1fvNV
        public static void glVertexAttribs1fvNV(uint  index, uint  count, float[]  v) => glVertexAttribs1fvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs1fvNVDel(uint  index, uint  count, float[]  v);
        private static glVertexAttribs1fvNVDel glVertexAttribs1fvNVPtr;
        
        // glVertexAttribs1hvNV
        public static void glVertexAttribs1hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => glVertexAttribs1hvNVPtr?.Invoke(index, n, v);
        private delegate void glVertexAttribs1hvNVDel(uint  index, uint  n, ushort[] /*Half16NV*/  v);
        private static glVertexAttribs1hvNVDel glVertexAttribs1hvNVPtr;
        
        // glVertexAttribs1svNV
        public static void glVertexAttribs1svNV(uint  index, uint  count, short[]  v) => glVertexAttribs1svNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs1svNVDel(uint  index, uint  count, short[]  v);
        private static glVertexAttribs1svNVDel glVertexAttribs1svNVPtr;
        
        // glVertexAttribs2dvNV
        public static void glVertexAttribs2dvNV(uint  index, uint  count, double[]  v) => glVertexAttribs2dvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs2dvNVDel(uint  index, uint  count, double[]  v);
        private static glVertexAttribs2dvNVDel glVertexAttribs2dvNVPtr;
        
        // glVertexAttribs2fvNV
        public static void glVertexAttribs2fvNV(uint  index, uint  count, float[]  v) => glVertexAttribs2fvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs2fvNVDel(uint  index, uint  count, float[]  v);
        private static glVertexAttribs2fvNVDel glVertexAttribs2fvNVPtr;
        
        // glVertexAttribs2hvNV
        public static void glVertexAttribs2hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => glVertexAttribs2hvNVPtr?.Invoke(index, n, v);
        private delegate void glVertexAttribs2hvNVDel(uint  index, uint  n, ushort[] /*Half16NV*/  v);
        private static glVertexAttribs2hvNVDel glVertexAttribs2hvNVPtr;
        
        // glVertexAttribs2svNV
        public static void glVertexAttribs2svNV(uint  index, uint  count, short[]  v) => glVertexAttribs2svNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs2svNVDel(uint  index, uint  count, short[]  v);
        private static glVertexAttribs2svNVDel glVertexAttribs2svNVPtr;
        
        // glVertexAttribs3dvNV
        public static void glVertexAttribs3dvNV(uint  index, uint  count, double[]  v) => glVertexAttribs3dvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs3dvNVDel(uint  index, uint  count, double[]  v);
        private static glVertexAttribs3dvNVDel glVertexAttribs3dvNVPtr;
        
        // glVertexAttribs3fvNV
        public static void glVertexAttribs3fvNV(uint  index, uint  count, float[]  v) => glVertexAttribs3fvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs3fvNVDel(uint  index, uint  count, float[]  v);
        private static glVertexAttribs3fvNVDel glVertexAttribs3fvNVPtr;
        
        // glVertexAttribs3hvNV
        public static void glVertexAttribs3hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => glVertexAttribs3hvNVPtr?.Invoke(index, n, v);
        private delegate void glVertexAttribs3hvNVDel(uint  index, uint  n, ushort[] /*Half16NV*/  v);
        private static glVertexAttribs3hvNVDel glVertexAttribs3hvNVPtr;
        
        // glVertexAttribs3svNV
        public static void glVertexAttribs3svNV(uint  index, uint  count, short[]  v) => glVertexAttribs3svNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs3svNVDel(uint  index, uint  count, short[]  v);
        private static glVertexAttribs3svNVDel glVertexAttribs3svNVPtr;
        
        // glVertexAttribs4dvNV
        public static void glVertexAttribs4dvNV(uint  index, uint  count, double[]  v) => glVertexAttribs4dvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs4dvNVDel(uint  index, uint  count, double[]  v);
        private static glVertexAttribs4dvNVDel glVertexAttribs4dvNVPtr;
        
        // glVertexAttribs4fvNV
        public static void glVertexAttribs4fvNV(uint  index, uint  count, float[]  v) => glVertexAttribs4fvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs4fvNVDel(uint  index, uint  count, float[]  v);
        private static glVertexAttribs4fvNVDel glVertexAttribs4fvNVPtr;
        
        // glVertexAttribs4hvNV
        public static void glVertexAttribs4hvNV(uint  index, uint  n, ushort[] /*Half16NV*/  v) => glVertexAttribs4hvNVPtr?.Invoke(index, n, v);
        private delegate void glVertexAttribs4hvNVDel(uint  index, uint  n, ushort[] /*Half16NV*/  v);
        private static glVertexAttribs4hvNVDel glVertexAttribs4hvNVPtr;
        
        // glVertexAttribs4svNV
        public static void glVertexAttribs4svNV(uint  index, uint  count, short[]  v) => glVertexAttribs4svNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs4svNVDel(uint  index, uint  count, short[]  v);
        private static glVertexAttribs4svNVDel glVertexAttribs4svNVPtr;
        
        // glVertexAttribs4ubvNV
        public static void glVertexAttribs4ubvNV(uint  index, uint  count, byte[] /*ColorUB*/  v) => glVertexAttribs4ubvNVPtr?.Invoke(index, count, v);
        private delegate void glVertexAttribs4ubvNVDel(uint  index, uint  count, byte[] /*ColorUB*/  v);
        private static glVertexAttribs4ubvNVDel glVertexAttribs4ubvNVPtr;
        
        // glVertexBindingDivisor
        public static void glVertexBindingDivisor(uint  bindingindex, uint  divisor) => glVertexBindingDivisorPtr?.Invoke(bindingindex, divisor);
        private delegate void glVertexBindingDivisorDel(uint  bindingindex, uint  divisor);
        private static glVertexBindingDivisorDel glVertexBindingDivisorPtr;
        
        // glVertexBlendARB
        public static void glVertexBlendARB(int  count) => glVertexBlendARBPtr?.Invoke(count);
        private delegate void glVertexBlendARBDel(int  count);
        private static glVertexBlendARBDel glVertexBlendARBPtr;
        
        // glVertexBlendEnvfATI
        public static void glVertexBlendEnvfATI(uint /*VertexStreamATI*/  pname, float  param) => glVertexBlendEnvfATIPtr?.Invoke(pname, param);
        private delegate void glVertexBlendEnvfATIDel(uint /*VertexStreamATI*/  pname, float  param);
        private static glVertexBlendEnvfATIDel glVertexBlendEnvfATIPtr;
        
        // glVertexBlendEnviATI
        public static void glVertexBlendEnviATI(uint /*VertexStreamATI*/  pname, int  param) => glVertexBlendEnviATIPtr?.Invoke(pname, param);
        private delegate void glVertexBlendEnviATIDel(uint /*VertexStreamATI*/  pname, int  param);
        private static glVertexBlendEnviATIDel glVertexBlendEnviATIPtr;
        
        // glVertexFormatNV
        public static void glVertexFormatNV(int  size, uint /*VertexPointerType*/  type, uint  stride) => glVertexFormatNVPtr?.Invoke(size, type, stride);
        private delegate void glVertexFormatNVDel(int  size, uint /*VertexPointerType*/  type, uint  stride);
        private static glVertexFormatNVDel glVertexFormatNVPtr;
        
        // glVertexP2ui
        public static void glVertexP2ui(uint /*VertexPointerType*/  type, uint  value) => glVertexP2uiPtr?.Invoke(type, value);
        private delegate void glVertexP2uiDel(uint /*VertexPointerType*/  type, uint  value);
        private static glVertexP2uiDel glVertexP2uiPtr;
        
        // glVertexP2uiv
        public static void glVertexP2uiv(uint /*VertexPointerType*/  type, uint[]  value) => glVertexP2uivPtr?.Invoke(type, value);
        private delegate void glVertexP2uivDel(uint /*VertexPointerType*/  type, uint[]  value);
        private static glVertexP2uivDel glVertexP2uivPtr;
        
        // glVertexP3ui
        public static void glVertexP3ui(uint /*VertexPointerType*/  type, uint  value) => glVertexP3uiPtr?.Invoke(type, value);
        private delegate void glVertexP3uiDel(uint /*VertexPointerType*/  type, uint  value);
        private static glVertexP3uiDel glVertexP3uiPtr;
        
        // glVertexP3uiv
        public static void glVertexP3uiv(uint /*VertexPointerType*/  type, uint[]  value) => glVertexP3uivPtr?.Invoke(type, value);
        private delegate void glVertexP3uivDel(uint /*VertexPointerType*/  type, uint[]  value);
        private static glVertexP3uivDel glVertexP3uivPtr;
        
        // glVertexP4ui
        public static void glVertexP4ui(uint /*VertexPointerType*/  type, uint  value) => glVertexP4uiPtr?.Invoke(type, value);
        private delegate void glVertexP4uiDel(uint /*VertexPointerType*/  type, uint  value);
        private static glVertexP4uiDel glVertexP4uiPtr;
        
        // glVertexP4uiv
        public static void glVertexP4uiv(uint /*VertexPointerType*/  type, uint[]  value) => glVertexP4uivPtr?.Invoke(type, value);
        private delegate void glVertexP4uivDel(uint /*VertexPointerType*/  type, uint[]  value);
        private static glVertexP4uivDel glVertexP4uivPtr;
        
        // glVertexPointer
        public static void glVertexPointer(int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  pointer) => glVertexPointerPtr?.Invoke(size, type, stride, pointer);
        private delegate void glVertexPointerDel(int  size, uint /*VertexPointerType*/  type, uint  stride, IntPtr  pointer);
        private static glVertexPointerDel glVertexPointerPtr;
        
        // glVertexPointerEXT
        public static void glVertexPointerEXT(int  size, uint /*VertexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer) => glVertexPointerEXTPtr?.Invoke(size, type, stride, count, pointer);
        private delegate void glVertexPointerEXTDel(int  size, uint /*VertexPointerType*/  type, uint  stride, uint  count, IntPtr  pointer);
        private static glVertexPointerEXTDel glVertexPointerEXTPtr;
        
        // glVertexPointerListIBM
        public static void glVertexPointerListIBM(int  size, uint /*VertexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride) => glVertexPointerListIBMPtr?.Invoke(size, type, stride, pointer, ptrstride);
        private delegate void glVertexPointerListIBMDel(int  size, uint /*VertexPointerType*/  type, int  stride, IntPtr  pointer, int  ptrstride);
        private static glVertexPointerListIBMDel glVertexPointerListIBMPtr;
        
        // glVertexPointervINTEL
        public static void glVertexPointervINTEL(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer) => glVertexPointervINTELPtr?.Invoke(size, type, pointer);
        private delegate void glVertexPointervINTELDel(int  size, uint /*VertexPointerType*/  type, IntPtr  pointer);
        private static glVertexPointervINTELDel glVertexPointervINTELPtr;
        
        // glVertexStream1dATI
        public static void glVertexStream1dATI(uint /*VertexStreamATI*/  stream, double  x) => glVertexStream1dATIPtr?.Invoke(stream, x);
        private delegate void glVertexStream1dATIDel(uint /*VertexStreamATI*/  stream, double  x);
        private static glVertexStream1dATIDel glVertexStream1dATIPtr;
        
        // glVertexStream1dvATI
        public static void glVertexStream1dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => glVertexStream1dvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream1dvATIDel(uint /*VertexStreamATI*/  stream, double[]  coords);
        private static glVertexStream1dvATIDel glVertexStream1dvATIPtr;
        
        // glVertexStream1fATI
        public static void glVertexStream1fATI(uint /*VertexStreamATI*/  stream, float  x) => glVertexStream1fATIPtr?.Invoke(stream, x);
        private delegate void glVertexStream1fATIDel(uint /*VertexStreamATI*/  stream, float  x);
        private static glVertexStream1fATIDel glVertexStream1fATIPtr;
        
        // glVertexStream1fvATI
        public static void glVertexStream1fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => glVertexStream1fvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream1fvATIDel(uint /*VertexStreamATI*/  stream, float[]  coords);
        private static glVertexStream1fvATIDel glVertexStream1fvATIPtr;
        
        // glVertexStream1iATI
        public static void glVertexStream1iATI(uint /*VertexStreamATI*/  stream, int  x) => glVertexStream1iATIPtr?.Invoke(stream, x);
        private delegate void glVertexStream1iATIDel(uint /*VertexStreamATI*/  stream, int  x);
        private static glVertexStream1iATIDel glVertexStream1iATIPtr;
        
        // glVertexStream1ivATI
        public static void glVertexStream1ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => glVertexStream1ivATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream1ivATIDel(uint /*VertexStreamATI*/  stream, int[]  coords);
        private static glVertexStream1ivATIDel glVertexStream1ivATIPtr;
        
        // glVertexStream1sATI
        public static void glVertexStream1sATI(uint /*VertexStreamATI*/  stream, short  x) => glVertexStream1sATIPtr?.Invoke(stream, x);
        private delegate void glVertexStream1sATIDel(uint /*VertexStreamATI*/  stream, short  x);
        private static glVertexStream1sATIDel glVertexStream1sATIPtr;
        
        // glVertexStream1svATI
        public static void glVertexStream1svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => glVertexStream1svATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream1svATIDel(uint /*VertexStreamATI*/  stream, short[]  coords);
        private static glVertexStream1svATIDel glVertexStream1svATIPtr;
        
        // glVertexStream2dATI
        public static void glVertexStream2dATI(uint /*VertexStreamATI*/  stream, double  x, double  y) => glVertexStream2dATIPtr?.Invoke(stream, x, y);
        private delegate void glVertexStream2dATIDel(uint /*VertexStreamATI*/  stream, double  x, double  y);
        private static glVertexStream2dATIDel glVertexStream2dATIPtr;
        
        // glVertexStream2dvATI
        public static void glVertexStream2dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => glVertexStream2dvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream2dvATIDel(uint /*VertexStreamATI*/  stream, double[]  coords);
        private static glVertexStream2dvATIDel glVertexStream2dvATIPtr;
        
        // glVertexStream2fATI
        public static void glVertexStream2fATI(uint /*VertexStreamATI*/  stream, float  x, float  y) => glVertexStream2fATIPtr?.Invoke(stream, x, y);
        private delegate void glVertexStream2fATIDel(uint /*VertexStreamATI*/  stream, float  x, float  y);
        private static glVertexStream2fATIDel glVertexStream2fATIPtr;
        
        // glVertexStream2fvATI
        public static void glVertexStream2fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => glVertexStream2fvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream2fvATIDel(uint /*VertexStreamATI*/  stream, float[]  coords);
        private static glVertexStream2fvATIDel glVertexStream2fvATIPtr;
        
        // glVertexStream2iATI
        public static void glVertexStream2iATI(uint /*VertexStreamATI*/  stream, int  x, int  y) => glVertexStream2iATIPtr?.Invoke(stream, x, y);
        private delegate void glVertexStream2iATIDel(uint /*VertexStreamATI*/  stream, int  x, int  y);
        private static glVertexStream2iATIDel glVertexStream2iATIPtr;
        
        // glVertexStream2ivATI
        public static void glVertexStream2ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => glVertexStream2ivATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream2ivATIDel(uint /*VertexStreamATI*/  stream, int[]  coords);
        private static glVertexStream2ivATIDel glVertexStream2ivATIPtr;
        
        // glVertexStream2sATI
        public static void glVertexStream2sATI(uint /*VertexStreamATI*/  stream, short  x, short  y) => glVertexStream2sATIPtr?.Invoke(stream, x, y);
        private delegate void glVertexStream2sATIDel(uint /*VertexStreamATI*/  stream, short  x, short  y);
        private static glVertexStream2sATIDel glVertexStream2sATIPtr;
        
        // glVertexStream2svATI
        public static void glVertexStream2svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => glVertexStream2svATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream2svATIDel(uint /*VertexStreamATI*/  stream, short[]  coords);
        private static glVertexStream2svATIDel glVertexStream2svATIPtr;
        
        // glVertexStream3dATI
        public static void glVertexStream3dATI(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z) => glVertexStream3dATIPtr?.Invoke(stream, x, y, z);
        private delegate void glVertexStream3dATIDel(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z);
        private static glVertexStream3dATIDel glVertexStream3dATIPtr;
        
        // glVertexStream3dvATI
        public static void glVertexStream3dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => glVertexStream3dvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream3dvATIDel(uint /*VertexStreamATI*/  stream, double[]  coords);
        private static glVertexStream3dvATIDel glVertexStream3dvATIPtr;
        
        // glVertexStream3fATI
        public static void glVertexStream3fATI(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z) => glVertexStream3fATIPtr?.Invoke(stream, x, y, z);
        private delegate void glVertexStream3fATIDel(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z);
        private static glVertexStream3fATIDel glVertexStream3fATIPtr;
        
        // glVertexStream3fvATI
        public static void glVertexStream3fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => glVertexStream3fvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream3fvATIDel(uint /*VertexStreamATI*/  stream, float[]  coords);
        private static glVertexStream3fvATIDel glVertexStream3fvATIPtr;
        
        // glVertexStream3iATI
        public static void glVertexStream3iATI(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z) => glVertexStream3iATIPtr?.Invoke(stream, x, y, z);
        private delegate void glVertexStream3iATIDel(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z);
        private static glVertexStream3iATIDel glVertexStream3iATIPtr;
        
        // glVertexStream3ivATI
        public static void glVertexStream3ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => glVertexStream3ivATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream3ivATIDel(uint /*VertexStreamATI*/  stream, int[]  coords);
        private static glVertexStream3ivATIDel glVertexStream3ivATIPtr;
        
        // glVertexStream3sATI
        public static void glVertexStream3sATI(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z) => glVertexStream3sATIPtr?.Invoke(stream, x, y, z);
        private delegate void glVertexStream3sATIDel(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z);
        private static glVertexStream3sATIDel glVertexStream3sATIPtr;
        
        // glVertexStream3svATI
        public static void glVertexStream3svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => glVertexStream3svATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream3svATIDel(uint /*VertexStreamATI*/  stream, short[]  coords);
        private static glVertexStream3svATIDel glVertexStream3svATIPtr;
        
        // glVertexStream4dATI
        public static void glVertexStream4dATI(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z, double  w) => glVertexStream4dATIPtr?.Invoke(stream, x, y, z, w);
        private delegate void glVertexStream4dATIDel(uint /*VertexStreamATI*/  stream, double  x, double  y, double  z, double  w);
        private static glVertexStream4dATIDel glVertexStream4dATIPtr;
        
        // glVertexStream4dvATI
        public static void glVertexStream4dvATI(uint /*VertexStreamATI*/  stream, double[]  coords) => glVertexStream4dvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream4dvATIDel(uint /*VertexStreamATI*/  stream, double[]  coords);
        private static glVertexStream4dvATIDel glVertexStream4dvATIPtr;
        
        // glVertexStream4fATI
        public static void glVertexStream4fATI(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z, float  w) => glVertexStream4fATIPtr?.Invoke(stream, x, y, z, w);
        private delegate void glVertexStream4fATIDel(uint /*VertexStreamATI*/  stream, float  x, float  y, float  z, float  w);
        private static glVertexStream4fATIDel glVertexStream4fATIPtr;
        
        // glVertexStream4fvATI
        public static void glVertexStream4fvATI(uint /*VertexStreamATI*/  stream, float[]  coords) => glVertexStream4fvATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream4fvATIDel(uint /*VertexStreamATI*/  stream, float[]  coords);
        private static glVertexStream4fvATIDel glVertexStream4fvATIPtr;
        
        // glVertexStream4iATI
        public static void glVertexStream4iATI(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z, int  w) => glVertexStream4iATIPtr?.Invoke(stream, x, y, z, w);
        private delegate void glVertexStream4iATIDel(uint /*VertexStreamATI*/  stream, int  x, int  y, int  z, int  w);
        private static glVertexStream4iATIDel glVertexStream4iATIPtr;
        
        // glVertexStream4ivATI
        public static void glVertexStream4ivATI(uint /*VertexStreamATI*/  stream, int[]  coords) => glVertexStream4ivATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream4ivATIDel(uint /*VertexStreamATI*/  stream, int[]  coords);
        private static glVertexStream4ivATIDel glVertexStream4ivATIPtr;
        
        // glVertexStream4sATI
        public static void glVertexStream4sATI(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z, short  w) => glVertexStream4sATIPtr?.Invoke(stream, x, y, z, w);
        private delegate void glVertexStream4sATIDel(uint /*VertexStreamATI*/  stream, short  x, short  y, short  z, short  w);
        private static glVertexStream4sATIDel glVertexStream4sATIPtr;
        
        // glVertexStream4svATI
        public static void glVertexStream4svATI(uint /*VertexStreamATI*/  stream, short[]  coords) => glVertexStream4svATIPtr?.Invoke(stream, coords);
        private delegate void glVertexStream4svATIDel(uint /*VertexStreamATI*/  stream, short[]  coords);
        private static glVertexStream4svATIDel glVertexStream4svATIPtr;
        
        // glVertexWeightPointerEXT
        public static void glVertexWeightPointerEXT(int  size, uint /*VertexWeightPointerTypeEXT*/  type, uint  stride, IntPtr  pointer) => glVertexWeightPointerEXTPtr?.Invoke(size, type, stride, pointer);
        private delegate void glVertexWeightPointerEXTDel(int  size, uint /*VertexWeightPointerTypeEXT*/  type, uint  stride, IntPtr  pointer);
        private static glVertexWeightPointerEXTDel glVertexWeightPointerEXTPtr;
        
        // glVertexWeightfEXT
        public static void glVertexWeightfEXT(float  weight) => glVertexWeightfEXTPtr?.Invoke(weight);
        private delegate void glVertexWeightfEXTDel(float  weight);
        private static glVertexWeightfEXTDel glVertexWeightfEXTPtr;
        
        // glVertexWeightfvEXT
        public static void glVertexWeightfvEXT(float[]  weight) => glVertexWeightfvEXTPtr?.Invoke(weight);
        private delegate void glVertexWeightfvEXTDel(float[]  weight);
        private static glVertexWeightfvEXTDel glVertexWeightfvEXTPtr;
        
        // glVertexWeighthNV
        public static void glVertexWeighthNV(ushort /*Half16NV*/  weight) => glVertexWeighthNVPtr?.Invoke(weight);
        private delegate void glVertexWeighthNVDel(ushort /*Half16NV*/  weight);
        private static glVertexWeighthNVDel glVertexWeighthNVPtr;
        
        // glVertexWeighthvNV
        public static void glVertexWeighthvNV(ushort[] /*Half16NV*/  weight) => glVertexWeighthvNVPtr?.Invoke(weight);
        private delegate void glVertexWeighthvNVDel(ushort[] /*Half16NV*/  weight);
        private static glVertexWeighthvNVDel glVertexWeighthvNVPtr;
        
        // glVideoCaptureNV
        public static uint glVideoCaptureNV(uint  video_capture_slot, uint[]  sequence_num, ulong[]  capture_time) => glVideoCaptureNVPtr?.Invoke(video_capture_slot, sequence_num, capture_time) ?? default;
        private delegate uint glVideoCaptureNVDel(uint  video_capture_slot, uint[]  sequence_num, ulong[]  capture_time);
        private static glVideoCaptureNVDel glVideoCaptureNVPtr;
        
        // glVideoCaptureStreamParameterdvNV
        public static void glVideoCaptureStreamParameterdvNV(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters) => glVideoCaptureStreamParameterdvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glVideoCaptureStreamParameterdvNVDel(uint  video_capture_slot, uint  stream, uint  pname, double[]  parameters);
        private static glVideoCaptureStreamParameterdvNVDel glVideoCaptureStreamParameterdvNVPtr;
        
        // glVideoCaptureStreamParameterfvNV
        public static void glVideoCaptureStreamParameterfvNV(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters) => glVideoCaptureStreamParameterfvNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glVideoCaptureStreamParameterfvNVDel(uint  video_capture_slot, uint  stream, uint  pname, float[]  parameters);
        private static glVideoCaptureStreamParameterfvNVDel glVideoCaptureStreamParameterfvNVPtr;
        
        // glVideoCaptureStreamParameterivNV
        public static void glVideoCaptureStreamParameterivNV(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters) => glVideoCaptureStreamParameterivNVPtr?.Invoke(video_capture_slot, stream, pname, parameters);
        private delegate void glVideoCaptureStreamParameterivNVDel(uint  video_capture_slot, uint  stream, uint  pname, int[]  parameters);
        private static glVideoCaptureStreamParameterivNVDel glVideoCaptureStreamParameterivNVPtr;
        
        // glViewport
        public static void glViewport(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height) => glViewportPtr?.Invoke(x, y, width, height);
        private delegate void glViewportDel(int /*WinCoord*/  x, int /*WinCoord*/  y, uint  width, uint  height);
        private static glViewportDel glViewportPtr;
        
        // glViewportArrayv
        public static void glViewportArrayv(uint  first, uint  count, float[]  v) => glViewportArrayvPtr?.Invoke(first, count, v);
        private delegate void glViewportArrayvDel(uint  first, uint  count, float[]  v);
        private static glViewportArrayvDel glViewportArrayvPtr;
        
        // glViewportArrayvNV
        public static void glViewportArrayvNV(uint  first, uint  count, float[]  v) => glViewportArrayvNVPtr?.Invoke(first, count, v);
        private delegate void glViewportArrayvNVDel(uint  first, uint  count, float[]  v);
        private static glViewportArrayvNVDel glViewportArrayvNVPtr;
        
        // glViewportArrayvOES
        public static void glViewportArrayvOES(uint  first, uint  count, float[]  v) => glViewportArrayvOESPtr?.Invoke(first, count, v);
        private delegate void glViewportArrayvOESDel(uint  first, uint  count, float[]  v);
        private static glViewportArrayvOESDel glViewportArrayvOESPtr;
        
        // glViewportIndexedf
        public static void glViewportIndexedf(uint  index, float  x, float  y, float  w, float  h) => glViewportIndexedfPtr?.Invoke(index, x, y, w, h);
        private delegate void glViewportIndexedfDel(uint  index, float  x, float  y, float  w, float  h);
        private static glViewportIndexedfDel glViewportIndexedfPtr;
        
        // glViewportIndexedfOES
        public static void glViewportIndexedfOES(uint  index, float  x, float  y, float  w, float  h) => glViewportIndexedfOESPtr?.Invoke(index, x, y, w, h);
        private delegate void glViewportIndexedfOESDel(uint  index, float  x, float  y, float  w, float  h);
        private static glViewportIndexedfOESDel glViewportIndexedfOESPtr;
        
        // glViewportIndexedfNV
        public static void glViewportIndexedfNV(uint  index, float  x, float  y, float  w, float  h) => glViewportIndexedfNVPtr?.Invoke(index, x, y, w, h);
        private delegate void glViewportIndexedfNVDel(uint  index, float  x, float  y, float  w, float  h);
        private static glViewportIndexedfNVDel glViewportIndexedfNVPtr;
        
        // glViewportIndexedfv
        public static void glViewportIndexedfv(uint  index, float[]  v) => glViewportIndexedfvPtr?.Invoke(index, v);
        private delegate void glViewportIndexedfvDel(uint  index, float[]  v);
        private static glViewportIndexedfvDel glViewportIndexedfvPtr;
        
        // glViewportIndexedfvOES
        public static void glViewportIndexedfvOES(uint  index, float[]  v) => glViewportIndexedfvOESPtr?.Invoke(index, v);
        private delegate void glViewportIndexedfvOESDel(uint  index, float[]  v);
        private static glViewportIndexedfvOESDel glViewportIndexedfvOESPtr;
        
        // glViewportIndexedfvNV
        public static void glViewportIndexedfvNV(uint  index, float[]  v) => glViewportIndexedfvNVPtr?.Invoke(index, v);
        private delegate void glViewportIndexedfvNVDel(uint  index, float[]  v);
        private static glViewportIndexedfvNVDel glViewportIndexedfvNVPtr;
        
        // glViewportPositionWScaleNV
        public static void glViewportPositionWScaleNV(uint  index, float  xcoeff, float  ycoeff) => glViewportPositionWScaleNVPtr?.Invoke(index, xcoeff, ycoeff);
        private delegate void glViewportPositionWScaleNVDel(uint  index, float  xcoeff, float  ycoeff);
        private static glViewportPositionWScaleNVDel glViewportPositionWScaleNVPtr;
        
        // glViewportSwizzleNV
        public static void glViewportSwizzleNV(uint  index, uint  swizzlex, uint  swizzley, uint  swizzlez, uint  swizzlew) => glViewportSwizzleNVPtr?.Invoke(index, swizzlex, swizzley, swizzlez, swizzlew);
        private delegate void glViewportSwizzleNVDel(uint  index, uint  swizzlex, uint  swizzley, uint  swizzlez, uint  swizzlew);
        private static glViewportSwizzleNVDel glViewportSwizzleNVPtr;
        
        // glWaitSemaphoreEXT
        public static void glWaitSemaphoreEXT(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  srcLayouts) => glWaitSemaphoreEXTPtr?.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);
        private delegate void glWaitSemaphoreEXTDel(uint  semaphore, uint  numBufferBarriers, uint[]  buffers, uint  numTextureBarriers, uint[]  textures, uint[] /*TextureLayout*/  srcLayouts);
        private static glWaitSemaphoreEXTDel glWaitSemaphoreEXTPtr;
        
        // glWaitSemaphoreui64NVX
        public static void glWaitSemaphoreui64NVX(uint  waitGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray) => glWaitSemaphoreui64NVXPtr?.Invoke(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
        private delegate void glWaitSemaphoreui64NVXDel(uint  waitGpu, uint  fenceObjectCount, uint[]  semaphoreArray, ulong[]  fenceValueArray);
        private static glWaitSemaphoreui64NVXDel glWaitSemaphoreui64NVXPtr;
        
        // glWaitSync
        public static void glWaitSync(IntPtr /*sync*/  sync, uint  flags, ulong  timeout) => glWaitSyncPtr?.Invoke(sync, flags, timeout);
        private delegate void glWaitSyncDel(IntPtr /*sync*/  sync, uint  flags, ulong  timeout);
        private static glWaitSyncDel glWaitSyncPtr;
        
        // glWaitSyncAPPLE
        public static void glWaitSyncAPPLE(IntPtr  sync, uint  flags, ulong  timeout) => glWaitSyncAPPLEPtr?.Invoke(sync, flags, timeout);
        private delegate void glWaitSyncAPPLEDel(IntPtr  sync, uint  flags, ulong  timeout);
        private static glWaitSyncAPPLEDel glWaitSyncAPPLEPtr;
        
        // glWeightPathsNV
        public static void glWeightPathsNV(uint /*Path*/  resultPath, uint  numPaths, uint[] /*Path*/  paths, float[]  weights) => glWeightPathsNVPtr?.Invoke(resultPath, numPaths, paths, weights);
        private delegate void glWeightPathsNVDel(uint /*Path*/  resultPath, uint  numPaths, uint[] /*Path*/  paths, float[]  weights);
        private static glWeightPathsNVDel glWeightPathsNVPtr;
        
        // glWeightPointerARB
        public static void glWeightPointerARB(int  size, uint /*WeightPointerTypeARB*/  type, uint  stride, IntPtr  pointer) => glWeightPointerARBPtr?.Invoke(size, type, stride, pointer);
        private delegate void glWeightPointerARBDel(int  size, uint /*WeightPointerTypeARB*/  type, uint  stride, IntPtr  pointer);
        private static glWeightPointerARBDel glWeightPointerARBPtr;
        
        // glWeightPointerOES
        public static void glWeightPointerOES(int  size, uint  type, uint  stride, IntPtr  pointer) => glWeightPointerOESPtr?.Invoke(size, type, stride, pointer);
        private delegate void glWeightPointerOESDel(int  size, uint  type, uint  stride, IntPtr  pointer);
        private static glWeightPointerOESDel glWeightPointerOESPtr;
        
        // glWeightbvARB
        public static void glWeightbvARB(int  size, sbyte[]  weights) => glWeightbvARBPtr?.Invoke(size, weights);
        private delegate void glWeightbvARBDel(int  size, sbyte[]  weights);
        private static glWeightbvARBDel glWeightbvARBPtr;
        
        // glWeightdvARB
        public static void glWeightdvARB(int  size, double[]  weights) => glWeightdvARBPtr?.Invoke(size, weights);
        private delegate void glWeightdvARBDel(int  size, double[]  weights);
        private static glWeightdvARBDel glWeightdvARBPtr;
        
        // glWeightfvARB
        public static void glWeightfvARB(int  size, float[]  weights) => glWeightfvARBPtr?.Invoke(size, weights);
        private delegate void glWeightfvARBDel(int  size, float[]  weights);
        private static glWeightfvARBDel glWeightfvARBPtr;
        
        // glWeightivARB
        public static void glWeightivARB(int  size, int[]  weights) => glWeightivARBPtr?.Invoke(size, weights);
        private delegate void glWeightivARBDel(int  size, int[]  weights);
        private static glWeightivARBDel glWeightivARBPtr;
        
        // glWeightsvARB
        public static void glWeightsvARB(int  size, short[]  weights) => glWeightsvARBPtr?.Invoke(size, weights);
        private delegate void glWeightsvARBDel(int  size, short[]  weights);
        private static glWeightsvARBDel glWeightsvARBPtr;
        
        // glWeightubvARB
        public static void glWeightubvARB(int  size, byte[]  weights) => glWeightubvARBPtr?.Invoke(size, weights);
        private delegate void glWeightubvARBDel(int  size, byte[]  weights);
        private static glWeightubvARBDel glWeightubvARBPtr;
        
        // glWeightuivARB
        public static void glWeightuivARB(int  size, uint[]  weights) => glWeightuivARBPtr?.Invoke(size, weights);
        private delegate void glWeightuivARBDel(int  size, uint[]  weights);
        private static glWeightuivARBDel glWeightuivARBPtr;
        
        // glWeightusvARB
        public static void glWeightusvARB(int  size, ushort[]  weights) => glWeightusvARBPtr?.Invoke(size, weights);
        private delegate void glWeightusvARBDel(int  size, ushort[]  weights);
        private static glWeightusvARBDel glWeightusvARBPtr;
        
        // glWindowPos2d
        public static void glWindowPos2d(double /*CoordD*/  x, double /*CoordD*/  y) => glWindowPos2dPtr?.Invoke(x, y);
        private delegate void glWindowPos2dDel(double /*CoordD*/  x, double /*CoordD*/  y);
        private static glWindowPos2dDel glWindowPos2dPtr;
        
        // glWindowPos2dARB
        public static void glWindowPos2dARB(double /*CoordD*/  x, double /*CoordD*/  y) => glWindowPos2dARBPtr?.Invoke(x, y);
        private delegate void glWindowPos2dARBDel(double /*CoordD*/  x, double /*CoordD*/  y);
        private static glWindowPos2dARBDel glWindowPos2dARBPtr;
        
        // glWindowPos2dMESA
        public static void glWindowPos2dMESA(double /*CoordD*/  x, double /*CoordD*/  y) => glWindowPos2dMESAPtr?.Invoke(x, y);
        private delegate void glWindowPos2dMESADel(double /*CoordD*/  x, double /*CoordD*/  y);
        private static glWindowPos2dMESADel glWindowPos2dMESAPtr;
        
        // glWindowPos2dv
        public static void glWindowPos2dv(double[] /*CoordD*/  v) => glWindowPos2dvPtr?.Invoke(v);
        private delegate void glWindowPos2dvDel(double[] /*CoordD*/  v);
        private static glWindowPos2dvDel glWindowPos2dvPtr;
        
        // glWindowPos2dvARB
        public static void glWindowPos2dvARB(double[] /*CoordD*/  v) => glWindowPos2dvARBPtr?.Invoke(v);
        private delegate void glWindowPos2dvARBDel(double[] /*CoordD*/  v);
        private static glWindowPos2dvARBDel glWindowPos2dvARBPtr;
        
        // glWindowPos2dvMESA
        public static void glWindowPos2dvMESA(double[] /*CoordD*/  v) => glWindowPos2dvMESAPtr?.Invoke(v);
        private delegate void glWindowPos2dvMESADel(double[] /*CoordD*/  v);
        private static glWindowPos2dvMESADel glWindowPos2dvMESAPtr;
        
        // glWindowPos2f
        public static void glWindowPos2f(float /*CoordF*/  x, float /*CoordF*/  y) => glWindowPos2fPtr?.Invoke(x, y);
        private delegate void glWindowPos2fDel(float /*CoordF*/  x, float /*CoordF*/  y);
        private static glWindowPos2fDel glWindowPos2fPtr;
        
        // glWindowPos2fARB
        public static void glWindowPos2fARB(float /*CoordF*/  x, float /*CoordF*/  y) => glWindowPos2fARBPtr?.Invoke(x, y);
        private delegate void glWindowPos2fARBDel(float /*CoordF*/  x, float /*CoordF*/  y);
        private static glWindowPos2fARBDel glWindowPos2fARBPtr;
        
        // glWindowPos2fMESA
        public static void glWindowPos2fMESA(float /*CoordF*/  x, float /*CoordF*/  y) => glWindowPos2fMESAPtr?.Invoke(x, y);
        private delegate void glWindowPos2fMESADel(float /*CoordF*/  x, float /*CoordF*/  y);
        private static glWindowPos2fMESADel glWindowPos2fMESAPtr;
        
        // glWindowPos2fv
        public static void glWindowPos2fv(float[] /*CoordF*/  v) => glWindowPos2fvPtr?.Invoke(v);
        private delegate void glWindowPos2fvDel(float[] /*CoordF*/  v);
        private static glWindowPos2fvDel glWindowPos2fvPtr;
        
        // glWindowPos2fvARB
        public static void glWindowPos2fvARB(float[] /*CoordF*/  v) => glWindowPos2fvARBPtr?.Invoke(v);
        private delegate void glWindowPos2fvARBDel(float[] /*CoordF*/  v);
        private static glWindowPos2fvARBDel glWindowPos2fvARBPtr;
        
        // glWindowPos2fvMESA
        public static void glWindowPos2fvMESA(float[] /*CoordF*/  v) => glWindowPos2fvMESAPtr?.Invoke(v);
        private delegate void glWindowPos2fvMESADel(float[] /*CoordF*/  v);
        private static glWindowPos2fvMESADel glWindowPos2fvMESAPtr;
        
        // glWindowPos2i
        public static void glWindowPos2i(int /*CoordI*/  x, int /*CoordI*/  y) => glWindowPos2iPtr?.Invoke(x, y);
        private delegate void glWindowPos2iDel(int /*CoordI*/  x, int /*CoordI*/  y);
        private static glWindowPos2iDel glWindowPos2iPtr;
        
        // glWindowPos2iARB
        public static void glWindowPos2iARB(int /*CoordI*/  x, int /*CoordI*/  y) => glWindowPos2iARBPtr?.Invoke(x, y);
        private delegate void glWindowPos2iARBDel(int /*CoordI*/  x, int /*CoordI*/  y);
        private static glWindowPos2iARBDel glWindowPos2iARBPtr;
        
        // glWindowPos2iMESA
        public static void glWindowPos2iMESA(int /*CoordI*/  x, int /*CoordI*/  y) => glWindowPos2iMESAPtr?.Invoke(x, y);
        private delegate void glWindowPos2iMESADel(int /*CoordI*/  x, int /*CoordI*/  y);
        private static glWindowPos2iMESADel glWindowPos2iMESAPtr;
        
        // glWindowPos2iv
        public static void glWindowPos2iv(int[] /*CoordI*/  v) => glWindowPos2ivPtr?.Invoke(v);
        private delegate void glWindowPos2ivDel(int[] /*CoordI*/  v);
        private static glWindowPos2ivDel glWindowPos2ivPtr;
        
        // glWindowPos2ivARB
        public static void glWindowPos2ivARB(int[] /*CoordI*/  v) => glWindowPos2ivARBPtr?.Invoke(v);
        private delegate void glWindowPos2ivARBDel(int[] /*CoordI*/  v);
        private static glWindowPos2ivARBDel glWindowPos2ivARBPtr;
        
        // glWindowPos2ivMESA
        public static void glWindowPos2ivMESA(int[] /*CoordI*/  v) => glWindowPos2ivMESAPtr?.Invoke(v);
        private delegate void glWindowPos2ivMESADel(int[] /*CoordI*/  v);
        private static glWindowPos2ivMESADel glWindowPos2ivMESAPtr;
        
        // glWindowPos2s
        public static void glWindowPos2s(short /*CoordS*/  x, short /*CoordS*/  y) => glWindowPos2sPtr?.Invoke(x, y);
        private delegate void glWindowPos2sDel(short /*CoordS*/  x, short /*CoordS*/  y);
        private static glWindowPos2sDel glWindowPos2sPtr;
        
        // glWindowPos2sARB
        public static void glWindowPos2sARB(short /*CoordS*/  x, short /*CoordS*/  y) => glWindowPos2sARBPtr?.Invoke(x, y);
        private delegate void glWindowPos2sARBDel(short /*CoordS*/  x, short /*CoordS*/  y);
        private static glWindowPos2sARBDel glWindowPos2sARBPtr;
        
        // glWindowPos2sMESA
        public static void glWindowPos2sMESA(short /*CoordS*/  x, short /*CoordS*/  y) => glWindowPos2sMESAPtr?.Invoke(x, y);
        private delegate void glWindowPos2sMESADel(short /*CoordS*/  x, short /*CoordS*/  y);
        private static glWindowPos2sMESADel glWindowPos2sMESAPtr;
        
        // glWindowPos2sv
        public static void glWindowPos2sv(short[] /*CoordS*/  v) => glWindowPos2svPtr?.Invoke(v);
        private delegate void glWindowPos2svDel(short[] /*CoordS*/  v);
        private static glWindowPos2svDel glWindowPos2svPtr;
        
        // glWindowPos2svARB
        public static void glWindowPos2svARB(short[] /*CoordS*/  v) => glWindowPos2svARBPtr?.Invoke(v);
        private delegate void glWindowPos2svARBDel(short[] /*CoordS*/  v);
        private static glWindowPos2svARBDel glWindowPos2svARBPtr;
        
        // glWindowPos2svMESA
        public static void glWindowPos2svMESA(short[] /*CoordS*/  v) => glWindowPos2svMESAPtr?.Invoke(v);
        private delegate void glWindowPos2svMESADel(short[] /*CoordS*/  v);
        private static glWindowPos2svMESADel glWindowPos2svMESAPtr;
        
        // glWindowPos3d
        public static void glWindowPos3d(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => glWindowPos3dPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3dDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z);
        private static glWindowPos3dDel glWindowPos3dPtr;
        
        // glWindowPos3dARB
        public static void glWindowPos3dARB(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => glWindowPos3dARBPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3dARBDel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z);
        private static glWindowPos3dARBDel glWindowPos3dARBPtr;
        
        // glWindowPos3dMESA
        public static void glWindowPos3dMESA(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z) => glWindowPos3dMESAPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3dMESADel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z);
        private static glWindowPos3dMESADel glWindowPos3dMESAPtr;
        
        // glWindowPos3dv
        public static void glWindowPos3dv(double[] /*CoordD*/  v) => glWindowPos3dvPtr?.Invoke(v);
        private delegate void glWindowPos3dvDel(double[] /*CoordD*/  v);
        private static glWindowPos3dvDel glWindowPos3dvPtr;
        
        // glWindowPos3dvARB
        public static void glWindowPos3dvARB(double[] /*CoordD*/  v) => glWindowPos3dvARBPtr?.Invoke(v);
        private delegate void glWindowPos3dvARBDel(double[] /*CoordD*/  v);
        private static glWindowPos3dvARBDel glWindowPos3dvARBPtr;
        
        // glWindowPos3dvMESA
        public static void glWindowPos3dvMESA(double[] /*CoordD*/  v) => glWindowPos3dvMESAPtr?.Invoke(v);
        private delegate void glWindowPos3dvMESADel(double[] /*CoordD*/  v);
        private static glWindowPos3dvMESADel glWindowPos3dvMESAPtr;
        
        // glWindowPos3f
        public static void glWindowPos3f(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => glWindowPos3fPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3fDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z);
        private static glWindowPos3fDel glWindowPos3fPtr;
        
        // glWindowPos3fARB
        public static void glWindowPos3fARB(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => glWindowPos3fARBPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3fARBDel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z);
        private static glWindowPos3fARBDel glWindowPos3fARBPtr;
        
        // glWindowPos3fMESA
        public static void glWindowPos3fMESA(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z) => glWindowPos3fMESAPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3fMESADel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z);
        private static glWindowPos3fMESADel glWindowPos3fMESAPtr;
        
        // glWindowPos3fv
        public static void glWindowPos3fv(float[] /*CoordF*/  v) => glWindowPos3fvPtr?.Invoke(v);
        private delegate void glWindowPos3fvDel(float[] /*CoordF*/  v);
        private static glWindowPos3fvDel glWindowPos3fvPtr;
        
        // glWindowPos3fvARB
        public static void glWindowPos3fvARB(float[] /*CoordF*/  v) => glWindowPos3fvARBPtr?.Invoke(v);
        private delegate void glWindowPos3fvARBDel(float[] /*CoordF*/  v);
        private static glWindowPos3fvARBDel glWindowPos3fvARBPtr;
        
        // glWindowPos3fvMESA
        public static void glWindowPos3fvMESA(float[] /*CoordF*/  v) => glWindowPos3fvMESAPtr?.Invoke(v);
        private delegate void glWindowPos3fvMESADel(float[] /*CoordF*/  v);
        private static glWindowPos3fvMESADel glWindowPos3fvMESAPtr;
        
        // glWindowPos3i
        public static void glWindowPos3i(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => glWindowPos3iPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3iDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z);
        private static glWindowPos3iDel glWindowPos3iPtr;
        
        // glWindowPos3iARB
        public static void glWindowPos3iARB(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => glWindowPos3iARBPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3iARBDel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z);
        private static glWindowPos3iARBDel glWindowPos3iARBPtr;
        
        // glWindowPos3iMESA
        public static void glWindowPos3iMESA(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z) => glWindowPos3iMESAPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3iMESADel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z);
        private static glWindowPos3iMESADel glWindowPos3iMESAPtr;
        
        // glWindowPos3iv
        public static void glWindowPos3iv(int[] /*CoordI*/  v) => glWindowPos3ivPtr?.Invoke(v);
        private delegate void glWindowPos3ivDel(int[] /*CoordI*/  v);
        private static glWindowPos3ivDel glWindowPos3ivPtr;
        
        // glWindowPos3ivARB
        public static void glWindowPos3ivARB(int[] /*CoordI*/  v) => glWindowPos3ivARBPtr?.Invoke(v);
        private delegate void glWindowPos3ivARBDel(int[] /*CoordI*/  v);
        private static glWindowPos3ivARBDel glWindowPos3ivARBPtr;
        
        // glWindowPos3ivMESA
        public static void glWindowPos3ivMESA(int[] /*CoordI*/  v) => glWindowPos3ivMESAPtr?.Invoke(v);
        private delegate void glWindowPos3ivMESADel(int[] /*CoordI*/  v);
        private static glWindowPos3ivMESADel glWindowPos3ivMESAPtr;
        
        // glWindowPos3s
        public static void glWindowPos3s(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => glWindowPos3sPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3sDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z);
        private static glWindowPos3sDel glWindowPos3sPtr;
        
        // glWindowPos3sARB
        public static void glWindowPos3sARB(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => glWindowPos3sARBPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3sARBDel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z);
        private static glWindowPos3sARBDel glWindowPos3sARBPtr;
        
        // glWindowPos3sMESA
        public static void glWindowPos3sMESA(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z) => glWindowPos3sMESAPtr?.Invoke(x, y, z);
        private delegate void glWindowPos3sMESADel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z);
        private static glWindowPos3sMESADel glWindowPos3sMESAPtr;
        
        // glWindowPos3sv
        public static void glWindowPos3sv(short[] /*CoordS*/  v) => glWindowPos3svPtr?.Invoke(v);
        private delegate void glWindowPos3svDel(short[] /*CoordS*/  v);
        private static glWindowPos3svDel glWindowPos3svPtr;
        
        // glWindowPos3svARB
        public static void glWindowPos3svARB(short[] /*CoordS*/  v) => glWindowPos3svARBPtr?.Invoke(v);
        private delegate void glWindowPos3svARBDel(short[] /*CoordS*/  v);
        private static glWindowPos3svARBDel glWindowPos3svARBPtr;
        
        // glWindowPos3svMESA
        public static void glWindowPos3svMESA(short[] /*CoordS*/  v) => glWindowPos3svMESAPtr?.Invoke(v);
        private delegate void glWindowPos3svMESADel(short[] /*CoordS*/  v);
        private static glWindowPos3svMESADel glWindowPos3svMESAPtr;
        
        // glWindowPos4dMESA
        public static void glWindowPos4dMESA(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w) => glWindowPos4dMESAPtr?.Invoke(x, y, z, w);
        private delegate void glWindowPos4dMESADel(double /*CoordD*/  x, double /*CoordD*/  y, double /*CoordD*/  z, double /*CoordD*/  w);
        private static glWindowPos4dMESADel glWindowPos4dMESAPtr;
        
        // glWindowPos4dvMESA
        public static void glWindowPos4dvMESA(double[] /*CoordD*/  v) => glWindowPos4dvMESAPtr?.Invoke(v);
        private delegate void glWindowPos4dvMESADel(double[] /*CoordD*/  v);
        private static glWindowPos4dvMESADel glWindowPos4dvMESAPtr;
        
        // glWindowPos4fMESA
        public static void glWindowPos4fMESA(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w) => glWindowPos4fMESAPtr?.Invoke(x, y, z, w);
        private delegate void glWindowPos4fMESADel(float /*CoordF*/  x, float /*CoordF*/  y, float /*CoordF*/  z, float /*CoordF*/  w);
        private static glWindowPos4fMESADel glWindowPos4fMESAPtr;
        
        // glWindowPos4fvMESA
        public static void glWindowPos4fvMESA(float[] /*CoordF*/  v) => glWindowPos4fvMESAPtr?.Invoke(v);
        private delegate void glWindowPos4fvMESADel(float[] /*CoordF*/  v);
        private static glWindowPos4fvMESADel glWindowPos4fvMESAPtr;
        
        // glWindowPos4iMESA
        public static void glWindowPos4iMESA(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w) => glWindowPos4iMESAPtr?.Invoke(x, y, z, w);
        private delegate void glWindowPos4iMESADel(int /*CoordI*/  x, int /*CoordI*/  y, int /*CoordI*/  z, int /*CoordI*/  w);
        private static glWindowPos4iMESADel glWindowPos4iMESAPtr;
        
        // glWindowPos4ivMESA
        public static void glWindowPos4ivMESA(int[] /*CoordI*/  v) => glWindowPos4ivMESAPtr?.Invoke(v);
        private delegate void glWindowPos4ivMESADel(int[] /*CoordI*/  v);
        private static glWindowPos4ivMESADel glWindowPos4ivMESAPtr;
        
        // glWindowPos4sMESA
        public static void glWindowPos4sMESA(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w) => glWindowPos4sMESAPtr?.Invoke(x, y, z, w);
        private delegate void glWindowPos4sMESADel(short /*CoordS*/  x, short /*CoordS*/  y, short /*CoordS*/  z, short /*CoordS*/  w);
        private static glWindowPos4sMESADel glWindowPos4sMESAPtr;
        
        // glWindowPos4svMESA
        public static void glWindowPos4svMESA(short[] /*CoordS*/  v) => glWindowPos4svMESAPtr?.Invoke(v);
        private delegate void glWindowPos4svMESADel(short[] /*CoordS*/  v);
        private static glWindowPos4svMESADel glWindowPos4svMESAPtr;
        
        // glWindowRectanglesEXT
        public static void glWindowRectanglesEXT(uint  mode, uint  count, int[]  box) => glWindowRectanglesEXTPtr?.Invoke(mode, count, box);
        private delegate void glWindowRectanglesEXTDel(uint  mode, uint  count, int[]  box);
        private static glWindowRectanglesEXTDel glWindowRectanglesEXTPtr;
        
        // glWriteMaskEXT
        public static void glWriteMaskEXT(uint  res, uint  inp, uint /*VertexShaderWriteMaskEXT*/  outX, uint /*VertexShaderWriteMaskEXT*/  outY, uint /*VertexShaderWriteMaskEXT*/  outZ, uint /*VertexShaderWriteMaskEXT*/  outW) => glWriteMaskEXTPtr?.Invoke(res, inp, outX, outY, outZ, outW);
        private delegate void glWriteMaskEXTDel(uint  res, uint  inp, uint /*VertexShaderWriteMaskEXT*/  outX, uint /*VertexShaderWriteMaskEXT*/  outY, uint /*VertexShaderWriteMaskEXT*/  outZ, uint /*VertexShaderWriteMaskEXT*/  outW);
        private static glWriteMaskEXTDel glWriteMaskEXTPtr;
        
        // glDrawVkImageNV
        public static void glDrawVkImageNV(ulong  vkImage, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1) => glDrawVkImageNVPtr?.Invoke(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        private delegate void glDrawVkImageNVDel(ulong  vkImage, uint  sampler, float  x0, float  y0, float  x1, float  y1, float  z, float  s0, float  t0, float  s1, float  t1);
        private static glDrawVkImageNVDel glDrawVkImageNVPtr;
        
        // glGetVkProcAddrNV
        public static IntPtr /*GLVULKANPROCNV*/ glGetVkProcAddrNV(string  name) => glGetVkProcAddrNVPtr?.Invoke(name) ?? default;
        private delegate IntPtr /*GLVULKANPROCNV*/ glGetVkProcAddrNVDel(string  name);
        private static glGetVkProcAddrNVDel glGetVkProcAddrNVPtr;
        
        // glWaitVkSemaphoreNV
        public static void glWaitVkSemaphoreNV(ulong  vkSemaphore) => glWaitVkSemaphoreNVPtr?.Invoke(vkSemaphore);
        private delegate void glWaitVkSemaphoreNVDel(ulong  vkSemaphore);
        private static glWaitVkSemaphoreNVDel glWaitVkSemaphoreNVPtr;
        
        // glSignalVkSemaphoreNV
        public static void glSignalVkSemaphoreNV(ulong  vkSemaphore) => glSignalVkSemaphoreNVPtr?.Invoke(vkSemaphore);
        private delegate void glSignalVkSemaphoreNVDel(ulong  vkSemaphore);
        private static glSignalVkSemaphoreNVDel glSignalVkSemaphoreNVPtr;
        
        // glSignalVkFenceNV
        public static void glSignalVkFenceNV(ulong  vkFence) => glSignalVkFenceNVPtr?.Invoke(vkFence);
        private delegate void glSignalVkFenceNVDel(ulong  vkFence);
        private static glSignalVkFenceNVDel glSignalVkFenceNVPtr;
        
        // glFramebufferParameteriMESA
        public static void glFramebufferParameteriMESA(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param) => glFramebufferParameteriMESAPtr?.Invoke(target, pname, param);
        private delegate void glFramebufferParameteriMESADel(uint /*FramebufferTarget*/  target, uint /*FramebufferParameterName*/  pname, int  param);
        private static glFramebufferParameteriMESADel glFramebufferParameteriMESAPtr;
        
        // glGetFramebufferParameterivMESA
        public static void glGetFramebufferParameterivMESA(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters) => glGetFramebufferParameterivMESAPtr?.Invoke(target, pname, parameters);
        private delegate void glGetFramebufferParameterivMESADel(uint /*FramebufferTarget*/  target, uint /*FramebufferAttachmentParameterName*/  pname, int[]  parameters);
        private static glGetFramebufferParameterivMESADel glGetFramebufferParameterivMESAPtr;
        

        #endregion

        #region Loaders

        public static void Init(Func<string,IntPtr> getProcAddress)
        {
            glAccumPtr = LoadProcByName<glAccumDel>("glAccum", getProcAddress);
            glAccumxOESPtr = LoadProcByName<glAccumxOESDel>("glAccumxOES", getProcAddress);
            glActiveProgramEXTPtr = LoadProcByName<glActiveProgramEXTDel>("glActiveProgramEXT", getProcAddress);
            glActiveShaderProgramPtr = LoadProcByName<glActiveShaderProgramDel>("glActiveShaderProgram", getProcAddress);
            glActiveShaderProgramEXTPtr = LoadProcByName<glActiveShaderProgramEXTDel>("glActiveShaderProgramEXT", getProcAddress);
            glActiveStencilFaceEXTPtr = LoadProcByName<glActiveStencilFaceEXTDel>("glActiveStencilFaceEXT", getProcAddress);
            glActiveTexturePtr = LoadProcByName<glActiveTextureDel>("glActiveTexture", getProcAddress);
            glActiveTextureARBPtr = LoadProcByName<glActiveTextureARBDel>("glActiveTextureARB", getProcAddress);
            glActiveVaryingNVPtr = LoadProcByName<glActiveVaryingNVDel>("glActiveVaryingNV", getProcAddress);
            glAlphaFragmentOp1ATIPtr = LoadProcByName<glAlphaFragmentOp1ATIDel>("glAlphaFragmentOp1ATI", getProcAddress);
            glAlphaFragmentOp2ATIPtr = LoadProcByName<glAlphaFragmentOp2ATIDel>("glAlphaFragmentOp2ATI", getProcAddress);
            glAlphaFragmentOp3ATIPtr = LoadProcByName<glAlphaFragmentOp3ATIDel>("glAlphaFragmentOp3ATI", getProcAddress);
            glAlphaFuncPtr = LoadProcByName<glAlphaFuncDel>("glAlphaFunc", getProcAddress);
            glAlphaFuncQCOMPtr = LoadProcByName<glAlphaFuncQCOMDel>("glAlphaFuncQCOM", getProcAddress);
            glAlphaFuncxPtr = LoadProcByName<glAlphaFuncxDel>("glAlphaFuncx", getProcAddress);
            glAlphaFuncxOESPtr = LoadProcByName<glAlphaFuncxOESDel>("glAlphaFuncxOES", getProcAddress);
            glAlphaToCoverageDitherControlNVPtr = LoadProcByName<glAlphaToCoverageDitherControlNVDel>("glAlphaToCoverageDitherControlNV", getProcAddress);
            glApplyFramebufferAttachmentCMAAINTELPtr = LoadProcByName<glApplyFramebufferAttachmentCMAAINTELDel>("glApplyFramebufferAttachmentCMAAINTEL", getProcAddress);
            glApplyTextureEXTPtr = LoadProcByName<glApplyTextureEXTDel>("glApplyTextureEXT", getProcAddress);
            glAcquireKeyedMutexWin32EXTPtr = LoadProcByName<glAcquireKeyedMutexWin32EXTDel>("glAcquireKeyedMutexWin32EXT", getProcAddress);
            glAreProgramsResidentNVPtr = LoadProcByName<glAreProgramsResidentNVDel>("glAreProgramsResidentNV", getProcAddress);
            glAreTexturesResidentPtr = LoadProcByName<glAreTexturesResidentDel>("glAreTexturesResident", getProcAddress);
            glAreTexturesResidentEXTPtr = LoadProcByName<glAreTexturesResidentEXTDel>("glAreTexturesResidentEXT", getProcAddress);
            glArrayElementPtr = LoadProcByName<glArrayElementDel>("glArrayElement", getProcAddress);
            glArrayElementEXTPtr = LoadProcByName<glArrayElementEXTDel>("glArrayElementEXT", getProcAddress);
            glArrayObjectATIPtr = LoadProcByName<glArrayObjectATIDel>("glArrayObjectATI", getProcAddress);
            glAsyncCopyBufferSubDataNVXPtr = LoadProcByName<glAsyncCopyBufferSubDataNVXDel>("glAsyncCopyBufferSubDataNVX", getProcAddress);
            glAsyncCopyImageSubDataNVXPtr = LoadProcByName<glAsyncCopyImageSubDataNVXDel>("glAsyncCopyImageSubDataNVX", getProcAddress);
            glAsyncMarkerSGIXPtr = LoadProcByName<glAsyncMarkerSGIXDel>("glAsyncMarkerSGIX", getProcAddress);
            glAttachObjectARBPtr = LoadProcByName<glAttachObjectARBDel>("glAttachObjectARB", getProcAddress);
            glAttachShaderPtr = LoadProcByName<glAttachShaderDel>("glAttachShader", getProcAddress);
            glBeginPtr = LoadProcByName<glBeginDel>("glBegin", getProcAddress);
            glBeginConditionalRenderPtr = LoadProcByName<glBeginConditionalRenderDel>("glBeginConditionalRender", getProcAddress);
            glBeginConditionalRenderNVPtr = LoadProcByName<glBeginConditionalRenderNVDel>("glBeginConditionalRenderNV", getProcAddress);
            glBeginConditionalRenderNVXPtr = LoadProcByName<glBeginConditionalRenderNVXDel>("glBeginConditionalRenderNVX", getProcAddress);
            glBeginFragmentShaderATIPtr = LoadProcByName<glBeginFragmentShaderATIDel>("glBeginFragmentShaderATI", getProcAddress);
            glBeginOcclusionQueryNVPtr = LoadProcByName<glBeginOcclusionQueryNVDel>("glBeginOcclusionQueryNV", getProcAddress);
            glBeginPerfMonitorAMDPtr = LoadProcByName<glBeginPerfMonitorAMDDel>("glBeginPerfMonitorAMD", getProcAddress);
            glBeginPerfQueryINTELPtr = LoadProcByName<glBeginPerfQueryINTELDel>("glBeginPerfQueryINTEL", getProcAddress);
            glBeginQueryPtr = LoadProcByName<glBeginQueryDel>("glBeginQuery", getProcAddress);
            glBeginQueryARBPtr = LoadProcByName<glBeginQueryARBDel>("glBeginQueryARB", getProcAddress);
            glBeginQueryEXTPtr = LoadProcByName<glBeginQueryEXTDel>("glBeginQueryEXT", getProcAddress);
            glBeginQueryIndexedPtr = LoadProcByName<glBeginQueryIndexedDel>("glBeginQueryIndexed", getProcAddress);
            glBeginTransformFeedbackPtr = LoadProcByName<glBeginTransformFeedbackDel>("glBeginTransformFeedback", getProcAddress);
            glBeginTransformFeedbackEXTPtr = LoadProcByName<glBeginTransformFeedbackEXTDel>("glBeginTransformFeedbackEXT", getProcAddress);
            glBeginTransformFeedbackNVPtr = LoadProcByName<glBeginTransformFeedbackNVDel>("glBeginTransformFeedbackNV", getProcAddress);
            glBeginVertexShaderEXTPtr = LoadProcByName<glBeginVertexShaderEXTDel>("glBeginVertexShaderEXT", getProcAddress);
            glBeginVideoCaptureNVPtr = LoadProcByName<glBeginVideoCaptureNVDel>("glBeginVideoCaptureNV", getProcAddress);
            glBindAttribLocationPtr = LoadProcByName<glBindAttribLocationDel>("glBindAttribLocation", getProcAddress);
            glBindAttribLocationARBPtr = LoadProcByName<glBindAttribLocationARBDel>("glBindAttribLocationARB", getProcAddress);
            glBindBufferPtr = LoadProcByName<glBindBufferDel>("glBindBuffer", getProcAddress);
            glBindBufferARBPtr = LoadProcByName<glBindBufferARBDel>("glBindBufferARB", getProcAddress);
            glBindBufferBasePtr = LoadProcByName<glBindBufferBaseDel>("glBindBufferBase", getProcAddress);
            glBindBufferBaseEXTPtr = LoadProcByName<glBindBufferBaseEXTDel>("glBindBufferBaseEXT", getProcAddress);
            glBindBufferBaseNVPtr = LoadProcByName<glBindBufferBaseNVDel>("glBindBufferBaseNV", getProcAddress);
            glBindBufferOffsetEXTPtr = LoadProcByName<glBindBufferOffsetEXTDel>("glBindBufferOffsetEXT", getProcAddress);
            glBindBufferOffsetNVPtr = LoadProcByName<glBindBufferOffsetNVDel>("glBindBufferOffsetNV", getProcAddress);
            glBindBufferRangePtr = LoadProcByName<glBindBufferRangeDel>("glBindBufferRange", getProcAddress);
            glBindBufferRangeEXTPtr = LoadProcByName<glBindBufferRangeEXTDel>("glBindBufferRangeEXT", getProcAddress);
            glBindBufferRangeNVPtr = LoadProcByName<glBindBufferRangeNVDel>("glBindBufferRangeNV", getProcAddress);
            glBindBuffersBasePtr = LoadProcByName<glBindBuffersBaseDel>("glBindBuffersBase", getProcAddress);
            glBindBuffersRangePtr = LoadProcByName<glBindBuffersRangeDel>("glBindBuffersRange", getProcAddress);
            glBindFragDataLocationPtr = LoadProcByName<glBindFragDataLocationDel>("glBindFragDataLocation", getProcAddress);
            glBindFragDataLocationEXTPtr = LoadProcByName<glBindFragDataLocationEXTDel>("glBindFragDataLocationEXT", getProcAddress);
            glBindFragDataLocationIndexedPtr = LoadProcByName<glBindFragDataLocationIndexedDel>("glBindFragDataLocationIndexed", getProcAddress);
            glBindFragDataLocationIndexedEXTPtr = LoadProcByName<glBindFragDataLocationIndexedEXTDel>("glBindFragDataLocationIndexedEXT", getProcAddress);
            glBindFragmentShaderATIPtr = LoadProcByName<glBindFragmentShaderATIDel>("glBindFragmentShaderATI", getProcAddress);
            glBindFramebufferPtr = LoadProcByName<glBindFramebufferDel>("glBindFramebuffer", getProcAddress);
            glBindFramebufferEXTPtr = LoadProcByName<glBindFramebufferEXTDel>("glBindFramebufferEXT", getProcAddress);
            glBindFramebufferOESPtr = LoadProcByName<glBindFramebufferOESDel>("glBindFramebufferOES", getProcAddress);
            glBindImageTexturePtr = LoadProcByName<glBindImageTextureDel>("glBindImageTexture", getProcAddress);
            glBindImageTextureEXTPtr = LoadProcByName<glBindImageTextureEXTDel>("glBindImageTextureEXT", getProcAddress);
            glBindImageTexturesPtr = LoadProcByName<glBindImageTexturesDel>("glBindImageTextures", getProcAddress);
            glBindLightParameterEXTPtr = LoadProcByName<glBindLightParameterEXTDel>("glBindLightParameterEXT", getProcAddress);
            glBindMaterialParameterEXTPtr = LoadProcByName<glBindMaterialParameterEXTDel>("glBindMaterialParameterEXT", getProcAddress);
            glBindMultiTextureEXTPtr = LoadProcByName<glBindMultiTextureEXTDel>("glBindMultiTextureEXT", getProcAddress);
            glBindParameterEXTPtr = LoadProcByName<glBindParameterEXTDel>("glBindParameterEXT", getProcAddress);
            glBindProgramARBPtr = LoadProcByName<glBindProgramARBDel>("glBindProgramARB", getProcAddress);
            glBindProgramNVPtr = LoadProcByName<glBindProgramNVDel>("glBindProgramNV", getProcAddress);
            glBindProgramPipelinePtr = LoadProcByName<glBindProgramPipelineDel>("glBindProgramPipeline", getProcAddress);
            glBindProgramPipelineEXTPtr = LoadProcByName<glBindProgramPipelineEXTDel>("glBindProgramPipelineEXT", getProcAddress);
            glBindRenderbufferPtr = LoadProcByName<glBindRenderbufferDel>("glBindRenderbuffer", getProcAddress);
            glBindRenderbufferEXTPtr = LoadProcByName<glBindRenderbufferEXTDel>("glBindRenderbufferEXT", getProcAddress);
            glBindRenderbufferOESPtr = LoadProcByName<glBindRenderbufferOESDel>("glBindRenderbufferOES", getProcAddress);
            glBindSamplerPtr = LoadProcByName<glBindSamplerDel>("glBindSampler", getProcAddress);
            glBindSamplersPtr = LoadProcByName<glBindSamplersDel>("glBindSamplers", getProcAddress);
            glBindShadingRateImageNVPtr = LoadProcByName<glBindShadingRateImageNVDel>("glBindShadingRateImageNV", getProcAddress);
            glBindTexGenParameterEXTPtr = LoadProcByName<glBindTexGenParameterEXTDel>("glBindTexGenParameterEXT", getProcAddress);
            glBindTexturePtr = LoadProcByName<glBindTextureDel>("glBindTexture", getProcAddress);
            glBindTextureEXTPtr = LoadProcByName<glBindTextureEXTDel>("glBindTextureEXT", getProcAddress);
            glBindTextureUnitPtr = LoadProcByName<glBindTextureUnitDel>("glBindTextureUnit", getProcAddress);
            glBindTextureUnitParameterEXTPtr = LoadProcByName<glBindTextureUnitParameterEXTDel>("glBindTextureUnitParameterEXT", getProcAddress);
            glBindTexturesPtr = LoadProcByName<glBindTexturesDel>("glBindTextures", getProcAddress);
            glBindTransformFeedbackPtr = LoadProcByName<glBindTransformFeedbackDel>("glBindTransformFeedback", getProcAddress);
            glBindTransformFeedbackNVPtr = LoadProcByName<glBindTransformFeedbackNVDel>("glBindTransformFeedbackNV", getProcAddress);
            glBindVertexArrayPtr = LoadProcByName<glBindVertexArrayDel>("glBindVertexArray", getProcAddress);
            glBindVertexArrayAPPLEPtr = LoadProcByName<glBindVertexArrayAPPLEDel>("glBindVertexArrayAPPLE", getProcAddress);
            glBindVertexArrayOESPtr = LoadProcByName<glBindVertexArrayOESDel>("glBindVertexArrayOES", getProcAddress);
            glBindVertexBufferPtr = LoadProcByName<glBindVertexBufferDel>("glBindVertexBuffer", getProcAddress);
            glBindVertexBuffersPtr = LoadProcByName<glBindVertexBuffersDel>("glBindVertexBuffers", getProcAddress);
            glBindVertexShaderEXTPtr = LoadProcByName<glBindVertexShaderEXTDel>("glBindVertexShaderEXT", getProcAddress);
            glBindVideoCaptureStreamBufferNVPtr = LoadProcByName<glBindVideoCaptureStreamBufferNVDel>("glBindVideoCaptureStreamBufferNV", getProcAddress);
            glBindVideoCaptureStreamTextureNVPtr = LoadProcByName<glBindVideoCaptureStreamTextureNVDel>("glBindVideoCaptureStreamTextureNV", getProcAddress);
            glBinormal3bEXTPtr = LoadProcByName<glBinormal3bEXTDel>("glBinormal3bEXT", getProcAddress);
            glBinormal3bvEXTPtr = LoadProcByName<glBinormal3bvEXTDel>("glBinormal3bvEXT", getProcAddress);
            glBinormal3dEXTPtr = LoadProcByName<glBinormal3dEXTDel>("glBinormal3dEXT", getProcAddress);
            glBinormal3dvEXTPtr = LoadProcByName<glBinormal3dvEXTDel>("glBinormal3dvEXT", getProcAddress);
            glBinormal3fEXTPtr = LoadProcByName<glBinormal3fEXTDel>("glBinormal3fEXT", getProcAddress);
            glBinormal3fvEXTPtr = LoadProcByName<glBinormal3fvEXTDel>("glBinormal3fvEXT", getProcAddress);
            glBinormal3iEXTPtr = LoadProcByName<glBinormal3iEXTDel>("glBinormal3iEXT", getProcAddress);
            glBinormal3ivEXTPtr = LoadProcByName<glBinormal3ivEXTDel>("glBinormal3ivEXT", getProcAddress);
            glBinormal3sEXTPtr = LoadProcByName<glBinormal3sEXTDel>("glBinormal3sEXT", getProcAddress);
            glBinormal3svEXTPtr = LoadProcByName<glBinormal3svEXTDel>("glBinormal3svEXT", getProcAddress);
            glBinormalPointerEXTPtr = LoadProcByName<glBinormalPointerEXTDel>("glBinormalPointerEXT", getProcAddress);
            glBitmapPtr = LoadProcByName<glBitmapDel>("glBitmap", getProcAddress);
            glBitmapxOESPtr = LoadProcByName<glBitmapxOESDel>("glBitmapxOES", getProcAddress);
            glBlendBarrierPtr = LoadProcByName<glBlendBarrierDel>("glBlendBarrier", getProcAddress);
            glBlendBarrierKHRPtr = LoadProcByName<glBlendBarrierKHRDel>("glBlendBarrierKHR", getProcAddress);
            glBlendBarrierNVPtr = LoadProcByName<glBlendBarrierNVDel>("glBlendBarrierNV", getProcAddress);
            glBlendColorPtr = LoadProcByName<glBlendColorDel>("glBlendColor", getProcAddress);
            glBlendColorEXTPtr = LoadProcByName<glBlendColorEXTDel>("glBlendColorEXT", getProcAddress);
            glBlendColorxOESPtr = LoadProcByName<glBlendColorxOESDel>("glBlendColorxOES", getProcAddress);
            glBlendEquationPtr = LoadProcByName<glBlendEquationDel>("glBlendEquation", getProcAddress);
            glBlendEquationEXTPtr = LoadProcByName<glBlendEquationEXTDel>("glBlendEquationEXT", getProcAddress);
            glBlendEquationIndexedAMDPtr = LoadProcByName<glBlendEquationIndexedAMDDel>("glBlendEquationIndexedAMD", getProcAddress);
            glBlendEquationOESPtr = LoadProcByName<glBlendEquationOESDel>("glBlendEquationOES", getProcAddress);
            glBlendEquationSeparatePtr = LoadProcByName<glBlendEquationSeparateDel>("glBlendEquationSeparate", getProcAddress);
            glBlendEquationSeparateEXTPtr = LoadProcByName<glBlendEquationSeparateEXTDel>("glBlendEquationSeparateEXT", getProcAddress);
            glBlendEquationSeparateIndexedAMDPtr = LoadProcByName<glBlendEquationSeparateIndexedAMDDel>("glBlendEquationSeparateIndexedAMD", getProcAddress);
            glBlendEquationSeparateOESPtr = LoadProcByName<glBlendEquationSeparateOESDel>("glBlendEquationSeparateOES", getProcAddress);
            glBlendEquationSeparateiPtr = LoadProcByName<glBlendEquationSeparateiDel>("glBlendEquationSeparatei", getProcAddress);
            glBlendEquationSeparateiARBPtr = LoadProcByName<glBlendEquationSeparateiARBDel>("glBlendEquationSeparateiARB", getProcAddress);
            glBlendEquationSeparateiEXTPtr = LoadProcByName<glBlendEquationSeparateiEXTDel>("glBlendEquationSeparateiEXT", getProcAddress);
            glBlendEquationSeparateiOESPtr = LoadProcByName<glBlendEquationSeparateiOESDel>("glBlendEquationSeparateiOES", getProcAddress);
            glBlendEquationiPtr = LoadProcByName<glBlendEquationiDel>("glBlendEquationi", getProcAddress);
            glBlendEquationiARBPtr = LoadProcByName<glBlendEquationiARBDel>("glBlendEquationiARB", getProcAddress);
            glBlendEquationiEXTPtr = LoadProcByName<glBlendEquationiEXTDel>("glBlendEquationiEXT", getProcAddress);
            glBlendEquationiOESPtr = LoadProcByName<glBlendEquationiOESDel>("glBlendEquationiOES", getProcAddress);
            glBlendFuncPtr = LoadProcByName<glBlendFuncDel>("glBlendFunc", getProcAddress);
            glBlendFuncIndexedAMDPtr = LoadProcByName<glBlendFuncIndexedAMDDel>("glBlendFuncIndexedAMD", getProcAddress);
            glBlendFuncSeparatePtr = LoadProcByName<glBlendFuncSeparateDel>("glBlendFuncSeparate", getProcAddress);
            glBlendFuncSeparateEXTPtr = LoadProcByName<glBlendFuncSeparateEXTDel>("glBlendFuncSeparateEXT", getProcAddress);
            glBlendFuncSeparateINGRPtr = LoadProcByName<glBlendFuncSeparateINGRDel>("glBlendFuncSeparateINGR", getProcAddress);
            glBlendFuncSeparateIndexedAMDPtr = LoadProcByName<glBlendFuncSeparateIndexedAMDDel>("glBlendFuncSeparateIndexedAMD", getProcAddress);
            glBlendFuncSeparateOESPtr = LoadProcByName<glBlendFuncSeparateOESDel>("glBlendFuncSeparateOES", getProcAddress);
            glBlendFuncSeparateiPtr = LoadProcByName<glBlendFuncSeparateiDel>("glBlendFuncSeparatei", getProcAddress);
            glBlendFuncSeparateiARBPtr = LoadProcByName<glBlendFuncSeparateiARBDel>("glBlendFuncSeparateiARB", getProcAddress);
            glBlendFuncSeparateiEXTPtr = LoadProcByName<glBlendFuncSeparateiEXTDel>("glBlendFuncSeparateiEXT", getProcAddress);
            glBlendFuncSeparateiOESPtr = LoadProcByName<glBlendFuncSeparateiOESDel>("glBlendFuncSeparateiOES", getProcAddress);
            glBlendFunciPtr = LoadProcByName<glBlendFunciDel>("glBlendFunci", getProcAddress);
            glBlendFunciARBPtr = LoadProcByName<glBlendFunciARBDel>("glBlendFunciARB", getProcAddress);
            glBlendFunciEXTPtr = LoadProcByName<glBlendFunciEXTDel>("glBlendFunciEXT", getProcAddress);
            glBlendFunciOESPtr = LoadProcByName<glBlendFunciOESDel>("glBlendFunciOES", getProcAddress);
            glBlendParameteriNVPtr = LoadProcByName<glBlendParameteriNVDel>("glBlendParameteriNV", getProcAddress);
            glBlitFramebufferPtr = LoadProcByName<glBlitFramebufferDel>("glBlitFramebuffer", getProcAddress);
            glBlitFramebufferANGLEPtr = LoadProcByName<glBlitFramebufferANGLEDel>("glBlitFramebufferANGLE", getProcAddress);
            glBlitFramebufferEXTPtr = LoadProcByName<glBlitFramebufferEXTDel>("glBlitFramebufferEXT", getProcAddress);
            glBlitFramebufferNVPtr = LoadProcByName<glBlitFramebufferNVDel>("glBlitFramebufferNV", getProcAddress);
            glBlitNamedFramebufferPtr = LoadProcByName<glBlitNamedFramebufferDel>("glBlitNamedFramebuffer", getProcAddress);
            glBufferAddressRangeNVPtr = LoadProcByName<glBufferAddressRangeNVDel>("glBufferAddressRangeNV", getProcAddress);
            glBufferAttachMemoryNVPtr = LoadProcByName<glBufferAttachMemoryNVDel>("glBufferAttachMemoryNV", getProcAddress);
            glBufferDataPtr = LoadProcByName<glBufferDataDel>("glBufferData", getProcAddress);
            glBufferDataARBPtr = LoadProcByName<glBufferDataARBDel>("glBufferDataARB", getProcAddress);
            glBufferPageCommitmentARBPtr = LoadProcByName<glBufferPageCommitmentARBDel>("glBufferPageCommitmentARB", getProcAddress);
            glBufferParameteriAPPLEPtr = LoadProcByName<glBufferParameteriAPPLEDel>("glBufferParameteriAPPLE", getProcAddress);
            glBufferStoragePtr = LoadProcByName<glBufferStorageDel>("glBufferStorage", getProcAddress);
            glBufferStorageEXTPtr = LoadProcByName<glBufferStorageEXTDel>("glBufferStorageEXT", getProcAddress);
            glBufferStorageExternalEXTPtr = LoadProcByName<glBufferStorageExternalEXTDel>("glBufferStorageExternalEXT", getProcAddress);
            glBufferStorageMemEXTPtr = LoadProcByName<glBufferStorageMemEXTDel>("glBufferStorageMemEXT", getProcAddress);
            glBufferSubDataPtr = LoadProcByName<glBufferSubDataDel>("glBufferSubData", getProcAddress);
            glBufferSubDataARBPtr = LoadProcByName<glBufferSubDataARBDel>("glBufferSubDataARB", getProcAddress);
            glCallCommandListNVPtr = LoadProcByName<glCallCommandListNVDel>("glCallCommandListNV", getProcAddress);
            glCallListPtr = LoadProcByName<glCallListDel>("glCallList", getProcAddress);
            glCallListsPtr = LoadProcByName<glCallListsDel>("glCallLists", getProcAddress);
            glCheckFramebufferStatusPtr = LoadProcByName<glCheckFramebufferStatusDel>("glCheckFramebufferStatus", getProcAddress);
            glCheckFramebufferStatusEXTPtr = LoadProcByName<glCheckFramebufferStatusEXTDel>("glCheckFramebufferStatusEXT", getProcAddress);
            glCheckFramebufferStatusOESPtr = LoadProcByName<glCheckFramebufferStatusOESDel>("glCheckFramebufferStatusOES", getProcAddress);
            glCheckNamedFramebufferStatusPtr = LoadProcByName<glCheckNamedFramebufferStatusDel>("glCheckNamedFramebufferStatus", getProcAddress);
            glCheckNamedFramebufferStatusEXTPtr = LoadProcByName<glCheckNamedFramebufferStatusEXTDel>("glCheckNamedFramebufferStatusEXT", getProcAddress);
            glClampColorPtr = LoadProcByName<glClampColorDel>("glClampColor", getProcAddress);
            glClampColorARBPtr = LoadProcByName<glClampColorARBDel>("glClampColorARB", getProcAddress);
            glClearPtr = LoadProcByName<glClearDel>("glClear", getProcAddress);
            glClearAccumPtr = LoadProcByName<glClearAccumDel>("glClearAccum", getProcAddress);
            glClearAccumxOESPtr = LoadProcByName<glClearAccumxOESDel>("glClearAccumxOES", getProcAddress);
            glClearBufferDataPtr = LoadProcByName<glClearBufferDataDel>("glClearBufferData", getProcAddress);
            glClearBufferSubDataPtr = LoadProcByName<glClearBufferSubDataDel>("glClearBufferSubData", getProcAddress);
            glClearBufferfiPtr = LoadProcByName<glClearBufferfiDel>("glClearBufferfi", getProcAddress);
            glClearBufferfvPtr = LoadProcByName<glClearBufferfvDel>("glClearBufferfv", getProcAddress);
            glClearBufferivPtr = LoadProcByName<glClearBufferivDel>("glClearBufferiv", getProcAddress);
            glClearBufferuivPtr = LoadProcByName<glClearBufferuivDel>("glClearBufferuiv", getProcAddress);
            glClearColorPtr = LoadProcByName<glClearColorDel>("glClearColor", getProcAddress);
            glClearColorIiEXTPtr = LoadProcByName<glClearColorIiEXTDel>("glClearColorIiEXT", getProcAddress);
            glClearColorIuiEXTPtr = LoadProcByName<glClearColorIuiEXTDel>("glClearColorIuiEXT", getProcAddress);
            glClearColorxPtr = LoadProcByName<glClearColorxDel>("glClearColorx", getProcAddress);
            glClearColorxOESPtr = LoadProcByName<glClearColorxOESDel>("glClearColorxOES", getProcAddress);
            glClearDepthPtr = LoadProcByName<glClearDepthDel>("glClearDepth", getProcAddress);
            glClearDepthdNVPtr = LoadProcByName<glClearDepthdNVDel>("glClearDepthdNV", getProcAddress);
            glClearDepthfPtr = LoadProcByName<glClearDepthfDel>("glClearDepthf", getProcAddress);
            glClearDepthfOESPtr = LoadProcByName<glClearDepthfOESDel>("glClearDepthfOES", getProcAddress);
            glClearDepthxPtr = LoadProcByName<glClearDepthxDel>("glClearDepthx", getProcAddress);
            glClearDepthxOESPtr = LoadProcByName<glClearDepthxOESDel>("glClearDepthxOES", getProcAddress);
            glClearIndexPtr = LoadProcByName<glClearIndexDel>("glClearIndex", getProcAddress);
            glClearNamedBufferDataPtr = LoadProcByName<glClearNamedBufferDataDel>("glClearNamedBufferData", getProcAddress);
            glClearNamedBufferDataEXTPtr = LoadProcByName<glClearNamedBufferDataEXTDel>("glClearNamedBufferDataEXT", getProcAddress);
            glClearNamedBufferSubDataPtr = LoadProcByName<glClearNamedBufferSubDataDel>("glClearNamedBufferSubData", getProcAddress);
            glClearNamedBufferSubDataEXTPtr = LoadProcByName<glClearNamedBufferSubDataEXTDel>("glClearNamedBufferSubDataEXT", getProcAddress);
            glClearNamedFramebufferfiPtr = LoadProcByName<glClearNamedFramebufferfiDel>("glClearNamedFramebufferfi", getProcAddress);
            glClearNamedFramebufferfvPtr = LoadProcByName<glClearNamedFramebufferfvDel>("glClearNamedFramebufferfv", getProcAddress);
            glClearNamedFramebufferivPtr = LoadProcByName<glClearNamedFramebufferivDel>("glClearNamedFramebufferiv", getProcAddress);
            glClearNamedFramebufferuivPtr = LoadProcByName<glClearNamedFramebufferuivDel>("glClearNamedFramebufferuiv", getProcAddress);
            glClearPixelLocalStorageuiEXTPtr = LoadProcByName<glClearPixelLocalStorageuiEXTDel>("glClearPixelLocalStorageuiEXT", getProcAddress);
            glClearStencilPtr = LoadProcByName<glClearStencilDel>("glClearStencil", getProcAddress);
            glClearTexImagePtr = LoadProcByName<glClearTexImageDel>("glClearTexImage", getProcAddress);
            glClearTexImageEXTPtr = LoadProcByName<glClearTexImageEXTDel>("glClearTexImageEXT", getProcAddress);
            glClearTexSubImagePtr = LoadProcByName<glClearTexSubImageDel>("glClearTexSubImage", getProcAddress);
            glClearTexSubImageEXTPtr = LoadProcByName<glClearTexSubImageEXTDel>("glClearTexSubImageEXT", getProcAddress);
            glClientActiveTexturePtr = LoadProcByName<glClientActiveTextureDel>("glClientActiveTexture", getProcAddress);
            glClientActiveTextureARBPtr = LoadProcByName<glClientActiveTextureARBDel>("glClientActiveTextureARB", getProcAddress);
            glClientActiveVertexStreamATIPtr = LoadProcByName<glClientActiveVertexStreamATIDel>("glClientActiveVertexStreamATI", getProcAddress);
            glClientAttribDefaultEXTPtr = LoadProcByName<glClientAttribDefaultEXTDel>("glClientAttribDefaultEXT", getProcAddress);
            glClientWaitSemaphoreui64NVXPtr = LoadProcByName<glClientWaitSemaphoreui64NVXDel>("glClientWaitSemaphoreui64NVX", getProcAddress);
            glClientWaitSyncPtr = LoadProcByName<glClientWaitSyncDel>("glClientWaitSync", getProcAddress);
            glClientWaitSyncAPPLEPtr = LoadProcByName<glClientWaitSyncAPPLEDel>("glClientWaitSyncAPPLE", getProcAddress);
            glClipControlPtr = LoadProcByName<glClipControlDel>("glClipControl", getProcAddress);
            glClipControlEXTPtr = LoadProcByName<glClipControlEXTDel>("glClipControlEXT", getProcAddress);
            glClipPlanePtr = LoadProcByName<glClipPlaneDel>("glClipPlane", getProcAddress);
            glClipPlanefPtr = LoadProcByName<glClipPlanefDel>("glClipPlanef", getProcAddress);
            glClipPlanefIMGPtr = LoadProcByName<glClipPlanefIMGDel>("glClipPlanefIMG", getProcAddress);
            glClipPlanefOESPtr = LoadProcByName<glClipPlanefOESDel>("glClipPlanefOES", getProcAddress);
            glClipPlanexPtr = LoadProcByName<glClipPlanexDel>("glClipPlanex", getProcAddress);
            glClipPlanexIMGPtr = LoadProcByName<glClipPlanexIMGDel>("glClipPlanexIMG", getProcAddress);
            glClipPlanexOESPtr = LoadProcByName<glClipPlanexOESDel>("glClipPlanexOES", getProcAddress);
            glColor3bPtr = LoadProcByName<glColor3bDel>("glColor3b", getProcAddress);
            glColor3bvPtr = LoadProcByName<glColor3bvDel>("glColor3bv", getProcAddress);
            glColor3dPtr = LoadProcByName<glColor3dDel>("glColor3d", getProcAddress);
            glColor3dvPtr = LoadProcByName<glColor3dvDel>("glColor3dv", getProcAddress);
            glColor3fPtr = LoadProcByName<glColor3fDel>("glColor3f", getProcAddress);
            glColor3fVertex3fSUNPtr = LoadProcByName<glColor3fVertex3fSUNDel>("glColor3fVertex3fSUN", getProcAddress);
            glColor3fVertex3fvSUNPtr = LoadProcByName<glColor3fVertex3fvSUNDel>("glColor3fVertex3fvSUN", getProcAddress);
            glColor3fvPtr = LoadProcByName<glColor3fvDel>("glColor3fv", getProcAddress);
            glColor3hNVPtr = LoadProcByName<glColor3hNVDel>("glColor3hNV", getProcAddress);
            glColor3hvNVPtr = LoadProcByName<glColor3hvNVDel>("glColor3hvNV", getProcAddress);
            glColor3iPtr = LoadProcByName<glColor3iDel>("glColor3i", getProcAddress);
            glColor3ivPtr = LoadProcByName<glColor3ivDel>("glColor3iv", getProcAddress);
            glColor3sPtr = LoadProcByName<glColor3sDel>("glColor3s", getProcAddress);
            glColor3svPtr = LoadProcByName<glColor3svDel>("glColor3sv", getProcAddress);
            glColor3ubPtr = LoadProcByName<glColor3ubDel>("glColor3ub", getProcAddress);
            glColor3ubvPtr = LoadProcByName<glColor3ubvDel>("glColor3ubv", getProcAddress);
            glColor3uiPtr = LoadProcByName<glColor3uiDel>("glColor3ui", getProcAddress);
            glColor3uivPtr = LoadProcByName<glColor3uivDel>("glColor3uiv", getProcAddress);
            glColor3usPtr = LoadProcByName<glColor3usDel>("glColor3us", getProcAddress);
            glColor3usvPtr = LoadProcByName<glColor3usvDel>("glColor3usv", getProcAddress);
            glColor3xOESPtr = LoadProcByName<glColor3xOESDel>("glColor3xOES", getProcAddress);
            glColor3xvOESPtr = LoadProcByName<glColor3xvOESDel>("glColor3xvOES", getProcAddress);
            glColor4bPtr = LoadProcByName<glColor4bDel>("glColor4b", getProcAddress);
            glColor4bvPtr = LoadProcByName<glColor4bvDel>("glColor4bv", getProcAddress);
            glColor4dPtr = LoadProcByName<glColor4dDel>("glColor4d", getProcAddress);
            glColor4dvPtr = LoadProcByName<glColor4dvDel>("glColor4dv", getProcAddress);
            glColor4fPtr = LoadProcByName<glColor4fDel>("glColor4f", getProcAddress);
            glColor4fNormal3fVertex3fSUNPtr = LoadProcByName<glColor4fNormal3fVertex3fSUNDel>("glColor4fNormal3fVertex3fSUN", getProcAddress);
            glColor4fNormal3fVertex3fvSUNPtr = LoadProcByName<glColor4fNormal3fVertex3fvSUNDel>("glColor4fNormal3fVertex3fvSUN", getProcAddress);
            glColor4fvPtr = LoadProcByName<glColor4fvDel>("glColor4fv", getProcAddress);
            glColor4hNVPtr = LoadProcByName<glColor4hNVDel>("glColor4hNV", getProcAddress);
            glColor4hvNVPtr = LoadProcByName<glColor4hvNVDel>("glColor4hvNV", getProcAddress);
            glColor4iPtr = LoadProcByName<glColor4iDel>("glColor4i", getProcAddress);
            glColor4ivPtr = LoadProcByName<glColor4ivDel>("glColor4iv", getProcAddress);
            glColor4sPtr = LoadProcByName<glColor4sDel>("glColor4s", getProcAddress);
            glColor4svPtr = LoadProcByName<glColor4svDel>("glColor4sv", getProcAddress);
            glColor4ubPtr = LoadProcByName<glColor4ubDel>("glColor4ub", getProcAddress);
            glColor4ubVertex2fSUNPtr = LoadProcByName<glColor4ubVertex2fSUNDel>("glColor4ubVertex2fSUN", getProcAddress);
            glColor4ubVertex2fvSUNPtr = LoadProcByName<glColor4ubVertex2fvSUNDel>("glColor4ubVertex2fvSUN", getProcAddress);
            glColor4ubVertex3fSUNPtr = LoadProcByName<glColor4ubVertex3fSUNDel>("glColor4ubVertex3fSUN", getProcAddress);
            glColor4ubVertex3fvSUNPtr = LoadProcByName<glColor4ubVertex3fvSUNDel>("glColor4ubVertex3fvSUN", getProcAddress);
            glColor4ubvPtr = LoadProcByName<glColor4ubvDel>("glColor4ubv", getProcAddress);
            glColor4uiPtr = LoadProcByName<glColor4uiDel>("glColor4ui", getProcAddress);
            glColor4uivPtr = LoadProcByName<glColor4uivDel>("glColor4uiv", getProcAddress);
            glColor4usPtr = LoadProcByName<glColor4usDel>("glColor4us", getProcAddress);
            glColor4usvPtr = LoadProcByName<glColor4usvDel>("glColor4usv", getProcAddress);
            glColor4xPtr = LoadProcByName<glColor4xDel>("glColor4x", getProcAddress);
            glColor4xOESPtr = LoadProcByName<glColor4xOESDel>("glColor4xOES", getProcAddress);
            glColor4xvOESPtr = LoadProcByName<glColor4xvOESDel>("glColor4xvOES", getProcAddress);
            glColorFormatNVPtr = LoadProcByName<glColorFormatNVDel>("glColorFormatNV", getProcAddress);
            glColorFragmentOp1ATIPtr = LoadProcByName<glColorFragmentOp1ATIDel>("glColorFragmentOp1ATI", getProcAddress);
            glColorFragmentOp2ATIPtr = LoadProcByName<glColorFragmentOp2ATIDel>("glColorFragmentOp2ATI", getProcAddress);
            glColorFragmentOp3ATIPtr = LoadProcByName<glColorFragmentOp3ATIDel>("glColorFragmentOp3ATI", getProcAddress);
            glColorMaskPtr = LoadProcByName<glColorMaskDel>("glColorMask", getProcAddress);
            glColorMaskIndexedEXTPtr = LoadProcByName<glColorMaskIndexedEXTDel>("glColorMaskIndexedEXT", getProcAddress);
            glColorMaskiPtr = LoadProcByName<glColorMaskiDel>("glColorMaski", getProcAddress);
            glColorMaskiEXTPtr = LoadProcByName<glColorMaskiEXTDel>("glColorMaskiEXT", getProcAddress);
            glColorMaskiOESPtr = LoadProcByName<glColorMaskiOESDel>("glColorMaskiOES", getProcAddress);
            glColorMaterialPtr = LoadProcByName<glColorMaterialDel>("glColorMaterial", getProcAddress);
            glColorP3uiPtr = LoadProcByName<glColorP3uiDel>("glColorP3ui", getProcAddress);
            glColorP3uivPtr = LoadProcByName<glColorP3uivDel>("glColorP3uiv", getProcAddress);
            glColorP4uiPtr = LoadProcByName<glColorP4uiDel>("glColorP4ui", getProcAddress);
            glColorP4uivPtr = LoadProcByName<glColorP4uivDel>("glColorP4uiv", getProcAddress);
            glColorPointerPtr = LoadProcByName<glColorPointerDel>("glColorPointer", getProcAddress);
            glColorPointerEXTPtr = LoadProcByName<glColorPointerEXTDel>("glColorPointerEXT", getProcAddress);
            glColorPointerListIBMPtr = LoadProcByName<glColorPointerListIBMDel>("glColorPointerListIBM", getProcAddress);
            glColorPointervINTELPtr = LoadProcByName<glColorPointervINTELDel>("glColorPointervINTEL", getProcAddress);
            glColorSubTablePtr = LoadProcByName<glColorSubTableDel>("glColorSubTable", getProcAddress);
            glColorSubTableEXTPtr = LoadProcByName<glColorSubTableEXTDel>("glColorSubTableEXT", getProcAddress);
            glColorTablePtr = LoadProcByName<glColorTableDel>("glColorTable", getProcAddress);
            glColorTableEXTPtr = LoadProcByName<glColorTableEXTDel>("glColorTableEXT", getProcAddress);
            glColorTableParameterfvPtr = LoadProcByName<glColorTableParameterfvDel>("glColorTableParameterfv", getProcAddress);
            glColorTableParameterfvSGIPtr = LoadProcByName<glColorTableParameterfvSGIDel>("glColorTableParameterfvSGI", getProcAddress);
            glColorTableParameterivPtr = LoadProcByName<glColorTableParameterivDel>("glColorTableParameteriv", getProcAddress);
            glColorTableParameterivSGIPtr = LoadProcByName<glColorTableParameterivSGIDel>("glColorTableParameterivSGI", getProcAddress);
            glColorTableSGIPtr = LoadProcByName<glColorTableSGIDel>("glColorTableSGI", getProcAddress);
            glCombinerInputNVPtr = LoadProcByName<glCombinerInputNVDel>("glCombinerInputNV", getProcAddress);
            glCombinerOutputNVPtr = LoadProcByName<glCombinerOutputNVDel>("glCombinerOutputNV", getProcAddress);
            glCombinerParameterfNVPtr = LoadProcByName<glCombinerParameterfNVDel>("glCombinerParameterfNV", getProcAddress);
            glCombinerParameterfvNVPtr = LoadProcByName<glCombinerParameterfvNVDel>("glCombinerParameterfvNV", getProcAddress);
            glCombinerParameteriNVPtr = LoadProcByName<glCombinerParameteriNVDel>("glCombinerParameteriNV", getProcAddress);
            glCombinerParameterivNVPtr = LoadProcByName<glCombinerParameterivNVDel>("glCombinerParameterivNV", getProcAddress);
            glCombinerStageParameterfvNVPtr = LoadProcByName<glCombinerStageParameterfvNVDel>("glCombinerStageParameterfvNV", getProcAddress);
            glCommandListSegmentsNVPtr = LoadProcByName<glCommandListSegmentsNVDel>("glCommandListSegmentsNV", getProcAddress);
            glCompileCommandListNVPtr = LoadProcByName<glCompileCommandListNVDel>("glCompileCommandListNV", getProcAddress);
            glCompileShaderPtr = LoadProcByName<glCompileShaderDel>("glCompileShader", getProcAddress);
            glCompileShaderARBPtr = LoadProcByName<glCompileShaderARBDel>("glCompileShaderARB", getProcAddress);
            glCompileShaderIncludeARBPtr = LoadProcByName<glCompileShaderIncludeARBDel>("glCompileShaderIncludeARB", getProcAddress);
            glCompressedMultiTexImage1DEXTPtr = LoadProcByName<glCompressedMultiTexImage1DEXTDel>("glCompressedMultiTexImage1DEXT", getProcAddress);
            glCompressedMultiTexImage2DEXTPtr = LoadProcByName<glCompressedMultiTexImage2DEXTDel>("glCompressedMultiTexImage2DEXT", getProcAddress);
            glCompressedMultiTexImage3DEXTPtr = LoadProcByName<glCompressedMultiTexImage3DEXTDel>("glCompressedMultiTexImage3DEXT", getProcAddress);
            glCompressedMultiTexSubImage1DEXTPtr = LoadProcByName<glCompressedMultiTexSubImage1DEXTDel>("glCompressedMultiTexSubImage1DEXT", getProcAddress);
            glCompressedMultiTexSubImage2DEXTPtr = LoadProcByName<glCompressedMultiTexSubImage2DEXTDel>("glCompressedMultiTexSubImage2DEXT", getProcAddress);
            glCompressedMultiTexSubImage3DEXTPtr = LoadProcByName<glCompressedMultiTexSubImage3DEXTDel>("glCompressedMultiTexSubImage3DEXT", getProcAddress);
            glCompressedTexImage1DPtr = LoadProcByName<glCompressedTexImage1DDel>("glCompressedTexImage1D", getProcAddress);
            glCompressedTexImage1DARBPtr = LoadProcByName<glCompressedTexImage1DARBDel>("glCompressedTexImage1DARB", getProcAddress);
            glCompressedTexImage2DPtr = LoadProcByName<glCompressedTexImage2DDel>("glCompressedTexImage2D", getProcAddress);
            glCompressedTexImage2DARBPtr = LoadProcByName<glCompressedTexImage2DARBDel>("glCompressedTexImage2DARB", getProcAddress);
            glCompressedTexImage3DPtr = LoadProcByName<glCompressedTexImage3DDel>("glCompressedTexImage3D", getProcAddress);
            glCompressedTexImage3DARBPtr = LoadProcByName<glCompressedTexImage3DARBDel>("glCompressedTexImage3DARB", getProcAddress);
            glCompressedTexImage3DOESPtr = LoadProcByName<glCompressedTexImage3DOESDel>("glCompressedTexImage3DOES", getProcAddress);
            glCompressedTexSubImage1DPtr = LoadProcByName<glCompressedTexSubImage1DDel>("glCompressedTexSubImage1D", getProcAddress);
            glCompressedTexSubImage1DARBPtr = LoadProcByName<glCompressedTexSubImage1DARBDel>("glCompressedTexSubImage1DARB", getProcAddress);
            glCompressedTexSubImage2DPtr = LoadProcByName<glCompressedTexSubImage2DDel>("glCompressedTexSubImage2D", getProcAddress);
            glCompressedTexSubImage2DARBPtr = LoadProcByName<glCompressedTexSubImage2DARBDel>("glCompressedTexSubImage2DARB", getProcAddress);
            glCompressedTexSubImage3DPtr = LoadProcByName<glCompressedTexSubImage3DDel>("glCompressedTexSubImage3D", getProcAddress);
            glCompressedTexSubImage3DARBPtr = LoadProcByName<glCompressedTexSubImage3DARBDel>("glCompressedTexSubImage3DARB", getProcAddress);
            glCompressedTexSubImage3DOESPtr = LoadProcByName<glCompressedTexSubImage3DOESDel>("glCompressedTexSubImage3DOES", getProcAddress);
            glCompressedTextureImage1DEXTPtr = LoadProcByName<glCompressedTextureImage1DEXTDel>("glCompressedTextureImage1DEXT", getProcAddress);
            glCompressedTextureImage2DEXTPtr = LoadProcByName<glCompressedTextureImage2DEXTDel>("glCompressedTextureImage2DEXT", getProcAddress);
            glCompressedTextureImage3DEXTPtr = LoadProcByName<glCompressedTextureImage3DEXTDel>("glCompressedTextureImage3DEXT", getProcAddress);
            glCompressedTextureSubImage1DPtr = LoadProcByName<glCompressedTextureSubImage1DDel>("glCompressedTextureSubImage1D", getProcAddress);
            glCompressedTextureSubImage1DEXTPtr = LoadProcByName<glCompressedTextureSubImage1DEXTDel>("glCompressedTextureSubImage1DEXT", getProcAddress);
            glCompressedTextureSubImage2DPtr = LoadProcByName<glCompressedTextureSubImage2DDel>("glCompressedTextureSubImage2D", getProcAddress);
            glCompressedTextureSubImage2DEXTPtr = LoadProcByName<glCompressedTextureSubImage2DEXTDel>("glCompressedTextureSubImage2DEXT", getProcAddress);
            glCompressedTextureSubImage3DPtr = LoadProcByName<glCompressedTextureSubImage3DDel>("glCompressedTextureSubImage3D", getProcAddress);
            glCompressedTextureSubImage3DEXTPtr = LoadProcByName<glCompressedTextureSubImage3DEXTDel>("glCompressedTextureSubImage3DEXT", getProcAddress);
            glConservativeRasterParameterfNVPtr = LoadProcByName<glConservativeRasterParameterfNVDel>("glConservativeRasterParameterfNV", getProcAddress);
            glConservativeRasterParameteriNVPtr = LoadProcByName<glConservativeRasterParameteriNVDel>("glConservativeRasterParameteriNV", getProcAddress);
            glConvolutionFilter1DPtr = LoadProcByName<glConvolutionFilter1DDel>("glConvolutionFilter1D", getProcAddress);
            glConvolutionFilter1DEXTPtr = LoadProcByName<glConvolutionFilter1DEXTDel>("glConvolutionFilter1DEXT", getProcAddress);
            glConvolutionFilter2DPtr = LoadProcByName<glConvolutionFilter2DDel>("glConvolutionFilter2D", getProcAddress);
            glConvolutionFilter2DEXTPtr = LoadProcByName<glConvolutionFilter2DEXTDel>("glConvolutionFilter2DEXT", getProcAddress);
            glConvolutionParameterfPtr = LoadProcByName<glConvolutionParameterfDel>("glConvolutionParameterf", getProcAddress);
            glConvolutionParameterfEXTPtr = LoadProcByName<glConvolutionParameterfEXTDel>("glConvolutionParameterfEXT", getProcAddress);
            glConvolutionParameterfvPtr = LoadProcByName<glConvolutionParameterfvDel>("glConvolutionParameterfv", getProcAddress);
            glConvolutionParameterfvEXTPtr = LoadProcByName<glConvolutionParameterfvEXTDel>("glConvolutionParameterfvEXT", getProcAddress);
            glConvolutionParameteriPtr = LoadProcByName<glConvolutionParameteriDel>("glConvolutionParameteri", getProcAddress);
            glConvolutionParameteriEXTPtr = LoadProcByName<glConvolutionParameteriEXTDel>("glConvolutionParameteriEXT", getProcAddress);
            glConvolutionParameterivPtr = LoadProcByName<glConvolutionParameterivDel>("glConvolutionParameteriv", getProcAddress);
            glConvolutionParameterivEXTPtr = LoadProcByName<glConvolutionParameterivEXTDel>("glConvolutionParameterivEXT", getProcAddress);
            glConvolutionParameterxOESPtr = LoadProcByName<glConvolutionParameterxOESDel>("glConvolutionParameterxOES", getProcAddress);
            glConvolutionParameterxvOESPtr = LoadProcByName<glConvolutionParameterxvOESDel>("glConvolutionParameterxvOES", getProcAddress);
            glCopyBufferSubDataPtr = LoadProcByName<glCopyBufferSubDataDel>("glCopyBufferSubData", getProcAddress);
            glCopyBufferSubDataNVPtr = LoadProcByName<glCopyBufferSubDataNVDel>("glCopyBufferSubDataNV", getProcAddress);
            glCopyColorSubTablePtr = LoadProcByName<glCopyColorSubTableDel>("glCopyColorSubTable", getProcAddress);
            glCopyColorSubTableEXTPtr = LoadProcByName<glCopyColorSubTableEXTDel>("glCopyColorSubTableEXT", getProcAddress);
            glCopyColorTablePtr = LoadProcByName<glCopyColorTableDel>("glCopyColorTable", getProcAddress);
            glCopyColorTableSGIPtr = LoadProcByName<glCopyColorTableSGIDel>("glCopyColorTableSGI", getProcAddress);
            glCopyConvolutionFilter1DPtr = LoadProcByName<glCopyConvolutionFilter1DDel>("glCopyConvolutionFilter1D", getProcAddress);
            glCopyConvolutionFilter1DEXTPtr = LoadProcByName<glCopyConvolutionFilter1DEXTDel>("glCopyConvolutionFilter1DEXT", getProcAddress);
            glCopyConvolutionFilter2DPtr = LoadProcByName<glCopyConvolutionFilter2DDel>("glCopyConvolutionFilter2D", getProcAddress);
            glCopyConvolutionFilter2DEXTPtr = LoadProcByName<glCopyConvolutionFilter2DEXTDel>("glCopyConvolutionFilter2DEXT", getProcAddress);
            glCopyImageSubDataPtr = LoadProcByName<glCopyImageSubDataDel>("glCopyImageSubData", getProcAddress);
            glCopyImageSubDataEXTPtr = LoadProcByName<glCopyImageSubDataEXTDel>("glCopyImageSubDataEXT", getProcAddress);
            glCopyImageSubDataNVPtr = LoadProcByName<glCopyImageSubDataNVDel>("glCopyImageSubDataNV", getProcAddress);
            glCopyImageSubDataOESPtr = LoadProcByName<glCopyImageSubDataOESDel>("glCopyImageSubDataOES", getProcAddress);
            glCopyMultiTexImage1DEXTPtr = LoadProcByName<glCopyMultiTexImage1DEXTDel>("glCopyMultiTexImage1DEXT", getProcAddress);
            glCopyMultiTexImage2DEXTPtr = LoadProcByName<glCopyMultiTexImage2DEXTDel>("glCopyMultiTexImage2DEXT", getProcAddress);
            glCopyMultiTexSubImage1DEXTPtr = LoadProcByName<glCopyMultiTexSubImage1DEXTDel>("glCopyMultiTexSubImage1DEXT", getProcAddress);
            glCopyMultiTexSubImage2DEXTPtr = LoadProcByName<glCopyMultiTexSubImage2DEXTDel>("glCopyMultiTexSubImage2DEXT", getProcAddress);
            glCopyMultiTexSubImage3DEXTPtr = LoadProcByName<glCopyMultiTexSubImage3DEXTDel>("glCopyMultiTexSubImage3DEXT", getProcAddress);
            glCopyNamedBufferSubDataPtr = LoadProcByName<glCopyNamedBufferSubDataDel>("glCopyNamedBufferSubData", getProcAddress);
            glCopyPathNVPtr = LoadProcByName<glCopyPathNVDel>("glCopyPathNV", getProcAddress);
            glCopyPixelsPtr = LoadProcByName<glCopyPixelsDel>("glCopyPixels", getProcAddress);
            glCopyTexImage1DPtr = LoadProcByName<glCopyTexImage1DDel>("glCopyTexImage1D", getProcAddress);
            glCopyTexImage1DEXTPtr = LoadProcByName<glCopyTexImage1DEXTDel>("glCopyTexImage1DEXT", getProcAddress);
            glCopyTexImage2DPtr = LoadProcByName<glCopyTexImage2DDel>("glCopyTexImage2D", getProcAddress);
            glCopyTexImage2DEXTPtr = LoadProcByName<glCopyTexImage2DEXTDel>("glCopyTexImage2DEXT", getProcAddress);
            glCopyTexSubImage1DPtr = LoadProcByName<glCopyTexSubImage1DDel>("glCopyTexSubImage1D", getProcAddress);
            glCopyTexSubImage1DEXTPtr = LoadProcByName<glCopyTexSubImage1DEXTDel>("glCopyTexSubImage1DEXT", getProcAddress);
            glCopyTexSubImage2DPtr = LoadProcByName<glCopyTexSubImage2DDel>("glCopyTexSubImage2D", getProcAddress);
            glCopyTexSubImage2DEXTPtr = LoadProcByName<glCopyTexSubImage2DEXTDel>("glCopyTexSubImage2DEXT", getProcAddress);
            glCopyTexSubImage3DPtr = LoadProcByName<glCopyTexSubImage3DDel>("glCopyTexSubImage3D", getProcAddress);
            glCopyTexSubImage3DEXTPtr = LoadProcByName<glCopyTexSubImage3DEXTDel>("glCopyTexSubImage3DEXT", getProcAddress);
            glCopyTexSubImage3DOESPtr = LoadProcByName<glCopyTexSubImage3DOESDel>("glCopyTexSubImage3DOES", getProcAddress);
            glCopyTextureImage1DEXTPtr = LoadProcByName<glCopyTextureImage1DEXTDel>("glCopyTextureImage1DEXT", getProcAddress);
            glCopyTextureImage2DEXTPtr = LoadProcByName<glCopyTextureImage2DEXTDel>("glCopyTextureImage2DEXT", getProcAddress);
            glCopyTextureLevelsAPPLEPtr = LoadProcByName<glCopyTextureLevelsAPPLEDel>("glCopyTextureLevelsAPPLE", getProcAddress);
            glCopyTextureSubImage1DPtr = LoadProcByName<glCopyTextureSubImage1DDel>("glCopyTextureSubImage1D", getProcAddress);
            glCopyTextureSubImage1DEXTPtr = LoadProcByName<glCopyTextureSubImage1DEXTDel>("glCopyTextureSubImage1DEXT", getProcAddress);
            glCopyTextureSubImage2DPtr = LoadProcByName<glCopyTextureSubImage2DDel>("glCopyTextureSubImage2D", getProcAddress);
            glCopyTextureSubImage2DEXTPtr = LoadProcByName<glCopyTextureSubImage2DEXTDel>("glCopyTextureSubImage2DEXT", getProcAddress);
            glCopyTextureSubImage3DPtr = LoadProcByName<glCopyTextureSubImage3DDel>("glCopyTextureSubImage3D", getProcAddress);
            glCopyTextureSubImage3DEXTPtr = LoadProcByName<glCopyTextureSubImage3DEXTDel>("glCopyTextureSubImage3DEXT", getProcAddress);
            glCoverFillPathInstancedNVPtr = LoadProcByName<glCoverFillPathInstancedNVDel>("glCoverFillPathInstancedNV", getProcAddress);
            glCoverFillPathNVPtr = LoadProcByName<glCoverFillPathNVDel>("glCoverFillPathNV", getProcAddress);
            glCoverStrokePathInstancedNVPtr = LoadProcByName<glCoverStrokePathInstancedNVDel>("glCoverStrokePathInstancedNV", getProcAddress);
            glCoverStrokePathNVPtr = LoadProcByName<glCoverStrokePathNVDel>("glCoverStrokePathNV", getProcAddress);
            glCoverageMaskNVPtr = LoadProcByName<glCoverageMaskNVDel>("glCoverageMaskNV", getProcAddress);
            glCoverageModulationNVPtr = LoadProcByName<glCoverageModulationNVDel>("glCoverageModulationNV", getProcAddress);
            glCoverageModulationTableNVPtr = LoadProcByName<glCoverageModulationTableNVDel>("glCoverageModulationTableNV", getProcAddress);
            glCoverageOperationNVPtr = LoadProcByName<glCoverageOperationNVDel>("glCoverageOperationNV", getProcAddress);
            glCreateBuffersPtr = LoadProcByName<glCreateBuffersDel>("glCreateBuffers", getProcAddress);
            glCreateCommandListsNVPtr = LoadProcByName<glCreateCommandListsNVDel>("glCreateCommandListsNV", getProcAddress);
            glCreateFramebuffersPtr = LoadProcByName<glCreateFramebuffersDel>("glCreateFramebuffers", getProcAddress);
            glCreateMemoryObjectsEXTPtr = LoadProcByName<glCreateMemoryObjectsEXTDel>("glCreateMemoryObjectsEXT", getProcAddress);
            glCreatePerfQueryINTELPtr = LoadProcByName<glCreatePerfQueryINTELDel>("glCreatePerfQueryINTEL", getProcAddress);
            glCreateProgramPtr = LoadProcByName<glCreateProgramDel>("glCreateProgram", getProcAddress);
            glCreateProgramObjectARBPtr = LoadProcByName<glCreateProgramObjectARBDel>("glCreateProgramObjectARB", getProcAddress);
            glCreateProgramPipelinesPtr = LoadProcByName<glCreateProgramPipelinesDel>("glCreateProgramPipelines", getProcAddress);
            glCreateProgressFenceNVXPtr = LoadProcByName<glCreateProgressFenceNVXDel>("glCreateProgressFenceNVX", getProcAddress);
            glCreateQueriesPtr = LoadProcByName<glCreateQueriesDel>("glCreateQueries", getProcAddress);
            glCreateRenderbuffersPtr = LoadProcByName<glCreateRenderbuffersDel>("glCreateRenderbuffers", getProcAddress);
            glCreateSamplersPtr = LoadProcByName<glCreateSamplersDel>("glCreateSamplers", getProcAddress);
            glCreateShaderPtr = LoadProcByName<glCreateShaderDel>("glCreateShader", getProcAddress);
            glCreateShaderObjectARBPtr = LoadProcByName<glCreateShaderObjectARBDel>("glCreateShaderObjectARB", getProcAddress);
            glCreateShaderProgramEXTPtr = LoadProcByName<glCreateShaderProgramEXTDel>("glCreateShaderProgramEXT", getProcAddress);
            glCreateShaderProgramvPtr = LoadProcByName<glCreateShaderProgramvDel>("glCreateShaderProgramv", getProcAddress);
            glCreateShaderProgramvEXTPtr = LoadProcByName<glCreateShaderProgramvEXTDel>("glCreateShaderProgramvEXT", getProcAddress);
            glCreateStatesNVPtr = LoadProcByName<glCreateStatesNVDel>("glCreateStatesNV", getProcAddress);
            glCreateSyncFromCLeventARBPtr = LoadProcByName<glCreateSyncFromCLeventARBDel>("glCreateSyncFromCLeventARB", getProcAddress);
            glCreateTexturesPtr = LoadProcByName<glCreateTexturesDel>("glCreateTextures", getProcAddress);
            glCreateTransformFeedbacksPtr = LoadProcByName<glCreateTransformFeedbacksDel>("glCreateTransformFeedbacks", getProcAddress);
            glCreateVertexArraysPtr = LoadProcByName<glCreateVertexArraysDel>("glCreateVertexArrays", getProcAddress);
            glCullFacePtr = LoadProcByName<glCullFaceDel>("glCullFace", getProcAddress);
            glCullParameterdvEXTPtr = LoadProcByName<glCullParameterdvEXTDel>("glCullParameterdvEXT", getProcAddress);
            glCullParameterfvEXTPtr = LoadProcByName<glCullParameterfvEXTDel>("glCullParameterfvEXT", getProcAddress);
            glCurrentPaletteMatrixARBPtr = LoadProcByName<glCurrentPaletteMatrixARBDel>("glCurrentPaletteMatrixARB", getProcAddress);
            glCurrentPaletteMatrixOESPtr = LoadProcByName<glCurrentPaletteMatrixOESDel>("glCurrentPaletteMatrixOES", getProcAddress);
            glDebugMessageCallbackPtr = LoadProcByName<glDebugMessageCallbackDel>("glDebugMessageCallback", getProcAddress);
            glDebugMessageCallbackAMDPtr = LoadProcByName<glDebugMessageCallbackAMDDel>("glDebugMessageCallbackAMD", getProcAddress);
            glDebugMessageCallbackARBPtr = LoadProcByName<glDebugMessageCallbackARBDel>("glDebugMessageCallbackARB", getProcAddress);
            glDebugMessageCallbackKHRPtr = LoadProcByName<glDebugMessageCallbackKHRDel>("glDebugMessageCallbackKHR", getProcAddress);
            glDebugMessageControlPtr = LoadProcByName<glDebugMessageControlDel>("glDebugMessageControl", getProcAddress);
            glDebugMessageControlARBPtr = LoadProcByName<glDebugMessageControlARBDel>("glDebugMessageControlARB", getProcAddress);
            glDebugMessageControlKHRPtr = LoadProcByName<glDebugMessageControlKHRDel>("glDebugMessageControlKHR", getProcAddress);
            glDebugMessageEnableAMDPtr = LoadProcByName<glDebugMessageEnableAMDDel>("glDebugMessageEnableAMD", getProcAddress);
            glDebugMessageInsertPtr = LoadProcByName<glDebugMessageInsertDel>("glDebugMessageInsert", getProcAddress);
            glDebugMessageInsertAMDPtr = LoadProcByName<glDebugMessageInsertAMDDel>("glDebugMessageInsertAMD", getProcAddress);
            glDebugMessageInsertARBPtr = LoadProcByName<glDebugMessageInsertARBDel>("glDebugMessageInsertARB", getProcAddress);
            glDebugMessageInsertKHRPtr = LoadProcByName<glDebugMessageInsertKHRDel>("glDebugMessageInsertKHR", getProcAddress);
            glDeformSGIXPtr = LoadProcByName<glDeformSGIXDel>("glDeformSGIX", getProcAddress);
            glDeformationMap3dSGIXPtr = LoadProcByName<glDeformationMap3dSGIXDel>("glDeformationMap3dSGIX", getProcAddress);
            glDeformationMap3fSGIXPtr = LoadProcByName<glDeformationMap3fSGIXDel>("glDeformationMap3fSGIX", getProcAddress);
            glDeleteAsyncMarkersSGIXPtr = LoadProcByName<glDeleteAsyncMarkersSGIXDel>("glDeleteAsyncMarkersSGIX", getProcAddress);
            glDeleteBuffersPtr = LoadProcByName<glDeleteBuffersDel>("glDeleteBuffers", getProcAddress);
            glDeleteBuffersARBPtr = LoadProcByName<glDeleteBuffersARBDel>("glDeleteBuffersARB", getProcAddress);
            glDeleteCommandListsNVPtr = LoadProcByName<glDeleteCommandListsNVDel>("glDeleteCommandListsNV", getProcAddress);
            glDeleteFencesAPPLEPtr = LoadProcByName<glDeleteFencesAPPLEDel>("glDeleteFencesAPPLE", getProcAddress);
            glDeleteFencesNVPtr = LoadProcByName<glDeleteFencesNVDel>("glDeleteFencesNV", getProcAddress);
            glDeleteFragmentShaderATIPtr = LoadProcByName<glDeleteFragmentShaderATIDel>("glDeleteFragmentShaderATI", getProcAddress);
            glDeleteFramebuffersPtr = LoadProcByName<glDeleteFramebuffersDel>("glDeleteFramebuffers", getProcAddress);
            glDeleteFramebuffersEXTPtr = LoadProcByName<glDeleteFramebuffersEXTDel>("glDeleteFramebuffersEXT", getProcAddress);
            glDeleteFramebuffersOESPtr = LoadProcByName<glDeleteFramebuffersOESDel>("glDeleteFramebuffersOES", getProcAddress);
            glDeleteListsPtr = LoadProcByName<glDeleteListsDel>("glDeleteLists", getProcAddress);
            glDeleteMemoryObjectsEXTPtr = LoadProcByName<glDeleteMemoryObjectsEXTDel>("glDeleteMemoryObjectsEXT", getProcAddress);
            glDeleteNamedStringARBPtr = LoadProcByName<glDeleteNamedStringARBDel>("glDeleteNamedStringARB", getProcAddress);
            glDeleteNamesAMDPtr = LoadProcByName<glDeleteNamesAMDDel>("glDeleteNamesAMD", getProcAddress);
            glDeleteObjectARBPtr = LoadProcByName<glDeleteObjectARBDel>("glDeleteObjectARB", getProcAddress);
            glDeleteOcclusionQueriesNVPtr = LoadProcByName<glDeleteOcclusionQueriesNVDel>("glDeleteOcclusionQueriesNV", getProcAddress);
            glDeletePathsNVPtr = LoadProcByName<glDeletePathsNVDel>("glDeletePathsNV", getProcAddress);
            glDeletePerfMonitorsAMDPtr = LoadProcByName<glDeletePerfMonitorsAMDDel>("glDeletePerfMonitorsAMD", getProcAddress);
            glDeletePerfQueryINTELPtr = LoadProcByName<glDeletePerfQueryINTELDel>("glDeletePerfQueryINTEL", getProcAddress);
            glDeleteProgramPtr = LoadProcByName<glDeleteProgramDel>("glDeleteProgram", getProcAddress);
            glDeleteProgramPipelinesPtr = LoadProcByName<glDeleteProgramPipelinesDel>("glDeleteProgramPipelines", getProcAddress);
            glDeleteProgramPipelinesEXTPtr = LoadProcByName<glDeleteProgramPipelinesEXTDel>("glDeleteProgramPipelinesEXT", getProcAddress);
            glDeleteProgramsARBPtr = LoadProcByName<glDeleteProgramsARBDel>("glDeleteProgramsARB", getProcAddress);
            glDeleteProgramsNVPtr = LoadProcByName<glDeleteProgramsNVDel>("glDeleteProgramsNV", getProcAddress);
            glDeleteQueriesPtr = LoadProcByName<glDeleteQueriesDel>("glDeleteQueries", getProcAddress);
            glDeleteQueriesARBPtr = LoadProcByName<glDeleteQueriesARBDel>("glDeleteQueriesARB", getProcAddress);
            glDeleteQueriesEXTPtr = LoadProcByName<glDeleteQueriesEXTDel>("glDeleteQueriesEXT", getProcAddress);
            glDeleteQueryResourceTagNVPtr = LoadProcByName<glDeleteQueryResourceTagNVDel>("glDeleteQueryResourceTagNV", getProcAddress);
            glDeleteRenderbuffersPtr = LoadProcByName<glDeleteRenderbuffersDel>("glDeleteRenderbuffers", getProcAddress);
            glDeleteRenderbuffersEXTPtr = LoadProcByName<glDeleteRenderbuffersEXTDel>("glDeleteRenderbuffersEXT", getProcAddress);
            glDeleteRenderbuffersOESPtr = LoadProcByName<glDeleteRenderbuffersOESDel>("glDeleteRenderbuffersOES", getProcAddress);
            glDeleteSamplersPtr = LoadProcByName<glDeleteSamplersDel>("glDeleteSamplers", getProcAddress);
            glDeleteSemaphoresEXTPtr = LoadProcByName<glDeleteSemaphoresEXTDel>("glDeleteSemaphoresEXT", getProcAddress);
            glDeleteShaderPtr = LoadProcByName<glDeleteShaderDel>("glDeleteShader", getProcAddress);
            glDeleteStatesNVPtr = LoadProcByName<glDeleteStatesNVDel>("glDeleteStatesNV", getProcAddress);
            glDeleteSyncPtr = LoadProcByName<glDeleteSyncDel>("glDeleteSync", getProcAddress);
            glDeleteSyncAPPLEPtr = LoadProcByName<glDeleteSyncAPPLEDel>("glDeleteSyncAPPLE", getProcAddress);
            glDeleteTexturesPtr = LoadProcByName<glDeleteTexturesDel>("glDeleteTextures", getProcAddress);
            glDeleteTexturesEXTPtr = LoadProcByName<glDeleteTexturesEXTDel>("glDeleteTexturesEXT", getProcAddress);
            glDeleteTransformFeedbacksPtr = LoadProcByName<glDeleteTransformFeedbacksDel>("glDeleteTransformFeedbacks", getProcAddress);
            glDeleteTransformFeedbacksNVPtr = LoadProcByName<glDeleteTransformFeedbacksNVDel>("glDeleteTransformFeedbacksNV", getProcAddress);
            glDeleteVertexArraysPtr = LoadProcByName<glDeleteVertexArraysDel>("glDeleteVertexArrays", getProcAddress);
            glDeleteVertexArraysAPPLEPtr = LoadProcByName<glDeleteVertexArraysAPPLEDel>("glDeleteVertexArraysAPPLE", getProcAddress);
            glDeleteVertexArraysOESPtr = LoadProcByName<glDeleteVertexArraysOESDel>("glDeleteVertexArraysOES", getProcAddress);
            glDeleteVertexShaderEXTPtr = LoadProcByName<glDeleteVertexShaderEXTDel>("glDeleteVertexShaderEXT", getProcAddress);
            glDepthBoundsEXTPtr = LoadProcByName<glDepthBoundsEXTDel>("glDepthBoundsEXT", getProcAddress);
            glDepthBoundsdNVPtr = LoadProcByName<glDepthBoundsdNVDel>("glDepthBoundsdNV", getProcAddress);
            glDepthFuncPtr = LoadProcByName<glDepthFuncDel>("glDepthFunc", getProcAddress);
            glDepthMaskPtr = LoadProcByName<glDepthMaskDel>("glDepthMask", getProcAddress);
            glDepthRangePtr = LoadProcByName<glDepthRangeDel>("glDepthRange", getProcAddress);
            glDepthRangeArraydvNVPtr = LoadProcByName<glDepthRangeArraydvNVDel>("glDepthRangeArraydvNV", getProcAddress);
            glDepthRangeArrayfvNVPtr = LoadProcByName<glDepthRangeArrayfvNVDel>("glDepthRangeArrayfvNV", getProcAddress);
            glDepthRangeArrayfvOESPtr = LoadProcByName<glDepthRangeArrayfvOESDel>("glDepthRangeArrayfvOES", getProcAddress);
            glDepthRangeArrayvPtr = LoadProcByName<glDepthRangeArrayvDel>("glDepthRangeArrayv", getProcAddress);
            glDepthRangeIndexedPtr = LoadProcByName<glDepthRangeIndexedDel>("glDepthRangeIndexed", getProcAddress);
            glDepthRangeIndexeddNVPtr = LoadProcByName<glDepthRangeIndexeddNVDel>("glDepthRangeIndexeddNV", getProcAddress);
            glDepthRangeIndexedfNVPtr = LoadProcByName<glDepthRangeIndexedfNVDel>("glDepthRangeIndexedfNV", getProcAddress);
            glDepthRangeIndexedfOESPtr = LoadProcByName<glDepthRangeIndexedfOESDel>("glDepthRangeIndexedfOES", getProcAddress);
            glDepthRangedNVPtr = LoadProcByName<glDepthRangedNVDel>("glDepthRangedNV", getProcAddress);
            glDepthRangefPtr = LoadProcByName<glDepthRangefDel>("glDepthRangef", getProcAddress);
            glDepthRangefOESPtr = LoadProcByName<glDepthRangefOESDel>("glDepthRangefOES", getProcAddress);
            glDepthRangexPtr = LoadProcByName<glDepthRangexDel>("glDepthRangex", getProcAddress);
            glDepthRangexOESPtr = LoadProcByName<glDepthRangexOESDel>("glDepthRangexOES", getProcAddress);
            glDetachObjectARBPtr = LoadProcByName<glDetachObjectARBDel>("glDetachObjectARB", getProcAddress);
            glDetachShaderPtr = LoadProcByName<glDetachShaderDel>("glDetachShader", getProcAddress);
            glDetailTexFuncSGISPtr = LoadProcByName<glDetailTexFuncSGISDel>("glDetailTexFuncSGIS", getProcAddress);
            glDisablePtr = LoadProcByName<glDisableDel>("glDisable", getProcAddress);
            glDisableClientStatePtr = LoadProcByName<glDisableClientStateDel>("glDisableClientState", getProcAddress);
            glDisableClientStateIndexedEXTPtr = LoadProcByName<glDisableClientStateIndexedEXTDel>("glDisableClientStateIndexedEXT", getProcAddress);
            glDisableClientStateiEXTPtr = LoadProcByName<glDisableClientStateiEXTDel>("glDisableClientStateiEXT", getProcAddress);
            glDisableDriverControlQCOMPtr = LoadProcByName<glDisableDriverControlQCOMDel>("glDisableDriverControlQCOM", getProcAddress);
            glDisableIndexedEXTPtr = LoadProcByName<glDisableIndexedEXTDel>("glDisableIndexedEXT", getProcAddress);
            glDisableVariantClientStateEXTPtr = LoadProcByName<glDisableVariantClientStateEXTDel>("glDisableVariantClientStateEXT", getProcAddress);
            glDisableVertexArrayAttribPtr = LoadProcByName<glDisableVertexArrayAttribDel>("glDisableVertexArrayAttrib", getProcAddress);
            glDisableVertexArrayAttribEXTPtr = LoadProcByName<glDisableVertexArrayAttribEXTDel>("glDisableVertexArrayAttribEXT", getProcAddress);
            glDisableVertexArrayEXTPtr = LoadProcByName<glDisableVertexArrayEXTDel>("glDisableVertexArrayEXT", getProcAddress);
            glDisableVertexAttribAPPLEPtr = LoadProcByName<glDisableVertexAttribAPPLEDel>("glDisableVertexAttribAPPLE", getProcAddress);
            glDisableVertexAttribArrayPtr = LoadProcByName<glDisableVertexAttribArrayDel>("glDisableVertexAttribArray", getProcAddress);
            glDisableVertexAttribArrayARBPtr = LoadProcByName<glDisableVertexAttribArrayARBDel>("glDisableVertexAttribArrayARB", getProcAddress);
            glDisableiPtr = LoadProcByName<glDisableiDel>("glDisablei", getProcAddress);
            glDisableiEXTPtr = LoadProcByName<glDisableiEXTDel>("glDisableiEXT", getProcAddress);
            glDisableiNVPtr = LoadProcByName<glDisableiNVDel>("glDisableiNV", getProcAddress);
            glDisableiOESPtr = LoadProcByName<glDisableiOESDel>("glDisableiOES", getProcAddress);
            glDiscardFramebufferEXTPtr = LoadProcByName<glDiscardFramebufferEXTDel>("glDiscardFramebufferEXT", getProcAddress);
            glDispatchComputePtr = LoadProcByName<glDispatchComputeDel>("glDispatchCompute", getProcAddress);
            glDispatchComputeGroupSizeARBPtr = LoadProcByName<glDispatchComputeGroupSizeARBDel>("glDispatchComputeGroupSizeARB", getProcAddress);
            glDispatchComputeIndirectPtr = LoadProcByName<glDispatchComputeIndirectDel>("glDispatchComputeIndirect", getProcAddress);
            glDrawArraysPtr = LoadProcByName<glDrawArraysDel>("glDrawArrays", getProcAddress);
            glDrawArraysEXTPtr = LoadProcByName<glDrawArraysEXTDel>("glDrawArraysEXT", getProcAddress);
            glDrawArraysIndirectPtr = LoadProcByName<glDrawArraysIndirectDel>("glDrawArraysIndirect", getProcAddress);
            glDrawArraysInstancedPtr = LoadProcByName<glDrawArraysInstancedDel>("glDrawArraysInstanced", getProcAddress);
            glDrawArraysInstancedANGLEPtr = LoadProcByName<glDrawArraysInstancedANGLEDel>("glDrawArraysInstancedANGLE", getProcAddress);
            glDrawArraysInstancedARBPtr = LoadProcByName<glDrawArraysInstancedARBDel>("glDrawArraysInstancedARB", getProcAddress);
            glDrawArraysInstancedBaseInstancePtr = LoadProcByName<glDrawArraysInstancedBaseInstanceDel>("glDrawArraysInstancedBaseInstance", getProcAddress);
            glDrawArraysInstancedBaseInstanceEXTPtr = LoadProcByName<glDrawArraysInstancedBaseInstanceEXTDel>("glDrawArraysInstancedBaseInstanceEXT", getProcAddress);
            glDrawArraysInstancedEXTPtr = LoadProcByName<glDrawArraysInstancedEXTDel>("glDrawArraysInstancedEXT", getProcAddress);
            glDrawArraysInstancedNVPtr = LoadProcByName<glDrawArraysInstancedNVDel>("glDrawArraysInstancedNV", getProcAddress);
            glDrawBufferPtr = LoadProcByName<glDrawBufferDel>("glDrawBuffer", getProcAddress);
            glDrawBuffersPtr = LoadProcByName<glDrawBuffersDel>("glDrawBuffers", getProcAddress);
            glDrawBuffersARBPtr = LoadProcByName<glDrawBuffersARBDel>("glDrawBuffersARB", getProcAddress);
            glDrawBuffersATIPtr = LoadProcByName<glDrawBuffersATIDel>("glDrawBuffersATI", getProcAddress);
            glDrawBuffersEXTPtr = LoadProcByName<glDrawBuffersEXTDel>("glDrawBuffersEXT", getProcAddress);
            glDrawBuffersIndexedEXTPtr = LoadProcByName<glDrawBuffersIndexedEXTDel>("glDrawBuffersIndexedEXT", getProcAddress);
            glDrawBuffersNVPtr = LoadProcByName<glDrawBuffersNVDel>("glDrawBuffersNV", getProcAddress);
            glDrawCommandsAddressNVPtr = LoadProcByName<glDrawCommandsAddressNVDel>("glDrawCommandsAddressNV", getProcAddress);
            glDrawCommandsNVPtr = LoadProcByName<glDrawCommandsNVDel>("glDrawCommandsNV", getProcAddress);
            glDrawCommandsStatesAddressNVPtr = LoadProcByName<glDrawCommandsStatesAddressNVDel>("glDrawCommandsStatesAddressNV", getProcAddress);
            glDrawCommandsStatesNVPtr = LoadProcByName<glDrawCommandsStatesNVDel>("glDrawCommandsStatesNV", getProcAddress);
            glDrawElementArrayAPPLEPtr = LoadProcByName<glDrawElementArrayAPPLEDel>("glDrawElementArrayAPPLE", getProcAddress);
            glDrawElementArrayATIPtr = LoadProcByName<glDrawElementArrayATIDel>("glDrawElementArrayATI", getProcAddress);
            glDrawElementsPtr = LoadProcByName<glDrawElementsDel>("glDrawElements", getProcAddress);
            glDrawElementsBaseVertexPtr = LoadProcByName<glDrawElementsBaseVertexDel>("glDrawElementsBaseVertex", getProcAddress);
            glDrawElementsBaseVertexEXTPtr = LoadProcByName<glDrawElementsBaseVertexEXTDel>("glDrawElementsBaseVertexEXT", getProcAddress);
            glDrawElementsBaseVertexOESPtr = LoadProcByName<glDrawElementsBaseVertexOESDel>("glDrawElementsBaseVertexOES", getProcAddress);
            glDrawElementsIndirectPtr = LoadProcByName<glDrawElementsIndirectDel>("glDrawElementsIndirect", getProcAddress);
            glDrawElementsInstancedPtr = LoadProcByName<glDrawElementsInstancedDel>("glDrawElementsInstanced", getProcAddress);
            glDrawElementsInstancedANGLEPtr = LoadProcByName<glDrawElementsInstancedANGLEDel>("glDrawElementsInstancedANGLE", getProcAddress);
            glDrawElementsInstancedARBPtr = LoadProcByName<glDrawElementsInstancedARBDel>("glDrawElementsInstancedARB", getProcAddress);
            glDrawElementsInstancedBaseInstancePtr = LoadProcByName<glDrawElementsInstancedBaseInstanceDel>("glDrawElementsInstancedBaseInstance", getProcAddress);
            glDrawElementsInstancedBaseInstanceEXTPtr = LoadProcByName<glDrawElementsInstancedBaseInstanceEXTDel>("glDrawElementsInstancedBaseInstanceEXT", getProcAddress);
            glDrawElementsInstancedBaseVertexPtr = LoadProcByName<glDrawElementsInstancedBaseVertexDel>("glDrawElementsInstancedBaseVertex", getProcAddress);
            glDrawElementsInstancedBaseVertexBaseInstancePtr = LoadProcByName<glDrawElementsInstancedBaseVertexBaseInstanceDel>("glDrawElementsInstancedBaseVertexBaseInstance", getProcAddress);
            glDrawElementsInstancedBaseVertexBaseInstanceEXTPtr = LoadProcByName<glDrawElementsInstancedBaseVertexBaseInstanceEXTDel>("glDrawElementsInstancedBaseVertexBaseInstanceEXT", getProcAddress);
            glDrawElementsInstancedBaseVertexEXTPtr = LoadProcByName<glDrawElementsInstancedBaseVertexEXTDel>("glDrawElementsInstancedBaseVertexEXT", getProcAddress);
            glDrawElementsInstancedBaseVertexOESPtr = LoadProcByName<glDrawElementsInstancedBaseVertexOESDel>("glDrawElementsInstancedBaseVertexOES", getProcAddress);
            glDrawElementsInstancedEXTPtr = LoadProcByName<glDrawElementsInstancedEXTDel>("glDrawElementsInstancedEXT", getProcAddress);
            glDrawElementsInstancedNVPtr = LoadProcByName<glDrawElementsInstancedNVDel>("glDrawElementsInstancedNV", getProcAddress);
            glDrawMeshArraysSUNPtr = LoadProcByName<glDrawMeshArraysSUNDel>("glDrawMeshArraysSUN", getProcAddress);
            glDrawMeshTasksNVPtr = LoadProcByName<glDrawMeshTasksNVDel>("glDrawMeshTasksNV", getProcAddress);
            glDrawMeshTasksIndirectNVPtr = LoadProcByName<glDrawMeshTasksIndirectNVDel>("glDrawMeshTasksIndirectNV", getProcAddress);
            glDrawPixelsPtr = LoadProcByName<glDrawPixelsDel>("glDrawPixels", getProcAddress);
            glDrawRangeElementArrayAPPLEPtr = LoadProcByName<glDrawRangeElementArrayAPPLEDel>("glDrawRangeElementArrayAPPLE", getProcAddress);
            glDrawRangeElementArrayATIPtr = LoadProcByName<glDrawRangeElementArrayATIDel>("glDrawRangeElementArrayATI", getProcAddress);
            glDrawRangeElementsPtr = LoadProcByName<glDrawRangeElementsDel>("glDrawRangeElements", getProcAddress);
            glDrawRangeElementsBaseVertexPtr = LoadProcByName<glDrawRangeElementsBaseVertexDel>("glDrawRangeElementsBaseVertex", getProcAddress);
            glDrawRangeElementsBaseVertexEXTPtr = LoadProcByName<glDrawRangeElementsBaseVertexEXTDel>("glDrawRangeElementsBaseVertexEXT", getProcAddress);
            glDrawRangeElementsBaseVertexOESPtr = LoadProcByName<glDrawRangeElementsBaseVertexOESDel>("glDrawRangeElementsBaseVertexOES", getProcAddress);
            glDrawRangeElementsEXTPtr = LoadProcByName<glDrawRangeElementsEXTDel>("glDrawRangeElementsEXT", getProcAddress);
            glDrawTexfOESPtr = LoadProcByName<glDrawTexfOESDel>("glDrawTexfOES", getProcAddress);
            glDrawTexfvOESPtr = LoadProcByName<glDrawTexfvOESDel>("glDrawTexfvOES", getProcAddress);
            glDrawTexiOESPtr = LoadProcByName<glDrawTexiOESDel>("glDrawTexiOES", getProcAddress);
            glDrawTexivOESPtr = LoadProcByName<glDrawTexivOESDel>("glDrawTexivOES", getProcAddress);
            glDrawTexsOESPtr = LoadProcByName<glDrawTexsOESDel>("glDrawTexsOES", getProcAddress);
            glDrawTexsvOESPtr = LoadProcByName<glDrawTexsvOESDel>("glDrawTexsvOES", getProcAddress);
            glDrawTextureNVPtr = LoadProcByName<glDrawTextureNVDel>("glDrawTextureNV", getProcAddress);
            glDrawTexxOESPtr = LoadProcByName<glDrawTexxOESDel>("glDrawTexxOES", getProcAddress);
            glDrawTexxvOESPtr = LoadProcByName<glDrawTexxvOESDel>("glDrawTexxvOES", getProcAddress);
            glDrawTransformFeedbackPtr = LoadProcByName<glDrawTransformFeedbackDel>("glDrawTransformFeedback", getProcAddress);
            glDrawTransformFeedbackEXTPtr = LoadProcByName<glDrawTransformFeedbackEXTDel>("glDrawTransformFeedbackEXT", getProcAddress);
            glDrawTransformFeedbackInstancedPtr = LoadProcByName<glDrawTransformFeedbackInstancedDel>("glDrawTransformFeedbackInstanced", getProcAddress);
            glDrawTransformFeedbackInstancedEXTPtr = LoadProcByName<glDrawTransformFeedbackInstancedEXTDel>("glDrawTransformFeedbackInstancedEXT", getProcAddress);
            glDrawTransformFeedbackNVPtr = LoadProcByName<glDrawTransformFeedbackNVDel>("glDrawTransformFeedbackNV", getProcAddress);
            glDrawTransformFeedbackStreamPtr = LoadProcByName<glDrawTransformFeedbackStreamDel>("glDrawTransformFeedbackStream", getProcAddress);
            glDrawTransformFeedbackStreamInstancedPtr = LoadProcByName<glDrawTransformFeedbackStreamInstancedDel>("glDrawTransformFeedbackStreamInstanced", getProcAddress);
            glEGLImageTargetRenderbufferStorageOESPtr = LoadProcByName<glEGLImageTargetRenderbufferStorageOESDel>("glEGLImageTargetRenderbufferStorageOES", getProcAddress);
            glEGLImageTargetTexStorageEXTPtr = LoadProcByName<glEGLImageTargetTexStorageEXTDel>("glEGLImageTargetTexStorageEXT", getProcAddress);
            glEGLImageTargetTexture2DOESPtr = LoadProcByName<glEGLImageTargetTexture2DOESDel>("glEGLImageTargetTexture2DOES", getProcAddress);
            glEGLImageTargetTextureStorageEXTPtr = LoadProcByName<glEGLImageTargetTextureStorageEXTDel>("glEGLImageTargetTextureStorageEXT", getProcAddress);
            glEdgeFlagPtr = LoadProcByName<glEdgeFlagDel>("glEdgeFlag", getProcAddress);
            glEdgeFlagFormatNVPtr = LoadProcByName<glEdgeFlagFormatNVDel>("glEdgeFlagFormatNV", getProcAddress);
            glEdgeFlagPointerPtr = LoadProcByName<glEdgeFlagPointerDel>("glEdgeFlagPointer", getProcAddress);
            glEdgeFlagPointerEXTPtr = LoadProcByName<glEdgeFlagPointerEXTDel>("glEdgeFlagPointerEXT", getProcAddress);
            glEdgeFlagPointerListIBMPtr = LoadProcByName<glEdgeFlagPointerListIBMDel>("glEdgeFlagPointerListIBM", getProcAddress);
            glEdgeFlagvPtr = LoadProcByName<glEdgeFlagvDel>("glEdgeFlagv", getProcAddress);
            glElementPointerAPPLEPtr = LoadProcByName<glElementPointerAPPLEDel>("glElementPointerAPPLE", getProcAddress);
            glElementPointerATIPtr = LoadProcByName<glElementPointerATIDel>("glElementPointerATI", getProcAddress);
            glEnablePtr = LoadProcByName<glEnableDel>("glEnable", getProcAddress);
            glEnableClientStatePtr = LoadProcByName<glEnableClientStateDel>("glEnableClientState", getProcAddress);
            glEnableClientStateIndexedEXTPtr = LoadProcByName<glEnableClientStateIndexedEXTDel>("glEnableClientStateIndexedEXT", getProcAddress);
            glEnableClientStateiEXTPtr = LoadProcByName<glEnableClientStateiEXTDel>("glEnableClientStateiEXT", getProcAddress);
            glEnableDriverControlQCOMPtr = LoadProcByName<glEnableDriverControlQCOMDel>("glEnableDriverControlQCOM", getProcAddress);
            glEnableIndexedEXTPtr = LoadProcByName<glEnableIndexedEXTDel>("glEnableIndexedEXT", getProcAddress);
            glEnableVariantClientStateEXTPtr = LoadProcByName<glEnableVariantClientStateEXTDel>("glEnableVariantClientStateEXT", getProcAddress);
            glEnableVertexArrayAttribPtr = LoadProcByName<glEnableVertexArrayAttribDel>("glEnableVertexArrayAttrib", getProcAddress);
            glEnableVertexArrayAttribEXTPtr = LoadProcByName<glEnableVertexArrayAttribEXTDel>("glEnableVertexArrayAttribEXT", getProcAddress);
            glEnableVertexArrayEXTPtr = LoadProcByName<glEnableVertexArrayEXTDel>("glEnableVertexArrayEXT", getProcAddress);
            glEnableVertexAttribAPPLEPtr = LoadProcByName<glEnableVertexAttribAPPLEDel>("glEnableVertexAttribAPPLE", getProcAddress);
            glEnableVertexAttribArrayPtr = LoadProcByName<glEnableVertexAttribArrayDel>("glEnableVertexAttribArray", getProcAddress);
            glEnableVertexAttribArrayARBPtr = LoadProcByName<glEnableVertexAttribArrayARBDel>("glEnableVertexAttribArrayARB", getProcAddress);
            glEnableiPtr = LoadProcByName<glEnableiDel>("glEnablei", getProcAddress);
            glEnableiEXTPtr = LoadProcByName<glEnableiEXTDel>("glEnableiEXT", getProcAddress);
            glEnableiNVPtr = LoadProcByName<glEnableiNVDel>("glEnableiNV", getProcAddress);
            glEnableiOESPtr = LoadProcByName<glEnableiOESDel>("glEnableiOES", getProcAddress);
            glEndPtr = LoadProcByName<glEndDel>("glEnd", getProcAddress);
            glEndConditionalRenderPtr = LoadProcByName<glEndConditionalRenderDel>("glEndConditionalRender", getProcAddress);
            glEndConditionalRenderNVPtr = LoadProcByName<glEndConditionalRenderNVDel>("glEndConditionalRenderNV", getProcAddress);
            glEndConditionalRenderNVXPtr = LoadProcByName<glEndConditionalRenderNVXDel>("glEndConditionalRenderNVX", getProcAddress);
            glEndFragmentShaderATIPtr = LoadProcByName<glEndFragmentShaderATIDel>("glEndFragmentShaderATI", getProcAddress);
            glEndListPtr = LoadProcByName<glEndListDel>("glEndList", getProcAddress);
            glEndOcclusionQueryNVPtr = LoadProcByName<glEndOcclusionQueryNVDel>("glEndOcclusionQueryNV", getProcAddress);
            glEndPerfMonitorAMDPtr = LoadProcByName<glEndPerfMonitorAMDDel>("glEndPerfMonitorAMD", getProcAddress);
            glEndPerfQueryINTELPtr = LoadProcByName<glEndPerfQueryINTELDel>("glEndPerfQueryINTEL", getProcAddress);
            glEndQueryPtr = LoadProcByName<glEndQueryDel>("glEndQuery", getProcAddress);
            glEndQueryARBPtr = LoadProcByName<glEndQueryARBDel>("glEndQueryARB", getProcAddress);
            glEndQueryEXTPtr = LoadProcByName<glEndQueryEXTDel>("glEndQueryEXT", getProcAddress);
            glEndQueryIndexedPtr = LoadProcByName<glEndQueryIndexedDel>("glEndQueryIndexed", getProcAddress);
            glEndTilingQCOMPtr = LoadProcByName<glEndTilingQCOMDel>("glEndTilingQCOM", getProcAddress);
            glEndTransformFeedbackPtr = LoadProcByName<glEndTransformFeedbackDel>("glEndTransformFeedback", getProcAddress);
            glEndTransformFeedbackEXTPtr = LoadProcByName<glEndTransformFeedbackEXTDel>("glEndTransformFeedbackEXT", getProcAddress);
            glEndTransformFeedbackNVPtr = LoadProcByName<glEndTransformFeedbackNVDel>("glEndTransformFeedbackNV", getProcAddress);
            glEndVertexShaderEXTPtr = LoadProcByName<glEndVertexShaderEXTDel>("glEndVertexShaderEXT", getProcAddress);
            glEndVideoCaptureNVPtr = LoadProcByName<glEndVideoCaptureNVDel>("glEndVideoCaptureNV", getProcAddress);
            glEvalCoord1dPtr = LoadProcByName<glEvalCoord1dDel>("glEvalCoord1d", getProcAddress);
            glEvalCoord1dvPtr = LoadProcByName<glEvalCoord1dvDel>("glEvalCoord1dv", getProcAddress);
            glEvalCoord1fPtr = LoadProcByName<glEvalCoord1fDel>("glEvalCoord1f", getProcAddress);
            glEvalCoord1fvPtr = LoadProcByName<glEvalCoord1fvDel>("glEvalCoord1fv", getProcAddress);
            glEvalCoord1xOESPtr = LoadProcByName<glEvalCoord1xOESDel>("glEvalCoord1xOES", getProcAddress);
            glEvalCoord1xvOESPtr = LoadProcByName<glEvalCoord1xvOESDel>("glEvalCoord1xvOES", getProcAddress);
            glEvalCoord2dPtr = LoadProcByName<glEvalCoord2dDel>("glEvalCoord2d", getProcAddress);
            glEvalCoord2dvPtr = LoadProcByName<glEvalCoord2dvDel>("glEvalCoord2dv", getProcAddress);
            glEvalCoord2fPtr = LoadProcByName<glEvalCoord2fDel>("glEvalCoord2f", getProcAddress);
            glEvalCoord2fvPtr = LoadProcByName<glEvalCoord2fvDel>("glEvalCoord2fv", getProcAddress);
            glEvalCoord2xOESPtr = LoadProcByName<glEvalCoord2xOESDel>("glEvalCoord2xOES", getProcAddress);
            glEvalCoord2xvOESPtr = LoadProcByName<glEvalCoord2xvOESDel>("glEvalCoord2xvOES", getProcAddress);
            glEvalMapsNVPtr = LoadProcByName<glEvalMapsNVDel>("glEvalMapsNV", getProcAddress);
            glEvalMesh1Ptr = LoadProcByName<glEvalMesh1Del>("glEvalMesh1", getProcAddress);
            glEvalMesh2Ptr = LoadProcByName<glEvalMesh2Del>("glEvalMesh2", getProcAddress);
            glEvalPoint1Ptr = LoadProcByName<glEvalPoint1Del>("glEvalPoint1", getProcAddress);
            glEvalPoint2Ptr = LoadProcByName<glEvalPoint2Del>("glEvalPoint2", getProcAddress);
            glEvaluateDepthValuesARBPtr = LoadProcByName<glEvaluateDepthValuesARBDel>("glEvaluateDepthValuesARB", getProcAddress);
            glExecuteProgramNVPtr = LoadProcByName<glExecuteProgramNVDel>("glExecuteProgramNV", getProcAddress);
            glExtGetBufferPointervQCOMPtr = LoadProcByName<glExtGetBufferPointervQCOMDel>("glExtGetBufferPointervQCOM", getProcAddress);
            glExtGetBuffersQCOMPtr = LoadProcByName<glExtGetBuffersQCOMDel>("glExtGetBuffersQCOM", getProcAddress);
            glExtGetFramebuffersQCOMPtr = LoadProcByName<glExtGetFramebuffersQCOMDel>("glExtGetFramebuffersQCOM", getProcAddress);
            glExtGetProgramBinarySourceQCOMPtr = LoadProcByName<glExtGetProgramBinarySourceQCOMDel>("glExtGetProgramBinarySourceQCOM", getProcAddress);
            glExtGetProgramsQCOMPtr = LoadProcByName<glExtGetProgramsQCOMDel>("glExtGetProgramsQCOM", getProcAddress);
            glExtGetRenderbuffersQCOMPtr = LoadProcByName<glExtGetRenderbuffersQCOMDel>("glExtGetRenderbuffersQCOM", getProcAddress);
            glExtGetShadersQCOMPtr = LoadProcByName<glExtGetShadersQCOMDel>("glExtGetShadersQCOM", getProcAddress);
            glExtGetTexLevelParameterivQCOMPtr = LoadProcByName<glExtGetTexLevelParameterivQCOMDel>("glExtGetTexLevelParameterivQCOM", getProcAddress);
            glExtGetTexSubImageQCOMPtr = LoadProcByName<glExtGetTexSubImageQCOMDel>("glExtGetTexSubImageQCOM", getProcAddress);
            glExtGetTexturesQCOMPtr = LoadProcByName<glExtGetTexturesQCOMDel>("glExtGetTexturesQCOM", getProcAddress);
            glExtIsProgramBinaryQCOMPtr = LoadProcByName<glExtIsProgramBinaryQCOMDel>("glExtIsProgramBinaryQCOM", getProcAddress);
            glExtTexObjectStateOverrideiQCOMPtr = LoadProcByName<glExtTexObjectStateOverrideiQCOMDel>("glExtTexObjectStateOverrideiQCOM", getProcAddress);
            glExtractComponentEXTPtr = LoadProcByName<glExtractComponentEXTDel>("glExtractComponentEXT", getProcAddress);
            glFeedbackBufferPtr = LoadProcByName<glFeedbackBufferDel>("glFeedbackBuffer", getProcAddress);
            glFeedbackBufferxOESPtr = LoadProcByName<glFeedbackBufferxOESDel>("glFeedbackBufferxOES", getProcAddress);
            glFenceSyncPtr = LoadProcByName<glFenceSyncDel>("glFenceSync", getProcAddress);
            glFenceSyncAPPLEPtr = LoadProcByName<glFenceSyncAPPLEDel>("glFenceSyncAPPLE", getProcAddress);
            glFinalCombinerInputNVPtr = LoadProcByName<glFinalCombinerInputNVDel>("glFinalCombinerInputNV", getProcAddress);
            glFinishPtr = LoadProcByName<glFinishDel>("glFinish", getProcAddress);
            glFinishAsyncSGIXPtr = LoadProcByName<glFinishAsyncSGIXDel>("glFinishAsyncSGIX", getProcAddress);
            glFinishFenceAPPLEPtr = LoadProcByName<glFinishFenceAPPLEDel>("glFinishFenceAPPLE", getProcAddress);
            glFinishFenceNVPtr = LoadProcByName<glFinishFenceNVDel>("glFinishFenceNV", getProcAddress);
            glFinishObjectAPPLEPtr = LoadProcByName<glFinishObjectAPPLEDel>("glFinishObjectAPPLE", getProcAddress);
            glFinishTextureSUNXPtr = LoadProcByName<glFinishTextureSUNXDel>("glFinishTextureSUNX", getProcAddress);
            glFlushPtr = LoadProcByName<glFlushDel>("glFlush", getProcAddress);
            glFlushMappedBufferRangePtr = LoadProcByName<glFlushMappedBufferRangeDel>("glFlushMappedBufferRange", getProcAddress);
            glFlushMappedBufferRangeAPPLEPtr = LoadProcByName<glFlushMappedBufferRangeAPPLEDel>("glFlushMappedBufferRangeAPPLE", getProcAddress);
            glFlushMappedBufferRangeEXTPtr = LoadProcByName<glFlushMappedBufferRangeEXTDel>("glFlushMappedBufferRangeEXT", getProcAddress);
            glFlushMappedNamedBufferRangePtr = LoadProcByName<glFlushMappedNamedBufferRangeDel>("glFlushMappedNamedBufferRange", getProcAddress);
            glFlushMappedNamedBufferRangeEXTPtr = LoadProcByName<glFlushMappedNamedBufferRangeEXTDel>("glFlushMappedNamedBufferRangeEXT", getProcAddress);
            glFlushPixelDataRangeNVPtr = LoadProcByName<glFlushPixelDataRangeNVDel>("glFlushPixelDataRangeNV", getProcAddress);
            glFlushRasterSGIXPtr = LoadProcByName<glFlushRasterSGIXDel>("glFlushRasterSGIX", getProcAddress);
            glFlushStaticDataIBMPtr = LoadProcByName<glFlushStaticDataIBMDel>("glFlushStaticDataIBM", getProcAddress);
            glFlushVertexArrayRangeAPPLEPtr = LoadProcByName<glFlushVertexArrayRangeAPPLEDel>("glFlushVertexArrayRangeAPPLE", getProcAddress);
            glFlushVertexArrayRangeNVPtr = LoadProcByName<glFlushVertexArrayRangeNVDel>("glFlushVertexArrayRangeNV", getProcAddress);
            glFogCoordFormatNVPtr = LoadProcByName<glFogCoordFormatNVDel>("glFogCoordFormatNV", getProcAddress);
            glFogCoordPointerPtr = LoadProcByName<glFogCoordPointerDel>("glFogCoordPointer", getProcAddress);
            glFogCoordPointerEXTPtr = LoadProcByName<glFogCoordPointerEXTDel>("glFogCoordPointerEXT", getProcAddress);
            glFogCoordPointerListIBMPtr = LoadProcByName<glFogCoordPointerListIBMDel>("glFogCoordPointerListIBM", getProcAddress);
            glFogCoorddPtr = LoadProcByName<glFogCoorddDel>("glFogCoordd", getProcAddress);
            glFogCoorddEXTPtr = LoadProcByName<glFogCoorddEXTDel>("glFogCoorddEXT", getProcAddress);
            glFogCoorddvPtr = LoadProcByName<glFogCoorddvDel>("glFogCoorddv", getProcAddress);
            glFogCoorddvEXTPtr = LoadProcByName<glFogCoorddvEXTDel>("glFogCoorddvEXT", getProcAddress);
            glFogCoordfPtr = LoadProcByName<glFogCoordfDel>("glFogCoordf", getProcAddress);
            glFogCoordfEXTPtr = LoadProcByName<glFogCoordfEXTDel>("glFogCoordfEXT", getProcAddress);
            glFogCoordfvPtr = LoadProcByName<glFogCoordfvDel>("glFogCoordfv", getProcAddress);
            glFogCoordfvEXTPtr = LoadProcByName<glFogCoordfvEXTDel>("glFogCoordfvEXT", getProcAddress);
            glFogCoordhNVPtr = LoadProcByName<glFogCoordhNVDel>("glFogCoordhNV", getProcAddress);
            glFogCoordhvNVPtr = LoadProcByName<glFogCoordhvNVDel>("glFogCoordhvNV", getProcAddress);
            glFogFuncSGISPtr = LoadProcByName<glFogFuncSGISDel>("glFogFuncSGIS", getProcAddress);
            glFogfPtr = LoadProcByName<glFogfDel>("glFogf", getProcAddress);
            glFogfvPtr = LoadProcByName<glFogfvDel>("glFogfv", getProcAddress);
            glFogiPtr = LoadProcByName<glFogiDel>("glFogi", getProcAddress);
            glFogivPtr = LoadProcByName<glFogivDel>("glFogiv", getProcAddress);
            glFogxPtr = LoadProcByName<glFogxDel>("glFogx", getProcAddress);
            glFogxOESPtr = LoadProcByName<glFogxOESDel>("glFogxOES", getProcAddress);
            glFogxvPtr = LoadProcByName<glFogxvDel>("glFogxv", getProcAddress);
            glFogxvOESPtr = LoadProcByName<glFogxvOESDel>("glFogxvOES", getProcAddress);
            glFragmentColorMaterialSGIXPtr = LoadProcByName<glFragmentColorMaterialSGIXDel>("glFragmentColorMaterialSGIX", getProcAddress);
            glFragmentCoverageColorNVPtr = LoadProcByName<glFragmentCoverageColorNVDel>("glFragmentCoverageColorNV", getProcAddress);
            glFragmentLightModelfSGIXPtr = LoadProcByName<glFragmentLightModelfSGIXDel>("glFragmentLightModelfSGIX", getProcAddress);
            glFragmentLightModelfvSGIXPtr = LoadProcByName<glFragmentLightModelfvSGIXDel>("glFragmentLightModelfvSGIX", getProcAddress);
            glFragmentLightModeliSGIXPtr = LoadProcByName<glFragmentLightModeliSGIXDel>("glFragmentLightModeliSGIX", getProcAddress);
            glFragmentLightModelivSGIXPtr = LoadProcByName<glFragmentLightModelivSGIXDel>("glFragmentLightModelivSGIX", getProcAddress);
            glFragmentLightfSGIXPtr = LoadProcByName<glFragmentLightfSGIXDel>("glFragmentLightfSGIX", getProcAddress);
            glFragmentLightfvSGIXPtr = LoadProcByName<glFragmentLightfvSGIXDel>("glFragmentLightfvSGIX", getProcAddress);
            glFragmentLightiSGIXPtr = LoadProcByName<glFragmentLightiSGIXDel>("glFragmentLightiSGIX", getProcAddress);
            glFragmentLightivSGIXPtr = LoadProcByName<glFragmentLightivSGIXDel>("glFragmentLightivSGIX", getProcAddress);
            glFragmentMaterialfSGIXPtr = LoadProcByName<glFragmentMaterialfSGIXDel>("glFragmentMaterialfSGIX", getProcAddress);
            glFragmentMaterialfvSGIXPtr = LoadProcByName<glFragmentMaterialfvSGIXDel>("glFragmentMaterialfvSGIX", getProcAddress);
            glFragmentMaterialiSGIXPtr = LoadProcByName<glFragmentMaterialiSGIXDel>("glFragmentMaterialiSGIX", getProcAddress);
            glFragmentMaterialivSGIXPtr = LoadProcByName<glFragmentMaterialivSGIXDel>("glFragmentMaterialivSGIX", getProcAddress);
            glFrameTerminatorGREMEDYPtr = LoadProcByName<glFrameTerminatorGREMEDYDel>("glFrameTerminatorGREMEDY", getProcAddress);
            glFrameZoomSGIXPtr = LoadProcByName<glFrameZoomSGIXDel>("glFrameZoomSGIX", getProcAddress);
            glFramebufferDrawBufferEXTPtr = LoadProcByName<glFramebufferDrawBufferEXTDel>("glFramebufferDrawBufferEXT", getProcAddress);
            glFramebufferDrawBuffersEXTPtr = LoadProcByName<glFramebufferDrawBuffersEXTDel>("glFramebufferDrawBuffersEXT", getProcAddress);
            glFramebufferFetchBarrierEXTPtr = LoadProcByName<glFramebufferFetchBarrierEXTDel>("glFramebufferFetchBarrierEXT", getProcAddress);
            glFramebufferFetchBarrierQCOMPtr = LoadProcByName<glFramebufferFetchBarrierQCOMDel>("glFramebufferFetchBarrierQCOM", getProcAddress);
            glFramebufferFoveationConfigQCOMPtr = LoadProcByName<glFramebufferFoveationConfigQCOMDel>("glFramebufferFoveationConfigQCOM", getProcAddress);
            glFramebufferFoveationParametersQCOMPtr = LoadProcByName<glFramebufferFoveationParametersQCOMDel>("glFramebufferFoveationParametersQCOM", getProcAddress);
            glFramebufferParameteriPtr = LoadProcByName<glFramebufferParameteriDel>("glFramebufferParameteri", getProcAddress);
            glFramebufferPixelLocalStorageSizeEXTPtr = LoadProcByName<glFramebufferPixelLocalStorageSizeEXTDel>("glFramebufferPixelLocalStorageSizeEXT", getProcAddress);
            glFramebufferReadBufferEXTPtr = LoadProcByName<glFramebufferReadBufferEXTDel>("glFramebufferReadBufferEXT", getProcAddress);
            glFramebufferRenderbufferPtr = LoadProcByName<glFramebufferRenderbufferDel>("glFramebufferRenderbuffer", getProcAddress);
            glFramebufferRenderbufferEXTPtr = LoadProcByName<glFramebufferRenderbufferEXTDel>("glFramebufferRenderbufferEXT", getProcAddress);
            glFramebufferRenderbufferOESPtr = LoadProcByName<glFramebufferRenderbufferOESDel>("glFramebufferRenderbufferOES", getProcAddress);
            glFramebufferSampleLocationsfvARBPtr = LoadProcByName<glFramebufferSampleLocationsfvARBDel>("glFramebufferSampleLocationsfvARB", getProcAddress);
            glFramebufferSampleLocationsfvNVPtr = LoadProcByName<glFramebufferSampleLocationsfvNVDel>("glFramebufferSampleLocationsfvNV", getProcAddress);
            glFramebufferSamplePositionsfvAMDPtr = LoadProcByName<glFramebufferSamplePositionsfvAMDDel>("glFramebufferSamplePositionsfvAMD", getProcAddress);
            glFramebufferTexturePtr = LoadProcByName<glFramebufferTextureDel>("glFramebufferTexture", getProcAddress);
            glFramebufferTexture1DPtr = LoadProcByName<glFramebufferTexture1DDel>("glFramebufferTexture1D", getProcAddress);
            glFramebufferTexture1DEXTPtr = LoadProcByName<glFramebufferTexture1DEXTDel>("glFramebufferTexture1DEXT", getProcAddress);
            glFramebufferTexture2DPtr = LoadProcByName<glFramebufferTexture2DDel>("glFramebufferTexture2D", getProcAddress);
            glFramebufferTexture2DEXTPtr = LoadProcByName<glFramebufferTexture2DEXTDel>("glFramebufferTexture2DEXT", getProcAddress);
            glFramebufferTexture2DDownsampleIMGPtr = LoadProcByName<glFramebufferTexture2DDownsampleIMGDel>("glFramebufferTexture2DDownsampleIMG", getProcAddress);
            glFramebufferTexture2DMultisampleEXTPtr = LoadProcByName<glFramebufferTexture2DMultisampleEXTDel>("glFramebufferTexture2DMultisampleEXT", getProcAddress);
            glFramebufferTexture2DMultisampleIMGPtr = LoadProcByName<glFramebufferTexture2DMultisampleIMGDel>("glFramebufferTexture2DMultisampleIMG", getProcAddress);
            glFramebufferTexture2DOESPtr = LoadProcByName<glFramebufferTexture2DOESDel>("glFramebufferTexture2DOES", getProcAddress);
            glFramebufferTexture3DPtr = LoadProcByName<glFramebufferTexture3DDel>("glFramebufferTexture3D", getProcAddress);
            glFramebufferTexture3DEXTPtr = LoadProcByName<glFramebufferTexture3DEXTDel>("glFramebufferTexture3DEXT", getProcAddress);
            glFramebufferTexture3DOESPtr = LoadProcByName<glFramebufferTexture3DOESDel>("glFramebufferTexture3DOES", getProcAddress);
            glFramebufferTextureARBPtr = LoadProcByName<glFramebufferTextureARBDel>("glFramebufferTextureARB", getProcAddress);
            glFramebufferTextureEXTPtr = LoadProcByName<glFramebufferTextureEXTDel>("glFramebufferTextureEXT", getProcAddress);
            glFramebufferTextureFaceARBPtr = LoadProcByName<glFramebufferTextureFaceARBDel>("glFramebufferTextureFaceARB", getProcAddress);
            glFramebufferTextureFaceEXTPtr = LoadProcByName<glFramebufferTextureFaceEXTDel>("glFramebufferTextureFaceEXT", getProcAddress);
            glFramebufferTextureLayerPtr = LoadProcByName<glFramebufferTextureLayerDel>("glFramebufferTextureLayer", getProcAddress);
            glFramebufferTextureLayerARBPtr = LoadProcByName<glFramebufferTextureLayerARBDel>("glFramebufferTextureLayerARB", getProcAddress);
            glFramebufferTextureLayerEXTPtr = LoadProcByName<glFramebufferTextureLayerEXTDel>("glFramebufferTextureLayerEXT", getProcAddress);
            glFramebufferTextureLayerDownsampleIMGPtr = LoadProcByName<glFramebufferTextureLayerDownsampleIMGDel>("glFramebufferTextureLayerDownsampleIMG", getProcAddress);
            glFramebufferTextureMultisampleMultiviewOVRPtr = LoadProcByName<glFramebufferTextureMultisampleMultiviewOVRDel>("glFramebufferTextureMultisampleMultiviewOVR", getProcAddress);
            glFramebufferTextureMultiviewOVRPtr = LoadProcByName<glFramebufferTextureMultiviewOVRDel>("glFramebufferTextureMultiviewOVR", getProcAddress);
            glFramebufferTextureOESPtr = LoadProcByName<glFramebufferTextureOESDel>("glFramebufferTextureOES", getProcAddress);
            glFreeObjectBufferATIPtr = LoadProcByName<glFreeObjectBufferATIDel>("glFreeObjectBufferATI", getProcAddress);
            glFrontFacePtr = LoadProcByName<glFrontFaceDel>("glFrontFace", getProcAddress);
            glFrustumPtr = LoadProcByName<glFrustumDel>("glFrustum", getProcAddress);
            glFrustumfPtr = LoadProcByName<glFrustumfDel>("glFrustumf", getProcAddress);
            glFrustumfOESPtr = LoadProcByName<glFrustumfOESDel>("glFrustumfOES", getProcAddress);
            glFrustumxPtr = LoadProcByName<glFrustumxDel>("glFrustumx", getProcAddress);
            glFrustumxOESPtr = LoadProcByName<glFrustumxOESDel>("glFrustumxOES", getProcAddress);
            glGenAsyncMarkersSGIXPtr = LoadProcByName<glGenAsyncMarkersSGIXDel>("glGenAsyncMarkersSGIX", getProcAddress);
            glGenBuffersPtr = LoadProcByName<glGenBuffersDel>("glGenBuffers", getProcAddress);
            glGenBuffersARBPtr = LoadProcByName<glGenBuffersARBDel>("glGenBuffersARB", getProcAddress);
            glGenFencesAPPLEPtr = LoadProcByName<glGenFencesAPPLEDel>("glGenFencesAPPLE", getProcAddress);
            glGenFencesNVPtr = LoadProcByName<glGenFencesNVDel>("glGenFencesNV", getProcAddress);
            glGenFragmentShadersATIPtr = LoadProcByName<glGenFragmentShadersATIDel>("glGenFragmentShadersATI", getProcAddress);
            glGenFramebuffersPtr = LoadProcByName<glGenFramebuffersDel>("glGenFramebuffers", getProcAddress);
            glGenFramebuffersEXTPtr = LoadProcByName<glGenFramebuffersEXTDel>("glGenFramebuffersEXT", getProcAddress);
            glGenFramebuffersOESPtr = LoadProcByName<glGenFramebuffersOESDel>("glGenFramebuffersOES", getProcAddress);
            glGenListsPtr = LoadProcByName<glGenListsDel>("glGenLists", getProcAddress);
            glGenNamesAMDPtr = LoadProcByName<glGenNamesAMDDel>("glGenNamesAMD", getProcAddress);
            glGenOcclusionQueriesNVPtr = LoadProcByName<glGenOcclusionQueriesNVDel>("glGenOcclusionQueriesNV", getProcAddress);
            glGenPathsNVPtr = LoadProcByName<glGenPathsNVDel>("glGenPathsNV", getProcAddress);
            glGenPerfMonitorsAMDPtr = LoadProcByName<glGenPerfMonitorsAMDDel>("glGenPerfMonitorsAMD", getProcAddress);
            glGenProgramPipelinesPtr = LoadProcByName<glGenProgramPipelinesDel>("glGenProgramPipelines", getProcAddress);
            glGenProgramPipelinesEXTPtr = LoadProcByName<glGenProgramPipelinesEXTDel>("glGenProgramPipelinesEXT", getProcAddress);
            glGenProgramsARBPtr = LoadProcByName<glGenProgramsARBDel>("glGenProgramsARB", getProcAddress);
            glGenProgramsNVPtr = LoadProcByName<glGenProgramsNVDel>("glGenProgramsNV", getProcAddress);
            glGenQueriesPtr = LoadProcByName<glGenQueriesDel>("glGenQueries", getProcAddress);
            glGenQueriesARBPtr = LoadProcByName<glGenQueriesARBDel>("glGenQueriesARB", getProcAddress);
            glGenQueriesEXTPtr = LoadProcByName<glGenQueriesEXTDel>("glGenQueriesEXT", getProcAddress);
            glGenQueryResourceTagNVPtr = LoadProcByName<glGenQueryResourceTagNVDel>("glGenQueryResourceTagNV", getProcAddress);
            glGenRenderbuffersPtr = LoadProcByName<glGenRenderbuffersDel>("glGenRenderbuffers", getProcAddress);
            glGenRenderbuffersEXTPtr = LoadProcByName<glGenRenderbuffersEXTDel>("glGenRenderbuffersEXT", getProcAddress);
            glGenRenderbuffersOESPtr = LoadProcByName<glGenRenderbuffersOESDel>("glGenRenderbuffersOES", getProcAddress);
            glGenSamplersPtr = LoadProcByName<glGenSamplersDel>("glGenSamplers", getProcAddress);
            glGenSemaphoresEXTPtr = LoadProcByName<glGenSemaphoresEXTDel>("glGenSemaphoresEXT", getProcAddress);
            glGenSymbolsEXTPtr = LoadProcByName<glGenSymbolsEXTDel>("glGenSymbolsEXT", getProcAddress);
            glGenTexturesPtr = LoadProcByName<glGenTexturesDel>("glGenTextures", getProcAddress);
            glGenTexturesEXTPtr = LoadProcByName<glGenTexturesEXTDel>("glGenTexturesEXT", getProcAddress);
            glGenTransformFeedbacksPtr = LoadProcByName<glGenTransformFeedbacksDel>("glGenTransformFeedbacks", getProcAddress);
            glGenTransformFeedbacksNVPtr = LoadProcByName<glGenTransformFeedbacksNVDel>("glGenTransformFeedbacksNV", getProcAddress);
            glGenVertexArraysPtr = LoadProcByName<glGenVertexArraysDel>("glGenVertexArrays", getProcAddress);
            glGenVertexArraysAPPLEPtr = LoadProcByName<glGenVertexArraysAPPLEDel>("glGenVertexArraysAPPLE", getProcAddress);
            glGenVertexArraysOESPtr = LoadProcByName<glGenVertexArraysOESDel>("glGenVertexArraysOES", getProcAddress);
            glGenVertexShadersEXTPtr = LoadProcByName<glGenVertexShadersEXTDel>("glGenVertexShadersEXT", getProcAddress);
            glGenerateMipmapPtr = LoadProcByName<glGenerateMipmapDel>("glGenerateMipmap", getProcAddress);
            glGenerateMipmapEXTPtr = LoadProcByName<glGenerateMipmapEXTDel>("glGenerateMipmapEXT", getProcAddress);
            glGenerateMipmapOESPtr = LoadProcByName<glGenerateMipmapOESDel>("glGenerateMipmapOES", getProcAddress);
            glGenerateMultiTexMipmapEXTPtr = LoadProcByName<glGenerateMultiTexMipmapEXTDel>("glGenerateMultiTexMipmapEXT", getProcAddress);
            glGenerateTextureMipmapPtr = LoadProcByName<glGenerateTextureMipmapDel>("glGenerateTextureMipmap", getProcAddress);
            glGenerateTextureMipmapEXTPtr = LoadProcByName<glGenerateTextureMipmapEXTDel>("glGenerateTextureMipmapEXT", getProcAddress);
            glGetActiveAtomicCounterBufferivPtr = LoadProcByName<glGetActiveAtomicCounterBufferivDel>("glGetActiveAtomicCounterBufferiv", getProcAddress);
            glGetActiveAttribPtr = LoadProcByName<glGetActiveAttribDel>("glGetActiveAttrib", getProcAddress);
            glGetActiveAttribARBPtr = LoadProcByName<glGetActiveAttribARBDel>("glGetActiveAttribARB", getProcAddress);
            glGetActiveSubroutineNamePtr = LoadProcByName<glGetActiveSubroutineNameDel>("glGetActiveSubroutineName", getProcAddress);
            glGetActiveSubroutineUniformNamePtr = LoadProcByName<glGetActiveSubroutineUniformNameDel>("glGetActiveSubroutineUniformName", getProcAddress);
            glGetActiveSubroutineUniformivPtr = LoadProcByName<glGetActiveSubroutineUniformivDel>("glGetActiveSubroutineUniformiv", getProcAddress);
            glGetActiveUniformPtr = LoadProcByName<glGetActiveUniformDel>("glGetActiveUniform", getProcAddress);
            glGetActiveUniformARBPtr = LoadProcByName<glGetActiveUniformARBDel>("glGetActiveUniformARB", getProcAddress);
            glGetActiveUniformBlockNamePtr = LoadProcByName<glGetActiveUniformBlockNameDel>("glGetActiveUniformBlockName", getProcAddress);
            glGetActiveUniformBlockivPtr = LoadProcByName<glGetActiveUniformBlockivDel>("glGetActiveUniformBlockiv", getProcAddress);
            glGetActiveUniformNamePtr = LoadProcByName<glGetActiveUniformNameDel>("glGetActiveUniformName", getProcAddress);
            glGetActiveUniformsivPtr = LoadProcByName<glGetActiveUniformsivDel>("glGetActiveUniformsiv", getProcAddress);
            glGetActiveVaryingNVPtr = LoadProcByName<glGetActiveVaryingNVDel>("glGetActiveVaryingNV", getProcAddress);
            glGetArrayObjectfvATIPtr = LoadProcByName<glGetArrayObjectfvATIDel>("glGetArrayObjectfvATI", getProcAddress);
            glGetArrayObjectivATIPtr = LoadProcByName<glGetArrayObjectivATIDel>("glGetArrayObjectivATI", getProcAddress);
            glGetAttachedObjectsARBPtr = LoadProcByName<glGetAttachedObjectsARBDel>("glGetAttachedObjectsARB", getProcAddress);
            glGetAttachedShadersPtr = LoadProcByName<glGetAttachedShadersDel>("glGetAttachedShaders", getProcAddress);
            glGetAttribLocationPtr = LoadProcByName<glGetAttribLocationDel>("glGetAttribLocation", getProcAddress);
            glGetAttribLocationARBPtr = LoadProcByName<glGetAttribLocationARBDel>("glGetAttribLocationARB", getProcAddress);
            glGetBooleanIndexedvEXTPtr = LoadProcByName<glGetBooleanIndexedvEXTDel>("glGetBooleanIndexedvEXT", getProcAddress);
            glGetBooleani_vPtr = LoadProcByName<glGetBooleani_vDel>("glGetBooleani_v", getProcAddress);
            glGetBooleanvPtr = LoadProcByName<glGetBooleanvDel>("glGetBooleanv", getProcAddress);
            glGetBufferParameteri64vPtr = LoadProcByName<glGetBufferParameteri64vDel>("glGetBufferParameteri64v", getProcAddress);
            glGetBufferParameterivPtr = LoadProcByName<glGetBufferParameterivDel>("glGetBufferParameteriv", getProcAddress);
            glGetBufferParameterivARBPtr = LoadProcByName<glGetBufferParameterivARBDel>("glGetBufferParameterivARB", getProcAddress);
            glGetBufferParameterui64vNVPtr = LoadProcByName<glGetBufferParameterui64vNVDel>("glGetBufferParameterui64vNV", getProcAddress);
            glGetBufferPointervPtr = LoadProcByName<glGetBufferPointervDel>("glGetBufferPointerv", getProcAddress);
            glGetBufferPointervARBPtr = LoadProcByName<glGetBufferPointervARBDel>("glGetBufferPointervARB", getProcAddress);
            glGetBufferPointervOESPtr = LoadProcByName<glGetBufferPointervOESDel>("glGetBufferPointervOES", getProcAddress);
            glGetBufferSubDataPtr = LoadProcByName<glGetBufferSubDataDel>("glGetBufferSubData", getProcAddress);
            glGetBufferSubDataARBPtr = LoadProcByName<glGetBufferSubDataARBDel>("glGetBufferSubDataARB", getProcAddress);
            glGetClipPlanePtr = LoadProcByName<glGetClipPlaneDel>("glGetClipPlane", getProcAddress);
            glGetClipPlanefPtr = LoadProcByName<glGetClipPlanefDel>("glGetClipPlanef", getProcAddress);
            glGetClipPlanefOESPtr = LoadProcByName<glGetClipPlanefOESDel>("glGetClipPlanefOES", getProcAddress);
            glGetClipPlanexPtr = LoadProcByName<glGetClipPlanexDel>("glGetClipPlanex", getProcAddress);
            glGetClipPlanexOESPtr = LoadProcByName<glGetClipPlanexOESDel>("glGetClipPlanexOES", getProcAddress);
            glGetColorTablePtr = LoadProcByName<glGetColorTableDel>("glGetColorTable", getProcAddress);
            glGetColorTableEXTPtr = LoadProcByName<glGetColorTableEXTDel>("glGetColorTableEXT", getProcAddress);
            glGetColorTableParameterfvPtr = LoadProcByName<glGetColorTableParameterfvDel>("glGetColorTableParameterfv", getProcAddress);
            glGetColorTableParameterfvEXTPtr = LoadProcByName<glGetColorTableParameterfvEXTDel>("glGetColorTableParameterfvEXT", getProcAddress);
            glGetColorTableParameterfvSGIPtr = LoadProcByName<glGetColorTableParameterfvSGIDel>("glGetColorTableParameterfvSGI", getProcAddress);
            glGetColorTableParameterivPtr = LoadProcByName<glGetColorTableParameterivDel>("glGetColorTableParameteriv", getProcAddress);
            glGetColorTableParameterivEXTPtr = LoadProcByName<glGetColorTableParameterivEXTDel>("glGetColorTableParameterivEXT", getProcAddress);
            glGetColorTableParameterivSGIPtr = LoadProcByName<glGetColorTableParameterivSGIDel>("glGetColorTableParameterivSGI", getProcAddress);
            glGetColorTableSGIPtr = LoadProcByName<glGetColorTableSGIDel>("glGetColorTableSGI", getProcAddress);
            glGetCombinerInputParameterfvNVPtr = LoadProcByName<glGetCombinerInputParameterfvNVDel>("glGetCombinerInputParameterfvNV", getProcAddress);
            glGetCombinerInputParameterivNVPtr = LoadProcByName<glGetCombinerInputParameterivNVDel>("glGetCombinerInputParameterivNV", getProcAddress);
            glGetCombinerOutputParameterfvNVPtr = LoadProcByName<glGetCombinerOutputParameterfvNVDel>("glGetCombinerOutputParameterfvNV", getProcAddress);
            glGetCombinerOutputParameterivNVPtr = LoadProcByName<glGetCombinerOutputParameterivNVDel>("glGetCombinerOutputParameterivNV", getProcAddress);
            glGetCombinerStageParameterfvNVPtr = LoadProcByName<glGetCombinerStageParameterfvNVDel>("glGetCombinerStageParameterfvNV", getProcAddress);
            glGetCommandHeaderNVPtr = LoadProcByName<glGetCommandHeaderNVDel>("glGetCommandHeaderNV", getProcAddress);
            glGetCompressedMultiTexImageEXTPtr = LoadProcByName<glGetCompressedMultiTexImageEXTDel>("glGetCompressedMultiTexImageEXT", getProcAddress);
            glGetCompressedTexImagePtr = LoadProcByName<glGetCompressedTexImageDel>("glGetCompressedTexImage", getProcAddress);
            glGetCompressedTexImageARBPtr = LoadProcByName<glGetCompressedTexImageARBDel>("glGetCompressedTexImageARB", getProcAddress);
            glGetCompressedTextureImagePtr = LoadProcByName<glGetCompressedTextureImageDel>("glGetCompressedTextureImage", getProcAddress);
            glGetCompressedTextureImageEXTPtr = LoadProcByName<glGetCompressedTextureImageEXTDel>("glGetCompressedTextureImageEXT", getProcAddress);
            glGetCompressedTextureSubImagePtr = LoadProcByName<glGetCompressedTextureSubImageDel>("glGetCompressedTextureSubImage", getProcAddress);
            glGetConvolutionFilterPtr = LoadProcByName<glGetConvolutionFilterDel>("glGetConvolutionFilter", getProcAddress);
            glGetConvolutionFilterEXTPtr = LoadProcByName<glGetConvolutionFilterEXTDel>("glGetConvolutionFilterEXT", getProcAddress);
            glGetConvolutionParameterfvPtr = LoadProcByName<glGetConvolutionParameterfvDel>("glGetConvolutionParameterfv", getProcAddress);
            glGetConvolutionParameterfvEXTPtr = LoadProcByName<glGetConvolutionParameterfvEXTDel>("glGetConvolutionParameterfvEXT", getProcAddress);
            glGetConvolutionParameterivPtr = LoadProcByName<glGetConvolutionParameterivDel>("glGetConvolutionParameteriv", getProcAddress);
            glGetConvolutionParameterivEXTPtr = LoadProcByName<glGetConvolutionParameterivEXTDel>("glGetConvolutionParameterivEXT", getProcAddress);
            glGetConvolutionParameterxvOESPtr = LoadProcByName<glGetConvolutionParameterxvOESDel>("glGetConvolutionParameterxvOES", getProcAddress);
            glGetCoverageModulationTableNVPtr = LoadProcByName<glGetCoverageModulationTableNVDel>("glGetCoverageModulationTableNV", getProcAddress);
            glGetDebugMessageLogPtr = LoadProcByName<glGetDebugMessageLogDel>("glGetDebugMessageLog", getProcAddress);
            glGetDebugMessageLogAMDPtr = LoadProcByName<glGetDebugMessageLogAMDDel>("glGetDebugMessageLogAMD", getProcAddress);
            glGetDebugMessageLogARBPtr = LoadProcByName<glGetDebugMessageLogARBDel>("glGetDebugMessageLogARB", getProcAddress);
            glGetDebugMessageLogKHRPtr = LoadProcByName<glGetDebugMessageLogKHRDel>("glGetDebugMessageLogKHR", getProcAddress);
            glGetDetailTexFuncSGISPtr = LoadProcByName<glGetDetailTexFuncSGISDel>("glGetDetailTexFuncSGIS", getProcAddress);
            glGetDoubleIndexedvEXTPtr = LoadProcByName<glGetDoubleIndexedvEXTDel>("glGetDoubleIndexedvEXT", getProcAddress);
            glGetDoublei_vPtr = LoadProcByName<glGetDoublei_vDel>("glGetDoublei_v", getProcAddress);
            glGetDoublei_vEXTPtr = LoadProcByName<glGetDoublei_vEXTDel>("glGetDoublei_vEXT", getProcAddress);
            glGetDoublevPtr = LoadProcByName<glGetDoublevDel>("glGetDoublev", getProcAddress);
            glGetDriverControlStringQCOMPtr = LoadProcByName<glGetDriverControlStringQCOMDel>("glGetDriverControlStringQCOM", getProcAddress);
            glGetDriverControlsQCOMPtr = LoadProcByName<glGetDriverControlsQCOMDel>("glGetDriverControlsQCOM", getProcAddress);
            glGetErrorPtr = LoadProcByName<glGetErrorDel>("glGetError", getProcAddress);
            glGetFenceivNVPtr = LoadProcByName<glGetFenceivNVDel>("glGetFenceivNV", getProcAddress);
            glGetFinalCombinerInputParameterfvNVPtr = LoadProcByName<glGetFinalCombinerInputParameterfvNVDel>("glGetFinalCombinerInputParameterfvNV", getProcAddress);
            glGetFinalCombinerInputParameterivNVPtr = LoadProcByName<glGetFinalCombinerInputParameterivNVDel>("glGetFinalCombinerInputParameterivNV", getProcAddress);
            glGetFirstPerfQueryIdINTELPtr = LoadProcByName<glGetFirstPerfQueryIdINTELDel>("glGetFirstPerfQueryIdINTEL", getProcAddress);
            glGetFixedvPtr = LoadProcByName<glGetFixedvDel>("glGetFixedv", getProcAddress);
            glGetFixedvOESPtr = LoadProcByName<glGetFixedvOESDel>("glGetFixedvOES", getProcAddress);
            glGetFloatIndexedvEXTPtr = LoadProcByName<glGetFloatIndexedvEXTDel>("glGetFloatIndexedvEXT", getProcAddress);
            glGetFloati_vPtr = LoadProcByName<glGetFloati_vDel>("glGetFloati_v", getProcAddress);
            glGetFloati_vEXTPtr = LoadProcByName<glGetFloati_vEXTDel>("glGetFloati_vEXT", getProcAddress);
            glGetFloati_vNVPtr = LoadProcByName<glGetFloati_vNVDel>("glGetFloati_vNV", getProcAddress);
            glGetFloati_vOESPtr = LoadProcByName<glGetFloati_vOESDel>("glGetFloati_vOES", getProcAddress);
            glGetFloatvPtr = LoadProcByName<glGetFloatvDel>("glGetFloatv", getProcAddress);
            glGetFogFuncSGISPtr = LoadProcByName<glGetFogFuncSGISDel>("glGetFogFuncSGIS", getProcAddress);
            glGetFragDataIndexPtr = LoadProcByName<glGetFragDataIndexDel>("glGetFragDataIndex", getProcAddress);
            glGetFragDataIndexEXTPtr = LoadProcByName<glGetFragDataIndexEXTDel>("glGetFragDataIndexEXT", getProcAddress);
            glGetFragDataLocationPtr = LoadProcByName<glGetFragDataLocationDel>("glGetFragDataLocation", getProcAddress);
            glGetFragDataLocationEXTPtr = LoadProcByName<glGetFragDataLocationEXTDel>("glGetFragDataLocationEXT", getProcAddress);
            glGetFragmentLightfvSGIXPtr = LoadProcByName<glGetFragmentLightfvSGIXDel>("glGetFragmentLightfvSGIX", getProcAddress);
            glGetFragmentLightivSGIXPtr = LoadProcByName<glGetFragmentLightivSGIXDel>("glGetFragmentLightivSGIX", getProcAddress);
            glGetFragmentMaterialfvSGIXPtr = LoadProcByName<glGetFragmentMaterialfvSGIXDel>("glGetFragmentMaterialfvSGIX", getProcAddress);
            glGetFragmentMaterialivSGIXPtr = LoadProcByName<glGetFragmentMaterialivSGIXDel>("glGetFragmentMaterialivSGIX", getProcAddress);
            glGetFramebufferAttachmentParameterivPtr = LoadProcByName<glGetFramebufferAttachmentParameterivDel>("glGetFramebufferAttachmentParameteriv", getProcAddress);
            glGetFramebufferAttachmentParameterivEXTPtr = LoadProcByName<glGetFramebufferAttachmentParameterivEXTDel>("glGetFramebufferAttachmentParameterivEXT", getProcAddress);
            glGetFramebufferAttachmentParameterivOESPtr = LoadProcByName<glGetFramebufferAttachmentParameterivOESDel>("glGetFramebufferAttachmentParameterivOES", getProcAddress);
            glGetFramebufferParameterfvAMDPtr = LoadProcByName<glGetFramebufferParameterfvAMDDel>("glGetFramebufferParameterfvAMD", getProcAddress);
            glGetFramebufferParameterivPtr = LoadProcByName<glGetFramebufferParameterivDel>("glGetFramebufferParameteriv", getProcAddress);
            glGetFramebufferParameterivEXTPtr = LoadProcByName<glGetFramebufferParameterivEXTDel>("glGetFramebufferParameterivEXT", getProcAddress);
            glGetFramebufferPixelLocalStorageSizeEXTPtr = LoadProcByName<glGetFramebufferPixelLocalStorageSizeEXTDel>("glGetFramebufferPixelLocalStorageSizeEXT", getProcAddress);
            glGetGraphicsResetStatusPtr = LoadProcByName<glGetGraphicsResetStatusDel>("glGetGraphicsResetStatus", getProcAddress);
            glGetGraphicsResetStatusARBPtr = LoadProcByName<glGetGraphicsResetStatusARBDel>("glGetGraphicsResetStatusARB", getProcAddress);
            glGetGraphicsResetStatusEXTPtr = LoadProcByName<glGetGraphicsResetStatusEXTDel>("glGetGraphicsResetStatusEXT", getProcAddress);
            glGetGraphicsResetStatusKHRPtr = LoadProcByName<glGetGraphicsResetStatusKHRDel>("glGetGraphicsResetStatusKHR", getProcAddress);
            glGetHandleARBPtr = LoadProcByName<glGetHandleARBDel>("glGetHandleARB", getProcAddress);
            glGetHistogramPtr = LoadProcByName<glGetHistogramDel>("glGetHistogram", getProcAddress);
            glGetHistogramEXTPtr = LoadProcByName<glGetHistogramEXTDel>("glGetHistogramEXT", getProcAddress);
            glGetHistogramParameterfvPtr = LoadProcByName<glGetHistogramParameterfvDel>("glGetHistogramParameterfv", getProcAddress);
            glGetHistogramParameterfvEXTPtr = LoadProcByName<glGetHistogramParameterfvEXTDel>("glGetHistogramParameterfvEXT", getProcAddress);
            glGetHistogramParameterivPtr = LoadProcByName<glGetHistogramParameterivDel>("glGetHistogramParameteriv", getProcAddress);
            glGetHistogramParameterivEXTPtr = LoadProcByName<glGetHistogramParameterivEXTDel>("glGetHistogramParameterivEXT", getProcAddress);
            glGetHistogramParameterxvOESPtr = LoadProcByName<glGetHistogramParameterxvOESDel>("glGetHistogramParameterxvOES", getProcAddress);
            glGetImageHandleARBPtr = LoadProcByName<glGetImageHandleARBDel>("glGetImageHandleARB", getProcAddress);
            glGetImageHandleNVPtr = LoadProcByName<glGetImageHandleNVDel>("glGetImageHandleNV", getProcAddress);
            glGetImageTransformParameterfvHPPtr = LoadProcByName<glGetImageTransformParameterfvHPDel>("glGetImageTransformParameterfvHP", getProcAddress);
            glGetImageTransformParameterivHPPtr = LoadProcByName<glGetImageTransformParameterivHPDel>("glGetImageTransformParameterivHP", getProcAddress);
            glGetInfoLogARBPtr = LoadProcByName<glGetInfoLogARBDel>("glGetInfoLogARB", getProcAddress);
            glGetInstrumentsSGIXPtr = LoadProcByName<glGetInstrumentsSGIXDel>("glGetInstrumentsSGIX", getProcAddress);
            glGetInteger64i_vPtr = LoadProcByName<glGetInteger64i_vDel>("glGetInteger64i_v", getProcAddress);
            glGetInteger64vPtr = LoadProcByName<glGetInteger64vDel>("glGetInteger64v", getProcAddress);
            glGetInteger64vAPPLEPtr = LoadProcByName<glGetInteger64vAPPLEDel>("glGetInteger64vAPPLE", getProcAddress);
            glGetInteger64vEXTPtr = LoadProcByName<glGetInteger64vEXTDel>("glGetInteger64vEXT", getProcAddress);
            glGetIntegerIndexedvEXTPtr = LoadProcByName<glGetIntegerIndexedvEXTDel>("glGetIntegerIndexedvEXT", getProcAddress);
            glGetIntegeri_vPtr = LoadProcByName<glGetIntegeri_vDel>("glGetIntegeri_v", getProcAddress);
            glGetIntegeri_vEXTPtr = LoadProcByName<glGetIntegeri_vEXTDel>("glGetIntegeri_vEXT", getProcAddress);
            glGetIntegerui64i_vNVPtr = LoadProcByName<glGetIntegerui64i_vNVDel>("glGetIntegerui64i_vNV", getProcAddress);
            glGetIntegerui64vNVPtr = LoadProcByName<glGetIntegerui64vNVDel>("glGetIntegerui64vNV", getProcAddress);
            glGetIntegervPtr = LoadProcByName<glGetIntegervDel>("glGetIntegerv", getProcAddress);
            glGetInternalformatSampleivNVPtr = LoadProcByName<glGetInternalformatSampleivNVDel>("glGetInternalformatSampleivNV", getProcAddress);
            glGetInternalformati64vPtr = LoadProcByName<glGetInternalformati64vDel>("glGetInternalformati64v", getProcAddress);
            glGetInternalformativPtr = LoadProcByName<glGetInternalformativDel>("glGetInternalformativ", getProcAddress);
            glGetInvariantBooleanvEXTPtr = LoadProcByName<glGetInvariantBooleanvEXTDel>("glGetInvariantBooleanvEXT", getProcAddress);
            glGetInvariantFloatvEXTPtr = LoadProcByName<glGetInvariantFloatvEXTDel>("glGetInvariantFloatvEXT", getProcAddress);
            glGetInvariantIntegervEXTPtr = LoadProcByName<glGetInvariantIntegervEXTDel>("glGetInvariantIntegervEXT", getProcAddress);
            glGetLightfvPtr = LoadProcByName<glGetLightfvDel>("glGetLightfv", getProcAddress);
            glGetLightivPtr = LoadProcByName<glGetLightivDel>("glGetLightiv", getProcAddress);
            glGetLightxOESPtr = LoadProcByName<glGetLightxOESDel>("glGetLightxOES", getProcAddress);
            glGetLightxvPtr = LoadProcByName<glGetLightxvDel>("glGetLightxv", getProcAddress);
            glGetLightxvOESPtr = LoadProcByName<glGetLightxvOESDel>("glGetLightxvOES", getProcAddress);
            glGetListParameterfvSGIXPtr = LoadProcByName<glGetListParameterfvSGIXDel>("glGetListParameterfvSGIX", getProcAddress);
            glGetListParameterivSGIXPtr = LoadProcByName<glGetListParameterivSGIXDel>("glGetListParameterivSGIX", getProcAddress);
            glGetLocalConstantBooleanvEXTPtr = LoadProcByName<glGetLocalConstantBooleanvEXTDel>("glGetLocalConstantBooleanvEXT", getProcAddress);
            glGetLocalConstantFloatvEXTPtr = LoadProcByName<glGetLocalConstantFloatvEXTDel>("glGetLocalConstantFloatvEXT", getProcAddress);
            glGetLocalConstantIntegervEXTPtr = LoadProcByName<glGetLocalConstantIntegervEXTDel>("glGetLocalConstantIntegervEXT", getProcAddress);
            glGetMapAttribParameterfvNVPtr = LoadProcByName<glGetMapAttribParameterfvNVDel>("glGetMapAttribParameterfvNV", getProcAddress);
            glGetMapAttribParameterivNVPtr = LoadProcByName<glGetMapAttribParameterivNVDel>("glGetMapAttribParameterivNV", getProcAddress);
            glGetMapControlPointsNVPtr = LoadProcByName<glGetMapControlPointsNVDel>("glGetMapControlPointsNV", getProcAddress);
            glGetMapParameterfvNVPtr = LoadProcByName<glGetMapParameterfvNVDel>("glGetMapParameterfvNV", getProcAddress);
            glGetMapParameterivNVPtr = LoadProcByName<glGetMapParameterivNVDel>("glGetMapParameterivNV", getProcAddress);
            glGetMapdvPtr = LoadProcByName<glGetMapdvDel>("glGetMapdv", getProcAddress);
            glGetMapfvPtr = LoadProcByName<glGetMapfvDel>("glGetMapfv", getProcAddress);
            glGetMapivPtr = LoadProcByName<glGetMapivDel>("glGetMapiv", getProcAddress);
            glGetMapxvOESPtr = LoadProcByName<glGetMapxvOESDel>("glGetMapxvOES", getProcAddress);
            glGetMaterialfvPtr = LoadProcByName<glGetMaterialfvDel>("glGetMaterialfv", getProcAddress);
            glGetMaterialivPtr = LoadProcByName<glGetMaterialivDel>("glGetMaterialiv", getProcAddress);
            glGetMaterialxOESPtr = LoadProcByName<glGetMaterialxOESDel>("glGetMaterialxOES", getProcAddress);
            glGetMaterialxvPtr = LoadProcByName<glGetMaterialxvDel>("glGetMaterialxv", getProcAddress);
            glGetMaterialxvOESPtr = LoadProcByName<glGetMaterialxvOESDel>("glGetMaterialxvOES", getProcAddress);
            glGetMemoryObjectDetachedResourcesuivNVPtr = LoadProcByName<glGetMemoryObjectDetachedResourcesuivNVDel>("glGetMemoryObjectDetachedResourcesuivNV", getProcAddress);
            glGetMemoryObjectParameterivEXTPtr = LoadProcByName<glGetMemoryObjectParameterivEXTDel>("glGetMemoryObjectParameterivEXT", getProcAddress);
            glGetMinmaxPtr = LoadProcByName<glGetMinmaxDel>("glGetMinmax", getProcAddress);
            glGetMinmaxEXTPtr = LoadProcByName<glGetMinmaxEXTDel>("glGetMinmaxEXT", getProcAddress);
            glGetMinmaxParameterfvPtr = LoadProcByName<glGetMinmaxParameterfvDel>("glGetMinmaxParameterfv", getProcAddress);
            glGetMinmaxParameterfvEXTPtr = LoadProcByName<glGetMinmaxParameterfvEXTDel>("glGetMinmaxParameterfvEXT", getProcAddress);
            glGetMinmaxParameterivPtr = LoadProcByName<glGetMinmaxParameterivDel>("glGetMinmaxParameteriv", getProcAddress);
            glGetMinmaxParameterivEXTPtr = LoadProcByName<glGetMinmaxParameterivEXTDel>("glGetMinmaxParameterivEXT", getProcAddress);
            glGetMultiTexEnvfvEXTPtr = LoadProcByName<glGetMultiTexEnvfvEXTDel>("glGetMultiTexEnvfvEXT", getProcAddress);
            glGetMultiTexEnvivEXTPtr = LoadProcByName<glGetMultiTexEnvivEXTDel>("glGetMultiTexEnvivEXT", getProcAddress);
            glGetMultiTexGendvEXTPtr = LoadProcByName<glGetMultiTexGendvEXTDel>("glGetMultiTexGendvEXT", getProcAddress);
            glGetMultiTexGenfvEXTPtr = LoadProcByName<glGetMultiTexGenfvEXTDel>("glGetMultiTexGenfvEXT", getProcAddress);
            glGetMultiTexGenivEXTPtr = LoadProcByName<glGetMultiTexGenivEXTDel>("glGetMultiTexGenivEXT", getProcAddress);
            glGetMultiTexImageEXTPtr = LoadProcByName<glGetMultiTexImageEXTDel>("glGetMultiTexImageEXT", getProcAddress);
            glGetMultiTexLevelParameterfvEXTPtr = LoadProcByName<glGetMultiTexLevelParameterfvEXTDel>("glGetMultiTexLevelParameterfvEXT", getProcAddress);
            glGetMultiTexLevelParameterivEXTPtr = LoadProcByName<glGetMultiTexLevelParameterivEXTDel>("glGetMultiTexLevelParameterivEXT", getProcAddress);
            glGetMultiTexParameterIivEXTPtr = LoadProcByName<glGetMultiTexParameterIivEXTDel>("glGetMultiTexParameterIivEXT", getProcAddress);
            glGetMultiTexParameterIuivEXTPtr = LoadProcByName<glGetMultiTexParameterIuivEXTDel>("glGetMultiTexParameterIuivEXT", getProcAddress);
            glGetMultiTexParameterfvEXTPtr = LoadProcByName<glGetMultiTexParameterfvEXTDel>("glGetMultiTexParameterfvEXT", getProcAddress);
            glGetMultiTexParameterivEXTPtr = LoadProcByName<glGetMultiTexParameterivEXTDel>("glGetMultiTexParameterivEXT", getProcAddress);
            glGetMultisamplefvPtr = LoadProcByName<glGetMultisamplefvDel>("glGetMultisamplefv", getProcAddress);
            glGetMultisamplefvNVPtr = LoadProcByName<glGetMultisamplefvNVDel>("glGetMultisamplefvNV", getProcAddress);
            glGetNamedBufferParameteri64vPtr = LoadProcByName<glGetNamedBufferParameteri64vDel>("glGetNamedBufferParameteri64v", getProcAddress);
            glGetNamedBufferParameterivPtr = LoadProcByName<glGetNamedBufferParameterivDel>("glGetNamedBufferParameteriv", getProcAddress);
            glGetNamedBufferParameterivEXTPtr = LoadProcByName<glGetNamedBufferParameterivEXTDel>("glGetNamedBufferParameterivEXT", getProcAddress);
            glGetNamedBufferParameterui64vNVPtr = LoadProcByName<glGetNamedBufferParameterui64vNVDel>("glGetNamedBufferParameterui64vNV", getProcAddress);
            glGetNamedBufferPointervPtr = LoadProcByName<glGetNamedBufferPointervDel>("glGetNamedBufferPointerv", getProcAddress);
            glGetNamedBufferPointervEXTPtr = LoadProcByName<glGetNamedBufferPointervEXTDel>("glGetNamedBufferPointervEXT", getProcAddress);
            glGetNamedBufferSubDataPtr = LoadProcByName<glGetNamedBufferSubDataDel>("glGetNamedBufferSubData", getProcAddress);
            glGetNamedBufferSubDataEXTPtr = LoadProcByName<glGetNamedBufferSubDataEXTDel>("glGetNamedBufferSubDataEXT", getProcAddress);
            glGetNamedFramebufferParameterfvAMDPtr = LoadProcByName<glGetNamedFramebufferParameterfvAMDDel>("glGetNamedFramebufferParameterfvAMD", getProcAddress);
            glGetNamedFramebufferAttachmentParameterivPtr = LoadProcByName<glGetNamedFramebufferAttachmentParameterivDel>("glGetNamedFramebufferAttachmentParameteriv", getProcAddress);
            glGetNamedFramebufferAttachmentParameterivEXTPtr = LoadProcByName<glGetNamedFramebufferAttachmentParameterivEXTDel>("glGetNamedFramebufferAttachmentParameterivEXT", getProcAddress);
            glGetNamedFramebufferParameterivPtr = LoadProcByName<glGetNamedFramebufferParameterivDel>("glGetNamedFramebufferParameteriv", getProcAddress);
            glGetNamedFramebufferParameterivEXTPtr = LoadProcByName<glGetNamedFramebufferParameterivEXTDel>("glGetNamedFramebufferParameterivEXT", getProcAddress);
            glGetNamedProgramLocalParameterIivEXTPtr = LoadProcByName<glGetNamedProgramLocalParameterIivEXTDel>("glGetNamedProgramLocalParameterIivEXT", getProcAddress);
            glGetNamedProgramLocalParameterIuivEXTPtr = LoadProcByName<glGetNamedProgramLocalParameterIuivEXTDel>("glGetNamedProgramLocalParameterIuivEXT", getProcAddress);
            glGetNamedProgramLocalParameterdvEXTPtr = LoadProcByName<glGetNamedProgramLocalParameterdvEXTDel>("glGetNamedProgramLocalParameterdvEXT", getProcAddress);
            glGetNamedProgramLocalParameterfvEXTPtr = LoadProcByName<glGetNamedProgramLocalParameterfvEXTDel>("glGetNamedProgramLocalParameterfvEXT", getProcAddress);
            glGetNamedProgramStringEXTPtr = LoadProcByName<glGetNamedProgramStringEXTDel>("glGetNamedProgramStringEXT", getProcAddress);
            glGetNamedProgramivEXTPtr = LoadProcByName<glGetNamedProgramivEXTDel>("glGetNamedProgramivEXT", getProcAddress);
            glGetNamedRenderbufferParameterivPtr = LoadProcByName<glGetNamedRenderbufferParameterivDel>("glGetNamedRenderbufferParameteriv", getProcAddress);
            glGetNamedRenderbufferParameterivEXTPtr = LoadProcByName<glGetNamedRenderbufferParameterivEXTDel>("glGetNamedRenderbufferParameterivEXT", getProcAddress);
            glGetNamedStringARBPtr = LoadProcByName<glGetNamedStringARBDel>("glGetNamedStringARB", getProcAddress);
            glGetNamedStringivARBPtr = LoadProcByName<glGetNamedStringivARBDel>("glGetNamedStringivARB", getProcAddress);
            glGetNextPerfQueryIdINTELPtr = LoadProcByName<glGetNextPerfQueryIdINTELDel>("glGetNextPerfQueryIdINTEL", getProcAddress);
            glGetObjectBufferfvATIPtr = LoadProcByName<glGetObjectBufferfvATIDel>("glGetObjectBufferfvATI", getProcAddress);
            glGetObjectBufferivATIPtr = LoadProcByName<glGetObjectBufferivATIDel>("glGetObjectBufferivATI", getProcAddress);
            glGetObjectLabelPtr = LoadProcByName<glGetObjectLabelDel>("glGetObjectLabel", getProcAddress);
            glGetObjectLabelEXTPtr = LoadProcByName<glGetObjectLabelEXTDel>("glGetObjectLabelEXT", getProcAddress);
            glGetObjectLabelKHRPtr = LoadProcByName<glGetObjectLabelKHRDel>("glGetObjectLabelKHR", getProcAddress);
            glGetObjectParameterfvARBPtr = LoadProcByName<glGetObjectParameterfvARBDel>("glGetObjectParameterfvARB", getProcAddress);
            glGetObjectParameterivAPPLEPtr = LoadProcByName<glGetObjectParameterivAPPLEDel>("glGetObjectParameterivAPPLE", getProcAddress);
            glGetObjectParameterivARBPtr = LoadProcByName<glGetObjectParameterivARBDel>("glGetObjectParameterivARB", getProcAddress);
            glGetObjectPtrLabelPtr = LoadProcByName<glGetObjectPtrLabelDel>("glGetObjectPtrLabel", getProcAddress);
            glGetObjectPtrLabelKHRPtr = LoadProcByName<glGetObjectPtrLabelKHRDel>("glGetObjectPtrLabelKHR", getProcAddress);
            glGetOcclusionQueryivNVPtr = LoadProcByName<glGetOcclusionQueryivNVDel>("glGetOcclusionQueryivNV", getProcAddress);
            glGetOcclusionQueryuivNVPtr = LoadProcByName<glGetOcclusionQueryuivNVDel>("glGetOcclusionQueryuivNV", getProcAddress);
            glGetPathColorGenfvNVPtr = LoadProcByName<glGetPathColorGenfvNVDel>("glGetPathColorGenfvNV", getProcAddress);
            glGetPathColorGenivNVPtr = LoadProcByName<glGetPathColorGenivNVDel>("glGetPathColorGenivNV", getProcAddress);
            glGetPathCommandsNVPtr = LoadProcByName<glGetPathCommandsNVDel>("glGetPathCommandsNV", getProcAddress);
            glGetPathCoordsNVPtr = LoadProcByName<glGetPathCoordsNVDel>("glGetPathCoordsNV", getProcAddress);
            glGetPathDashArrayNVPtr = LoadProcByName<glGetPathDashArrayNVDel>("glGetPathDashArrayNV", getProcAddress);
            glGetPathLengthNVPtr = LoadProcByName<glGetPathLengthNVDel>("glGetPathLengthNV", getProcAddress);
            glGetPathMetricRangeNVPtr = LoadProcByName<glGetPathMetricRangeNVDel>("glGetPathMetricRangeNV", getProcAddress);
            glGetPathMetricsNVPtr = LoadProcByName<glGetPathMetricsNVDel>("glGetPathMetricsNV", getProcAddress);
            glGetPathParameterfvNVPtr = LoadProcByName<glGetPathParameterfvNVDel>("glGetPathParameterfvNV", getProcAddress);
            glGetPathParameterivNVPtr = LoadProcByName<glGetPathParameterivNVDel>("glGetPathParameterivNV", getProcAddress);
            glGetPathSpacingNVPtr = LoadProcByName<glGetPathSpacingNVDel>("glGetPathSpacingNV", getProcAddress);
            glGetPathTexGenfvNVPtr = LoadProcByName<glGetPathTexGenfvNVDel>("glGetPathTexGenfvNV", getProcAddress);
            glGetPathTexGenivNVPtr = LoadProcByName<glGetPathTexGenivNVDel>("glGetPathTexGenivNV", getProcAddress);
            glGetPerfCounterInfoINTELPtr = LoadProcByName<glGetPerfCounterInfoINTELDel>("glGetPerfCounterInfoINTEL", getProcAddress);
            glGetPerfMonitorCounterDataAMDPtr = LoadProcByName<glGetPerfMonitorCounterDataAMDDel>("glGetPerfMonitorCounterDataAMD", getProcAddress);
            glGetPerfMonitorCounterInfoAMDPtr = LoadProcByName<glGetPerfMonitorCounterInfoAMDDel>("glGetPerfMonitorCounterInfoAMD", getProcAddress);
            glGetPerfMonitorCounterStringAMDPtr = LoadProcByName<glGetPerfMonitorCounterStringAMDDel>("glGetPerfMonitorCounterStringAMD", getProcAddress);
            glGetPerfMonitorCountersAMDPtr = LoadProcByName<glGetPerfMonitorCountersAMDDel>("glGetPerfMonitorCountersAMD", getProcAddress);
            glGetPerfMonitorGroupStringAMDPtr = LoadProcByName<glGetPerfMonitorGroupStringAMDDel>("glGetPerfMonitorGroupStringAMD", getProcAddress);
            glGetPerfMonitorGroupsAMDPtr = LoadProcByName<glGetPerfMonitorGroupsAMDDel>("glGetPerfMonitorGroupsAMD", getProcAddress);
            glGetPerfQueryDataINTELPtr = LoadProcByName<glGetPerfQueryDataINTELDel>("glGetPerfQueryDataINTEL", getProcAddress);
            glGetPerfQueryIdByNameINTELPtr = LoadProcByName<glGetPerfQueryIdByNameINTELDel>("glGetPerfQueryIdByNameINTEL", getProcAddress);
            glGetPerfQueryInfoINTELPtr = LoadProcByName<glGetPerfQueryInfoINTELDel>("glGetPerfQueryInfoINTEL", getProcAddress);
            glGetPixelMapfvPtr = LoadProcByName<glGetPixelMapfvDel>("glGetPixelMapfv", getProcAddress);
            glGetPixelMapuivPtr = LoadProcByName<glGetPixelMapuivDel>("glGetPixelMapuiv", getProcAddress);
            glGetPixelMapusvPtr = LoadProcByName<glGetPixelMapusvDel>("glGetPixelMapusv", getProcAddress);
            glGetPixelMapxvPtr = LoadProcByName<glGetPixelMapxvDel>("glGetPixelMapxv", getProcAddress);
            glGetPixelTexGenParameterfvSGISPtr = LoadProcByName<glGetPixelTexGenParameterfvSGISDel>("glGetPixelTexGenParameterfvSGIS", getProcAddress);
            glGetPixelTexGenParameterivSGISPtr = LoadProcByName<glGetPixelTexGenParameterivSGISDel>("glGetPixelTexGenParameterivSGIS", getProcAddress);
            glGetPixelTransformParameterfvEXTPtr = LoadProcByName<glGetPixelTransformParameterfvEXTDel>("glGetPixelTransformParameterfvEXT", getProcAddress);
            glGetPixelTransformParameterivEXTPtr = LoadProcByName<glGetPixelTransformParameterivEXTDel>("glGetPixelTransformParameterivEXT", getProcAddress);
            glGetPointerIndexedvEXTPtr = LoadProcByName<glGetPointerIndexedvEXTDel>("glGetPointerIndexedvEXT", getProcAddress);
            glGetPointeri_vEXTPtr = LoadProcByName<glGetPointeri_vEXTDel>("glGetPointeri_vEXT", getProcAddress);
            glGetPointervPtr = LoadProcByName<glGetPointervDel>("glGetPointerv", getProcAddress);
            glGetPointervEXTPtr = LoadProcByName<glGetPointervEXTDel>("glGetPointervEXT", getProcAddress);
            glGetPointervKHRPtr = LoadProcByName<glGetPointervKHRDel>("glGetPointervKHR", getProcAddress);
            glGetPolygonStipplePtr = LoadProcByName<glGetPolygonStippleDel>("glGetPolygonStipple", getProcAddress);
            glGetProgramBinaryPtr = LoadProcByName<glGetProgramBinaryDel>("glGetProgramBinary", getProcAddress);
            glGetProgramBinaryOESPtr = LoadProcByName<glGetProgramBinaryOESDel>("glGetProgramBinaryOES", getProcAddress);
            glGetProgramEnvParameterIivNVPtr = LoadProcByName<glGetProgramEnvParameterIivNVDel>("glGetProgramEnvParameterIivNV", getProcAddress);
            glGetProgramEnvParameterIuivNVPtr = LoadProcByName<glGetProgramEnvParameterIuivNVDel>("glGetProgramEnvParameterIuivNV", getProcAddress);
            glGetProgramEnvParameterdvARBPtr = LoadProcByName<glGetProgramEnvParameterdvARBDel>("glGetProgramEnvParameterdvARB", getProcAddress);
            glGetProgramEnvParameterfvARBPtr = LoadProcByName<glGetProgramEnvParameterfvARBDel>("glGetProgramEnvParameterfvARB", getProcAddress);
            glGetProgramInfoLogPtr = LoadProcByName<glGetProgramInfoLogDel>("glGetProgramInfoLog", getProcAddress);
            glGetProgramInterfaceivPtr = LoadProcByName<glGetProgramInterfaceivDel>("glGetProgramInterfaceiv", getProcAddress);
            glGetProgramLocalParameterIivNVPtr = LoadProcByName<glGetProgramLocalParameterIivNVDel>("glGetProgramLocalParameterIivNV", getProcAddress);
            glGetProgramLocalParameterIuivNVPtr = LoadProcByName<glGetProgramLocalParameterIuivNVDel>("glGetProgramLocalParameterIuivNV", getProcAddress);
            glGetProgramLocalParameterdvARBPtr = LoadProcByName<glGetProgramLocalParameterdvARBDel>("glGetProgramLocalParameterdvARB", getProcAddress);
            glGetProgramLocalParameterfvARBPtr = LoadProcByName<glGetProgramLocalParameterfvARBDel>("glGetProgramLocalParameterfvARB", getProcAddress);
            glGetProgramNamedParameterdvNVPtr = LoadProcByName<glGetProgramNamedParameterdvNVDel>("glGetProgramNamedParameterdvNV", getProcAddress);
            glGetProgramNamedParameterfvNVPtr = LoadProcByName<glGetProgramNamedParameterfvNVDel>("glGetProgramNamedParameterfvNV", getProcAddress);
            glGetProgramParameterdvNVPtr = LoadProcByName<glGetProgramParameterdvNVDel>("glGetProgramParameterdvNV", getProcAddress);
            glGetProgramParameterfvNVPtr = LoadProcByName<glGetProgramParameterfvNVDel>("glGetProgramParameterfvNV", getProcAddress);
            glGetProgramPipelineInfoLogPtr = LoadProcByName<glGetProgramPipelineInfoLogDel>("glGetProgramPipelineInfoLog", getProcAddress);
            glGetProgramPipelineInfoLogEXTPtr = LoadProcByName<glGetProgramPipelineInfoLogEXTDel>("glGetProgramPipelineInfoLogEXT", getProcAddress);
            glGetProgramPipelineivPtr = LoadProcByName<glGetProgramPipelineivDel>("glGetProgramPipelineiv", getProcAddress);
            glGetProgramPipelineivEXTPtr = LoadProcByName<glGetProgramPipelineivEXTDel>("glGetProgramPipelineivEXT", getProcAddress);
            glGetProgramResourceIndexPtr = LoadProcByName<glGetProgramResourceIndexDel>("glGetProgramResourceIndex", getProcAddress);
            glGetProgramResourceLocationPtr = LoadProcByName<glGetProgramResourceLocationDel>("glGetProgramResourceLocation", getProcAddress);
            glGetProgramResourceLocationIndexPtr = LoadProcByName<glGetProgramResourceLocationIndexDel>("glGetProgramResourceLocationIndex", getProcAddress);
            glGetProgramResourceLocationIndexEXTPtr = LoadProcByName<glGetProgramResourceLocationIndexEXTDel>("glGetProgramResourceLocationIndexEXT", getProcAddress);
            glGetProgramResourceNamePtr = LoadProcByName<glGetProgramResourceNameDel>("glGetProgramResourceName", getProcAddress);
            glGetProgramResourcefvNVPtr = LoadProcByName<glGetProgramResourcefvNVDel>("glGetProgramResourcefvNV", getProcAddress);
            glGetProgramResourceivPtr = LoadProcByName<glGetProgramResourceivDel>("glGetProgramResourceiv", getProcAddress);
            glGetProgramStageivPtr = LoadProcByName<glGetProgramStageivDel>("glGetProgramStageiv", getProcAddress);
            glGetProgramStringARBPtr = LoadProcByName<glGetProgramStringARBDel>("glGetProgramStringARB", getProcAddress);
            glGetProgramStringNVPtr = LoadProcByName<glGetProgramStringNVDel>("glGetProgramStringNV", getProcAddress);
            glGetProgramSubroutineParameteruivNVPtr = LoadProcByName<glGetProgramSubroutineParameteruivNVDel>("glGetProgramSubroutineParameteruivNV", getProcAddress);
            glGetProgramivPtr = LoadProcByName<glGetProgramivDel>("glGetProgramiv", getProcAddress);
            glGetProgramivARBPtr = LoadProcByName<glGetProgramivARBDel>("glGetProgramivARB", getProcAddress);
            glGetProgramivNVPtr = LoadProcByName<glGetProgramivNVDel>("glGetProgramivNV", getProcAddress);
            glGetQueryBufferObjecti64vPtr = LoadProcByName<glGetQueryBufferObjecti64vDel>("glGetQueryBufferObjecti64v", getProcAddress);
            glGetQueryBufferObjectivPtr = LoadProcByName<glGetQueryBufferObjectivDel>("glGetQueryBufferObjectiv", getProcAddress);
            glGetQueryBufferObjectui64vPtr = LoadProcByName<glGetQueryBufferObjectui64vDel>("glGetQueryBufferObjectui64v", getProcAddress);
            glGetQueryBufferObjectuivPtr = LoadProcByName<glGetQueryBufferObjectuivDel>("glGetQueryBufferObjectuiv", getProcAddress);
            glGetQueryIndexedivPtr = LoadProcByName<glGetQueryIndexedivDel>("glGetQueryIndexediv", getProcAddress);
            glGetQueryObjecti64vPtr = LoadProcByName<glGetQueryObjecti64vDel>("glGetQueryObjecti64v", getProcAddress);
            glGetQueryObjecti64vEXTPtr = LoadProcByName<glGetQueryObjecti64vEXTDel>("glGetQueryObjecti64vEXT", getProcAddress);
            glGetQueryObjectivPtr = LoadProcByName<glGetQueryObjectivDel>("glGetQueryObjectiv", getProcAddress);
            glGetQueryObjectivARBPtr = LoadProcByName<glGetQueryObjectivARBDel>("glGetQueryObjectivARB", getProcAddress);
            glGetQueryObjectivEXTPtr = LoadProcByName<glGetQueryObjectivEXTDel>("glGetQueryObjectivEXT", getProcAddress);
            glGetQueryObjectui64vPtr = LoadProcByName<glGetQueryObjectui64vDel>("glGetQueryObjectui64v", getProcAddress);
            glGetQueryObjectui64vEXTPtr = LoadProcByName<glGetQueryObjectui64vEXTDel>("glGetQueryObjectui64vEXT", getProcAddress);
            glGetQueryObjectuivPtr = LoadProcByName<glGetQueryObjectuivDel>("glGetQueryObjectuiv", getProcAddress);
            glGetQueryObjectuivARBPtr = LoadProcByName<glGetQueryObjectuivARBDel>("glGetQueryObjectuivARB", getProcAddress);
            glGetQueryObjectuivEXTPtr = LoadProcByName<glGetQueryObjectuivEXTDel>("glGetQueryObjectuivEXT", getProcAddress);
            glGetQueryivPtr = LoadProcByName<glGetQueryivDel>("glGetQueryiv", getProcAddress);
            glGetQueryivARBPtr = LoadProcByName<glGetQueryivARBDel>("glGetQueryivARB", getProcAddress);
            glGetQueryivEXTPtr = LoadProcByName<glGetQueryivEXTDel>("glGetQueryivEXT", getProcAddress);
            glGetRenderbufferParameterivPtr = LoadProcByName<glGetRenderbufferParameterivDel>("glGetRenderbufferParameteriv", getProcAddress);
            glGetRenderbufferParameterivEXTPtr = LoadProcByName<glGetRenderbufferParameterivEXTDel>("glGetRenderbufferParameterivEXT", getProcAddress);
            glGetRenderbufferParameterivOESPtr = LoadProcByName<glGetRenderbufferParameterivOESDel>("glGetRenderbufferParameterivOES", getProcAddress);
            glGetSamplerParameterIivPtr = LoadProcByName<glGetSamplerParameterIivDel>("glGetSamplerParameterIiv", getProcAddress);
            glGetSamplerParameterIivEXTPtr = LoadProcByName<glGetSamplerParameterIivEXTDel>("glGetSamplerParameterIivEXT", getProcAddress);
            glGetSamplerParameterIivOESPtr = LoadProcByName<glGetSamplerParameterIivOESDel>("glGetSamplerParameterIivOES", getProcAddress);
            glGetSamplerParameterIuivPtr = LoadProcByName<glGetSamplerParameterIuivDel>("glGetSamplerParameterIuiv", getProcAddress);
            glGetSamplerParameterIuivEXTPtr = LoadProcByName<glGetSamplerParameterIuivEXTDel>("glGetSamplerParameterIuivEXT", getProcAddress);
            glGetSamplerParameterIuivOESPtr = LoadProcByName<glGetSamplerParameterIuivOESDel>("glGetSamplerParameterIuivOES", getProcAddress);
            glGetSamplerParameterfvPtr = LoadProcByName<glGetSamplerParameterfvDel>("glGetSamplerParameterfv", getProcAddress);
            glGetSamplerParameterivPtr = LoadProcByName<glGetSamplerParameterivDel>("glGetSamplerParameteriv", getProcAddress);
            glGetSemaphoreParameterui64vEXTPtr = LoadProcByName<glGetSemaphoreParameterui64vEXTDel>("glGetSemaphoreParameterui64vEXT", getProcAddress);
            glGetSeparableFilterPtr = LoadProcByName<glGetSeparableFilterDel>("glGetSeparableFilter", getProcAddress);
            glGetSeparableFilterEXTPtr = LoadProcByName<glGetSeparableFilterEXTDel>("glGetSeparableFilterEXT", getProcAddress);
            glGetShaderInfoLogPtr = LoadProcByName<glGetShaderInfoLogDel>("glGetShaderInfoLog", getProcAddress);
            glGetShaderPrecisionFormatPtr = LoadProcByName<glGetShaderPrecisionFormatDel>("glGetShaderPrecisionFormat", getProcAddress);
            glGetShaderSourcePtr = LoadProcByName<glGetShaderSourceDel>("glGetShaderSource", getProcAddress);
            glGetShaderSourceARBPtr = LoadProcByName<glGetShaderSourceARBDel>("glGetShaderSourceARB", getProcAddress);
            glGetShaderivPtr = LoadProcByName<glGetShaderivDel>("glGetShaderiv", getProcAddress);
            glGetShadingRateImagePaletteNVPtr = LoadProcByName<glGetShadingRateImagePaletteNVDel>("glGetShadingRateImagePaletteNV", getProcAddress);
            glGetShadingRateSampleLocationivNVPtr = LoadProcByName<glGetShadingRateSampleLocationivNVDel>("glGetShadingRateSampleLocationivNV", getProcAddress);
            glGetSharpenTexFuncSGISPtr = LoadProcByName<glGetSharpenTexFuncSGISDel>("glGetSharpenTexFuncSGIS", getProcAddress);
            glGetStageIndexNVPtr = LoadProcByName<glGetStageIndexNVDel>("glGetStageIndexNV", getProcAddress);
            glGetStringPtr = LoadProcByName<glGetStringDel>("glGetString", getProcAddress);
            glGetStringiPtr = LoadProcByName<glGetStringiDel>("glGetStringi", getProcAddress);
            glGetSubroutineIndexPtr = LoadProcByName<glGetSubroutineIndexDel>("glGetSubroutineIndex", getProcAddress);
            glGetSubroutineUniformLocationPtr = LoadProcByName<glGetSubroutineUniformLocationDel>("glGetSubroutineUniformLocation", getProcAddress);
            glGetSyncivPtr = LoadProcByName<glGetSyncivDel>("glGetSynciv", getProcAddress);
            glGetSyncivAPPLEPtr = LoadProcByName<glGetSyncivAPPLEDel>("glGetSyncivAPPLE", getProcAddress);
            glGetTexBumpParameterfvATIPtr = LoadProcByName<glGetTexBumpParameterfvATIDel>("glGetTexBumpParameterfvATI", getProcAddress);
            glGetTexBumpParameterivATIPtr = LoadProcByName<glGetTexBumpParameterivATIDel>("glGetTexBumpParameterivATI", getProcAddress);
            glGetTexEnvfvPtr = LoadProcByName<glGetTexEnvfvDel>("glGetTexEnvfv", getProcAddress);
            glGetTexEnvivPtr = LoadProcByName<glGetTexEnvivDel>("glGetTexEnviv", getProcAddress);
            glGetTexEnvxvPtr = LoadProcByName<glGetTexEnvxvDel>("glGetTexEnvxv", getProcAddress);
            glGetTexEnvxvOESPtr = LoadProcByName<glGetTexEnvxvOESDel>("glGetTexEnvxvOES", getProcAddress);
            glGetTexFilterFuncSGISPtr = LoadProcByName<glGetTexFilterFuncSGISDel>("glGetTexFilterFuncSGIS", getProcAddress);
            glGetTexGendvPtr = LoadProcByName<glGetTexGendvDel>("glGetTexGendv", getProcAddress);
            glGetTexGenfvPtr = LoadProcByName<glGetTexGenfvDel>("glGetTexGenfv", getProcAddress);
            glGetTexGenfvOESPtr = LoadProcByName<glGetTexGenfvOESDel>("glGetTexGenfvOES", getProcAddress);
            glGetTexGenivPtr = LoadProcByName<glGetTexGenivDel>("glGetTexGeniv", getProcAddress);
            glGetTexGenivOESPtr = LoadProcByName<glGetTexGenivOESDel>("glGetTexGenivOES", getProcAddress);
            glGetTexGenxvOESPtr = LoadProcByName<glGetTexGenxvOESDel>("glGetTexGenxvOES", getProcAddress);
            glGetTexImagePtr = LoadProcByName<glGetTexImageDel>("glGetTexImage", getProcAddress);
            glGetTexLevelParameterfvPtr = LoadProcByName<glGetTexLevelParameterfvDel>("glGetTexLevelParameterfv", getProcAddress);
            glGetTexLevelParameterivPtr = LoadProcByName<glGetTexLevelParameterivDel>("glGetTexLevelParameteriv", getProcAddress);
            glGetTexLevelParameterxvOESPtr = LoadProcByName<glGetTexLevelParameterxvOESDel>("glGetTexLevelParameterxvOES", getProcAddress);
            glGetTexParameterIivPtr = LoadProcByName<glGetTexParameterIivDel>("glGetTexParameterIiv", getProcAddress);
            glGetTexParameterIivEXTPtr = LoadProcByName<glGetTexParameterIivEXTDel>("glGetTexParameterIivEXT", getProcAddress);
            glGetTexParameterIivOESPtr = LoadProcByName<glGetTexParameterIivOESDel>("glGetTexParameterIivOES", getProcAddress);
            glGetTexParameterIuivPtr = LoadProcByName<glGetTexParameterIuivDel>("glGetTexParameterIuiv", getProcAddress);
            glGetTexParameterIuivEXTPtr = LoadProcByName<glGetTexParameterIuivEXTDel>("glGetTexParameterIuivEXT", getProcAddress);
            glGetTexParameterIuivOESPtr = LoadProcByName<glGetTexParameterIuivOESDel>("glGetTexParameterIuivOES", getProcAddress);
            glGetTexParameterPointervAPPLEPtr = LoadProcByName<glGetTexParameterPointervAPPLEDel>("glGetTexParameterPointervAPPLE", getProcAddress);
            glGetTexParameterfvPtr = LoadProcByName<glGetTexParameterfvDel>("glGetTexParameterfv", getProcAddress);
            glGetTexParameterivPtr = LoadProcByName<glGetTexParameterivDel>("glGetTexParameteriv", getProcAddress);
            glGetTexParameterxvPtr = LoadProcByName<glGetTexParameterxvDel>("glGetTexParameterxv", getProcAddress);
            glGetTexParameterxvOESPtr = LoadProcByName<glGetTexParameterxvOESDel>("glGetTexParameterxvOES", getProcAddress);
            glGetTextureHandleARBPtr = LoadProcByName<glGetTextureHandleARBDel>("glGetTextureHandleARB", getProcAddress);
            glGetTextureHandleIMGPtr = LoadProcByName<glGetTextureHandleIMGDel>("glGetTextureHandleIMG", getProcAddress);
            glGetTextureHandleNVPtr = LoadProcByName<glGetTextureHandleNVDel>("glGetTextureHandleNV", getProcAddress);
            glGetTextureImagePtr = LoadProcByName<glGetTextureImageDel>("glGetTextureImage", getProcAddress);
            glGetTextureImageEXTPtr = LoadProcByName<glGetTextureImageEXTDel>("glGetTextureImageEXT", getProcAddress);
            glGetTextureLevelParameterfvPtr = LoadProcByName<glGetTextureLevelParameterfvDel>("glGetTextureLevelParameterfv", getProcAddress);
            glGetTextureLevelParameterfvEXTPtr = LoadProcByName<glGetTextureLevelParameterfvEXTDel>("glGetTextureLevelParameterfvEXT", getProcAddress);
            glGetTextureLevelParameterivPtr = LoadProcByName<glGetTextureLevelParameterivDel>("glGetTextureLevelParameteriv", getProcAddress);
            glGetTextureLevelParameterivEXTPtr = LoadProcByName<glGetTextureLevelParameterivEXTDel>("glGetTextureLevelParameterivEXT", getProcAddress);
            glGetTextureParameterIivPtr = LoadProcByName<glGetTextureParameterIivDel>("glGetTextureParameterIiv", getProcAddress);
            glGetTextureParameterIivEXTPtr = LoadProcByName<glGetTextureParameterIivEXTDel>("glGetTextureParameterIivEXT", getProcAddress);
            glGetTextureParameterIuivPtr = LoadProcByName<glGetTextureParameterIuivDel>("glGetTextureParameterIuiv", getProcAddress);
            glGetTextureParameterIuivEXTPtr = LoadProcByName<glGetTextureParameterIuivEXTDel>("glGetTextureParameterIuivEXT", getProcAddress);
            glGetTextureParameterfvPtr = LoadProcByName<glGetTextureParameterfvDel>("glGetTextureParameterfv", getProcAddress);
            glGetTextureParameterfvEXTPtr = LoadProcByName<glGetTextureParameterfvEXTDel>("glGetTextureParameterfvEXT", getProcAddress);
            glGetTextureParameterivPtr = LoadProcByName<glGetTextureParameterivDel>("glGetTextureParameteriv", getProcAddress);
            glGetTextureParameterivEXTPtr = LoadProcByName<glGetTextureParameterivEXTDel>("glGetTextureParameterivEXT", getProcAddress);
            glGetTextureSamplerHandleARBPtr = LoadProcByName<glGetTextureSamplerHandleARBDel>("glGetTextureSamplerHandleARB", getProcAddress);
            glGetTextureSamplerHandleIMGPtr = LoadProcByName<glGetTextureSamplerHandleIMGDel>("glGetTextureSamplerHandleIMG", getProcAddress);
            glGetTextureSamplerHandleNVPtr = LoadProcByName<glGetTextureSamplerHandleNVDel>("glGetTextureSamplerHandleNV", getProcAddress);
            glGetTextureSubImagePtr = LoadProcByName<glGetTextureSubImageDel>("glGetTextureSubImage", getProcAddress);
            glGetTrackMatrixivNVPtr = LoadProcByName<glGetTrackMatrixivNVDel>("glGetTrackMatrixivNV", getProcAddress);
            glGetTransformFeedbackVaryingPtr = LoadProcByName<glGetTransformFeedbackVaryingDel>("glGetTransformFeedbackVarying", getProcAddress);
            glGetTransformFeedbackVaryingEXTPtr = LoadProcByName<glGetTransformFeedbackVaryingEXTDel>("glGetTransformFeedbackVaryingEXT", getProcAddress);
            glGetTransformFeedbackVaryingNVPtr = LoadProcByName<glGetTransformFeedbackVaryingNVDel>("glGetTransformFeedbackVaryingNV", getProcAddress);
            glGetTransformFeedbacki64_vPtr = LoadProcByName<glGetTransformFeedbacki64_vDel>("glGetTransformFeedbacki64_v", getProcAddress);
            glGetTransformFeedbacki_vPtr = LoadProcByName<glGetTransformFeedbacki_vDel>("glGetTransformFeedbacki_v", getProcAddress);
            glGetTransformFeedbackivPtr = LoadProcByName<glGetTransformFeedbackivDel>("glGetTransformFeedbackiv", getProcAddress);
            glGetTranslatedShaderSourceANGLEPtr = LoadProcByName<glGetTranslatedShaderSourceANGLEDel>("glGetTranslatedShaderSourceANGLE", getProcAddress);
            glGetUniformBlockIndexPtr = LoadProcByName<glGetUniformBlockIndexDel>("glGetUniformBlockIndex", getProcAddress);
            glGetUniformBufferSizeEXTPtr = LoadProcByName<glGetUniformBufferSizeEXTDel>("glGetUniformBufferSizeEXT", getProcAddress);
            glGetUniformIndicesPtr = LoadProcByName<glGetUniformIndicesDel>("glGetUniformIndices", getProcAddress);
            glGetUniformLocationPtr = LoadProcByName<glGetUniformLocationDel>("glGetUniformLocation", getProcAddress);
            glGetUniformLocationARBPtr = LoadProcByName<glGetUniformLocationARBDel>("glGetUniformLocationARB", getProcAddress);
            glGetUniformOffsetEXTPtr = LoadProcByName<glGetUniformOffsetEXTDel>("glGetUniformOffsetEXT", getProcAddress);
            glGetUniformSubroutineuivPtr = LoadProcByName<glGetUniformSubroutineuivDel>("glGetUniformSubroutineuiv", getProcAddress);
            glGetUniformdvPtr = LoadProcByName<glGetUniformdvDel>("glGetUniformdv", getProcAddress);
            glGetUniformfvPtr = LoadProcByName<glGetUniformfvDel>("glGetUniformfv", getProcAddress);
            glGetUniformfvARBPtr = LoadProcByName<glGetUniformfvARBDel>("glGetUniformfvARB", getProcAddress);
            glGetUniformi64vARBPtr = LoadProcByName<glGetUniformi64vARBDel>("glGetUniformi64vARB", getProcAddress);
            glGetUniformi64vNVPtr = LoadProcByName<glGetUniformi64vNVDel>("glGetUniformi64vNV", getProcAddress);
            glGetUniformivPtr = LoadProcByName<glGetUniformivDel>("glGetUniformiv", getProcAddress);
            glGetUniformivARBPtr = LoadProcByName<glGetUniformivARBDel>("glGetUniformivARB", getProcAddress);
            glGetUniformui64vARBPtr = LoadProcByName<glGetUniformui64vARBDel>("glGetUniformui64vARB", getProcAddress);
            glGetUniformui64vNVPtr = LoadProcByName<glGetUniformui64vNVDel>("glGetUniformui64vNV", getProcAddress);
            glGetUniformuivPtr = LoadProcByName<glGetUniformuivDel>("glGetUniformuiv", getProcAddress);
            glGetUniformuivEXTPtr = LoadProcByName<glGetUniformuivEXTDel>("glGetUniformuivEXT", getProcAddress);
            glGetUnsignedBytevEXTPtr = LoadProcByName<glGetUnsignedBytevEXTDel>("glGetUnsignedBytevEXT", getProcAddress);
            glGetUnsignedBytei_vEXTPtr = LoadProcByName<glGetUnsignedBytei_vEXTDel>("glGetUnsignedBytei_vEXT", getProcAddress);
            glGetVariantArrayObjectfvATIPtr = LoadProcByName<glGetVariantArrayObjectfvATIDel>("glGetVariantArrayObjectfvATI", getProcAddress);
            glGetVariantArrayObjectivATIPtr = LoadProcByName<glGetVariantArrayObjectivATIDel>("glGetVariantArrayObjectivATI", getProcAddress);
            glGetVariantBooleanvEXTPtr = LoadProcByName<glGetVariantBooleanvEXTDel>("glGetVariantBooleanvEXT", getProcAddress);
            glGetVariantFloatvEXTPtr = LoadProcByName<glGetVariantFloatvEXTDel>("glGetVariantFloatvEXT", getProcAddress);
            glGetVariantIntegervEXTPtr = LoadProcByName<glGetVariantIntegervEXTDel>("glGetVariantIntegervEXT", getProcAddress);
            glGetVariantPointervEXTPtr = LoadProcByName<glGetVariantPointervEXTDel>("glGetVariantPointervEXT", getProcAddress);
            glGetVaryingLocationNVPtr = LoadProcByName<glGetVaryingLocationNVDel>("glGetVaryingLocationNV", getProcAddress);
            glGetVertexArrayIndexed64ivPtr = LoadProcByName<glGetVertexArrayIndexed64ivDel>("glGetVertexArrayIndexed64iv", getProcAddress);
            glGetVertexArrayIndexedivPtr = LoadProcByName<glGetVertexArrayIndexedivDel>("glGetVertexArrayIndexediv", getProcAddress);
            glGetVertexArrayIntegeri_vEXTPtr = LoadProcByName<glGetVertexArrayIntegeri_vEXTDel>("glGetVertexArrayIntegeri_vEXT", getProcAddress);
            glGetVertexArrayIntegervEXTPtr = LoadProcByName<glGetVertexArrayIntegervEXTDel>("glGetVertexArrayIntegervEXT", getProcAddress);
            glGetVertexArrayPointeri_vEXTPtr = LoadProcByName<glGetVertexArrayPointeri_vEXTDel>("glGetVertexArrayPointeri_vEXT", getProcAddress);
            glGetVertexArrayPointervEXTPtr = LoadProcByName<glGetVertexArrayPointervEXTDel>("glGetVertexArrayPointervEXT", getProcAddress);
            glGetVertexArrayivPtr = LoadProcByName<glGetVertexArrayivDel>("glGetVertexArrayiv", getProcAddress);
            glGetVertexAttribArrayObjectfvATIPtr = LoadProcByName<glGetVertexAttribArrayObjectfvATIDel>("glGetVertexAttribArrayObjectfvATI", getProcAddress);
            glGetVertexAttribArrayObjectivATIPtr = LoadProcByName<glGetVertexAttribArrayObjectivATIDel>("glGetVertexAttribArrayObjectivATI", getProcAddress);
            glGetVertexAttribIivPtr = LoadProcByName<glGetVertexAttribIivDel>("glGetVertexAttribIiv", getProcAddress);
            glGetVertexAttribIivEXTPtr = LoadProcByName<glGetVertexAttribIivEXTDel>("glGetVertexAttribIivEXT", getProcAddress);
            glGetVertexAttribIuivPtr = LoadProcByName<glGetVertexAttribIuivDel>("glGetVertexAttribIuiv", getProcAddress);
            glGetVertexAttribIuivEXTPtr = LoadProcByName<glGetVertexAttribIuivEXTDel>("glGetVertexAttribIuivEXT", getProcAddress);
            glGetVertexAttribLdvPtr = LoadProcByName<glGetVertexAttribLdvDel>("glGetVertexAttribLdv", getProcAddress);
            glGetVertexAttribLdvEXTPtr = LoadProcByName<glGetVertexAttribLdvEXTDel>("glGetVertexAttribLdvEXT", getProcAddress);
            glGetVertexAttribLi64vNVPtr = LoadProcByName<glGetVertexAttribLi64vNVDel>("glGetVertexAttribLi64vNV", getProcAddress);
            glGetVertexAttribLui64vARBPtr = LoadProcByName<glGetVertexAttribLui64vARBDel>("glGetVertexAttribLui64vARB", getProcAddress);
            glGetVertexAttribLui64vNVPtr = LoadProcByName<glGetVertexAttribLui64vNVDel>("glGetVertexAttribLui64vNV", getProcAddress);
            glGetVertexAttribPointervPtr = LoadProcByName<glGetVertexAttribPointervDel>("glGetVertexAttribPointerv", getProcAddress);
            glGetVertexAttribPointervARBPtr = LoadProcByName<glGetVertexAttribPointervARBDel>("glGetVertexAttribPointervARB", getProcAddress);
            glGetVertexAttribPointervNVPtr = LoadProcByName<glGetVertexAttribPointervNVDel>("glGetVertexAttribPointervNV", getProcAddress);
            glGetVertexAttribdvPtr = LoadProcByName<glGetVertexAttribdvDel>("glGetVertexAttribdv", getProcAddress);
            glGetVertexAttribdvARBPtr = LoadProcByName<glGetVertexAttribdvARBDel>("glGetVertexAttribdvARB", getProcAddress);
            glGetVertexAttribdvNVPtr = LoadProcByName<glGetVertexAttribdvNVDel>("glGetVertexAttribdvNV", getProcAddress);
            glGetVertexAttribfvPtr = LoadProcByName<glGetVertexAttribfvDel>("glGetVertexAttribfv", getProcAddress);
            glGetVertexAttribfvARBPtr = LoadProcByName<glGetVertexAttribfvARBDel>("glGetVertexAttribfvARB", getProcAddress);
            glGetVertexAttribfvNVPtr = LoadProcByName<glGetVertexAttribfvNVDel>("glGetVertexAttribfvNV", getProcAddress);
            glGetVertexAttribivPtr = LoadProcByName<glGetVertexAttribivDel>("glGetVertexAttribiv", getProcAddress);
            glGetVertexAttribivARBPtr = LoadProcByName<glGetVertexAttribivARBDel>("glGetVertexAttribivARB", getProcAddress);
            glGetVertexAttribivNVPtr = LoadProcByName<glGetVertexAttribivNVDel>("glGetVertexAttribivNV", getProcAddress);
            glGetVideoCaptureStreamdvNVPtr = LoadProcByName<glGetVideoCaptureStreamdvNVDel>("glGetVideoCaptureStreamdvNV", getProcAddress);
            glGetVideoCaptureStreamfvNVPtr = LoadProcByName<glGetVideoCaptureStreamfvNVDel>("glGetVideoCaptureStreamfvNV", getProcAddress);
            glGetVideoCaptureStreamivNVPtr = LoadProcByName<glGetVideoCaptureStreamivNVDel>("glGetVideoCaptureStreamivNV", getProcAddress);
            glGetVideoCaptureivNVPtr = LoadProcByName<glGetVideoCaptureivNVDel>("glGetVideoCaptureivNV", getProcAddress);
            glGetVideoi64vNVPtr = LoadProcByName<glGetVideoi64vNVDel>("glGetVideoi64vNV", getProcAddress);
            glGetVideoivNVPtr = LoadProcByName<glGetVideoivNVDel>("glGetVideoivNV", getProcAddress);
            glGetVideoui64vNVPtr = LoadProcByName<glGetVideoui64vNVDel>("glGetVideoui64vNV", getProcAddress);
            glGetVideouivNVPtr = LoadProcByName<glGetVideouivNVDel>("glGetVideouivNV", getProcAddress);
            glGetnColorTablePtr = LoadProcByName<glGetnColorTableDel>("glGetnColorTable", getProcAddress);
            glGetnColorTableARBPtr = LoadProcByName<glGetnColorTableARBDel>("glGetnColorTableARB", getProcAddress);
            glGetnCompressedTexImagePtr = LoadProcByName<glGetnCompressedTexImageDel>("glGetnCompressedTexImage", getProcAddress);
            glGetnCompressedTexImageARBPtr = LoadProcByName<glGetnCompressedTexImageARBDel>("glGetnCompressedTexImageARB", getProcAddress);
            glGetnConvolutionFilterPtr = LoadProcByName<glGetnConvolutionFilterDel>("glGetnConvolutionFilter", getProcAddress);
            glGetnConvolutionFilterARBPtr = LoadProcByName<glGetnConvolutionFilterARBDel>("glGetnConvolutionFilterARB", getProcAddress);
            glGetnHistogramPtr = LoadProcByName<glGetnHistogramDel>("glGetnHistogram", getProcAddress);
            glGetnHistogramARBPtr = LoadProcByName<glGetnHistogramARBDel>("glGetnHistogramARB", getProcAddress);
            glGetnMapdvPtr = LoadProcByName<glGetnMapdvDel>("glGetnMapdv", getProcAddress);
            glGetnMapdvARBPtr = LoadProcByName<glGetnMapdvARBDel>("glGetnMapdvARB", getProcAddress);
            glGetnMapfvPtr = LoadProcByName<glGetnMapfvDel>("glGetnMapfv", getProcAddress);
            glGetnMapfvARBPtr = LoadProcByName<glGetnMapfvARBDel>("glGetnMapfvARB", getProcAddress);
            glGetnMapivPtr = LoadProcByName<glGetnMapivDel>("glGetnMapiv", getProcAddress);
            glGetnMapivARBPtr = LoadProcByName<glGetnMapivARBDel>("glGetnMapivARB", getProcAddress);
            glGetnMinmaxPtr = LoadProcByName<glGetnMinmaxDel>("glGetnMinmax", getProcAddress);
            glGetnMinmaxARBPtr = LoadProcByName<glGetnMinmaxARBDel>("glGetnMinmaxARB", getProcAddress);
            glGetnPixelMapfvPtr = LoadProcByName<glGetnPixelMapfvDel>("glGetnPixelMapfv", getProcAddress);
            glGetnPixelMapfvARBPtr = LoadProcByName<glGetnPixelMapfvARBDel>("glGetnPixelMapfvARB", getProcAddress);
            glGetnPixelMapuivPtr = LoadProcByName<glGetnPixelMapuivDel>("glGetnPixelMapuiv", getProcAddress);
            glGetnPixelMapuivARBPtr = LoadProcByName<glGetnPixelMapuivARBDel>("glGetnPixelMapuivARB", getProcAddress);
            glGetnPixelMapusvPtr = LoadProcByName<glGetnPixelMapusvDel>("glGetnPixelMapusv", getProcAddress);
            glGetnPixelMapusvARBPtr = LoadProcByName<glGetnPixelMapusvARBDel>("glGetnPixelMapusvARB", getProcAddress);
            glGetnPolygonStipplePtr = LoadProcByName<glGetnPolygonStippleDel>("glGetnPolygonStipple", getProcAddress);
            glGetnPolygonStippleARBPtr = LoadProcByName<glGetnPolygonStippleARBDel>("glGetnPolygonStippleARB", getProcAddress);
            glGetnSeparableFilterPtr = LoadProcByName<glGetnSeparableFilterDel>("glGetnSeparableFilter", getProcAddress);
            glGetnSeparableFilterARBPtr = LoadProcByName<glGetnSeparableFilterARBDel>("glGetnSeparableFilterARB", getProcAddress);
            glGetnTexImagePtr = LoadProcByName<glGetnTexImageDel>("glGetnTexImage", getProcAddress);
            glGetnTexImageARBPtr = LoadProcByName<glGetnTexImageARBDel>("glGetnTexImageARB", getProcAddress);
            glGetnUniformdvPtr = LoadProcByName<glGetnUniformdvDel>("glGetnUniformdv", getProcAddress);
            glGetnUniformdvARBPtr = LoadProcByName<glGetnUniformdvARBDel>("glGetnUniformdvARB", getProcAddress);
            glGetnUniformfvPtr = LoadProcByName<glGetnUniformfvDel>("glGetnUniformfv", getProcAddress);
            glGetnUniformfvARBPtr = LoadProcByName<glGetnUniformfvARBDel>("glGetnUniformfvARB", getProcAddress);
            glGetnUniformfvEXTPtr = LoadProcByName<glGetnUniformfvEXTDel>("glGetnUniformfvEXT", getProcAddress);
            glGetnUniformfvKHRPtr = LoadProcByName<glGetnUniformfvKHRDel>("glGetnUniformfvKHR", getProcAddress);
            glGetnUniformi64vARBPtr = LoadProcByName<glGetnUniformi64vARBDel>("glGetnUniformi64vARB", getProcAddress);
            glGetnUniformivPtr = LoadProcByName<glGetnUniformivDel>("glGetnUniformiv", getProcAddress);
            glGetnUniformivARBPtr = LoadProcByName<glGetnUniformivARBDel>("glGetnUniformivARB", getProcAddress);
            glGetnUniformivEXTPtr = LoadProcByName<glGetnUniformivEXTDel>("glGetnUniformivEXT", getProcAddress);
            glGetnUniformivKHRPtr = LoadProcByName<glGetnUniformivKHRDel>("glGetnUniformivKHR", getProcAddress);
            glGetnUniformui64vARBPtr = LoadProcByName<glGetnUniformui64vARBDel>("glGetnUniformui64vARB", getProcAddress);
            glGetnUniformuivPtr = LoadProcByName<glGetnUniformuivDel>("glGetnUniformuiv", getProcAddress);
            glGetnUniformuivARBPtr = LoadProcByName<glGetnUniformuivARBDel>("glGetnUniformuivARB", getProcAddress);
            glGetnUniformuivKHRPtr = LoadProcByName<glGetnUniformuivKHRDel>("glGetnUniformuivKHR", getProcAddress);
            glGlobalAlphaFactorbSUNPtr = LoadProcByName<glGlobalAlphaFactorbSUNDel>("glGlobalAlphaFactorbSUN", getProcAddress);
            glGlobalAlphaFactordSUNPtr = LoadProcByName<glGlobalAlphaFactordSUNDel>("glGlobalAlphaFactordSUN", getProcAddress);
            glGlobalAlphaFactorfSUNPtr = LoadProcByName<glGlobalAlphaFactorfSUNDel>("glGlobalAlphaFactorfSUN", getProcAddress);
            glGlobalAlphaFactoriSUNPtr = LoadProcByName<glGlobalAlphaFactoriSUNDel>("glGlobalAlphaFactoriSUN", getProcAddress);
            glGlobalAlphaFactorsSUNPtr = LoadProcByName<glGlobalAlphaFactorsSUNDel>("glGlobalAlphaFactorsSUN", getProcAddress);
            glGlobalAlphaFactorubSUNPtr = LoadProcByName<glGlobalAlphaFactorubSUNDel>("glGlobalAlphaFactorubSUN", getProcAddress);
            glGlobalAlphaFactoruiSUNPtr = LoadProcByName<glGlobalAlphaFactoruiSUNDel>("glGlobalAlphaFactoruiSUN", getProcAddress);
            glGlobalAlphaFactorusSUNPtr = LoadProcByName<glGlobalAlphaFactorusSUNDel>("glGlobalAlphaFactorusSUN", getProcAddress);
            glHintPtr = LoadProcByName<glHintDel>("glHint", getProcAddress);
            glHintPGIPtr = LoadProcByName<glHintPGIDel>("glHintPGI", getProcAddress);
            glHistogramPtr = LoadProcByName<glHistogramDel>("glHistogram", getProcAddress);
            glHistogramEXTPtr = LoadProcByName<glHistogramEXTDel>("glHistogramEXT", getProcAddress);
            glIglooInterfaceSGIXPtr = LoadProcByName<glIglooInterfaceSGIXDel>("glIglooInterfaceSGIX", getProcAddress);
            glImageTransformParameterfHPPtr = LoadProcByName<glImageTransformParameterfHPDel>("glImageTransformParameterfHP", getProcAddress);
            glImageTransformParameterfvHPPtr = LoadProcByName<glImageTransformParameterfvHPDel>("glImageTransformParameterfvHP", getProcAddress);
            glImageTransformParameteriHPPtr = LoadProcByName<glImageTransformParameteriHPDel>("glImageTransformParameteriHP", getProcAddress);
            glImageTransformParameterivHPPtr = LoadProcByName<glImageTransformParameterivHPDel>("glImageTransformParameterivHP", getProcAddress);
            glImportMemoryFdEXTPtr = LoadProcByName<glImportMemoryFdEXTDel>("glImportMemoryFdEXT", getProcAddress);
            glImportMemoryWin32HandleEXTPtr = LoadProcByName<glImportMemoryWin32HandleEXTDel>("glImportMemoryWin32HandleEXT", getProcAddress);
            glImportMemoryWin32NameEXTPtr = LoadProcByName<glImportMemoryWin32NameEXTDel>("glImportMemoryWin32NameEXT", getProcAddress);
            glImportSemaphoreFdEXTPtr = LoadProcByName<glImportSemaphoreFdEXTDel>("glImportSemaphoreFdEXT", getProcAddress);
            glImportSemaphoreWin32HandleEXTPtr = LoadProcByName<glImportSemaphoreWin32HandleEXTDel>("glImportSemaphoreWin32HandleEXT", getProcAddress);
            glImportSemaphoreWin32NameEXTPtr = LoadProcByName<glImportSemaphoreWin32NameEXTDel>("glImportSemaphoreWin32NameEXT", getProcAddress);
            glImportSyncEXTPtr = LoadProcByName<glImportSyncEXTDel>("glImportSyncEXT", getProcAddress);
            glIndexFormatNVPtr = LoadProcByName<glIndexFormatNVDel>("glIndexFormatNV", getProcAddress);
            glIndexFuncEXTPtr = LoadProcByName<glIndexFuncEXTDel>("glIndexFuncEXT", getProcAddress);
            glIndexMaskPtr = LoadProcByName<glIndexMaskDel>("glIndexMask", getProcAddress);
            glIndexMaterialEXTPtr = LoadProcByName<glIndexMaterialEXTDel>("glIndexMaterialEXT", getProcAddress);
            glIndexPointerPtr = LoadProcByName<glIndexPointerDel>("glIndexPointer", getProcAddress);
            glIndexPointerEXTPtr = LoadProcByName<glIndexPointerEXTDel>("glIndexPointerEXT", getProcAddress);
            glIndexPointerListIBMPtr = LoadProcByName<glIndexPointerListIBMDel>("glIndexPointerListIBM", getProcAddress);
            glIndexdPtr = LoadProcByName<glIndexdDel>("glIndexd", getProcAddress);
            glIndexdvPtr = LoadProcByName<glIndexdvDel>("glIndexdv", getProcAddress);
            glIndexfPtr = LoadProcByName<glIndexfDel>("glIndexf", getProcAddress);
            glIndexfvPtr = LoadProcByName<glIndexfvDel>("glIndexfv", getProcAddress);
            glIndexiPtr = LoadProcByName<glIndexiDel>("glIndexi", getProcAddress);
            glIndexivPtr = LoadProcByName<glIndexivDel>("glIndexiv", getProcAddress);
            glIndexsPtr = LoadProcByName<glIndexsDel>("glIndexs", getProcAddress);
            glIndexsvPtr = LoadProcByName<glIndexsvDel>("glIndexsv", getProcAddress);
            glIndexubPtr = LoadProcByName<glIndexubDel>("glIndexub", getProcAddress);
            glIndexubvPtr = LoadProcByName<glIndexubvDel>("glIndexubv", getProcAddress);
            glIndexxOESPtr = LoadProcByName<glIndexxOESDel>("glIndexxOES", getProcAddress);
            glIndexxvOESPtr = LoadProcByName<glIndexxvOESDel>("glIndexxvOES", getProcAddress);
            glInitNamesPtr = LoadProcByName<glInitNamesDel>("glInitNames", getProcAddress);
            glInsertComponentEXTPtr = LoadProcByName<glInsertComponentEXTDel>("glInsertComponentEXT", getProcAddress);
            glInsertEventMarkerEXTPtr = LoadProcByName<glInsertEventMarkerEXTDel>("glInsertEventMarkerEXT", getProcAddress);
            glInstrumentsBufferSGIXPtr = LoadProcByName<glInstrumentsBufferSGIXDel>("glInstrumentsBufferSGIX", getProcAddress);
            glInterleavedArraysPtr = LoadProcByName<glInterleavedArraysDel>("glInterleavedArrays", getProcAddress);
            glInterpolatePathsNVPtr = LoadProcByName<glInterpolatePathsNVDel>("glInterpolatePathsNV", getProcAddress);
            glInvalidateBufferDataPtr = LoadProcByName<glInvalidateBufferDataDel>("glInvalidateBufferData", getProcAddress);
            glInvalidateBufferSubDataPtr = LoadProcByName<glInvalidateBufferSubDataDel>("glInvalidateBufferSubData", getProcAddress);
            glInvalidateFramebufferPtr = LoadProcByName<glInvalidateFramebufferDel>("glInvalidateFramebuffer", getProcAddress);
            glInvalidateNamedFramebufferDataPtr = LoadProcByName<glInvalidateNamedFramebufferDataDel>("glInvalidateNamedFramebufferData", getProcAddress);
            glInvalidateNamedFramebufferSubDataPtr = LoadProcByName<glInvalidateNamedFramebufferSubDataDel>("glInvalidateNamedFramebufferSubData", getProcAddress);
            glInvalidateSubFramebufferPtr = LoadProcByName<glInvalidateSubFramebufferDel>("glInvalidateSubFramebuffer", getProcAddress);
            glInvalidateTexImagePtr = LoadProcByName<glInvalidateTexImageDel>("glInvalidateTexImage", getProcAddress);
            glInvalidateTexSubImagePtr = LoadProcByName<glInvalidateTexSubImageDel>("glInvalidateTexSubImage", getProcAddress);
            glIsAsyncMarkerSGIXPtr = LoadProcByName<glIsAsyncMarkerSGIXDel>("glIsAsyncMarkerSGIX", getProcAddress);
            glIsBufferPtr = LoadProcByName<glIsBufferDel>("glIsBuffer", getProcAddress);
            glIsBufferARBPtr = LoadProcByName<glIsBufferARBDel>("glIsBufferARB", getProcAddress);
            glIsBufferResidentNVPtr = LoadProcByName<glIsBufferResidentNVDel>("glIsBufferResidentNV", getProcAddress);
            glIsCommandListNVPtr = LoadProcByName<glIsCommandListNVDel>("glIsCommandListNV", getProcAddress);
            glIsEnabledPtr = LoadProcByName<glIsEnabledDel>("glIsEnabled", getProcAddress);
            glIsEnabledIndexedEXTPtr = LoadProcByName<glIsEnabledIndexedEXTDel>("glIsEnabledIndexedEXT", getProcAddress);
            glIsEnablediPtr = LoadProcByName<glIsEnablediDel>("glIsEnabledi", getProcAddress);
            glIsEnablediEXTPtr = LoadProcByName<glIsEnablediEXTDel>("glIsEnablediEXT", getProcAddress);
            glIsEnablediNVPtr = LoadProcByName<glIsEnablediNVDel>("glIsEnablediNV", getProcAddress);
            glIsEnablediOESPtr = LoadProcByName<glIsEnablediOESDel>("glIsEnablediOES", getProcAddress);
            glIsFenceAPPLEPtr = LoadProcByName<glIsFenceAPPLEDel>("glIsFenceAPPLE", getProcAddress);
            glIsFenceNVPtr = LoadProcByName<glIsFenceNVDel>("glIsFenceNV", getProcAddress);
            glIsFramebufferPtr = LoadProcByName<glIsFramebufferDel>("glIsFramebuffer", getProcAddress);
            glIsFramebufferEXTPtr = LoadProcByName<glIsFramebufferEXTDel>("glIsFramebufferEXT", getProcAddress);
            glIsFramebufferOESPtr = LoadProcByName<glIsFramebufferOESDel>("glIsFramebufferOES", getProcAddress);
            glIsImageHandleResidentARBPtr = LoadProcByName<glIsImageHandleResidentARBDel>("glIsImageHandleResidentARB", getProcAddress);
            glIsImageHandleResidentNVPtr = LoadProcByName<glIsImageHandleResidentNVDel>("glIsImageHandleResidentNV", getProcAddress);
            glIsListPtr = LoadProcByName<glIsListDel>("glIsList", getProcAddress);
            glIsMemoryObjectEXTPtr = LoadProcByName<glIsMemoryObjectEXTDel>("glIsMemoryObjectEXT", getProcAddress);
            glIsNameAMDPtr = LoadProcByName<glIsNameAMDDel>("glIsNameAMD", getProcAddress);
            glIsNamedBufferResidentNVPtr = LoadProcByName<glIsNamedBufferResidentNVDel>("glIsNamedBufferResidentNV", getProcAddress);
            glIsNamedStringARBPtr = LoadProcByName<glIsNamedStringARBDel>("glIsNamedStringARB", getProcAddress);
            glIsObjectBufferATIPtr = LoadProcByName<glIsObjectBufferATIDel>("glIsObjectBufferATI", getProcAddress);
            glIsOcclusionQueryNVPtr = LoadProcByName<glIsOcclusionQueryNVDel>("glIsOcclusionQueryNV", getProcAddress);
            glIsPathNVPtr = LoadProcByName<glIsPathNVDel>("glIsPathNV", getProcAddress);
            glIsPointInFillPathNVPtr = LoadProcByName<glIsPointInFillPathNVDel>("glIsPointInFillPathNV", getProcAddress);
            glIsPointInStrokePathNVPtr = LoadProcByName<glIsPointInStrokePathNVDel>("glIsPointInStrokePathNV", getProcAddress);
            glIsProgramPtr = LoadProcByName<glIsProgramDel>("glIsProgram", getProcAddress);
            glIsProgramARBPtr = LoadProcByName<glIsProgramARBDel>("glIsProgramARB", getProcAddress);
            glIsProgramNVPtr = LoadProcByName<glIsProgramNVDel>("glIsProgramNV", getProcAddress);
            glIsProgramPipelinePtr = LoadProcByName<glIsProgramPipelineDel>("glIsProgramPipeline", getProcAddress);
            glIsProgramPipelineEXTPtr = LoadProcByName<glIsProgramPipelineEXTDel>("glIsProgramPipelineEXT", getProcAddress);
            glIsQueryPtr = LoadProcByName<glIsQueryDel>("glIsQuery", getProcAddress);
            glIsQueryARBPtr = LoadProcByName<glIsQueryARBDel>("glIsQueryARB", getProcAddress);
            glIsQueryEXTPtr = LoadProcByName<glIsQueryEXTDel>("glIsQueryEXT", getProcAddress);
            glIsRenderbufferPtr = LoadProcByName<glIsRenderbufferDel>("glIsRenderbuffer", getProcAddress);
            glIsRenderbufferEXTPtr = LoadProcByName<glIsRenderbufferEXTDel>("glIsRenderbufferEXT", getProcAddress);
            glIsRenderbufferOESPtr = LoadProcByName<glIsRenderbufferOESDel>("glIsRenderbufferOES", getProcAddress);
            glIsSemaphoreEXTPtr = LoadProcByName<glIsSemaphoreEXTDel>("glIsSemaphoreEXT", getProcAddress);
            glIsSamplerPtr = LoadProcByName<glIsSamplerDel>("glIsSampler", getProcAddress);
            glIsShaderPtr = LoadProcByName<glIsShaderDel>("glIsShader", getProcAddress);
            glIsStateNVPtr = LoadProcByName<glIsStateNVDel>("glIsStateNV", getProcAddress);
            glIsSyncPtr = LoadProcByName<glIsSyncDel>("glIsSync", getProcAddress);
            glIsSyncAPPLEPtr = LoadProcByName<glIsSyncAPPLEDel>("glIsSyncAPPLE", getProcAddress);
            glIsTexturePtr = LoadProcByName<glIsTextureDel>("glIsTexture", getProcAddress);
            glIsTextureEXTPtr = LoadProcByName<glIsTextureEXTDel>("glIsTextureEXT", getProcAddress);
            glIsTextureHandleResidentARBPtr = LoadProcByName<glIsTextureHandleResidentARBDel>("glIsTextureHandleResidentARB", getProcAddress);
            glIsTextureHandleResidentNVPtr = LoadProcByName<glIsTextureHandleResidentNVDel>("glIsTextureHandleResidentNV", getProcAddress);
            glIsTransformFeedbackPtr = LoadProcByName<glIsTransformFeedbackDel>("glIsTransformFeedback", getProcAddress);
            glIsTransformFeedbackNVPtr = LoadProcByName<glIsTransformFeedbackNVDel>("glIsTransformFeedbackNV", getProcAddress);
            glIsVariantEnabledEXTPtr = LoadProcByName<glIsVariantEnabledEXTDel>("glIsVariantEnabledEXT", getProcAddress);
            glIsVertexArrayPtr = LoadProcByName<glIsVertexArrayDel>("glIsVertexArray", getProcAddress);
            glIsVertexArrayAPPLEPtr = LoadProcByName<glIsVertexArrayAPPLEDel>("glIsVertexArrayAPPLE", getProcAddress);
            glIsVertexArrayOESPtr = LoadProcByName<glIsVertexArrayOESDel>("glIsVertexArrayOES", getProcAddress);
            glIsVertexAttribEnabledAPPLEPtr = LoadProcByName<glIsVertexAttribEnabledAPPLEDel>("glIsVertexAttribEnabledAPPLE", getProcAddress);
            glLGPUCopyImageSubDataNVXPtr = LoadProcByName<glLGPUCopyImageSubDataNVXDel>("glLGPUCopyImageSubDataNVX", getProcAddress);
            glLGPUInterlockNVXPtr = LoadProcByName<glLGPUInterlockNVXDel>("glLGPUInterlockNVX", getProcAddress);
            glLGPUNamedBufferSubDataNVXPtr = LoadProcByName<glLGPUNamedBufferSubDataNVXDel>("glLGPUNamedBufferSubDataNVX", getProcAddress);
            glLabelObjectEXTPtr = LoadProcByName<glLabelObjectEXTDel>("glLabelObjectEXT", getProcAddress);
            glLightEnviSGIXPtr = LoadProcByName<glLightEnviSGIXDel>("glLightEnviSGIX", getProcAddress);
            glLightModelfPtr = LoadProcByName<glLightModelfDel>("glLightModelf", getProcAddress);
            glLightModelfvPtr = LoadProcByName<glLightModelfvDel>("glLightModelfv", getProcAddress);
            glLightModeliPtr = LoadProcByName<glLightModeliDel>("glLightModeli", getProcAddress);
            glLightModelivPtr = LoadProcByName<glLightModelivDel>("glLightModeliv", getProcAddress);
            glLightModelxPtr = LoadProcByName<glLightModelxDel>("glLightModelx", getProcAddress);
            glLightModelxOESPtr = LoadProcByName<glLightModelxOESDel>("glLightModelxOES", getProcAddress);
            glLightModelxvPtr = LoadProcByName<glLightModelxvDel>("glLightModelxv", getProcAddress);
            glLightModelxvOESPtr = LoadProcByName<glLightModelxvOESDel>("glLightModelxvOES", getProcAddress);
            glLightfPtr = LoadProcByName<glLightfDel>("glLightf", getProcAddress);
            glLightfvPtr = LoadProcByName<glLightfvDel>("glLightfv", getProcAddress);
            glLightiPtr = LoadProcByName<glLightiDel>("glLighti", getProcAddress);
            glLightivPtr = LoadProcByName<glLightivDel>("glLightiv", getProcAddress);
            glLightxPtr = LoadProcByName<glLightxDel>("glLightx", getProcAddress);
            glLightxOESPtr = LoadProcByName<glLightxOESDel>("glLightxOES", getProcAddress);
            glLightxvPtr = LoadProcByName<glLightxvDel>("glLightxv", getProcAddress);
            glLightxvOESPtr = LoadProcByName<glLightxvOESDel>("glLightxvOES", getProcAddress);
            glLineStipplePtr = LoadProcByName<glLineStippleDel>("glLineStipple", getProcAddress);
            glLineWidthPtr = LoadProcByName<glLineWidthDel>("glLineWidth", getProcAddress);
            glLineWidthxPtr = LoadProcByName<glLineWidthxDel>("glLineWidthx", getProcAddress);
            glLineWidthxOESPtr = LoadProcByName<glLineWidthxOESDel>("glLineWidthxOES", getProcAddress);
            glLinkProgramPtr = LoadProcByName<glLinkProgramDel>("glLinkProgram", getProcAddress);
            glLinkProgramARBPtr = LoadProcByName<glLinkProgramARBDel>("glLinkProgramARB", getProcAddress);
            glListBasePtr = LoadProcByName<glListBaseDel>("glListBase", getProcAddress);
            glListDrawCommandsStatesClientNVPtr = LoadProcByName<glListDrawCommandsStatesClientNVDel>("glListDrawCommandsStatesClientNV", getProcAddress);
            glListParameterfSGIXPtr = LoadProcByName<glListParameterfSGIXDel>("glListParameterfSGIX", getProcAddress);
            glListParameterfvSGIXPtr = LoadProcByName<glListParameterfvSGIXDel>("glListParameterfvSGIX", getProcAddress);
            glListParameteriSGIXPtr = LoadProcByName<glListParameteriSGIXDel>("glListParameteriSGIX", getProcAddress);
            glListParameterivSGIXPtr = LoadProcByName<glListParameterivSGIXDel>("glListParameterivSGIX", getProcAddress);
            glLoadIdentityPtr = LoadProcByName<glLoadIdentityDel>("glLoadIdentity", getProcAddress);
            glLoadIdentityDeformationMapSGIXPtr = LoadProcByName<glLoadIdentityDeformationMapSGIXDel>("glLoadIdentityDeformationMapSGIX", getProcAddress);
            glLoadMatrixdPtr = LoadProcByName<glLoadMatrixdDel>("glLoadMatrixd", getProcAddress);
            glLoadMatrixfPtr = LoadProcByName<glLoadMatrixfDel>("glLoadMatrixf", getProcAddress);
            glLoadMatrixxPtr = LoadProcByName<glLoadMatrixxDel>("glLoadMatrixx", getProcAddress);
            glLoadMatrixxOESPtr = LoadProcByName<glLoadMatrixxOESDel>("glLoadMatrixxOES", getProcAddress);
            glLoadNamePtr = LoadProcByName<glLoadNameDel>("glLoadName", getProcAddress);
            glLoadPaletteFromModelViewMatrixOESPtr = LoadProcByName<glLoadPaletteFromModelViewMatrixOESDel>("glLoadPaletteFromModelViewMatrixOES", getProcAddress);
            glLoadProgramNVPtr = LoadProcByName<glLoadProgramNVDel>("glLoadProgramNV", getProcAddress);
            glLoadTransposeMatrixdPtr = LoadProcByName<glLoadTransposeMatrixdDel>("glLoadTransposeMatrixd", getProcAddress);
            glLoadTransposeMatrixdARBPtr = LoadProcByName<glLoadTransposeMatrixdARBDel>("glLoadTransposeMatrixdARB", getProcAddress);
            glLoadTransposeMatrixfPtr = LoadProcByName<glLoadTransposeMatrixfDel>("glLoadTransposeMatrixf", getProcAddress);
            glLoadTransposeMatrixfARBPtr = LoadProcByName<glLoadTransposeMatrixfARBDel>("glLoadTransposeMatrixfARB", getProcAddress);
            glLoadTransposeMatrixxOESPtr = LoadProcByName<glLoadTransposeMatrixxOESDel>("glLoadTransposeMatrixxOES", getProcAddress);
            glLockArraysEXTPtr = LoadProcByName<glLockArraysEXTDel>("glLockArraysEXT", getProcAddress);
            glLogicOpPtr = LoadProcByName<glLogicOpDel>("glLogicOp", getProcAddress);
            glMakeBufferNonResidentNVPtr = LoadProcByName<glMakeBufferNonResidentNVDel>("glMakeBufferNonResidentNV", getProcAddress);
            glMakeBufferResidentNVPtr = LoadProcByName<glMakeBufferResidentNVDel>("glMakeBufferResidentNV", getProcAddress);
            glMakeImageHandleNonResidentARBPtr = LoadProcByName<glMakeImageHandleNonResidentARBDel>("glMakeImageHandleNonResidentARB", getProcAddress);
            glMakeImageHandleNonResidentNVPtr = LoadProcByName<glMakeImageHandleNonResidentNVDel>("glMakeImageHandleNonResidentNV", getProcAddress);
            glMakeImageHandleResidentARBPtr = LoadProcByName<glMakeImageHandleResidentARBDel>("glMakeImageHandleResidentARB", getProcAddress);
            glMakeImageHandleResidentNVPtr = LoadProcByName<glMakeImageHandleResidentNVDel>("glMakeImageHandleResidentNV", getProcAddress);
            glMakeNamedBufferNonResidentNVPtr = LoadProcByName<glMakeNamedBufferNonResidentNVDel>("glMakeNamedBufferNonResidentNV", getProcAddress);
            glMakeNamedBufferResidentNVPtr = LoadProcByName<glMakeNamedBufferResidentNVDel>("glMakeNamedBufferResidentNV", getProcAddress);
            glMakeTextureHandleNonResidentARBPtr = LoadProcByName<glMakeTextureHandleNonResidentARBDel>("glMakeTextureHandleNonResidentARB", getProcAddress);
            glMakeTextureHandleNonResidentNVPtr = LoadProcByName<glMakeTextureHandleNonResidentNVDel>("glMakeTextureHandleNonResidentNV", getProcAddress);
            glMakeTextureHandleResidentARBPtr = LoadProcByName<glMakeTextureHandleResidentARBDel>("glMakeTextureHandleResidentARB", getProcAddress);
            glMakeTextureHandleResidentNVPtr = LoadProcByName<glMakeTextureHandleResidentNVDel>("glMakeTextureHandleResidentNV", getProcAddress);
            glMap1dPtr = LoadProcByName<glMap1dDel>("glMap1d", getProcAddress);
            glMap1fPtr = LoadProcByName<glMap1fDel>("glMap1f", getProcAddress);
            glMap1xOESPtr = LoadProcByName<glMap1xOESDel>("glMap1xOES", getProcAddress);
            glMap2dPtr = LoadProcByName<glMap2dDel>("glMap2d", getProcAddress);
            glMap2fPtr = LoadProcByName<glMap2fDel>("glMap2f", getProcAddress);
            glMap2xOESPtr = LoadProcByName<glMap2xOESDel>("glMap2xOES", getProcAddress);
            glMapBufferPtr = LoadProcByName<glMapBufferDel>("glMapBuffer", getProcAddress);
            glMapBufferARBPtr = LoadProcByName<glMapBufferARBDel>("glMapBufferARB", getProcAddress);
            glMapBufferOESPtr = LoadProcByName<glMapBufferOESDel>("glMapBufferOES", getProcAddress);
            glMapBufferRangePtr = LoadProcByName<glMapBufferRangeDel>("glMapBufferRange", getProcAddress);
            glMapBufferRangeEXTPtr = LoadProcByName<glMapBufferRangeEXTDel>("glMapBufferRangeEXT", getProcAddress);
            glMapControlPointsNVPtr = LoadProcByName<glMapControlPointsNVDel>("glMapControlPointsNV", getProcAddress);
            glMapGrid1dPtr = LoadProcByName<glMapGrid1dDel>("glMapGrid1d", getProcAddress);
            glMapGrid1fPtr = LoadProcByName<glMapGrid1fDel>("glMapGrid1f", getProcAddress);
            glMapGrid1xOESPtr = LoadProcByName<glMapGrid1xOESDel>("glMapGrid1xOES", getProcAddress);
            glMapGrid2dPtr = LoadProcByName<glMapGrid2dDel>("glMapGrid2d", getProcAddress);
            glMapGrid2fPtr = LoadProcByName<glMapGrid2fDel>("glMapGrid2f", getProcAddress);
            glMapGrid2xOESPtr = LoadProcByName<glMapGrid2xOESDel>("glMapGrid2xOES", getProcAddress);
            glMapNamedBufferPtr = LoadProcByName<glMapNamedBufferDel>("glMapNamedBuffer", getProcAddress);
            glMapNamedBufferEXTPtr = LoadProcByName<glMapNamedBufferEXTDel>("glMapNamedBufferEXT", getProcAddress);
            glMapNamedBufferRangePtr = LoadProcByName<glMapNamedBufferRangeDel>("glMapNamedBufferRange", getProcAddress);
            glMapNamedBufferRangeEXTPtr = LoadProcByName<glMapNamedBufferRangeEXTDel>("glMapNamedBufferRangeEXT", getProcAddress);
            glMapObjectBufferATIPtr = LoadProcByName<glMapObjectBufferATIDel>("glMapObjectBufferATI", getProcAddress);
            glMapParameterfvNVPtr = LoadProcByName<glMapParameterfvNVDel>("glMapParameterfvNV", getProcAddress);
            glMapParameterivNVPtr = LoadProcByName<glMapParameterivNVDel>("glMapParameterivNV", getProcAddress);
            glMapTexture2DINTELPtr = LoadProcByName<glMapTexture2DINTELDel>("glMapTexture2DINTEL", getProcAddress);
            glMapVertexAttrib1dAPPLEPtr = LoadProcByName<glMapVertexAttrib1dAPPLEDel>("glMapVertexAttrib1dAPPLE", getProcAddress);
            glMapVertexAttrib1fAPPLEPtr = LoadProcByName<glMapVertexAttrib1fAPPLEDel>("glMapVertexAttrib1fAPPLE", getProcAddress);
            glMapVertexAttrib2dAPPLEPtr = LoadProcByName<glMapVertexAttrib2dAPPLEDel>("glMapVertexAttrib2dAPPLE", getProcAddress);
            glMapVertexAttrib2fAPPLEPtr = LoadProcByName<glMapVertexAttrib2fAPPLEDel>("glMapVertexAttrib2fAPPLE", getProcAddress);
            glMaterialfPtr = LoadProcByName<glMaterialfDel>("glMaterialf", getProcAddress);
            glMaterialfvPtr = LoadProcByName<glMaterialfvDel>("glMaterialfv", getProcAddress);
            glMaterialiPtr = LoadProcByName<glMaterialiDel>("glMateriali", getProcAddress);
            glMaterialivPtr = LoadProcByName<glMaterialivDel>("glMaterialiv", getProcAddress);
            glMaterialxPtr = LoadProcByName<glMaterialxDel>("glMaterialx", getProcAddress);
            glMaterialxOESPtr = LoadProcByName<glMaterialxOESDel>("glMaterialxOES", getProcAddress);
            glMaterialxvPtr = LoadProcByName<glMaterialxvDel>("glMaterialxv", getProcAddress);
            glMaterialxvOESPtr = LoadProcByName<glMaterialxvOESDel>("glMaterialxvOES", getProcAddress);
            glMatrixFrustumEXTPtr = LoadProcByName<glMatrixFrustumEXTDel>("glMatrixFrustumEXT", getProcAddress);
            glMatrixIndexPointerARBPtr = LoadProcByName<glMatrixIndexPointerARBDel>("glMatrixIndexPointerARB", getProcAddress);
            glMatrixIndexPointerOESPtr = LoadProcByName<glMatrixIndexPointerOESDel>("glMatrixIndexPointerOES", getProcAddress);
            glMatrixIndexubvARBPtr = LoadProcByName<glMatrixIndexubvARBDel>("glMatrixIndexubvARB", getProcAddress);
            glMatrixIndexuivARBPtr = LoadProcByName<glMatrixIndexuivARBDel>("glMatrixIndexuivARB", getProcAddress);
            glMatrixIndexusvARBPtr = LoadProcByName<glMatrixIndexusvARBDel>("glMatrixIndexusvARB", getProcAddress);
            glMatrixLoad3x2fNVPtr = LoadProcByName<glMatrixLoad3x2fNVDel>("glMatrixLoad3x2fNV", getProcAddress);
            glMatrixLoad3x3fNVPtr = LoadProcByName<glMatrixLoad3x3fNVDel>("glMatrixLoad3x3fNV", getProcAddress);
            glMatrixLoadIdentityEXTPtr = LoadProcByName<glMatrixLoadIdentityEXTDel>("glMatrixLoadIdentityEXT", getProcAddress);
            glMatrixLoadTranspose3x3fNVPtr = LoadProcByName<glMatrixLoadTranspose3x3fNVDel>("glMatrixLoadTranspose3x3fNV", getProcAddress);
            glMatrixLoadTransposedEXTPtr = LoadProcByName<glMatrixLoadTransposedEXTDel>("glMatrixLoadTransposedEXT", getProcAddress);
            glMatrixLoadTransposefEXTPtr = LoadProcByName<glMatrixLoadTransposefEXTDel>("glMatrixLoadTransposefEXT", getProcAddress);
            glMatrixLoaddEXTPtr = LoadProcByName<glMatrixLoaddEXTDel>("glMatrixLoaddEXT", getProcAddress);
            glMatrixLoadfEXTPtr = LoadProcByName<glMatrixLoadfEXTDel>("glMatrixLoadfEXT", getProcAddress);
            glMatrixModePtr = LoadProcByName<glMatrixModeDel>("glMatrixMode", getProcAddress);
            glMatrixMult3x2fNVPtr = LoadProcByName<glMatrixMult3x2fNVDel>("glMatrixMult3x2fNV", getProcAddress);
            glMatrixMult3x3fNVPtr = LoadProcByName<glMatrixMult3x3fNVDel>("glMatrixMult3x3fNV", getProcAddress);
            glMatrixMultTranspose3x3fNVPtr = LoadProcByName<glMatrixMultTranspose3x3fNVDel>("glMatrixMultTranspose3x3fNV", getProcAddress);
            glMatrixMultTransposedEXTPtr = LoadProcByName<glMatrixMultTransposedEXTDel>("glMatrixMultTransposedEXT", getProcAddress);
            glMatrixMultTransposefEXTPtr = LoadProcByName<glMatrixMultTransposefEXTDel>("glMatrixMultTransposefEXT", getProcAddress);
            glMatrixMultdEXTPtr = LoadProcByName<glMatrixMultdEXTDel>("glMatrixMultdEXT", getProcAddress);
            glMatrixMultfEXTPtr = LoadProcByName<glMatrixMultfEXTDel>("glMatrixMultfEXT", getProcAddress);
            glMatrixOrthoEXTPtr = LoadProcByName<glMatrixOrthoEXTDel>("glMatrixOrthoEXT", getProcAddress);
            glMatrixPopEXTPtr = LoadProcByName<glMatrixPopEXTDel>("glMatrixPopEXT", getProcAddress);
            glMatrixPushEXTPtr = LoadProcByName<glMatrixPushEXTDel>("glMatrixPushEXT", getProcAddress);
            glMatrixRotatedEXTPtr = LoadProcByName<glMatrixRotatedEXTDel>("glMatrixRotatedEXT", getProcAddress);
            glMatrixRotatefEXTPtr = LoadProcByName<glMatrixRotatefEXTDel>("glMatrixRotatefEXT", getProcAddress);
            glMatrixScaledEXTPtr = LoadProcByName<glMatrixScaledEXTDel>("glMatrixScaledEXT", getProcAddress);
            glMatrixScalefEXTPtr = LoadProcByName<glMatrixScalefEXTDel>("glMatrixScalefEXT", getProcAddress);
            glMatrixTranslatedEXTPtr = LoadProcByName<glMatrixTranslatedEXTDel>("glMatrixTranslatedEXT", getProcAddress);
            glMatrixTranslatefEXTPtr = LoadProcByName<glMatrixTranslatefEXTDel>("glMatrixTranslatefEXT", getProcAddress);
            glMaxShaderCompilerThreadsKHRPtr = LoadProcByName<glMaxShaderCompilerThreadsKHRDel>("glMaxShaderCompilerThreadsKHR", getProcAddress);
            glMaxShaderCompilerThreadsARBPtr = LoadProcByName<glMaxShaderCompilerThreadsARBDel>("glMaxShaderCompilerThreadsARB", getProcAddress);
            glMemoryBarrierPtr = LoadProcByName<glMemoryBarrierDel>("glMemoryBarrier", getProcAddress);
            glMemoryBarrierByRegionPtr = LoadProcByName<glMemoryBarrierByRegionDel>("glMemoryBarrierByRegion", getProcAddress);
            glMemoryBarrierEXTPtr = LoadProcByName<glMemoryBarrierEXTDel>("glMemoryBarrierEXT", getProcAddress);
            glMemoryObjectParameterivEXTPtr = LoadProcByName<glMemoryObjectParameterivEXTDel>("glMemoryObjectParameterivEXT", getProcAddress);
            glMinSampleShadingPtr = LoadProcByName<glMinSampleShadingDel>("glMinSampleShading", getProcAddress);
            glMinSampleShadingARBPtr = LoadProcByName<glMinSampleShadingARBDel>("glMinSampleShadingARB", getProcAddress);
            glMinSampleShadingOESPtr = LoadProcByName<glMinSampleShadingOESDel>("glMinSampleShadingOES", getProcAddress);
            glMinmaxPtr = LoadProcByName<glMinmaxDel>("glMinmax", getProcAddress);
            glMinmaxEXTPtr = LoadProcByName<glMinmaxEXTDel>("glMinmaxEXT", getProcAddress);
            glMultMatrixdPtr = LoadProcByName<glMultMatrixdDel>("glMultMatrixd", getProcAddress);
            glMultMatrixfPtr = LoadProcByName<glMultMatrixfDel>("glMultMatrixf", getProcAddress);
            glMultMatrixxPtr = LoadProcByName<glMultMatrixxDel>("glMultMatrixx", getProcAddress);
            glMultMatrixxOESPtr = LoadProcByName<glMultMatrixxOESDel>("glMultMatrixxOES", getProcAddress);
            glMultTransposeMatrixdPtr = LoadProcByName<glMultTransposeMatrixdDel>("glMultTransposeMatrixd", getProcAddress);
            glMultTransposeMatrixdARBPtr = LoadProcByName<glMultTransposeMatrixdARBDel>("glMultTransposeMatrixdARB", getProcAddress);
            glMultTransposeMatrixfPtr = LoadProcByName<glMultTransposeMatrixfDel>("glMultTransposeMatrixf", getProcAddress);
            glMultTransposeMatrixfARBPtr = LoadProcByName<glMultTransposeMatrixfARBDel>("glMultTransposeMatrixfARB", getProcAddress);
            glMultTransposeMatrixxOESPtr = LoadProcByName<glMultTransposeMatrixxOESDel>("glMultTransposeMatrixxOES", getProcAddress);
            glMultiDrawArraysPtr = LoadProcByName<glMultiDrawArraysDel>("glMultiDrawArrays", getProcAddress);
            glMultiDrawArraysEXTPtr = LoadProcByName<glMultiDrawArraysEXTDel>("glMultiDrawArraysEXT", getProcAddress);
            glMultiDrawArraysIndirectPtr = LoadProcByName<glMultiDrawArraysIndirectDel>("glMultiDrawArraysIndirect", getProcAddress);
            glMultiDrawArraysIndirectAMDPtr = LoadProcByName<glMultiDrawArraysIndirectAMDDel>("glMultiDrawArraysIndirectAMD", getProcAddress);
            glMultiDrawArraysIndirectBindlessCountNVPtr = LoadProcByName<glMultiDrawArraysIndirectBindlessCountNVDel>("glMultiDrawArraysIndirectBindlessCountNV", getProcAddress);
            glMultiDrawArraysIndirectBindlessNVPtr = LoadProcByName<glMultiDrawArraysIndirectBindlessNVDel>("glMultiDrawArraysIndirectBindlessNV", getProcAddress);
            glMultiDrawArraysIndirectCountPtr = LoadProcByName<glMultiDrawArraysIndirectCountDel>("glMultiDrawArraysIndirectCount", getProcAddress);
            glMultiDrawArraysIndirectCountARBPtr = LoadProcByName<glMultiDrawArraysIndirectCountARBDel>("glMultiDrawArraysIndirectCountARB", getProcAddress);
            glMultiDrawArraysIndirectEXTPtr = LoadProcByName<glMultiDrawArraysIndirectEXTDel>("glMultiDrawArraysIndirectEXT", getProcAddress);
            glMultiDrawElementArrayAPPLEPtr = LoadProcByName<glMultiDrawElementArrayAPPLEDel>("glMultiDrawElementArrayAPPLE", getProcAddress);
            glMultiDrawElementsPtr = LoadProcByName<glMultiDrawElementsDel>("glMultiDrawElements", getProcAddress);
            glMultiDrawElementsBaseVertexPtr = LoadProcByName<glMultiDrawElementsBaseVertexDel>("glMultiDrawElementsBaseVertex", getProcAddress);
            glMultiDrawElementsBaseVertexEXTPtr = LoadProcByName<glMultiDrawElementsBaseVertexEXTDel>("glMultiDrawElementsBaseVertexEXT", getProcAddress);
            glMultiDrawElementsEXTPtr = LoadProcByName<glMultiDrawElementsEXTDel>("glMultiDrawElementsEXT", getProcAddress);
            glMultiDrawElementsIndirectPtr = LoadProcByName<glMultiDrawElementsIndirectDel>("glMultiDrawElementsIndirect", getProcAddress);
            glMultiDrawElementsIndirectAMDPtr = LoadProcByName<glMultiDrawElementsIndirectAMDDel>("glMultiDrawElementsIndirectAMD", getProcAddress);
            glMultiDrawElementsIndirectBindlessCountNVPtr = LoadProcByName<glMultiDrawElementsIndirectBindlessCountNVDel>("glMultiDrawElementsIndirectBindlessCountNV", getProcAddress);
            glMultiDrawElementsIndirectBindlessNVPtr = LoadProcByName<glMultiDrawElementsIndirectBindlessNVDel>("glMultiDrawElementsIndirectBindlessNV", getProcAddress);
            glMultiDrawElementsIndirectCountPtr = LoadProcByName<glMultiDrawElementsIndirectCountDel>("glMultiDrawElementsIndirectCount", getProcAddress);
            glMultiDrawElementsIndirectCountARBPtr = LoadProcByName<glMultiDrawElementsIndirectCountARBDel>("glMultiDrawElementsIndirectCountARB", getProcAddress);
            glMultiDrawElementsIndirectEXTPtr = LoadProcByName<glMultiDrawElementsIndirectEXTDel>("glMultiDrawElementsIndirectEXT", getProcAddress);
            glMultiDrawMeshTasksIndirectNVPtr = LoadProcByName<glMultiDrawMeshTasksIndirectNVDel>("glMultiDrawMeshTasksIndirectNV", getProcAddress);
            glMultiDrawMeshTasksIndirectCountNVPtr = LoadProcByName<glMultiDrawMeshTasksIndirectCountNVDel>("glMultiDrawMeshTasksIndirectCountNV", getProcAddress);
            glMultiDrawRangeElementArrayAPPLEPtr = LoadProcByName<glMultiDrawRangeElementArrayAPPLEDel>("glMultiDrawRangeElementArrayAPPLE", getProcAddress);
            glMultiModeDrawArraysIBMPtr = LoadProcByName<glMultiModeDrawArraysIBMDel>("glMultiModeDrawArraysIBM", getProcAddress);
            glMultiModeDrawElementsIBMPtr = LoadProcByName<glMultiModeDrawElementsIBMDel>("glMultiModeDrawElementsIBM", getProcAddress);
            glMultiTexBufferEXTPtr = LoadProcByName<glMultiTexBufferEXTDel>("glMultiTexBufferEXT", getProcAddress);
            glMultiTexCoord1bOESPtr = LoadProcByName<glMultiTexCoord1bOESDel>("glMultiTexCoord1bOES", getProcAddress);
            glMultiTexCoord1bvOESPtr = LoadProcByName<glMultiTexCoord1bvOESDel>("glMultiTexCoord1bvOES", getProcAddress);
            glMultiTexCoord1dPtr = LoadProcByName<glMultiTexCoord1dDel>("glMultiTexCoord1d", getProcAddress);
            glMultiTexCoord1dARBPtr = LoadProcByName<glMultiTexCoord1dARBDel>("glMultiTexCoord1dARB", getProcAddress);
            glMultiTexCoord1dvPtr = LoadProcByName<glMultiTexCoord1dvDel>("glMultiTexCoord1dv", getProcAddress);
            glMultiTexCoord1dvARBPtr = LoadProcByName<glMultiTexCoord1dvARBDel>("glMultiTexCoord1dvARB", getProcAddress);
            glMultiTexCoord1fPtr = LoadProcByName<glMultiTexCoord1fDel>("glMultiTexCoord1f", getProcAddress);
            glMultiTexCoord1fARBPtr = LoadProcByName<glMultiTexCoord1fARBDel>("glMultiTexCoord1fARB", getProcAddress);
            glMultiTexCoord1fvPtr = LoadProcByName<glMultiTexCoord1fvDel>("glMultiTexCoord1fv", getProcAddress);
            glMultiTexCoord1fvARBPtr = LoadProcByName<glMultiTexCoord1fvARBDel>("glMultiTexCoord1fvARB", getProcAddress);
            glMultiTexCoord1hNVPtr = LoadProcByName<glMultiTexCoord1hNVDel>("glMultiTexCoord1hNV", getProcAddress);
            glMultiTexCoord1hvNVPtr = LoadProcByName<glMultiTexCoord1hvNVDel>("glMultiTexCoord1hvNV", getProcAddress);
            glMultiTexCoord1iPtr = LoadProcByName<glMultiTexCoord1iDel>("glMultiTexCoord1i", getProcAddress);
            glMultiTexCoord1iARBPtr = LoadProcByName<glMultiTexCoord1iARBDel>("glMultiTexCoord1iARB", getProcAddress);
            glMultiTexCoord1ivPtr = LoadProcByName<glMultiTexCoord1ivDel>("glMultiTexCoord1iv", getProcAddress);
            glMultiTexCoord1ivARBPtr = LoadProcByName<glMultiTexCoord1ivARBDel>("glMultiTexCoord1ivARB", getProcAddress);
            glMultiTexCoord1sPtr = LoadProcByName<glMultiTexCoord1sDel>("glMultiTexCoord1s", getProcAddress);
            glMultiTexCoord1sARBPtr = LoadProcByName<glMultiTexCoord1sARBDel>("glMultiTexCoord1sARB", getProcAddress);
            glMultiTexCoord1svPtr = LoadProcByName<glMultiTexCoord1svDel>("glMultiTexCoord1sv", getProcAddress);
            glMultiTexCoord1svARBPtr = LoadProcByName<glMultiTexCoord1svARBDel>("glMultiTexCoord1svARB", getProcAddress);
            glMultiTexCoord1xOESPtr = LoadProcByName<glMultiTexCoord1xOESDel>("glMultiTexCoord1xOES", getProcAddress);
            glMultiTexCoord1xvOESPtr = LoadProcByName<glMultiTexCoord1xvOESDel>("glMultiTexCoord1xvOES", getProcAddress);
            glMultiTexCoord2bOESPtr = LoadProcByName<glMultiTexCoord2bOESDel>("glMultiTexCoord2bOES", getProcAddress);
            glMultiTexCoord2bvOESPtr = LoadProcByName<glMultiTexCoord2bvOESDel>("glMultiTexCoord2bvOES", getProcAddress);
            glMultiTexCoord2dPtr = LoadProcByName<glMultiTexCoord2dDel>("glMultiTexCoord2d", getProcAddress);
            glMultiTexCoord2dARBPtr = LoadProcByName<glMultiTexCoord2dARBDel>("glMultiTexCoord2dARB", getProcAddress);
            glMultiTexCoord2dvPtr = LoadProcByName<glMultiTexCoord2dvDel>("glMultiTexCoord2dv", getProcAddress);
            glMultiTexCoord2dvARBPtr = LoadProcByName<glMultiTexCoord2dvARBDel>("glMultiTexCoord2dvARB", getProcAddress);
            glMultiTexCoord2fPtr = LoadProcByName<glMultiTexCoord2fDel>("glMultiTexCoord2f", getProcAddress);
            glMultiTexCoord2fARBPtr = LoadProcByName<glMultiTexCoord2fARBDel>("glMultiTexCoord2fARB", getProcAddress);
            glMultiTexCoord2fvPtr = LoadProcByName<glMultiTexCoord2fvDel>("glMultiTexCoord2fv", getProcAddress);
            glMultiTexCoord2fvARBPtr = LoadProcByName<glMultiTexCoord2fvARBDel>("glMultiTexCoord2fvARB", getProcAddress);
            glMultiTexCoord2hNVPtr = LoadProcByName<glMultiTexCoord2hNVDel>("glMultiTexCoord2hNV", getProcAddress);
            glMultiTexCoord2hvNVPtr = LoadProcByName<glMultiTexCoord2hvNVDel>("glMultiTexCoord2hvNV", getProcAddress);
            glMultiTexCoord2iPtr = LoadProcByName<glMultiTexCoord2iDel>("glMultiTexCoord2i", getProcAddress);
            glMultiTexCoord2iARBPtr = LoadProcByName<glMultiTexCoord2iARBDel>("glMultiTexCoord2iARB", getProcAddress);
            glMultiTexCoord2ivPtr = LoadProcByName<glMultiTexCoord2ivDel>("glMultiTexCoord2iv", getProcAddress);
            glMultiTexCoord2ivARBPtr = LoadProcByName<glMultiTexCoord2ivARBDel>("glMultiTexCoord2ivARB", getProcAddress);
            glMultiTexCoord2sPtr = LoadProcByName<glMultiTexCoord2sDel>("glMultiTexCoord2s", getProcAddress);
            glMultiTexCoord2sARBPtr = LoadProcByName<glMultiTexCoord2sARBDel>("glMultiTexCoord2sARB", getProcAddress);
            glMultiTexCoord2svPtr = LoadProcByName<glMultiTexCoord2svDel>("glMultiTexCoord2sv", getProcAddress);
            glMultiTexCoord2svARBPtr = LoadProcByName<glMultiTexCoord2svARBDel>("glMultiTexCoord2svARB", getProcAddress);
            glMultiTexCoord2xOESPtr = LoadProcByName<glMultiTexCoord2xOESDel>("glMultiTexCoord2xOES", getProcAddress);
            glMultiTexCoord2xvOESPtr = LoadProcByName<glMultiTexCoord2xvOESDel>("glMultiTexCoord2xvOES", getProcAddress);
            glMultiTexCoord3bOESPtr = LoadProcByName<glMultiTexCoord3bOESDel>("glMultiTexCoord3bOES", getProcAddress);
            glMultiTexCoord3bvOESPtr = LoadProcByName<glMultiTexCoord3bvOESDel>("glMultiTexCoord3bvOES", getProcAddress);
            glMultiTexCoord3dPtr = LoadProcByName<glMultiTexCoord3dDel>("glMultiTexCoord3d", getProcAddress);
            glMultiTexCoord3dARBPtr = LoadProcByName<glMultiTexCoord3dARBDel>("glMultiTexCoord3dARB", getProcAddress);
            glMultiTexCoord3dvPtr = LoadProcByName<glMultiTexCoord3dvDel>("glMultiTexCoord3dv", getProcAddress);
            glMultiTexCoord3dvARBPtr = LoadProcByName<glMultiTexCoord3dvARBDel>("glMultiTexCoord3dvARB", getProcAddress);
            glMultiTexCoord3fPtr = LoadProcByName<glMultiTexCoord3fDel>("glMultiTexCoord3f", getProcAddress);
            glMultiTexCoord3fARBPtr = LoadProcByName<glMultiTexCoord3fARBDel>("glMultiTexCoord3fARB", getProcAddress);
            glMultiTexCoord3fvPtr = LoadProcByName<glMultiTexCoord3fvDel>("glMultiTexCoord3fv", getProcAddress);
            glMultiTexCoord3fvARBPtr = LoadProcByName<glMultiTexCoord3fvARBDel>("glMultiTexCoord3fvARB", getProcAddress);
            glMultiTexCoord3hNVPtr = LoadProcByName<glMultiTexCoord3hNVDel>("glMultiTexCoord3hNV", getProcAddress);
            glMultiTexCoord3hvNVPtr = LoadProcByName<glMultiTexCoord3hvNVDel>("glMultiTexCoord3hvNV", getProcAddress);
            glMultiTexCoord3iPtr = LoadProcByName<glMultiTexCoord3iDel>("glMultiTexCoord3i", getProcAddress);
            glMultiTexCoord3iARBPtr = LoadProcByName<glMultiTexCoord3iARBDel>("glMultiTexCoord3iARB", getProcAddress);
            glMultiTexCoord3ivPtr = LoadProcByName<glMultiTexCoord3ivDel>("glMultiTexCoord3iv", getProcAddress);
            glMultiTexCoord3ivARBPtr = LoadProcByName<glMultiTexCoord3ivARBDel>("glMultiTexCoord3ivARB", getProcAddress);
            glMultiTexCoord3sPtr = LoadProcByName<glMultiTexCoord3sDel>("glMultiTexCoord3s", getProcAddress);
            glMultiTexCoord3sARBPtr = LoadProcByName<glMultiTexCoord3sARBDel>("glMultiTexCoord3sARB", getProcAddress);
            glMultiTexCoord3svPtr = LoadProcByName<glMultiTexCoord3svDel>("glMultiTexCoord3sv", getProcAddress);
            glMultiTexCoord3svARBPtr = LoadProcByName<glMultiTexCoord3svARBDel>("glMultiTexCoord3svARB", getProcAddress);
            glMultiTexCoord3xOESPtr = LoadProcByName<glMultiTexCoord3xOESDel>("glMultiTexCoord3xOES", getProcAddress);
            glMultiTexCoord3xvOESPtr = LoadProcByName<glMultiTexCoord3xvOESDel>("glMultiTexCoord3xvOES", getProcAddress);
            glMultiTexCoord4bOESPtr = LoadProcByName<glMultiTexCoord4bOESDel>("glMultiTexCoord4bOES", getProcAddress);
            glMultiTexCoord4bvOESPtr = LoadProcByName<glMultiTexCoord4bvOESDel>("glMultiTexCoord4bvOES", getProcAddress);
            glMultiTexCoord4dPtr = LoadProcByName<glMultiTexCoord4dDel>("glMultiTexCoord4d", getProcAddress);
            glMultiTexCoord4dARBPtr = LoadProcByName<glMultiTexCoord4dARBDel>("glMultiTexCoord4dARB", getProcAddress);
            glMultiTexCoord4dvPtr = LoadProcByName<glMultiTexCoord4dvDel>("glMultiTexCoord4dv", getProcAddress);
            glMultiTexCoord4dvARBPtr = LoadProcByName<glMultiTexCoord4dvARBDel>("glMultiTexCoord4dvARB", getProcAddress);
            glMultiTexCoord4fPtr = LoadProcByName<glMultiTexCoord4fDel>("glMultiTexCoord4f", getProcAddress);
            glMultiTexCoord4fARBPtr = LoadProcByName<glMultiTexCoord4fARBDel>("glMultiTexCoord4fARB", getProcAddress);
            glMultiTexCoord4fvPtr = LoadProcByName<glMultiTexCoord4fvDel>("glMultiTexCoord4fv", getProcAddress);
            glMultiTexCoord4fvARBPtr = LoadProcByName<glMultiTexCoord4fvARBDel>("glMultiTexCoord4fvARB", getProcAddress);
            glMultiTexCoord4hNVPtr = LoadProcByName<glMultiTexCoord4hNVDel>("glMultiTexCoord4hNV", getProcAddress);
            glMultiTexCoord4hvNVPtr = LoadProcByName<glMultiTexCoord4hvNVDel>("glMultiTexCoord4hvNV", getProcAddress);
            glMultiTexCoord4iPtr = LoadProcByName<glMultiTexCoord4iDel>("glMultiTexCoord4i", getProcAddress);
            glMultiTexCoord4iARBPtr = LoadProcByName<glMultiTexCoord4iARBDel>("glMultiTexCoord4iARB", getProcAddress);
            glMultiTexCoord4ivPtr = LoadProcByName<glMultiTexCoord4ivDel>("glMultiTexCoord4iv", getProcAddress);
            glMultiTexCoord4ivARBPtr = LoadProcByName<glMultiTexCoord4ivARBDel>("glMultiTexCoord4ivARB", getProcAddress);
            glMultiTexCoord4sPtr = LoadProcByName<glMultiTexCoord4sDel>("glMultiTexCoord4s", getProcAddress);
            glMultiTexCoord4sARBPtr = LoadProcByName<glMultiTexCoord4sARBDel>("glMultiTexCoord4sARB", getProcAddress);
            glMultiTexCoord4svPtr = LoadProcByName<glMultiTexCoord4svDel>("glMultiTexCoord4sv", getProcAddress);
            glMultiTexCoord4svARBPtr = LoadProcByName<glMultiTexCoord4svARBDel>("glMultiTexCoord4svARB", getProcAddress);
            glMultiTexCoord4xPtr = LoadProcByName<glMultiTexCoord4xDel>("glMultiTexCoord4x", getProcAddress);
            glMultiTexCoord4xOESPtr = LoadProcByName<glMultiTexCoord4xOESDel>("glMultiTexCoord4xOES", getProcAddress);
            glMultiTexCoord4xvOESPtr = LoadProcByName<glMultiTexCoord4xvOESDel>("glMultiTexCoord4xvOES", getProcAddress);
            glMultiTexCoordP1uiPtr = LoadProcByName<glMultiTexCoordP1uiDel>("glMultiTexCoordP1ui", getProcAddress);
            glMultiTexCoordP1uivPtr = LoadProcByName<glMultiTexCoordP1uivDel>("glMultiTexCoordP1uiv", getProcAddress);
            glMultiTexCoordP2uiPtr = LoadProcByName<glMultiTexCoordP2uiDel>("glMultiTexCoordP2ui", getProcAddress);
            glMultiTexCoordP2uivPtr = LoadProcByName<glMultiTexCoordP2uivDel>("glMultiTexCoordP2uiv", getProcAddress);
            glMultiTexCoordP3uiPtr = LoadProcByName<glMultiTexCoordP3uiDel>("glMultiTexCoordP3ui", getProcAddress);
            glMultiTexCoordP3uivPtr = LoadProcByName<glMultiTexCoordP3uivDel>("glMultiTexCoordP3uiv", getProcAddress);
            glMultiTexCoordP4uiPtr = LoadProcByName<glMultiTexCoordP4uiDel>("glMultiTexCoordP4ui", getProcAddress);
            glMultiTexCoordP4uivPtr = LoadProcByName<glMultiTexCoordP4uivDel>("glMultiTexCoordP4uiv", getProcAddress);
            glMultiTexCoordPointerEXTPtr = LoadProcByName<glMultiTexCoordPointerEXTDel>("glMultiTexCoordPointerEXT", getProcAddress);
            glMultiTexEnvfEXTPtr = LoadProcByName<glMultiTexEnvfEXTDel>("glMultiTexEnvfEXT", getProcAddress);
            glMultiTexEnvfvEXTPtr = LoadProcByName<glMultiTexEnvfvEXTDel>("glMultiTexEnvfvEXT", getProcAddress);
            glMultiTexEnviEXTPtr = LoadProcByName<glMultiTexEnviEXTDel>("glMultiTexEnviEXT", getProcAddress);
            glMultiTexEnvivEXTPtr = LoadProcByName<glMultiTexEnvivEXTDel>("glMultiTexEnvivEXT", getProcAddress);
            glMultiTexGendEXTPtr = LoadProcByName<glMultiTexGendEXTDel>("glMultiTexGendEXT", getProcAddress);
            glMultiTexGendvEXTPtr = LoadProcByName<glMultiTexGendvEXTDel>("glMultiTexGendvEXT", getProcAddress);
            glMultiTexGenfEXTPtr = LoadProcByName<glMultiTexGenfEXTDel>("glMultiTexGenfEXT", getProcAddress);
            glMultiTexGenfvEXTPtr = LoadProcByName<glMultiTexGenfvEXTDel>("glMultiTexGenfvEXT", getProcAddress);
            glMultiTexGeniEXTPtr = LoadProcByName<glMultiTexGeniEXTDel>("glMultiTexGeniEXT", getProcAddress);
            glMultiTexGenivEXTPtr = LoadProcByName<glMultiTexGenivEXTDel>("glMultiTexGenivEXT", getProcAddress);
            glMultiTexImage1DEXTPtr = LoadProcByName<glMultiTexImage1DEXTDel>("glMultiTexImage1DEXT", getProcAddress);
            glMultiTexImage2DEXTPtr = LoadProcByName<glMultiTexImage2DEXTDel>("glMultiTexImage2DEXT", getProcAddress);
            glMultiTexImage3DEXTPtr = LoadProcByName<glMultiTexImage3DEXTDel>("glMultiTexImage3DEXT", getProcAddress);
            glMultiTexParameterIivEXTPtr = LoadProcByName<glMultiTexParameterIivEXTDel>("glMultiTexParameterIivEXT", getProcAddress);
            glMultiTexParameterIuivEXTPtr = LoadProcByName<glMultiTexParameterIuivEXTDel>("glMultiTexParameterIuivEXT", getProcAddress);
            glMultiTexParameterfEXTPtr = LoadProcByName<glMultiTexParameterfEXTDel>("glMultiTexParameterfEXT", getProcAddress);
            glMultiTexParameterfvEXTPtr = LoadProcByName<glMultiTexParameterfvEXTDel>("glMultiTexParameterfvEXT", getProcAddress);
            glMultiTexParameteriEXTPtr = LoadProcByName<glMultiTexParameteriEXTDel>("glMultiTexParameteriEXT", getProcAddress);
            glMultiTexParameterivEXTPtr = LoadProcByName<glMultiTexParameterivEXTDel>("glMultiTexParameterivEXT", getProcAddress);
            glMultiTexRenderbufferEXTPtr = LoadProcByName<glMultiTexRenderbufferEXTDel>("glMultiTexRenderbufferEXT", getProcAddress);
            glMultiTexSubImage1DEXTPtr = LoadProcByName<glMultiTexSubImage1DEXTDel>("glMultiTexSubImage1DEXT", getProcAddress);
            glMultiTexSubImage2DEXTPtr = LoadProcByName<glMultiTexSubImage2DEXTDel>("glMultiTexSubImage2DEXT", getProcAddress);
            glMultiTexSubImage3DEXTPtr = LoadProcByName<glMultiTexSubImage3DEXTDel>("glMultiTexSubImage3DEXT", getProcAddress);
            glMulticastBarrierNVPtr = LoadProcByName<glMulticastBarrierNVDel>("glMulticastBarrierNV", getProcAddress);
            glMulticastBlitFramebufferNVPtr = LoadProcByName<glMulticastBlitFramebufferNVDel>("glMulticastBlitFramebufferNV", getProcAddress);
            glMulticastBufferSubDataNVPtr = LoadProcByName<glMulticastBufferSubDataNVDel>("glMulticastBufferSubDataNV", getProcAddress);
            glMulticastCopyBufferSubDataNVPtr = LoadProcByName<glMulticastCopyBufferSubDataNVDel>("glMulticastCopyBufferSubDataNV", getProcAddress);
            glMulticastCopyImageSubDataNVPtr = LoadProcByName<glMulticastCopyImageSubDataNVDel>("glMulticastCopyImageSubDataNV", getProcAddress);
            glMulticastFramebufferSampleLocationsfvNVPtr = LoadProcByName<glMulticastFramebufferSampleLocationsfvNVDel>("glMulticastFramebufferSampleLocationsfvNV", getProcAddress);
            glMulticastGetQueryObjecti64vNVPtr = LoadProcByName<glMulticastGetQueryObjecti64vNVDel>("glMulticastGetQueryObjecti64vNV", getProcAddress);
            glMulticastGetQueryObjectivNVPtr = LoadProcByName<glMulticastGetQueryObjectivNVDel>("glMulticastGetQueryObjectivNV", getProcAddress);
            glMulticastGetQueryObjectui64vNVPtr = LoadProcByName<glMulticastGetQueryObjectui64vNVDel>("glMulticastGetQueryObjectui64vNV", getProcAddress);
            glMulticastGetQueryObjectuivNVPtr = LoadProcByName<glMulticastGetQueryObjectuivNVDel>("glMulticastGetQueryObjectuivNV", getProcAddress);
            glMulticastScissorArrayvNVXPtr = LoadProcByName<glMulticastScissorArrayvNVXDel>("glMulticastScissorArrayvNVX", getProcAddress);
            glMulticastViewportArrayvNVXPtr = LoadProcByName<glMulticastViewportArrayvNVXDel>("glMulticastViewportArrayvNVX", getProcAddress);
            glMulticastViewportPositionWScaleNVXPtr = LoadProcByName<glMulticastViewportPositionWScaleNVXDel>("glMulticastViewportPositionWScaleNVX", getProcAddress);
            glMulticastWaitSyncNVPtr = LoadProcByName<glMulticastWaitSyncNVDel>("glMulticastWaitSyncNV", getProcAddress);
            glNamedBufferAttachMemoryNVPtr = LoadProcByName<glNamedBufferAttachMemoryNVDel>("glNamedBufferAttachMemoryNV", getProcAddress);
            glNamedBufferDataPtr = LoadProcByName<glNamedBufferDataDel>("glNamedBufferData", getProcAddress);
            glNamedBufferDataEXTPtr = LoadProcByName<glNamedBufferDataEXTDel>("glNamedBufferDataEXT", getProcAddress);
            glNamedBufferPageCommitmentARBPtr = LoadProcByName<glNamedBufferPageCommitmentARBDel>("glNamedBufferPageCommitmentARB", getProcAddress);
            glNamedBufferPageCommitmentEXTPtr = LoadProcByName<glNamedBufferPageCommitmentEXTDel>("glNamedBufferPageCommitmentEXT", getProcAddress);
            glNamedBufferStoragePtr = LoadProcByName<glNamedBufferStorageDel>("glNamedBufferStorage", getProcAddress);
            glNamedBufferStorageExternalEXTPtr = LoadProcByName<glNamedBufferStorageExternalEXTDel>("glNamedBufferStorageExternalEXT", getProcAddress);
            glNamedBufferStorageEXTPtr = LoadProcByName<glNamedBufferStorageEXTDel>("glNamedBufferStorageEXT", getProcAddress);
            glNamedBufferStorageMemEXTPtr = LoadProcByName<glNamedBufferStorageMemEXTDel>("glNamedBufferStorageMemEXT", getProcAddress);
            glNamedBufferSubDataPtr = LoadProcByName<glNamedBufferSubDataDel>("glNamedBufferSubData", getProcAddress);
            glNamedBufferSubDataEXTPtr = LoadProcByName<glNamedBufferSubDataEXTDel>("glNamedBufferSubDataEXT", getProcAddress);
            glNamedCopyBufferSubDataEXTPtr = LoadProcByName<glNamedCopyBufferSubDataEXTDel>("glNamedCopyBufferSubDataEXT", getProcAddress);
            glNamedFramebufferDrawBufferPtr = LoadProcByName<glNamedFramebufferDrawBufferDel>("glNamedFramebufferDrawBuffer", getProcAddress);
            glNamedFramebufferDrawBuffersPtr = LoadProcByName<glNamedFramebufferDrawBuffersDel>("glNamedFramebufferDrawBuffers", getProcAddress);
            glNamedFramebufferParameteriPtr = LoadProcByName<glNamedFramebufferParameteriDel>("glNamedFramebufferParameteri", getProcAddress);
            glNamedFramebufferParameteriEXTPtr = LoadProcByName<glNamedFramebufferParameteriEXTDel>("glNamedFramebufferParameteriEXT", getProcAddress);
            glNamedFramebufferReadBufferPtr = LoadProcByName<glNamedFramebufferReadBufferDel>("glNamedFramebufferReadBuffer", getProcAddress);
            glNamedFramebufferRenderbufferPtr = LoadProcByName<glNamedFramebufferRenderbufferDel>("glNamedFramebufferRenderbuffer", getProcAddress);
            glNamedFramebufferRenderbufferEXTPtr = LoadProcByName<glNamedFramebufferRenderbufferEXTDel>("glNamedFramebufferRenderbufferEXT", getProcAddress);
            glNamedFramebufferSampleLocationsfvARBPtr = LoadProcByName<glNamedFramebufferSampleLocationsfvARBDel>("glNamedFramebufferSampleLocationsfvARB", getProcAddress);
            glNamedFramebufferSampleLocationsfvNVPtr = LoadProcByName<glNamedFramebufferSampleLocationsfvNVDel>("glNamedFramebufferSampleLocationsfvNV", getProcAddress);
            glNamedFramebufferTexturePtr = LoadProcByName<glNamedFramebufferTextureDel>("glNamedFramebufferTexture", getProcAddress);
            glNamedFramebufferSamplePositionsfvAMDPtr = LoadProcByName<glNamedFramebufferSamplePositionsfvAMDDel>("glNamedFramebufferSamplePositionsfvAMD", getProcAddress);
            glNamedFramebufferTexture1DEXTPtr = LoadProcByName<glNamedFramebufferTexture1DEXTDel>("glNamedFramebufferTexture1DEXT", getProcAddress);
            glNamedFramebufferTexture2DEXTPtr = LoadProcByName<glNamedFramebufferTexture2DEXTDel>("glNamedFramebufferTexture2DEXT", getProcAddress);
            glNamedFramebufferTexture3DEXTPtr = LoadProcByName<glNamedFramebufferTexture3DEXTDel>("glNamedFramebufferTexture3DEXT", getProcAddress);
            glNamedFramebufferTextureEXTPtr = LoadProcByName<glNamedFramebufferTextureEXTDel>("glNamedFramebufferTextureEXT", getProcAddress);
            glNamedFramebufferTextureFaceEXTPtr = LoadProcByName<glNamedFramebufferTextureFaceEXTDel>("glNamedFramebufferTextureFaceEXT", getProcAddress);
            glNamedFramebufferTextureLayerPtr = LoadProcByName<glNamedFramebufferTextureLayerDel>("glNamedFramebufferTextureLayer", getProcAddress);
            glNamedFramebufferTextureLayerEXTPtr = LoadProcByName<glNamedFramebufferTextureLayerEXTDel>("glNamedFramebufferTextureLayerEXT", getProcAddress);
            glNamedProgramLocalParameter4dEXTPtr = LoadProcByName<glNamedProgramLocalParameter4dEXTDel>("glNamedProgramLocalParameter4dEXT", getProcAddress);
            glNamedProgramLocalParameter4dvEXTPtr = LoadProcByName<glNamedProgramLocalParameter4dvEXTDel>("glNamedProgramLocalParameter4dvEXT", getProcAddress);
            glNamedProgramLocalParameter4fEXTPtr = LoadProcByName<glNamedProgramLocalParameter4fEXTDel>("glNamedProgramLocalParameter4fEXT", getProcAddress);
            glNamedProgramLocalParameter4fvEXTPtr = LoadProcByName<glNamedProgramLocalParameter4fvEXTDel>("glNamedProgramLocalParameter4fvEXT", getProcAddress);
            glNamedProgramLocalParameterI4iEXTPtr = LoadProcByName<glNamedProgramLocalParameterI4iEXTDel>("glNamedProgramLocalParameterI4iEXT", getProcAddress);
            glNamedProgramLocalParameterI4ivEXTPtr = LoadProcByName<glNamedProgramLocalParameterI4ivEXTDel>("glNamedProgramLocalParameterI4ivEXT", getProcAddress);
            glNamedProgramLocalParameterI4uiEXTPtr = LoadProcByName<glNamedProgramLocalParameterI4uiEXTDel>("glNamedProgramLocalParameterI4uiEXT", getProcAddress);
            glNamedProgramLocalParameterI4uivEXTPtr = LoadProcByName<glNamedProgramLocalParameterI4uivEXTDel>("glNamedProgramLocalParameterI4uivEXT", getProcAddress);
            glNamedProgramLocalParameters4fvEXTPtr = LoadProcByName<glNamedProgramLocalParameters4fvEXTDel>("glNamedProgramLocalParameters4fvEXT", getProcAddress);
            glNamedProgramLocalParametersI4ivEXTPtr = LoadProcByName<glNamedProgramLocalParametersI4ivEXTDel>("glNamedProgramLocalParametersI4ivEXT", getProcAddress);
            glNamedProgramLocalParametersI4uivEXTPtr = LoadProcByName<glNamedProgramLocalParametersI4uivEXTDel>("glNamedProgramLocalParametersI4uivEXT", getProcAddress);
            glNamedProgramStringEXTPtr = LoadProcByName<glNamedProgramStringEXTDel>("glNamedProgramStringEXT", getProcAddress);
            glNamedRenderbufferStoragePtr = LoadProcByName<glNamedRenderbufferStorageDel>("glNamedRenderbufferStorage", getProcAddress);
            glNamedRenderbufferStorageEXTPtr = LoadProcByName<glNamedRenderbufferStorageEXTDel>("glNamedRenderbufferStorageEXT", getProcAddress);
            glNamedRenderbufferStorageMultisamplePtr = LoadProcByName<glNamedRenderbufferStorageMultisampleDel>("glNamedRenderbufferStorageMultisample", getProcAddress);
            glNamedRenderbufferStorageMultisampleAdvancedAMDPtr = LoadProcByName<glNamedRenderbufferStorageMultisampleAdvancedAMDDel>("glNamedRenderbufferStorageMultisampleAdvancedAMD", getProcAddress);
            glNamedRenderbufferStorageMultisampleCoverageEXTPtr = LoadProcByName<glNamedRenderbufferStorageMultisampleCoverageEXTDel>("glNamedRenderbufferStorageMultisampleCoverageEXT", getProcAddress);
            glNamedRenderbufferStorageMultisampleEXTPtr = LoadProcByName<glNamedRenderbufferStorageMultisampleEXTDel>("glNamedRenderbufferStorageMultisampleEXT", getProcAddress);
            glNamedStringARBPtr = LoadProcByName<glNamedStringARBDel>("glNamedStringARB", getProcAddress);
            glNewListPtr = LoadProcByName<glNewListDel>("glNewList", getProcAddress);
            glNewObjectBufferATIPtr = LoadProcByName<glNewObjectBufferATIDel>("glNewObjectBufferATI", getProcAddress);
            glNormal3bPtr = LoadProcByName<glNormal3bDel>("glNormal3b", getProcAddress);
            glNormal3bvPtr = LoadProcByName<glNormal3bvDel>("glNormal3bv", getProcAddress);
            glNormal3dPtr = LoadProcByName<glNormal3dDel>("glNormal3d", getProcAddress);
            glNormal3dvPtr = LoadProcByName<glNormal3dvDel>("glNormal3dv", getProcAddress);
            glNormal3fPtr = LoadProcByName<glNormal3fDel>("glNormal3f", getProcAddress);
            glNormal3fVertex3fSUNPtr = LoadProcByName<glNormal3fVertex3fSUNDel>("glNormal3fVertex3fSUN", getProcAddress);
            glNormal3fVertex3fvSUNPtr = LoadProcByName<glNormal3fVertex3fvSUNDel>("glNormal3fVertex3fvSUN", getProcAddress);
            glNormal3fvPtr = LoadProcByName<glNormal3fvDel>("glNormal3fv", getProcAddress);
            glNormal3hNVPtr = LoadProcByName<glNormal3hNVDel>("glNormal3hNV", getProcAddress);
            glNormal3hvNVPtr = LoadProcByName<glNormal3hvNVDel>("glNormal3hvNV", getProcAddress);
            glNormal3iPtr = LoadProcByName<glNormal3iDel>("glNormal3i", getProcAddress);
            glNormal3ivPtr = LoadProcByName<glNormal3ivDel>("glNormal3iv", getProcAddress);
            glNormal3sPtr = LoadProcByName<glNormal3sDel>("glNormal3s", getProcAddress);
            glNormal3svPtr = LoadProcByName<glNormal3svDel>("glNormal3sv", getProcAddress);
            glNormal3xPtr = LoadProcByName<glNormal3xDel>("glNormal3x", getProcAddress);
            glNormal3xOESPtr = LoadProcByName<glNormal3xOESDel>("glNormal3xOES", getProcAddress);
            glNormal3xvOESPtr = LoadProcByName<glNormal3xvOESDel>("glNormal3xvOES", getProcAddress);
            glNormalFormatNVPtr = LoadProcByName<glNormalFormatNVDel>("glNormalFormatNV", getProcAddress);
            glNormalP3uiPtr = LoadProcByName<glNormalP3uiDel>("glNormalP3ui", getProcAddress);
            glNormalP3uivPtr = LoadProcByName<glNormalP3uivDel>("glNormalP3uiv", getProcAddress);
            glNormalPointerPtr = LoadProcByName<glNormalPointerDel>("glNormalPointer", getProcAddress);
            glNormalPointerEXTPtr = LoadProcByName<glNormalPointerEXTDel>("glNormalPointerEXT", getProcAddress);
            glNormalPointerListIBMPtr = LoadProcByName<glNormalPointerListIBMDel>("glNormalPointerListIBM", getProcAddress);
            glNormalPointervINTELPtr = LoadProcByName<glNormalPointervINTELDel>("glNormalPointervINTEL", getProcAddress);
            glNormalStream3bATIPtr = LoadProcByName<glNormalStream3bATIDel>("glNormalStream3bATI", getProcAddress);
            glNormalStream3bvATIPtr = LoadProcByName<glNormalStream3bvATIDel>("glNormalStream3bvATI", getProcAddress);
            glNormalStream3dATIPtr = LoadProcByName<glNormalStream3dATIDel>("glNormalStream3dATI", getProcAddress);
            glNormalStream3dvATIPtr = LoadProcByName<glNormalStream3dvATIDel>("glNormalStream3dvATI", getProcAddress);
            glNormalStream3fATIPtr = LoadProcByName<glNormalStream3fATIDel>("glNormalStream3fATI", getProcAddress);
            glNormalStream3fvATIPtr = LoadProcByName<glNormalStream3fvATIDel>("glNormalStream3fvATI", getProcAddress);
            glNormalStream3iATIPtr = LoadProcByName<glNormalStream3iATIDel>("glNormalStream3iATI", getProcAddress);
            glNormalStream3ivATIPtr = LoadProcByName<glNormalStream3ivATIDel>("glNormalStream3ivATI", getProcAddress);
            glNormalStream3sATIPtr = LoadProcByName<glNormalStream3sATIDel>("glNormalStream3sATI", getProcAddress);
            glNormalStream3svATIPtr = LoadProcByName<glNormalStream3svATIDel>("glNormalStream3svATI", getProcAddress);
            glObjectLabelPtr = LoadProcByName<glObjectLabelDel>("glObjectLabel", getProcAddress);
            glObjectLabelKHRPtr = LoadProcByName<glObjectLabelKHRDel>("glObjectLabelKHR", getProcAddress);
            glObjectPtrLabelPtr = LoadProcByName<glObjectPtrLabelDel>("glObjectPtrLabel", getProcAddress);
            glObjectPtrLabelKHRPtr = LoadProcByName<glObjectPtrLabelKHRDel>("glObjectPtrLabelKHR", getProcAddress);
            glObjectPurgeableAPPLEPtr = LoadProcByName<glObjectPurgeableAPPLEDel>("glObjectPurgeableAPPLE", getProcAddress);
            glObjectUnpurgeableAPPLEPtr = LoadProcByName<glObjectUnpurgeableAPPLEDel>("glObjectUnpurgeableAPPLE", getProcAddress);
            glOrthoPtr = LoadProcByName<glOrthoDel>("glOrtho", getProcAddress);
            glOrthofPtr = LoadProcByName<glOrthofDel>("glOrthof", getProcAddress);
            glOrthofOESPtr = LoadProcByName<glOrthofOESDel>("glOrthofOES", getProcAddress);
            glOrthoxPtr = LoadProcByName<glOrthoxDel>("glOrthox", getProcAddress);
            glOrthoxOESPtr = LoadProcByName<glOrthoxOESDel>("glOrthoxOES", getProcAddress);
            glPNTrianglesfATIPtr = LoadProcByName<glPNTrianglesfATIDel>("glPNTrianglesfATI", getProcAddress);
            glPNTrianglesiATIPtr = LoadProcByName<glPNTrianglesiATIDel>("glPNTrianglesiATI", getProcAddress);
            glPassTexCoordATIPtr = LoadProcByName<glPassTexCoordATIDel>("glPassTexCoordATI", getProcAddress);
            glPassThroughPtr = LoadProcByName<glPassThroughDel>("glPassThrough", getProcAddress);
            glPassThroughxOESPtr = LoadProcByName<glPassThroughxOESDel>("glPassThroughxOES", getProcAddress);
            glPatchParameterfvPtr = LoadProcByName<glPatchParameterfvDel>("glPatchParameterfv", getProcAddress);
            glPatchParameteriPtr = LoadProcByName<glPatchParameteriDel>("glPatchParameteri", getProcAddress);
            glPatchParameteriEXTPtr = LoadProcByName<glPatchParameteriEXTDel>("glPatchParameteriEXT", getProcAddress);
            glPatchParameteriOESPtr = LoadProcByName<glPatchParameteriOESDel>("glPatchParameteriOES", getProcAddress);
            glPathColorGenNVPtr = LoadProcByName<glPathColorGenNVDel>("glPathColorGenNV", getProcAddress);
            glPathCommandsNVPtr = LoadProcByName<glPathCommandsNVDel>("glPathCommandsNV", getProcAddress);
            glPathCoordsNVPtr = LoadProcByName<glPathCoordsNVDel>("glPathCoordsNV", getProcAddress);
            glPathCoverDepthFuncNVPtr = LoadProcByName<glPathCoverDepthFuncNVDel>("glPathCoverDepthFuncNV", getProcAddress);
            glPathDashArrayNVPtr = LoadProcByName<glPathDashArrayNVDel>("glPathDashArrayNV", getProcAddress);
            glPathFogGenNVPtr = LoadProcByName<glPathFogGenNVDel>("glPathFogGenNV", getProcAddress);
            glPathGlyphIndexArrayNVPtr = LoadProcByName<glPathGlyphIndexArrayNVDel>("glPathGlyphIndexArrayNV", getProcAddress);
            glPathGlyphIndexRangeNVPtr = LoadProcByName<glPathGlyphIndexRangeNVDel>("glPathGlyphIndexRangeNV", getProcAddress);
            glPathGlyphRangeNVPtr = LoadProcByName<glPathGlyphRangeNVDel>("glPathGlyphRangeNV", getProcAddress);
            glPathGlyphsNVPtr = LoadProcByName<glPathGlyphsNVDel>("glPathGlyphsNV", getProcAddress);
            glPathMemoryGlyphIndexArrayNVPtr = LoadProcByName<glPathMemoryGlyphIndexArrayNVDel>("glPathMemoryGlyphIndexArrayNV", getProcAddress);
            glPathParameterfNVPtr = LoadProcByName<glPathParameterfNVDel>("glPathParameterfNV", getProcAddress);
            glPathParameterfvNVPtr = LoadProcByName<glPathParameterfvNVDel>("glPathParameterfvNV", getProcAddress);
            glPathParameteriNVPtr = LoadProcByName<glPathParameteriNVDel>("glPathParameteriNV", getProcAddress);
            glPathParameterivNVPtr = LoadProcByName<glPathParameterivNVDel>("glPathParameterivNV", getProcAddress);
            glPathStencilDepthOffsetNVPtr = LoadProcByName<glPathStencilDepthOffsetNVDel>("glPathStencilDepthOffsetNV", getProcAddress);
            glPathStencilFuncNVPtr = LoadProcByName<glPathStencilFuncNVDel>("glPathStencilFuncNV", getProcAddress);
            glPathStringNVPtr = LoadProcByName<glPathStringNVDel>("glPathStringNV", getProcAddress);
            glPathSubCommandsNVPtr = LoadProcByName<glPathSubCommandsNVDel>("glPathSubCommandsNV", getProcAddress);
            glPathSubCoordsNVPtr = LoadProcByName<glPathSubCoordsNVDel>("glPathSubCoordsNV", getProcAddress);
            glPathTexGenNVPtr = LoadProcByName<glPathTexGenNVDel>("glPathTexGenNV", getProcAddress);
            glPauseTransformFeedbackPtr = LoadProcByName<glPauseTransformFeedbackDel>("glPauseTransformFeedback", getProcAddress);
            glPauseTransformFeedbackNVPtr = LoadProcByName<glPauseTransformFeedbackNVDel>("glPauseTransformFeedbackNV", getProcAddress);
            glPixelDataRangeNVPtr = LoadProcByName<glPixelDataRangeNVDel>("glPixelDataRangeNV", getProcAddress);
            glPixelMapfvPtr = LoadProcByName<glPixelMapfvDel>("glPixelMapfv", getProcAddress);
            glPixelMapuivPtr = LoadProcByName<glPixelMapuivDel>("glPixelMapuiv", getProcAddress);
            glPixelMapusvPtr = LoadProcByName<glPixelMapusvDel>("glPixelMapusv", getProcAddress);
            glPixelMapxPtr = LoadProcByName<glPixelMapxDel>("glPixelMapx", getProcAddress);
            glPixelStorefPtr = LoadProcByName<glPixelStorefDel>("glPixelStoref", getProcAddress);
            glPixelStoreiPtr = LoadProcByName<glPixelStoreiDel>("glPixelStorei", getProcAddress);
            glPixelStorexPtr = LoadProcByName<glPixelStorexDel>("glPixelStorex", getProcAddress);
            glPixelTexGenParameterfSGISPtr = LoadProcByName<glPixelTexGenParameterfSGISDel>("glPixelTexGenParameterfSGIS", getProcAddress);
            glPixelTexGenParameterfvSGISPtr = LoadProcByName<glPixelTexGenParameterfvSGISDel>("glPixelTexGenParameterfvSGIS", getProcAddress);
            glPixelTexGenParameteriSGISPtr = LoadProcByName<glPixelTexGenParameteriSGISDel>("glPixelTexGenParameteriSGIS", getProcAddress);
            glPixelTexGenParameterivSGISPtr = LoadProcByName<glPixelTexGenParameterivSGISDel>("glPixelTexGenParameterivSGIS", getProcAddress);
            glPixelTexGenSGIXPtr = LoadProcByName<glPixelTexGenSGIXDel>("glPixelTexGenSGIX", getProcAddress);
            glPixelTransferfPtr = LoadProcByName<glPixelTransferfDel>("glPixelTransferf", getProcAddress);
            glPixelTransferiPtr = LoadProcByName<glPixelTransferiDel>("glPixelTransferi", getProcAddress);
            glPixelTransferxOESPtr = LoadProcByName<glPixelTransferxOESDel>("glPixelTransferxOES", getProcAddress);
            glPixelTransformParameterfEXTPtr = LoadProcByName<glPixelTransformParameterfEXTDel>("glPixelTransformParameterfEXT", getProcAddress);
            glPixelTransformParameterfvEXTPtr = LoadProcByName<glPixelTransformParameterfvEXTDel>("glPixelTransformParameterfvEXT", getProcAddress);
            glPixelTransformParameteriEXTPtr = LoadProcByName<glPixelTransformParameteriEXTDel>("glPixelTransformParameteriEXT", getProcAddress);
            glPixelTransformParameterivEXTPtr = LoadProcByName<glPixelTransformParameterivEXTDel>("glPixelTransformParameterivEXT", getProcAddress);
            glPixelZoomPtr = LoadProcByName<glPixelZoomDel>("glPixelZoom", getProcAddress);
            glPixelZoomxOESPtr = LoadProcByName<glPixelZoomxOESDel>("glPixelZoomxOES", getProcAddress);
            glPointAlongPathNVPtr = LoadProcByName<glPointAlongPathNVDel>("glPointAlongPathNV", getProcAddress);
            glPointParameterfPtr = LoadProcByName<glPointParameterfDel>("glPointParameterf", getProcAddress);
            glPointParameterfARBPtr = LoadProcByName<glPointParameterfARBDel>("glPointParameterfARB", getProcAddress);
            glPointParameterfEXTPtr = LoadProcByName<glPointParameterfEXTDel>("glPointParameterfEXT", getProcAddress);
            glPointParameterfSGISPtr = LoadProcByName<glPointParameterfSGISDel>("glPointParameterfSGIS", getProcAddress);
            glPointParameterfvPtr = LoadProcByName<glPointParameterfvDel>("glPointParameterfv", getProcAddress);
            glPointParameterfvARBPtr = LoadProcByName<glPointParameterfvARBDel>("glPointParameterfvARB", getProcAddress);
            glPointParameterfvEXTPtr = LoadProcByName<glPointParameterfvEXTDel>("glPointParameterfvEXT", getProcAddress);
            glPointParameterfvSGISPtr = LoadProcByName<glPointParameterfvSGISDel>("glPointParameterfvSGIS", getProcAddress);
            glPointParameteriPtr = LoadProcByName<glPointParameteriDel>("glPointParameteri", getProcAddress);
            glPointParameteriNVPtr = LoadProcByName<glPointParameteriNVDel>("glPointParameteriNV", getProcAddress);
            glPointParameterivPtr = LoadProcByName<glPointParameterivDel>("glPointParameteriv", getProcAddress);
            glPointParameterivNVPtr = LoadProcByName<glPointParameterivNVDel>("glPointParameterivNV", getProcAddress);
            glPointParameterxPtr = LoadProcByName<glPointParameterxDel>("glPointParameterx", getProcAddress);
            glPointParameterxOESPtr = LoadProcByName<glPointParameterxOESDel>("glPointParameterxOES", getProcAddress);
            glPointParameterxvPtr = LoadProcByName<glPointParameterxvDel>("glPointParameterxv", getProcAddress);
            glPointParameterxvOESPtr = LoadProcByName<glPointParameterxvOESDel>("glPointParameterxvOES", getProcAddress);
            glPointSizePtr = LoadProcByName<glPointSizeDel>("glPointSize", getProcAddress);
            glPointSizePointerOESPtr = LoadProcByName<glPointSizePointerOESDel>("glPointSizePointerOES", getProcAddress);
            glPointSizexPtr = LoadProcByName<glPointSizexDel>("glPointSizex", getProcAddress);
            glPointSizexOESPtr = LoadProcByName<glPointSizexOESDel>("glPointSizexOES", getProcAddress);
            glPollAsyncSGIXPtr = LoadProcByName<glPollAsyncSGIXDel>("glPollAsyncSGIX", getProcAddress);
            glPollInstrumentsSGIXPtr = LoadProcByName<glPollInstrumentsSGIXDel>("glPollInstrumentsSGIX", getProcAddress);
            glPolygonModePtr = LoadProcByName<glPolygonModeDel>("glPolygonMode", getProcAddress);
            glPolygonModeNVPtr = LoadProcByName<glPolygonModeNVDel>("glPolygonModeNV", getProcAddress);
            glPolygonOffsetPtr = LoadProcByName<glPolygonOffsetDel>("glPolygonOffset", getProcAddress);
            glPolygonOffsetClampPtr = LoadProcByName<glPolygonOffsetClampDel>("glPolygonOffsetClamp", getProcAddress);
            glPolygonOffsetClampEXTPtr = LoadProcByName<glPolygonOffsetClampEXTDel>("glPolygonOffsetClampEXT", getProcAddress);
            glPolygonOffsetEXTPtr = LoadProcByName<glPolygonOffsetEXTDel>("glPolygonOffsetEXT", getProcAddress);
            glPolygonOffsetxPtr = LoadProcByName<glPolygonOffsetxDel>("glPolygonOffsetx", getProcAddress);
            glPolygonOffsetxOESPtr = LoadProcByName<glPolygonOffsetxOESDel>("glPolygonOffsetxOES", getProcAddress);
            glPolygonStipplePtr = LoadProcByName<glPolygonStippleDel>("glPolygonStipple", getProcAddress);
            glPopAttribPtr = LoadProcByName<glPopAttribDel>("glPopAttrib", getProcAddress);
            glPopClientAttribPtr = LoadProcByName<glPopClientAttribDel>("glPopClientAttrib", getProcAddress);
            glPopDebugGroupPtr = LoadProcByName<glPopDebugGroupDel>("glPopDebugGroup", getProcAddress);
            glPopDebugGroupKHRPtr = LoadProcByName<glPopDebugGroupKHRDel>("glPopDebugGroupKHR", getProcAddress);
            glPopGroupMarkerEXTPtr = LoadProcByName<glPopGroupMarkerEXTDel>("glPopGroupMarkerEXT", getProcAddress);
            glPopMatrixPtr = LoadProcByName<glPopMatrixDel>("glPopMatrix", getProcAddress);
            glPopNamePtr = LoadProcByName<glPopNameDel>("glPopName", getProcAddress);
            glPresentFrameDualFillNVPtr = LoadProcByName<glPresentFrameDualFillNVDel>("glPresentFrameDualFillNV", getProcAddress);
            glPresentFrameKeyedNVPtr = LoadProcByName<glPresentFrameKeyedNVDel>("glPresentFrameKeyedNV", getProcAddress);
            glPrimitiveBoundingBoxPtr = LoadProcByName<glPrimitiveBoundingBoxDel>("glPrimitiveBoundingBox", getProcAddress);
            glPrimitiveBoundingBoxARBPtr = LoadProcByName<glPrimitiveBoundingBoxARBDel>("glPrimitiveBoundingBoxARB", getProcAddress);
            glPrimitiveBoundingBoxEXTPtr = LoadProcByName<glPrimitiveBoundingBoxEXTDel>("glPrimitiveBoundingBoxEXT", getProcAddress);
            glPrimitiveBoundingBoxOESPtr = LoadProcByName<glPrimitiveBoundingBoxOESDel>("glPrimitiveBoundingBoxOES", getProcAddress);
            glPrimitiveRestartIndexPtr = LoadProcByName<glPrimitiveRestartIndexDel>("glPrimitiveRestartIndex", getProcAddress);
            glPrimitiveRestartIndexNVPtr = LoadProcByName<glPrimitiveRestartIndexNVDel>("glPrimitiveRestartIndexNV", getProcAddress);
            glPrimitiveRestartNVPtr = LoadProcByName<glPrimitiveRestartNVDel>("glPrimitiveRestartNV", getProcAddress);
            glPrioritizeTexturesPtr = LoadProcByName<glPrioritizeTexturesDel>("glPrioritizeTextures", getProcAddress);
            glPrioritizeTexturesEXTPtr = LoadProcByName<glPrioritizeTexturesEXTDel>("glPrioritizeTexturesEXT", getProcAddress);
            glPrioritizeTexturesxOESPtr = LoadProcByName<glPrioritizeTexturesxOESDel>("glPrioritizeTexturesxOES", getProcAddress);
            glProgramBinaryPtr = LoadProcByName<glProgramBinaryDel>("glProgramBinary", getProcAddress);
            glProgramBinaryOESPtr = LoadProcByName<glProgramBinaryOESDel>("glProgramBinaryOES", getProcAddress);
            glProgramBufferParametersIivNVPtr = LoadProcByName<glProgramBufferParametersIivNVDel>("glProgramBufferParametersIivNV", getProcAddress);
            glProgramBufferParametersIuivNVPtr = LoadProcByName<glProgramBufferParametersIuivNVDel>("glProgramBufferParametersIuivNV", getProcAddress);
            glProgramBufferParametersfvNVPtr = LoadProcByName<glProgramBufferParametersfvNVDel>("glProgramBufferParametersfvNV", getProcAddress);
            glProgramEnvParameter4dARBPtr = LoadProcByName<glProgramEnvParameter4dARBDel>("glProgramEnvParameter4dARB", getProcAddress);
            glProgramEnvParameter4dvARBPtr = LoadProcByName<glProgramEnvParameter4dvARBDel>("glProgramEnvParameter4dvARB", getProcAddress);
            glProgramEnvParameter4fARBPtr = LoadProcByName<glProgramEnvParameter4fARBDel>("glProgramEnvParameter4fARB", getProcAddress);
            glProgramEnvParameter4fvARBPtr = LoadProcByName<glProgramEnvParameter4fvARBDel>("glProgramEnvParameter4fvARB", getProcAddress);
            glProgramEnvParameterI4iNVPtr = LoadProcByName<glProgramEnvParameterI4iNVDel>("glProgramEnvParameterI4iNV", getProcAddress);
            glProgramEnvParameterI4ivNVPtr = LoadProcByName<glProgramEnvParameterI4ivNVDel>("glProgramEnvParameterI4ivNV", getProcAddress);
            glProgramEnvParameterI4uiNVPtr = LoadProcByName<glProgramEnvParameterI4uiNVDel>("glProgramEnvParameterI4uiNV", getProcAddress);
            glProgramEnvParameterI4uivNVPtr = LoadProcByName<glProgramEnvParameterI4uivNVDel>("glProgramEnvParameterI4uivNV", getProcAddress);
            glProgramEnvParameters4fvEXTPtr = LoadProcByName<glProgramEnvParameters4fvEXTDel>("glProgramEnvParameters4fvEXT", getProcAddress);
            glProgramEnvParametersI4ivNVPtr = LoadProcByName<glProgramEnvParametersI4ivNVDel>("glProgramEnvParametersI4ivNV", getProcAddress);
            glProgramEnvParametersI4uivNVPtr = LoadProcByName<glProgramEnvParametersI4uivNVDel>("glProgramEnvParametersI4uivNV", getProcAddress);
            glProgramLocalParameter4dARBPtr = LoadProcByName<glProgramLocalParameter4dARBDel>("glProgramLocalParameter4dARB", getProcAddress);
            glProgramLocalParameter4dvARBPtr = LoadProcByName<glProgramLocalParameter4dvARBDel>("glProgramLocalParameter4dvARB", getProcAddress);
            glProgramLocalParameter4fARBPtr = LoadProcByName<glProgramLocalParameter4fARBDel>("glProgramLocalParameter4fARB", getProcAddress);
            glProgramLocalParameter4fvARBPtr = LoadProcByName<glProgramLocalParameter4fvARBDel>("glProgramLocalParameter4fvARB", getProcAddress);
            glProgramLocalParameterI4iNVPtr = LoadProcByName<glProgramLocalParameterI4iNVDel>("glProgramLocalParameterI4iNV", getProcAddress);
            glProgramLocalParameterI4ivNVPtr = LoadProcByName<glProgramLocalParameterI4ivNVDel>("glProgramLocalParameterI4ivNV", getProcAddress);
            glProgramLocalParameterI4uiNVPtr = LoadProcByName<glProgramLocalParameterI4uiNVDel>("glProgramLocalParameterI4uiNV", getProcAddress);
            glProgramLocalParameterI4uivNVPtr = LoadProcByName<glProgramLocalParameterI4uivNVDel>("glProgramLocalParameterI4uivNV", getProcAddress);
            glProgramLocalParameters4fvEXTPtr = LoadProcByName<glProgramLocalParameters4fvEXTDel>("glProgramLocalParameters4fvEXT", getProcAddress);
            glProgramLocalParametersI4ivNVPtr = LoadProcByName<glProgramLocalParametersI4ivNVDel>("glProgramLocalParametersI4ivNV", getProcAddress);
            glProgramLocalParametersI4uivNVPtr = LoadProcByName<glProgramLocalParametersI4uivNVDel>("glProgramLocalParametersI4uivNV", getProcAddress);
            glProgramNamedParameter4dNVPtr = LoadProcByName<glProgramNamedParameter4dNVDel>("glProgramNamedParameter4dNV", getProcAddress);
            glProgramNamedParameter4dvNVPtr = LoadProcByName<glProgramNamedParameter4dvNVDel>("glProgramNamedParameter4dvNV", getProcAddress);
            glProgramNamedParameter4fNVPtr = LoadProcByName<glProgramNamedParameter4fNVDel>("glProgramNamedParameter4fNV", getProcAddress);
            glProgramNamedParameter4fvNVPtr = LoadProcByName<glProgramNamedParameter4fvNVDel>("glProgramNamedParameter4fvNV", getProcAddress);
            glProgramParameter4dNVPtr = LoadProcByName<glProgramParameter4dNVDel>("glProgramParameter4dNV", getProcAddress);
            glProgramParameter4dvNVPtr = LoadProcByName<glProgramParameter4dvNVDel>("glProgramParameter4dvNV", getProcAddress);
            glProgramParameter4fNVPtr = LoadProcByName<glProgramParameter4fNVDel>("glProgramParameter4fNV", getProcAddress);
            glProgramParameter4fvNVPtr = LoadProcByName<glProgramParameter4fvNVDel>("glProgramParameter4fvNV", getProcAddress);
            glProgramParameteriPtr = LoadProcByName<glProgramParameteriDel>("glProgramParameteri", getProcAddress);
            glProgramParameteriARBPtr = LoadProcByName<glProgramParameteriARBDel>("glProgramParameteriARB", getProcAddress);
            glProgramParameteriEXTPtr = LoadProcByName<glProgramParameteriEXTDel>("glProgramParameteriEXT", getProcAddress);
            glProgramParameters4dvNVPtr = LoadProcByName<glProgramParameters4dvNVDel>("glProgramParameters4dvNV", getProcAddress);
            glProgramParameters4fvNVPtr = LoadProcByName<glProgramParameters4fvNVDel>("glProgramParameters4fvNV", getProcAddress);
            glProgramPathFragmentInputGenNVPtr = LoadProcByName<glProgramPathFragmentInputGenNVDel>("glProgramPathFragmentInputGenNV", getProcAddress);
            glProgramStringARBPtr = LoadProcByName<glProgramStringARBDel>("glProgramStringARB", getProcAddress);
            glProgramSubroutineParametersuivNVPtr = LoadProcByName<glProgramSubroutineParametersuivNVDel>("glProgramSubroutineParametersuivNV", getProcAddress);
            glProgramUniform1dPtr = LoadProcByName<glProgramUniform1dDel>("glProgramUniform1d", getProcAddress);
            glProgramUniform1dEXTPtr = LoadProcByName<glProgramUniform1dEXTDel>("glProgramUniform1dEXT", getProcAddress);
            glProgramUniform1dvPtr = LoadProcByName<glProgramUniform1dvDel>("glProgramUniform1dv", getProcAddress);
            glProgramUniform1dvEXTPtr = LoadProcByName<glProgramUniform1dvEXTDel>("glProgramUniform1dvEXT", getProcAddress);
            glProgramUniform1fPtr = LoadProcByName<glProgramUniform1fDel>("glProgramUniform1f", getProcAddress);
            glProgramUniform1fEXTPtr = LoadProcByName<glProgramUniform1fEXTDel>("glProgramUniform1fEXT", getProcAddress);
            glProgramUniform1fvPtr = LoadProcByName<glProgramUniform1fvDel>("glProgramUniform1fv", getProcAddress);
            glProgramUniform1fvEXTPtr = LoadProcByName<glProgramUniform1fvEXTDel>("glProgramUniform1fvEXT", getProcAddress);
            glProgramUniform1iPtr = LoadProcByName<glProgramUniform1iDel>("glProgramUniform1i", getProcAddress);
            glProgramUniform1i64ARBPtr = LoadProcByName<glProgramUniform1i64ARBDel>("glProgramUniform1i64ARB", getProcAddress);
            glProgramUniform1i64NVPtr = LoadProcByName<glProgramUniform1i64NVDel>("glProgramUniform1i64NV", getProcAddress);
            glProgramUniform1i64vARBPtr = LoadProcByName<glProgramUniform1i64vARBDel>("glProgramUniform1i64vARB", getProcAddress);
            glProgramUniform1i64vNVPtr = LoadProcByName<glProgramUniform1i64vNVDel>("glProgramUniform1i64vNV", getProcAddress);
            glProgramUniform1iEXTPtr = LoadProcByName<glProgramUniform1iEXTDel>("glProgramUniform1iEXT", getProcAddress);
            glProgramUniform1ivPtr = LoadProcByName<glProgramUniform1ivDel>("glProgramUniform1iv", getProcAddress);
            glProgramUniform1ivEXTPtr = LoadProcByName<glProgramUniform1ivEXTDel>("glProgramUniform1ivEXT", getProcAddress);
            glProgramUniform1uiPtr = LoadProcByName<glProgramUniform1uiDel>("glProgramUniform1ui", getProcAddress);
            glProgramUniform1ui64ARBPtr = LoadProcByName<glProgramUniform1ui64ARBDel>("glProgramUniform1ui64ARB", getProcAddress);
            glProgramUniform1ui64NVPtr = LoadProcByName<glProgramUniform1ui64NVDel>("glProgramUniform1ui64NV", getProcAddress);
            glProgramUniform1ui64vARBPtr = LoadProcByName<glProgramUniform1ui64vARBDel>("glProgramUniform1ui64vARB", getProcAddress);
            glProgramUniform1ui64vNVPtr = LoadProcByName<glProgramUniform1ui64vNVDel>("glProgramUniform1ui64vNV", getProcAddress);
            glProgramUniform1uiEXTPtr = LoadProcByName<glProgramUniform1uiEXTDel>("glProgramUniform1uiEXT", getProcAddress);
            glProgramUniform1uivPtr = LoadProcByName<glProgramUniform1uivDel>("glProgramUniform1uiv", getProcAddress);
            glProgramUniform1uivEXTPtr = LoadProcByName<glProgramUniform1uivEXTDel>("glProgramUniform1uivEXT", getProcAddress);
            glProgramUniform2dPtr = LoadProcByName<glProgramUniform2dDel>("glProgramUniform2d", getProcAddress);
            glProgramUniform2dEXTPtr = LoadProcByName<glProgramUniform2dEXTDel>("glProgramUniform2dEXT", getProcAddress);
            glProgramUniform2dvPtr = LoadProcByName<glProgramUniform2dvDel>("glProgramUniform2dv", getProcAddress);
            glProgramUniform2dvEXTPtr = LoadProcByName<glProgramUniform2dvEXTDel>("glProgramUniform2dvEXT", getProcAddress);
            glProgramUniform2fPtr = LoadProcByName<glProgramUniform2fDel>("glProgramUniform2f", getProcAddress);
            glProgramUniform2fEXTPtr = LoadProcByName<glProgramUniform2fEXTDel>("glProgramUniform2fEXT", getProcAddress);
            glProgramUniform2fvPtr = LoadProcByName<glProgramUniform2fvDel>("glProgramUniform2fv", getProcAddress);
            glProgramUniform2fvEXTPtr = LoadProcByName<glProgramUniform2fvEXTDel>("glProgramUniform2fvEXT", getProcAddress);
            glProgramUniform2iPtr = LoadProcByName<glProgramUniform2iDel>("glProgramUniform2i", getProcAddress);
            glProgramUniform2i64ARBPtr = LoadProcByName<glProgramUniform2i64ARBDel>("glProgramUniform2i64ARB", getProcAddress);
            glProgramUniform2i64NVPtr = LoadProcByName<glProgramUniform2i64NVDel>("glProgramUniform2i64NV", getProcAddress);
            glProgramUniform2i64vARBPtr = LoadProcByName<glProgramUniform2i64vARBDel>("glProgramUniform2i64vARB", getProcAddress);
            glProgramUniform2i64vNVPtr = LoadProcByName<glProgramUniform2i64vNVDel>("glProgramUniform2i64vNV", getProcAddress);
            glProgramUniform2iEXTPtr = LoadProcByName<glProgramUniform2iEXTDel>("glProgramUniform2iEXT", getProcAddress);
            glProgramUniform2ivPtr = LoadProcByName<glProgramUniform2ivDel>("glProgramUniform2iv", getProcAddress);
            glProgramUniform2ivEXTPtr = LoadProcByName<glProgramUniform2ivEXTDel>("glProgramUniform2ivEXT", getProcAddress);
            glProgramUniform2uiPtr = LoadProcByName<glProgramUniform2uiDel>("glProgramUniform2ui", getProcAddress);
            glProgramUniform2ui64ARBPtr = LoadProcByName<glProgramUniform2ui64ARBDel>("glProgramUniform2ui64ARB", getProcAddress);
            glProgramUniform2ui64NVPtr = LoadProcByName<glProgramUniform2ui64NVDel>("glProgramUniform2ui64NV", getProcAddress);
            glProgramUniform2ui64vARBPtr = LoadProcByName<glProgramUniform2ui64vARBDel>("glProgramUniform2ui64vARB", getProcAddress);
            glProgramUniform2ui64vNVPtr = LoadProcByName<glProgramUniform2ui64vNVDel>("glProgramUniform2ui64vNV", getProcAddress);
            glProgramUniform2uiEXTPtr = LoadProcByName<glProgramUniform2uiEXTDel>("glProgramUniform2uiEXT", getProcAddress);
            glProgramUniform2uivPtr = LoadProcByName<glProgramUniform2uivDel>("glProgramUniform2uiv", getProcAddress);
            glProgramUniform2uivEXTPtr = LoadProcByName<glProgramUniform2uivEXTDel>("glProgramUniform2uivEXT", getProcAddress);
            glProgramUniform3dPtr = LoadProcByName<glProgramUniform3dDel>("glProgramUniform3d", getProcAddress);
            glProgramUniform3dEXTPtr = LoadProcByName<glProgramUniform3dEXTDel>("glProgramUniform3dEXT", getProcAddress);
            glProgramUniform3dvPtr = LoadProcByName<glProgramUniform3dvDel>("glProgramUniform3dv", getProcAddress);
            glProgramUniform3dvEXTPtr = LoadProcByName<glProgramUniform3dvEXTDel>("glProgramUniform3dvEXT", getProcAddress);
            glProgramUniform3fPtr = LoadProcByName<glProgramUniform3fDel>("glProgramUniform3f", getProcAddress);
            glProgramUniform3fEXTPtr = LoadProcByName<glProgramUniform3fEXTDel>("glProgramUniform3fEXT", getProcAddress);
            glProgramUniform3fvPtr = LoadProcByName<glProgramUniform3fvDel>("glProgramUniform3fv", getProcAddress);
            glProgramUniform3fvEXTPtr = LoadProcByName<glProgramUniform3fvEXTDel>("glProgramUniform3fvEXT", getProcAddress);
            glProgramUniform3iPtr = LoadProcByName<glProgramUniform3iDel>("glProgramUniform3i", getProcAddress);
            glProgramUniform3i64ARBPtr = LoadProcByName<glProgramUniform3i64ARBDel>("glProgramUniform3i64ARB", getProcAddress);
            glProgramUniform3i64NVPtr = LoadProcByName<glProgramUniform3i64NVDel>("glProgramUniform3i64NV", getProcAddress);
            glProgramUniform3i64vARBPtr = LoadProcByName<glProgramUniform3i64vARBDel>("glProgramUniform3i64vARB", getProcAddress);
            glProgramUniform3i64vNVPtr = LoadProcByName<glProgramUniform3i64vNVDel>("glProgramUniform3i64vNV", getProcAddress);
            glProgramUniform3iEXTPtr = LoadProcByName<glProgramUniform3iEXTDel>("glProgramUniform3iEXT", getProcAddress);
            glProgramUniform3ivPtr = LoadProcByName<glProgramUniform3ivDel>("glProgramUniform3iv", getProcAddress);
            glProgramUniform3ivEXTPtr = LoadProcByName<glProgramUniform3ivEXTDel>("glProgramUniform3ivEXT", getProcAddress);
            glProgramUniform3uiPtr = LoadProcByName<glProgramUniform3uiDel>("glProgramUniform3ui", getProcAddress);
            glProgramUniform3ui64ARBPtr = LoadProcByName<glProgramUniform3ui64ARBDel>("glProgramUniform3ui64ARB", getProcAddress);
            glProgramUniform3ui64NVPtr = LoadProcByName<glProgramUniform3ui64NVDel>("glProgramUniform3ui64NV", getProcAddress);
            glProgramUniform3ui64vARBPtr = LoadProcByName<glProgramUniform3ui64vARBDel>("glProgramUniform3ui64vARB", getProcAddress);
            glProgramUniform3ui64vNVPtr = LoadProcByName<glProgramUniform3ui64vNVDel>("glProgramUniform3ui64vNV", getProcAddress);
            glProgramUniform3uiEXTPtr = LoadProcByName<glProgramUniform3uiEXTDel>("glProgramUniform3uiEXT", getProcAddress);
            glProgramUniform3uivPtr = LoadProcByName<glProgramUniform3uivDel>("glProgramUniform3uiv", getProcAddress);
            glProgramUniform3uivEXTPtr = LoadProcByName<glProgramUniform3uivEXTDel>("glProgramUniform3uivEXT", getProcAddress);
            glProgramUniform4dPtr = LoadProcByName<glProgramUniform4dDel>("glProgramUniform4d", getProcAddress);
            glProgramUniform4dEXTPtr = LoadProcByName<glProgramUniform4dEXTDel>("glProgramUniform4dEXT", getProcAddress);
            glProgramUniform4dvPtr = LoadProcByName<glProgramUniform4dvDel>("glProgramUniform4dv", getProcAddress);
            glProgramUniform4dvEXTPtr = LoadProcByName<glProgramUniform4dvEXTDel>("glProgramUniform4dvEXT", getProcAddress);
            glProgramUniform4fPtr = LoadProcByName<glProgramUniform4fDel>("glProgramUniform4f", getProcAddress);
            glProgramUniform4fEXTPtr = LoadProcByName<glProgramUniform4fEXTDel>("glProgramUniform4fEXT", getProcAddress);
            glProgramUniform4fvPtr = LoadProcByName<glProgramUniform4fvDel>("glProgramUniform4fv", getProcAddress);
            glProgramUniform4fvEXTPtr = LoadProcByName<glProgramUniform4fvEXTDel>("glProgramUniform4fvEXT", getProcAddress);
            glProgramUniform4iPtr = LoadProcByName<glProgramUniform4iDel>("glProgramUniform4i", getProcAddress);
            glProgramUniform4i64ARBPtr = LoadProcByName<glProgramUniform4i64ARBDel>("glProgramUniform4i64ARB", getProcAddress);
            glProgramUniform4i64NVPtr = LoadProcByName<glProgramUniform4i64NVDel>("glProgramUniform4i64NV", getProcAddress);
            glProgramUniform4i64vARBPtr = LoadProcByName<glProgramUniform4i64vARBDel>("glProgramUniform4i64vARB", getProcAddress);
            glProgramUniform4i64vNVPtr = LoadProcByName<glProgramUniform4i64vNVDel>("glProgramUniform4i64vNV", getProcAddress);
            glProgramUniform4iEXTPtr = LoadProcByName<glProgramUniform4iEXTDel>("glProgramUniform4iEXT", getProcAddress);
            glProgramUniform4ivPtr = LoadProcByName<glProgramUniform4ivDel>("glProgramUniform4iv", getProcAddress);
            glProgramUniform4ivEXTPtr = LoadProcByName<glProgramUniform4ivEXTDel>("glProgramUniform4ivEXT", getProcAddress);
            glProgramUniform4uiPtr = LoadProcByName<glProgramUniform4uiDel>("glProgramUniform4ui", getProcAddress);
            glProgramUniform4ui64ARBPtr = LoadProcByName<glProgramUniform4ui64ARBDel>("glProgramUniform4ui64ARB", getProcAddress);
            glProgramUniform4ui64NVPtr = LoadProcByName<glProgramUniform4ui64NVDel>("glProgramUniform4ui64NV", getProcAddress);
            glProgramUniform4ui64vARBPtr = LoadProcByName<glProgramUniform4ui64vARBDel>("glProgramUniform4ui64vARB", getProcAddress);
            glProgramUniform4ui64vNVPtr = LoadProcByName<glProgramUniform4ui64vNVDel>("glProgramUniform4ui64vNV", getProcAddress);
            glProgramUniform4uiEXTPtr = LoadProcByName<glProgramUniform4uiEXTDel>("glProgramUniform4uiEXT", getProcAddress);
            glProgramUniform4uivPtr = LoadProcByName<glProgramUniform4uivDel>("glProgramUniform4uiv", getProcAddress);
            glProgramUniform4uivEXTPtr = LoadProcByName<glProgramUniform4uivEXTDel>("glProgramUniform4uivEXT", getProcAddress);
            glProgramUniformHandleui64ARBPtr = LoadProcByName<glProgramUniformHandleui64ARBDel>("glProgramUniformHandleui64ARB", getProcAddress);
            glProgramUniformHandleui64IMGPtr = LoadProcByName<glProgramUniformHandleui64IMGDel>("glProgramUniformHandleui64IMG", getProcAddress);
            glProgramUniformHandleui64NVPtr = LoadProcByName<glProgramUniformHandleui64NVDel>("glProgramUniformHandleui64NV", getProcAddress);
            glProgramUniformHandleui64vARBPtr = LoadProcByName<glProgramUniformHandleui64vARBDel>("glProgramUniformHandleui64vARB", getProcAddress);
            glProgramUniformHandleui64vIMGPtr = LoadProcByName<glProgramUniformHandleui64vIMGDel>("glProgramUniformHandleui64vIMG", getProcAddress);
            glProgramUniformHandleui64vNVPtr = LoadProcByName<glProgramUniformHandleui64vNVDel>("glProgramUniformHandleui64vNV", getProcAddress);
            glProgramUniformMatrix2dvPtr = LoadProcByName<glProgramUniformMatrix2dvDel>("glProgramUniformMatrix2dv", getProcAddress);
            glProgramUniformMatrix2dvEXTPtr = LoadProcByName<glProgramUniformMatrix2dvEXTDel>("glProgramUniformMatrix2dvEXT", getProcAddress);
            glProgramUniformMatrix2fvPtr = LoadProcByName<glProgramUniformMatrix2fvDel>("glProgramUniformMatrix2fv", getProcAddress);
            glProgramUniformMatrix2fvEXTPtr = LoadProcByName<glProgramUniformMatrix2fvEXTDel>("glProgramUniformMatrix2fvEXT", getProcAddress);
            glProgramUniformMatrix2x3dvPtr = LoadProcByName<glProgramUniformMatrix2x3dvDel>("glProgramUniformMatrix2x3dv", getProcAddress);
            glProgramUniformMatrix2x3dvEXTPtr = LoadProcByName<glProgramUniformMatrix2x3dvEXTDel>("glProgramUniformMatrix2x3dvEXT", getProcAddress);
            glProgramUniformMatrix2x3fvPtr = LoadProcByName<glProgramUniformMatrix2x3fvDel>("glProgramUniformMatrix2x3fv", getProcAddress);
            glProgramUniformMatrix2x3fvEXTPtr = LoadProcByName<glProgramUniformMatrix2x3fvEXTDel>("glProgramUniformMatrix2x3fvEXT", getProcAddress);
            glProgramUniformMatrix2x4dvPtr = LoadProcByName<glProgramUniformMatrix2x4dvDel>("glProgramUniformMatrix2x4dv", getProcAddress);
            glProgramUniformMatrix2x4dvEXTPtr = LoadProcByName<glProgramUniformMatrix2x4dvEXTDel>("glProgramUniformMatrix2x4dvEXT", getProcAddress);
            glProgramUniformMatrix2x4fvPtr = LoadProcByName<glProgramUniformMatrix2x4fvDel>("glProgramUniformMatrix2x4fv", getProcAddress);
            glProgramUniformMatrix2x4fvEXTPtr = LoadProcByName<glProgramUniformMatrix2x4fvEXTDel>("glProgramUniformMatrix2x4fvEXT", getProcAddress);
            glProgramUniformMatrix3dvPtr = LoadProcByName<glProgramUniformMatrix3dvDel>("glProgramUniformMatrix3dv", getProcAddress);
            glProgramUniformMatrix3dvEXTPtr = LoadProcByName<glProgramUniformMatrix3dvEXTDel>("glProgramUniformMatrix3dvEXT", getProcAddress);
            glProgramUniformMatrix3fvPtr = LoadProcByName<glProgramUniformMatrix3fvDel>("glProgramUniformMatrix3fv", getProcAddress);
            glProgramUniformMatrix3fvEXTPtr = LoadProcByName<glProgramUniformMatrix3fvEXTDel>("glProgramUniformMatrix3fvEXT", getProcAddress);
            glProgramUniformMatrix3x2dvPtr = LoadProcByName<glProgramUniformMatrix3x2dvDel>("glProgramUniformMatrix3x2dv", getProcAddress);
            glProgramUniformMatrix3x2dvEXTPtr = LoadProcByName<glProgramUniformMatrix3x2dvEXTDel>("glProgramUniformMatrix3x2dvEXT", getProcAddress);
            glProgramUniformMatrix3x2fvPtr = LoadProcByName<glProgramUniformMatrix3x2fvDel>("glProgramUniformMatrix3x2fv", getProcAddress);
            glProgramUniformMatrix3x2fvEXTPtr = LoadProcByName<glProgramUniformMatrix3x2fvEXTDel>("glProgramUniformMatrix3x2fvEXT", getProcAddress);
            glProgramUniformMatrix3x4dvPtr = LoadProcByName<glProgramUniformMatrix3x4dvDel>("glProgramUniformMatrix3x4dv", getProcAddress);
            glProgramUniformMatrix3x4dvEXTPtr = LoadProcByName<glProgramUniformMatrix3x4dvEXTDel>("glProgramUniformMatrix3x4dvEXT", getProcAddress);
            glProgramUniformMatrix3x4fvPtr = LoadProcByName<glProgramUniformMatrix3x4fvDel>("glProgramUniformMatrix3x4fv", getProcAddress);
            glProgramUniformMatrix3x4fvEXTPtr = LoadProcByName<glProgramUniformMatrix3x4fvEXTDel>("glProgramUniformMatrix3x4fvEXT", getProcAddress);
            glProgramUniformMatrix4dvPtr = LoadProcByName<glProgramUniformMatrix4dvDel>("glProgramUniformMatrix4dv", getProcAddress);
            glProgramUniformMatrix4dvEXTPtr = LoadProcByName<glProgramUniformMatrix4dvEXTDel>("glProgramUniformMatrix4dvEXT", getProcAddress);
            glProgramUniformMatrix4fvPtr = LoadProcByName<glProgramUniformMatrix4fvDel>("glProgramUniformMatrix4fv", getProcAddress);
            glProgramUniformMatrix4fvEXTPtr = LoadProcByName<glProgramUniformMatrix4fvEXTDel>("glProgramUniformMatrix4fvEXT", getProcAddress);
            glProgramUniformMatrix4x2dvPtr = LoadProcByName<glProgramUniformMatrix4x2dvDel>("glProgramUniformMatrix4x2dv", getProcAddress);
            glProgramUniformMatrix4x2dvEXTPtr = LoadProcByName<glProgramUniformMatrix4x2dvEXTDel>("glProgramUniformMatrix4x2dvEXT", getProcAddress);
            glProgramUniformMatrix4x2fvPtr = LoadProcByName<glProgramUniformMatrix4x2fvDel>("glProgramUniformMatrix4x2fv", getProcAddress);
            glProgramUniformMatrix4x2fvEXTPtr = LoadProcByName<glProgramUniformMatrix4x2fvEXTDel>("glProgramUniformMatrix4x2fvEXT", getProcAddress);
            glProgramUniformMatrix4x3dvPtr = LoadProcByName<glProgramUniformMatrix4x3dvDel>("glProgramUniformMatrix4x3dv", getProcAddress);
            glProgramUniformMatrix4x3dvEXTPtr = LoadProcByName<glProgramUniformMatrix4x3dvEXTDel>("glProgramUniformMatrix4x3dvEXT", getProcAddress);
            glProgramUniformMatrix4x3fvPtr = LoadProcByName<glProgramUniformMatrix4x3fvDel>("glProgramUniformMatrix4x3fv", getProcAddress);
            glProgramUniformMatrix4x3fvEXTPtr = LoadProcByName<glProgramUniformMatrix4x3fvEXTDel>("glProgramUniformMatrix4x3fvEXT", getProcAddress);
            glProgramUniformui64NVPtr = LoadProcByName<glProgramUniformui64NVDel>("glProgramUniformui64NV", getProcAddress);
            glProgramUniformui64vNVPtr = LoadProcByName<glProgramUniformui64vNVDel>("glProgramUniformui64vNV", getProcAddress);
            glProgramVertexLimitNVPtr = LoadProcByName<glProgramVertexLimitNVDel>("glProgramVertexLimitNV", getProcAddress);
            glProvokingVertexPtr = LoadProcByName<glProvokingVertexDel>("glProvokingVertex", getProcAddress);
            glProvokingVertexEXTPtr = LoadProcByName<glProvokingVertexEXTDel>("glProvokingVertexEXT", getProcAddress);
            glPushAttribPtr = LoadProcByName<glPushAttribDel>("glPushAttrib", getProcAddress);
            glPushClientAttribPtr = LoadProcByName<glPushClientAttribDel>("glPushClientAttrib", getProcAddress);
            glPushClientAttribDefaultEXTPtr = LoadProcByName<glPushClientAttribDefaultEXTDel>("glPushClientAttribDefaultEXT", getProcAddress);
            glPushDebugGroupPtr = LoadProcByName<glPushDebugGroupDel>("glPushDebugGroup", getProcAddress);
            glPushDebugGroupKHRPtr = LoadProcByName<glPushDebugGroupKHRDel>("glPushDebugGroupKHR", getProcAddress);
            glPushGroupMarkerEXTPtr = LoadProcByName<glPushGroupMarkerEXTDel>("glPushGroupMarkerEXT", getProcAddress);
            glPushMatrixPtr = LoadProcByName<glPushMatrixDel>("glPushMatrix", getProcAddress);
            glPushNamePtr = LoadProcByName<glPushNameDel>("glPushName", getProcAddress);
            glQueryCounterPtr = LoadProcByName<glQueryCounterDel>("glQueryCounter", getProcAddress);
            glQueryCounterEXTPtr = LoadProcByName<glQueryCounterEXTDel>("glQueryCounterEXT", getProcAddress);
            glQueryMatrixxOESPtr = LoadProcByName<glQueryMatrixxOESDel>("glQueryMatrixxOES", getProcAddress);
            glQueryObjectParameteruiAMDPtr = LoadProcByName<glQueryObjectParameteruiAMDDel>("glQueryObjectParameteruiAMD", getProcAddress);
            glQueryResourceNVPtr = LoadProcByName<glQueryResourceNVDel>("glQueryResourceNV", getProcAddress);
            glQueryResourceTagNVPtr = LoadProcByName<glQueryResourceTagNVDel>("glQueryResourceTagNV", getProcAddress);
            glRasterPos2dPtr = LoadProcByName<glRasterPos2dDel>("glRasterPos2d", getProcAddress);
            glRasterPos2dvPtr = LoadProcByName<glRasterPos2dvDel>("glRasterPos2dv", getProcAddress);
            glRasterPos2fPtr = LoadProcByName<glRasterPos2fDel>("glRasterPos2f", getProcAddress);
            glRasterPos2fvPtr = LoadProcByName<glRasterPos2fvDel>("glRasterPos2fv", getProcAddress);
            glRasterPos2iPtr = LoadProcByName<glRasterPos2iDel>("glRasterPos2i", getProcAddress);
            glRasterPos2ivPtr = LoadProcByName<glRasterPos2ivDel>("glRasterPos2iv", getProcAddress);
            glRasterPos2sPtr = LoadProcByName<glRasterPos2sDel>("glRasterPos2s", getProcAddress);
            glRasterPos2svPtr = LoadProcByName<glRasterPos2svDel>("glRasterPos2sv", getProcAddress);
            glRasterPos2xOESPtr = LoadProcByName<glRasterPos2xOESDel>("glRasterPos2xOES", getProcAddress);
            glRasterPos2xvOESPtr = LoadProcByName<glRasterPos2xvOESDel>("glRasterPos2xvOES", getProcAddress);
            glRasterPos3dPtr = LoadProcByName<glRasterPos3dDel>("glRasterPos3d", getProcAddress);
            glRasterPos3dvPtr = LoadProcByName<glRasterPos3dvDel>("glRasterPos3dv", getProcAddress);
            glRasterPos3fPtr = LoadProcByName<glRasterPos3fDel>("glRasterPos3f", getProcAddress);
            glRasterPos3fvPtr = LoadProcByName<glRasterPos3fvDel>("glRasterPos3fv", getProcAddress);
            glRasterPos3iPtr = LoadProcByName<glRasterPos3iDel>("glRasterPos3i", getProcAddress);
            glRasterPos3ivPtr = LoadProcByName<glRasterPos3ivDel>("glRasterPos3iv", getProcAddress);
            glRasterPos3sPtr = LoadProcByName<glRasterPos3sDel>("glRasterPos3s", getProcAddress);
            glRasterPos3svPtr = LoadProcByName<glRasterPos3svDel>("glRasterPos3sv", getProcAddress);
            glRasterPos3xOESPtr = LoadProcByName<glRasterPos3xOESDel>("glRasterPos3xOES", getProcAddress);
            glRasterPos3xvOESPtr = LoadProcByName<glRasterPos3xvOESDel>("glRasterPos3xvOES", getProcAddress);
            glRasterPos4dPtr = LoadProcByName<glRasterPos4dDel>("glRasterPos4d", getProcAddress);
            glRasterPos4dvPtr = LoadProcByName<glRasterPos4dvDel>("glRasterPos4dv", getProcAddress);
            glRasterPos4fPtr = LoadProcByName<glRasterPos4fDel>("glRasterPos4f", getProcAddress);
            glRasterPos4fvPtr = LoadProcByName<glRasterPos4fvDel>("glRasterPos4fv", getProcAddress);
            glRasterPos4iPtr = LoadProcByName<glRasterPos4iDel>("glRasterPos4i", getProcAddress);
            glRasterPos4ivPtr = LoadProcByName<glRasterPos4ivDel>("glRasterPos4iv", getProcAddress);
            glRasterPos4sPtr = LoadProcByName<glRasterPos4sDel>("glRasterPos4s", getProcAddress);
            glRasterPos4svPtr = LoadProcByName<glRasterPos4svDel>("glRasterPos4sv", getProcAddress);
            glRasterPos4xOESPtr = LoadProcByName<glRasterPos4xOESDel>("glRasterPos4xOES", getProcAddress);
            glRasterPos4xvOESPtr = LoadProcByName<glRasterPos4xvOESDel>("glRasterPos4xvOES", getProcAddress);
            glRasterSamplesEXTPtr = LoadProcByName<glRasterSamplesEXTDel>("glRasterSamplesEXT", getProcAddress);
            glReadBufferPtr = LoadProcByName<glReadBufferDel>("glReadBuffer", getProcAddress);
            glReadBufferIndexedEXTPtr = LoadProcByName<glReadBufferIndexedEXTDel>("glReadBufferIndexedEXT", getProcAddress);
            glReadBufferNVPtr = LoadProcByName<glReadBufferNVDel>("glReadBufferNV", getProcAddress);
            glReadInstrumentsSGIXPtr = LoadProcByName<glReadInstrumentsSGIXDel>("glReadInstrumentsSGIX", getProcAddress);
            glReadPixelsPtr = LoadProcByName<glReadPixelsDel>("glReadPixels", getProcAddress);
            glReadnPixelsPtr = LoadProcByName<glReadnPixelsDel>("glReadnPixels", getProcAddress);
            glReadnPixelsARBPtr = LoadProcByName<glReadnPixelsARBDel>("glReadnPixelsARB", getProcAddress);
            glReadnPixelsEXTPtr = LoadProcByName<glReadnPixelsEXTDel>("glReadnPixelsEXT", getProcAddress);
            glReadnPixelsKHRPtr = LoadProcByName<glReadnPixelsKHRDel>("glReadnPixelsKHR", getProcAddress);
            glReleaseKeyedMutexWin32EXTPtr = LoadProcByName<glReleaseKeyedMutexWin32EXTDel>("glReleaseKeyedMutexWin32EXT", getProcAddress);
            glRectdPtr = LoadProcByName<glRectdDel>("glRectd", getProcAddress);
            glRectdvPtr = LoadProcByName<glRectdvDel>("glRectdv", getProcAddress);
            glRectfPtr = LoadProcByName<glRectfDel>("glRectf", getProcAddress);
            glRectfvPtr = LoadProcByName<glRectfvDel>("glRectfv", getProcAddress);
            glRectiPtr = LoadProcByName<glRectiDel>("glRecti", getProcAddress);
            glRectivPtr = LoadProcByName<glRectivDel>("glRectiv", getProcAddress);
            glRectsPtr = LoadProcByName<glRectsDel>("glRects", getProcAddress);
            glRectsvPtr = LoadProcByName<glRectsvDel>("glRectsv", getProcAddress);
            glRectxOESPtr = LoadProcByName<glRectxOESDel>("glRectxOES", getProcAddress);
            glRectxvOESPtr = LoadProcByName<glRectxvOESDel>("glRectxvOES", getProcAddress);
            glReferencePlaneSGIXPtr = LoadProcByName<glReferencePlaneSGIXDel>("glReferencePlaneSGIX", getProcAddress);
            glReleaseShaderCompilerPtr = LoadProcByName<glReleaseShaderCompilerDel>("glReleaseShaderCompiler", getProcAddress);
            glRenderGpuMaskNVPtr = LoadProcByName<glRenderGpuMaskNVDel>("glRenderGpuMaskNV", getProcAddress);
            glRenderModePtr = LoadProcByName<glRenderModeDel>("glRenderMode", getProcAddress);
            glRenderbufferStoragePtr = LoadProcByName<glRenderbufferStorageDel>("glRenderbufferStorage", getProcAddress);
            glRenderbufferStorageEXTPtr = LoadProcByName<glRenderbufferStorageEXTDel>("glRenderbufferStorageEXT", getProcAddress);
            glRenderbufferStorageMultisamplePtr = LoadProcByName<glRenderbufferStorageMultisampleDel>("glRenderbufferStorageMultisample", getProcAddress);
            glRenderbufferStorageMultisampleANGLEPtr = LoadProcByName<glRenderbufferStorageMultisampleANGLEDel>("glRenderbufferStorageMultisampleANGLE", getProcAddress);
            glRenderbufferStorageMultisampleAPPLEPtr = LoadProcByName<glRenderbufferStorageMultisampleAPPLEDel>("glRenderbufferStorageMultisampleAPPLE", getProcAddress);
            glRenderbufferStorageMultisampleAdvancedAMDPtr = LoadProcByName<glRenderbufferStorageMultisampleAdvancedAMDDel>("glRenderbufferStorageMultisampleAdvancedAMD", getProcAddress);
            glRenderbufferStorageMultisampleCoverageNVPtr = LoadProcByName<glRenderbufferStorageMultisampleCoverageNVDel>("glRenderbufferStorageMultisampleCoverageNV", getProcAddress);
            glRenderbufferStorageMultisampleEXTPtr = LoadProcByName<glRenderbufferStorageMultisampleEXTDel>("glRenderbufferStorageMultisampleEXT", getProcAddress);
            glRenderbufferStorageMultisampleIMGPtr = LoadProcByName<glRenderbufferStorageMultisampleIMGDel>("glRenderbufferStorageMultisampleIMG", getProcAddress);
            glRenderbufferStorageMultisampleNVPtr = LoadProcByName<glRenderbufferStorageMultisampleNVDel>("glRenderbufferStorageMultisampleNV", getProcAddress);
            glRenderbufferStorageOESPtr = LoadProcByName<glRenderbufferStorageOESDel>("glRenderbufferStorageOES", getProcAddress);
            glReplacementCodePointerSUNPtr = LoadProcByName<glReplacementCodePointerSUNDel>("glReplacementCodePointerSUN", getProcAddress);
            glReplacementCodeubSUNPtr = LoadProcByName<glReplacementCodeubSUNDel>("glReplacementCodeubSUN", getProcAddress);
            glReplacementCodeubvSUNPtr = LoadProcByName<glReplacementCodeubvSUNDel>("glReplacementCodeubvSUN", getProcAddress);
            glReplacementCodeuiColor3fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiColor3fVertex3fSUNDel>("glReplacementCodeuiColor3fVertex3fSUN", getProcAddress);
            glReplacementCodeuiColor3fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiColor3fVertex3fvSUNDel>("glReplacementCodeuiColor3fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiColor4fNormal3fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiColor4fNormal3fVertex3fSUNDel>("glReplacementCodeuiColor4fNormal3fVertex3fSUN", getProcAddress);
            glReplacementCodeuiColor4fNormal3fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiColor4fNormal3fVertex3fvSUNDel>("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiColor4ubVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiColor4ubVertex3fSUNDel>("glReplacementCodeuiColor4ubVertex3fSUN", getProcAddress);
            glReplacementCodeuiColor4ubVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiColor4ubVertex3fvSUNDel>("glReplacementCodeuiColor4ubVertex3fvSUN", getProcAddress);
            glReplacementCodeuiNormal3fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiNormal3fVertex3fSUNDel>("glReplacementCodeuiNormal3fVertex3fSUN", getProcAddress);
            glReplacementCodeuiNormal3fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiNormal3fVertex3fvSUNDel>("glReplacementCodeuiNormal3fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiSUNPtr = LoadProcByName<glReplacementCodeuiSUNDel>("glReplacementCodeuiSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNDel>("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNDel>("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fNormal3fVertex3fSUNDel>("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUNDel>("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fVertex3fSUNDel>("glReplacementCodeuiTexCoord2fVertex3fSUN", getProcAddress);
            glReplacementCodeuiTexCoord2fVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiTexCoord2fVertex3fvSUNDel>("glReplacementCodeuiTexCoord2fVertex3fvSUN", getProcAddress);
            glReplacementCodeuiVertex3fSUNPtr = LoadProcByName<glReplacementCodeuiVertex3fSUNDel>("glReplacementCodeuiVertex3fSUN", getProcAddress);
            glReplacementCodeuiVertex3fvSUNPtr = LoadProcByName<glReplacementCodeuiVertex3fvSUNDel>("glReplacementCodeuiVertex3fvSUN", getProcAddress);
            glReplacementCodeuivSUNPtr = LoadProcByName<glReplacementCodeuivSUNDel>("glReplacementCodeuivSUN", getProcAddress);
            glReplacementCodeusSUNPtr = LoadProcByName<glReplacementCodeusSUNDel>("glReplacementCodeusSUN", getProcAddress);
            glReplacementCodeusvSUNPtr = LoadProcByName<glReplacementCodeusvSUNDel>("glReplacementCodeusvSUN", getProcAddress);
            glRequestResidentProgramsNVPtr = LoadProcByName<glRequestResidentProgramsNVDel>("glRequestResidentProgramsNV", getProcAddress);
            glResetHistogramPtr = LoadProcByName<glResetHistogramDel>("glResetHistogram", getProcAddress);
            glResetHistogramEXTPtr = LoadProcByName<glResetHistogramEXTDel>("glResetHistogramEXT", getProcAddress);
            glResetMemoryObjectParameterNVPtr = LoadProcByName<glResetMemoryObjectParameterNVDel>("glResetMemoryObjectParameterNV", getProcAddress);
            glResetMinmaxPtr = LoadProcByName<glResetMinmaxDel>("glResetMinmax", getProcAddress);
            glResetMinmaxEXTPtr = LoadProcByName<glResetMinmaxEXTDel>("glResetMinmaxEXT", getProcAddress);
            glResizeBuffersMESAPtr = LoadProcByName<glResizeBuffersMESADel>("glResizeBuffersMESA", getProcAddress);
            glResolveDepthValuesNVPtr = LoadProcByName<glResolveDepthValuesNVDel>("glResolveDepthValuesNV", getProcAddress);
            glResolveMultisampleFramebufferAPPLEPtr = LoadProcByName<glResolveMultisampleFramebufferAPPLEDel>("glResolveMultisampleFramebufferAPPLE", getProcAddress);
            glResumeTransformFeedbackPtr = LoadProcByName<glResumeTransformFeedbackDel>("glResumeTransformFeedback", getProcAddress);
            glResumeTransformFeedbackNVPtr = LoadProcByName<glResumeTransformFeedbackNVDel>("glResumeTransformFeedbackNV", getProcAddress);
            glRotatedPtr = LoadProcByName<glRotatedDel>("glRotated", getProcAddress);
            glRotatefPtr = LoadProcByName<glRotatefDel>("glRotatef", getProcAddress);
            glRotatexPtr = LoadProcByName<glRotatexDel>("glRotatex", getProcAddress);
            glRotatexOESPtr = LoadProcByName<glRotatexOESDel>("glRotatexOES", getProcAddress);
            glSampleCoveragePtr = LoadProcByName<glSampleCoverageDel>("glSampleCoverage", getProcAddress);
            glSampleCoverageARBPtr = LoadProcByName<glSampleCoverageARBDel>("glSampleCoverageARB", getProcAddress);
            glSampleCoveragexPtr = LoadProcByName<glSampleCoveragexDel>("glSampleCoveragex", getProcAddress);
            glSampleCoveragexOESPtr = LoadProcByName<glSampleCoveragexOESDel>("glSampleCoveragexOES", getProcAddress);
            glSampleMapATIPtr = LoadProcByName<glSampleMapATIDel>("glSampleMapATI", getProcAddress);
            glSampleMaskEXTPtr = LoadProcByName<glSampleMaskEXTDel>("glSampleMaskEXT", getProcAddress);
            glSampleMaskIndexedNVPtr = LoadProcByName<glSampleMaskIndexedNVDel>("glSampleMaskIndexedNV", getProcAddress);
            glSampleMaskSGISPtr = LoadProcByName<glSampleMaskSGISDel>("glSampleMaskSGIS", getProcAddress);
            glSampleMaskiPtr = LoadProcByName<glSampleMaskiDel>("glSampleMaski", getProcAddress);
            glSamplePatternEXTPtr = LoadProcByName<glSamplePatternEXTDel>("glSamplePatternEXT", getProcAddress);
            glSamplePatternSGISPtr = LoadProcByName<glSamplePatternSGISDel>("glSamplePatternSGIS", getProcAddress);
            glSamplerParameterIivPtr = LoadProcByName<glSamplerParameterIivDel>("glSamplerParameterIiv", getProcAddress);
            glSamplerParameterIivEXTPtr = LoadProcByName<glSamplerParameterIivEXTDel>("glSamplerParameterIivEXT", getProcAddress);
            glSamplerParameterIivOESPtr = LoadProcByName<glSamplerParameterIivOESDel>("glSamplerParameterIivOES", getProcAddress);
            glSamplerParameterIuivPtr = LoadProcByName<glSamplerParameterIuivDel>("glSamplerParameterIuiv", getProcAddress);
            glSamplerParameterIuivEXTPtr = LoadProcByName<glSamplerParameterIuivEXTDel>("glSamplerParameterIuivEXT", getProcAddress);
            glSamplerParameterIuivOESPtr = LoadProcByName<glSamplerParameterIuivOESDel>("glSamplerParameterIuivOES", getProcAddress);
            glSamplerParameterfPtr = LoadProcByName<glSamplerParameterfDel>("glSamplerParameterf", getProcAddress);
            glSamplerParameterfvPtr = LoadProcByName<glSamplerParameterfvDel>("glSamplerParameterfv", getProcAddress);
            glSamplerParameteriPtr = LoadProcByName<glSamplerParameteriDel>("glSamplerParameteri", getProcAddress);
            glSamplerParameterivPtr = LoadProcByName<glSamplerParameterivDel>("glSamplerParameteriv", getProcAddress);
            glScaledPtr = LoadProcByName<glScaledDel>("glScaled", getProcAddress);
            glScalefPtr = LoadProcByName<glScalefDel>("glScalef", getProcAddress);
            glScalexPtr = LoadProcByName<glScalexDel>("glScalex", getProcAddress);
            glScalexOESPtr = LoadProcByName<glScalexOESDel>("glScalexOES", getProcAddress);
            glScissorPtr = LoadProcByName<glScissorDel>("glScissor", getProcAddress);
            glScissorArrayvPtr = LoadProcByName<glScissorArrayvDel>("glScissorArrayv", getProcAddress);
            glScissorArrayvNVPtr = LoadProcByName<glScissorArrayvNVDel>("glScissorArrayvNV", getProcAddress);
            glScissorArrayvOESPtr = LoadProcByName<glScissorArrayvOESDel>("glScissorArrayvOES", getProcAddress);
            glScissorExclusiveArrayvNVPtr = LoadProcByName<glScissorExclusiveArrayvNVDel>("glScissorExclusiveArrayvNV", getProcAddress);
            glScissorExclusiveNVPtr = LoadProcByName<glScissorExclusiveNVDel>("glScissorExclusiveNV", getProcAddress);
            glScissorIndexedPtr = LoadProcByName<glScissorIndexedDel>("glScissorIndexed", getProcAddress);
            glScissorIndexedNVPtr = LoadProcByName<glScissorIndexedNVDel>("glScissorIndexedNV", getProcAddress);
            glScissorIndexedOESPtr = LoadProcByName<glScissorIndexedOESDel>("glScissorIndexedOES", getProcAddress);
            glScissorIndexedvPtr = LoadProcByName<glScissorIndexedvDel>("glScissorIndexedv", getProcAddress);
            glScissorIndexedvNVPtr = LoadProcByName<glScissorIndexedvNVDel>("glScissorIndexedvNV", getProcAddress);
            glScissorIndexedvOESPtr = LoadProcByName<glScissorIndexedvOESDel>("glScissorIndexedvOES", getProcAddress);
            glSecondaryColor3bPtr = LoadProcByName<glSecondaryColor3bDel>("glSecondaryColor3b", getProcAddress);
            glSecondaryColor3bEXTPtr = LoadProcByName<glSecondaryColor3bEXTDel>("glSecondaryColor3bEXT", getProcAddress);
            glSecondaryColor3bvPtr = LoadProcByName<glSecondaryColor3bvDel>("glSecondaryColor3bv", getProcAddress);
            glSecondaryColor3bvEXTPtr = LoadProcByName<glSecondaryColor3bvEXTDel>("glSecondaryColor3bvEXT", getProcAddress);
            glSecondaryColor3dPtr = LoadProcByName<glSecondaryColor3dDel>("glSecondaryColor3d", getProcAddress);
            glSecondaryColor3dEXTPtr = LoadProcByName<glSecondaryColor3dEXTDel>("glSecondaryColor3dEXT", getProcAddress);
            glSecondaryColor3dvPtr = LoadProcByName<glSecondaryColor3dvDel>("glSecondaryColor3dv", getProcAddress);
            glSecondaryColor3dvEXTPtr = LoadProcByName<glSecondaryColor3dvEXTDel>("glSecondaryColor3dvEXT", getProcAddress);
            glSecondaryColor3fPtr = LoadProcByName<glSecondaryColor3fDel>("glSecondaryColor3f", getProcAddress);
            glSecondaryColor3fEXTPtr = LoadProcByName<glSecondaryColor3fEXTDel>("glSecondaryColor3fEXT", getProcAddress);
            glSecondaryColor3fvPtr = LoadProcByName<glSecondaryColor3fvDel>("glSecondaryColor3fv", getProcAddress);
            glSecondaryColor3fvEXTPtr = LoadProcByName<glSecondaryColor3fvEXTDel>("glSecondaryColor3fvEXT", getProcAddress);
            glSecondaryColor3hNVPtr = LoadProcByName<glSecondaryColor3hNVDel>("glSecondaryColor3hNV", getProcAddress);
            glSecondaryColor3hvNVPtr = LoadProcByName<glSecondaryColor3hvNVDel>("glSecondaryColor3hvNV", getProcAddress);
            glSecondaryColor3iPtr = LoadProcByName<glSecondaryColor3iDel>("glSecondaryColor3i", getProcAddress);
            glSecondaryColor3iEXTPtr = LoadProcByName<glSecondaryColor3iEXTDel>("glSecondaryColor3iEXT", getProcAddress);
            glSecondaryColor3ivPtr = LoadProcByName<glSecondaryColor3ivDel>("glSecondaryColor3iv", getProcAddress);
            glSecondaryColor3ivEXTPtr = LoadProcByName<glSecondaryColor3ivEXTDel>("glSecondaryColor3ivEXT", getProcAddress);
            glSecondaryColor3sPtr = LoadProcByName<glSecondaryColor3sDel>("glSecondaryColor3s", getProcAddress);
            glSecondaryColor3sEXTPtr = LoadProcByName<glSecondaryColor3sEXTDel>("glSecondaryColor3sEXT", getProcAddress);
            glSecondaryColor3svPtr = LoadProcByName<glSecondaryColor3svDel>("glSecondaryColor3sv", getProcAddress);
            glSecondaryColor3svEXTPtr = LoadProcByName<glSecondaryColor3svEXTDel>("glSecondaryColor3svEXT", getProcAddress);
            glSecondaryColor3ubPtr = LoadProcByName<glSecondaryColor3ubDel>("glSecondaryColor3ub", getProcAddress);
            glSecondaryColor3ubEXTPtr = LoadProcByName<glSecondaryColor3ubEXTDel>("glSecondaryColor3ubEXT", getProcAddress);
            glSecondaryColor3ubvPtr = LoadProcByName<glSecondaryColor3ubvDel>("glSecondaryColor3ubv", getProcAddress);
            glSecondaryColor3ubvEXTPtr = LoadProcByName<glSecondaryColor3ubvEXTDel>("glSecondaryColor3ubvEXT", getProcAddress);
            glSecondaryColor3uiPtr = LoadProcByName<glSecondaryColor3uiDel>("glSecondaryColor3ui", getProcAddress);
            glSecondaryColor3uiEXTPtr = LoadProcByName<glSecondaryColor3uiEXTDel>("glSecondaryColor3uiEXT", getProcAddress);
            glSecondaryColor3uivPtr = LoadProcByName<glSecondaryColor3uivDel>("glSecondaryColor3uiv", getProcAddress);
            glSecondaryColor3uivEXTPtr = LoadProcByName<glSecondaryColor3uivEXTDel>("glSecondaryColor3uivEXT", getProcAddress);
            glSecondaryColor3usPtr = LoadProcByName<glSecondaryColor3usDel>("glSecondaryColor3us", getProcAddress);
            glSecondaryColor3usEXTPtr = LoadProcByName<glSecondaryColor3usEXTDel>("glSecondaryColor3usEXT", getProcAddress);
            glSecondaryColor3usvPtr = LoadProcByName<glSecondaryColor3usvDel>("glSecondaryColor3usv", getProcAddress);
            glSecondaryColor3usvEXTPtr = LoadProcByName<glSecondaryColor3usvEXTDel>("glSecondaryColor3usvEXT", getProcAddress);
            glSecondaryColorFormatNVPtr = LoadProcByName<glSecondaryColorFormatNVDel>("glSecondaryColorFormatNV", getProcAddress);
            glSecondaryColorP3uiPtr = LoadProcByName<glSecondaryColorP3uiDel>("glSecondaryColorP3ui", getProcAddress);
            glSecondaryColorP3uivPtr = LoadProcByName<glSecondaryColorP3uivDel>("glSecondaryColorP3uiv", getProcAddress);
            glSecondaryColorPointerPtr = LoadProcByName<glSecondaryColorPointerDel>("glSecondaryColorPointer", getProcAddress);
            glSecondaryColorPointerEXTPtr = LoadProcByName<glSecondaryColorPointerEXTDel>("glSecondaryColorPointerEXT", getProcAddress);
            glSecondaryColorPointerListIBMPtr = LoadProcByName<glSecondaryColorPointerListIBMDel>("glSecondaryColorPointerListIBM", getProcAddress);
            glSelectBufferPtr = LoadProcByName<glSelectBufferDel>("glSelectBuffer", getProcAddress);
            glSelectPerfMonitorCountersAMDPtr = LoadProcByName<glSelectPerfMonitorCountersAMDDel>("glSelectPerfMonitorCountersAMD", getProcAddress);
            glSemaphoreParameterui64vEXTPtr = LoadProcByName<glSemaphoreParameterui64vEXTDel>("glSemaphoreParameterui64vEXT", getProcAddress);
            glSeparableFilter2DPtr = LoadProcByName<glSeparableFilter2DDel>("glSeparableFilter2D", getProcAddress);
            glSeparableFilter2DEXTPtr = LoadProcByName<glSeparableFilter2DEXTDel>("glSeparableFilter2DEXT", getProcAddress);
            glSetFenceAPPLEPtr = LoadProcByName<glSetFenceAPPLEDel>("glSetFenceAPPLE", getProcAddress);
            glSetFenceNVPtr = LoadProcByName<glSetFenceNVDel>("glSetFenceNV", getProcAddress);
            glSetFragmentShaderConstantATIPtr = LoadProcByName<glSetFragmentShaderConstantATIDel>("glSetFragmentShaderConstantATI", getProcAddress);
            glSetInvariantEXTPtr = LoadProcByName<glSetInvariantEXTDel>("glSetInvariantEXT", getProcAddress);
            glSetLocalConstantEXTPtr = LoadProcByName<glSetLocalConstantEXTDel>("glSetLocalConstantEXT", getProcAddress);
            glSetMultisamplefvAMDPtr = LoadProcByName<glSetMultisamplefvAMDDel>("glSetMultisamplefvAMD", getProcAddress);
            glShadeModelPtr = LoadProcByName<glShadeModelDel>("glShadeModel", getProcAddress);
            glShaderBinaryPtr = LoadProcByName<glShaderBinaryDel>("glShaderBinary", getProcAddress);
            glShaderOp1EXTPtr = LoadProcByName<glShaderOp1EXTDel>("glShaderOp1EXT", getProcAddress);
            glShaderOp2EXTPtr = LoadProcByName<glShaderOp2EXTDel>("glShaderOp2EXT", getProcAddress);
            glShaderOp3EXTPtr = LoadProcByName<glShaderOp3EXTDel>("glShaderOp3EXT", getProcAddress);
            glShaderSourcePtr = LoadProcByName<glShaderSourceDel>("glShaderSource", getProcAddress);
            glShaderSourceARBPtr = LoadProcByName<glShaderSourceARBDel>("glShaderSourceARB", getProcAddress);
            glShaderStorageBlockBindingPtr = LoadProcByName<glShaderStorageBlockBindingDel>("glShaderStorageBlockBinding", getProcAddress);
            glShadingRateImageBarrierNVPtr = LoadProcByName<glShadingRateImageBarrierNVDel>("glShadingRateImageBarrierNV", getProcAddress);
            glShadingRateQCOMPtr = LoadProcByName<glShadingRateQCOMDel>("glShadingRateQCOM", getProcAddress);
            glShadingRateImagePaletteNVPtr = LoadProcByName<glShadingRateImagePaletteNVDel>("glShadingRateImagePaletteNV", getProcAddress);
            glShadingRateSampleOrderNVPtr = LoadProcByName<glShadingRateSampleOrderNVDel>("glShadingRateSampleOrderNV", getProcAddress);
            glShadingRateSampleOrderCustomNVPtr = LoadProcByName<glShadingRateSampleOrderCustomNVDel>("glShadingRateSampleOrderCustomNV", getProcAddress);
            glSharpenTexFuncSGISPtr = LoadProcByName<glSharpenTexFuncSGISDel>("glSharpenTexFuncSGIS", getProcAddress);
            glSignalSemaphoreEXTPtr = LoadProcByName<glSignalSemaphoreEXTDel>("glSignalSemaphoreEXT", getProcAddress);
            glSignalSemaphoreui64NVXPtr = LoadProcByName<glSignalSemaphoreui64NVXDel>("glSignalSemaphoreui64NVX", getProcAddress);
            glSpecializeShaderPtr = LoadProcByName<glSpecializeShaderDel>("glSpecializeShader", getProcAddress);
            glSpecializeShaderARBPtr = LoadProcByName<glSpecializeShaderARBDel>("glSpecializeShaderARB", getProcAddress);
            glSpriteParameterfSGIXPtr = LoadProcByName<glSpriteParameterfSGIXDel>("glSpriteParameterfSGIX", getProcAddress);
            glSpriteParameterfvSGIXPtr = LoadProcByName<glSpriteParameterfvSGIXDel>("glSpriteParameterfvSGIX", getProcAddress);
            glSpriteParameteriSGIXPtr = LoadProcByName<glSpriteParameteriSGIXDel>("glSpriteParameteriSGIX", getProcAddress);
            glSpriteParameterivSGIXPtr = LoadProcByName<glSpriteParameterivSGIXDel>("glSpriteParameterivSGIX", getProcAddress);
            glStartInstrumentsSGIXPtr = LoadProcByName<glStartInstrumentsSGIXDel>("glStartInstrumentsSGIX", getProcAddress);
            glStartTilingQCOMPtr = LoadProcByName<glStartTilingQCOMDel>("glStartTilingQCOM", getProcAddress);
            glStateCaptureNVPtr = LoadProcByName<glStateCaptureNVDel>("glStateCaptureNV", getProcAddress);
            glStencilClearTagEXTPtr = LoadProcByName<glStencilClearTagEXTDel>("glStencilClearTagEXT", getProcAddress);
            glStencilFillPathInstancedNVPtr = LoadProcByName<glStencilFillPathInstancedNVDel>("glStencilFillPathInstancedNV", getProcAddress);
            glStencilFillPathNVPtr = LoadProcByName<glStencilFillPathNVDel>("glStencilFillPathNV", getProcAddress);
            glStencilFuncPtr = LoadProcByName<glStencilFuncDel>("glStencilFunc", getProcAddress);
            glStencilFuncSeparatePtr = LoadProcByName<glStencilFuncSeparateDel>("glStencilFuncSeparate", getProcAddress);
            glStencilFuncSeparateATIPtr = LoadProcByName<glStencilFuncSeparateATIDel>("glStencilFuncSeparateATI", getProcAddress);
            glStencilMaskPtr = LoadProcByName<glStencilMaskDel>("glStencilMask", getProcAddress);
            glStencilMaskSeparatePtr = LoadProcByName<glStencilMaskSeparateDel>("glStencilMaskSeparate", getProcAddress);
            glStencilOpPtr = LoadProcByName<glStencilOpDel>("glStencilOp", getProcAddress);
            glStencilOpSeparatePtr = LoadProcByName<glStencilOpSeparateDel>("glStencilOpSeparate", getProcAddress);
            glStencilOpSeparateATIPtr = LoadProcByName<glStencilOpSeparateATIDel>("glStencilOpSeparateATI", getProcAddress);
            glStencilOpValueAMDPtr = LoadProcByName<glStencilOpValueAMDDel>("glStencilOpValueAMD", getProcAddress);
            glStencilStrokePathInstancedNVPtr = LoadProcByName<glStencilStrokePathInstancedNVDel>("glStencilStrokePathInstancedNV", getProcAddress);
            glStencilStrokePathNVPtr = LoadProcByName<glStencilStrokePathNVDel>("glStencilStrokePathNV", getProcAddress);
            glStencilThenCoverFillPathInstancedNVPtr = LoadProcByName<glStencilThenCoverFillPathInstancedNVDel>("glStencilThenCoverFillPathInstancedNV", getProcAddress);
            glStencilThenCoverFillPathNVPtr = LoadProcByName<glStencilThenCoverFillPathNVDel>("glStencilThenCoverFillPathNV", getProcAddress);
            glStencilThenCoverStrokePathInstancedNVPtr = LoadProcByName<glStencilThenCoverStrokePathInstancedNVDel>("glStencilThenCoverStrokePathInstancedNV", getProcAddress);
            glStencilThenCoverStrokePathNVPtr = LoadProcByName<glStencilThenCoverStrokePathNVDel>("glStencilThenCoverStrokePathNV", getProcAddress);
            glStopInstrumentsSGIXPtr = LoadProcByName<glStopInstrumentsSGIXDel>("glStopInstrumentsSGIX", getProcAddress);
            glStringMarkerGREMEDYPtr = LoadProcByName<glStringMarkerGREMEDYDel>("glStringMarkerGREMEDY", getProcAddress);
            glSubpixelPrecisionBiasNVPtr = LoadProcByName<glSubpixelPrecisionBiasNVDel>("glSubpixelPrecisionBiasNV", getProcAddress);
            glSwizzleEXTPtr = LoadProcByName<glSwizzleEXTDel>("glSwizzleEXT", getProcAddress);
            glSyncTextureINTELPtr = LoadProcByName<glSyncTextureINTELDel>("glSyncTextureINTEL", getProcAddress);
            glTagSampleBufferSGIXPtr = LoadProcByName<glTagSampleBufferSGIXDel>("glTagSampleBufferSGIX", getProcAddress);
            glTangent3bEXTPtr = LoadProcByName<glTangent3bEXTDel>("glTangent3bEXT", getProcAddress);
            glTangent3bvEXTPtr = LoadProcByName<glTangent3bvEXTDel>("glTangent3bvEXT", getProcAddress);
            glTangent3dEXTPtr = LoadProcByName<glTangent3dEXTDel>("glTangent3dEXT", getProcAddress);
            glTangent3dvEXTPtr = LoadProcByName<glTangent3dvEXTDel>("glTangent3dvEXT", getProcAddress);
            glTangent3fEXTPtr = LoadProcByName<glTangent3fEXTDel>("glTangent3fEXT", getProcAddress);
            glTangent3fvEXTPtr = LoadProcByName<glTangent3fvEXTDel>("glTangent3fvEXT", getProcAddress);
            glTangent3iEXTPtr = LoadProcByName<glTangent3iEXTDel>("glTangent3iEXT", getProcAddress);
            glTangent3ivEXTPtr = LoadProcByName<glTangent3ivEXTDel>("glTangent3ivEXT", getProcAddress);
            glTangent3sEXTPtr = LoadProcByName<glTangent3sEXTDel>("glTangent3sEXT", getProcAddress);
            glTangent3svEXTPtr = LoadProcByName<glTangent3svEXTDel>("glTangent3svEXT", getProcAddress);
            glTangentPointerEXTPtr = LoadProcByName<glTangentPointerEXTDel>("glTangentPointerEXT", getProcAddress);
            glTbufferMask3DFXPtr = LoadProcByName<glTbufferMask3DFXDel>("glTbufferMask3DFX", getProcAddress);
            glTessellationFactorAMDPtr = LoadProcByName<glTessellationFactorAMDDel>("glTessellationFactorAMD", getProcAddress);
            glTessellationModeAMDPtr = LoadProcByName<glTessellationModeAMDDel>("glTessellationModeAMD", getProcAddress);
            glTestFenceAPPLEPtr = LoadProcByName<glTestFenceAPPLEDel>("glTestFenceAPPLE", getProcAddress);
            glTestFenceNVPtr = LoadProcByName<glTestFenceNVDel>("glTestFenceNV", getProcAddress);
            glTestObjectAPPLEPtr = LoadProcByName<glTestObjectAPPLEDel>("glTestObjectAPPLE", getProcAddress);
            glTexAttachMemoryNVPtr = LoadProcByName<glTexAttachMemoryNVDel>("glTexAttachMemoryNV", getProcAddress);
            glTexBufferPtr = LoadProcByName<glTexBufferDel>("glTexBuffer", getProcAddress);
            glTexBufferARBPtr = LoadProcByName<glTexBufferARBDel>("glTexBufferARB", getProcAddress);
            glTexBufferEXTPtr = LoadProcByName<glTexBufferEXTDel>("glTexBufferEXT", getProcAddress);
            glTexBufferOESPtr = LoadProcByName<glTexBufferOESDel>("glTexBufferOES", getProcAddress);
            glTexBufferRangePtr = LoadProcByName<glTexBufferRangeDel>("glTexBufferRange", getProcAddress);
            glTexBufferRangeEXTPtr = LoadProcByName<glTexBufferRangeEXTDel>("glTexBufferRangeEXT", getProcAddress);
            glTexBufferRangeOESPtr = LoadProcByName<glTexBufferRangeOESDel>("glTexBufferRangeOES", getProcAddress);
            glTexBumpParameterfvATIPtr = LoadProcByName<glTexBumpParameterfvATIDel>("glTexBumpParameterfvATI", getProcAddress);
            glTexBumpParameterivATIPtr = LoadProcByName<glTexBumpParameterivATIDel>("glTexBumpParameterivATI", getProcAddress);
            glTexCoord1bOESPtr = LoadProcByName<glTexCoord1bOESDel>("glTexCoord1bOES", getProcAddress);
            glTexCoord1bvOESPtr = LoadProcByName<glTexCoord1bvOESDel>("glTexCoord1bvOES", getProcAddress);
            glTexCoord1dPtr = LoadProcByName<glTexCoord1dDel>("glTexCoord1d", getProcAddress);
            glTexCoord1dvPtr = LoadProcByName<glTexCoord1dvDel>("glTexCoord1dv", getProcAddress);
            glTexCoord1fPtr = LoadProcByName<glTexCoord1fDel>("glTexCoord1f", getProcAddress);
            glTexCoord1fvPtr = LoadProcByName<glTexCoord1fvDel>("glTexCoord1fv", getProcAddress);
            glTexCoord1hNVPtr = LoadProcByName<glTexCoord1hNVDel>("glTexCoord1hNV", getProcAddress);
            glTexCoord1hvNVPtr = LoadProcByName<glTexCoord1hvNVDel>("glTexCoord1hvNV", getProcAddress);
            glTexCoord1iPtr = LoadProcByName<glTexCoord1iDel>("glTexCoord1i", getProcAddress);
            glTexCoord1ivPtr = LoadProcByName<glTexCoord1ivDel>("glTexCoord1iv", getProcAddress);
            glTexCoord1sPtr = LoadProcByName<glTexCoord1sDel>("glTexCoord1s", getProcAddress);
            glTexCoord1svPtr = LoadProcByName<glTexCoord1svDel>("glTexCoord1sv", getProcAddress);
            glTexCoord1xOESPtr = LoadProcByName<glTexCoord1xOESDel>("glTexCoord1xOES", getProcAddress);
            glTexCoord1xvOESPtr = LoadProcByName<glTexCoord1xvOESDel>("glTexCoord1xvOES", getProcAddress);
            glTexCoord2bOESPtr = LoadProcByName<glTexCoord2bOESDel>("glTexCoord2bOES", getProcAddress);
            glTexCoord2bvOESPtr = LoadProcByName<glTexCoord2bvOESDel>("glTexCoord2bvOES", getProcAddress);
            glTexCoord2dPtr = LoadProcByName<glTexCoord2dDel>("glTexCoord2d", getProcAddress);
            glTexCoord2dvPtr = LoadProcByName<glTexCoord2dvDel>("glTexCoord2dv", getProcAddress);
            glTexCoord2fPtr = LoadProcByName<glTexCoord2fDel>("glTexCoord2f", getProcAddress);
            glTexCoord2fColor3fVertex3fSUNPtr = LoadProcByName<glTexCoord2fColor3fVertex3fSUNDel>("glTexCoord2fColor3fVertex3fSUN", getProcAddress);
            glTexCoord2fColor3fVertex3fvSUNPtr = LoadProcByName<glTexCoord2fColor3fVertex3fvSUNDel>("glTexCoord2fColor3fVertex3fvSUN", getProcAddress);
            glTexCoord2fColor4fNormal3fVertex3fSUNPtr = LoadProcByName<glTexCoord2fColor4fNormal3fVertex3fSUNDel>("glTexCoord2fColor4fNormal3fVertex3fSUN", getProcAddress);
            glTexCoord2fColor4fNormal3fVertex3fvSUNPtr = LoadProcByName<glTexCoord2fColor4fNormal3fVertex3fvSUNDel>("glTexCoord2fColor4fNormal3fVertex3fvSUN", getProcAddress);
            glTexCoord2fColor4ubVertex3fSUNPtr = LoadProcByName<glTexCoord2fColor4ubVertex3fSUNDel>("glTexCoord2fColor4ubVertex3fSUN", getProcAddress);
            glTexCoord2fColor4ubVertex3fvSUNPtr = LoadProcByName<glTexCoord2fColor4ubVertex3fvSUNDel>("glTexCoord2fColor4ubVertex3fvSUN", getProcAddress);
            glTexCoord2fNormal3fVertex3fSUNPtr = LoadProcByName<glTexCoord2fNormal3fVertex3fSUNDel>("glTexCoord2fNormal3fVertex3fSUN", getProcAddress);
            glTexCoord2fNormal3fVertex3fvSUNPtr = LoadProcByName<glTexCoord2fNormal3fVertex3fvSUNDel>("glTexCoord2fNormal3fVertex3fvSUN", getProcAddress);
            glTexCoord2fVertex3fSUNPtr = LoadProcByName<glTexCoord2fVertex3fSUNDel>("glTexCoord2fVertex3fSUN", getProcAddress);
            glTexCoord2fVertex3fvSUNPtr = LoadProcByName<glTexCoord2fVertex3fvSUNDel>("glTexCoord2fVertex3fvSUN", getProcAddress);
            glTexCoord2fvPtr = LoadProcByName<glTexCoord2fvDel>("glTexCoord2fv", getProcAddress);
            glTexCoord2hNVPtr = LoadProcByName<glTexCoord2hNVDel>("glTexCoord2hNV", getProcAddress);
            glTexCoord2hvNVPtr = LoadProcByName<glTexCoord2hvNVDel>("glTexCoord2hvNV", getProcAddress);
            glTexCoord2iPtr = LoadProcByName<glTexCoord2iDel>("glTexCoord2i", getProcAddress);
            glTexCoord2ivPtr = LoadProcByName<glTexCoord2ivDel>("glTexCoord2iv", getProcAddress);
            glTexCoord2sPtr = LoadProcByName<glTexCoord2sDel>("glTexCoord2s", getProcAddress);
            glTexCoord2svPtr = LoadProcByName<glTexCoord2svDel>("glTexCoord2sv", getProcAddress);
            glTexCoord2xOESPtr = LoadProcByName<glTexCoord2xOESDel>("glTexCoord2xOES", getProcAddress);
            glTexCoord2xvOESPtr = LoadProcByName<glTexCoord2xvOESDel>("glTexCoord2xvOES", getProcAddress);
            glTexCoord3bOESPtr = LoadProcByName<glTexCoord3bOESDel>("glTexCoord3bOES", getProcAddress);
            glTexCoord3bvOESPtr = LoadProcByName<glTexCoord3bvOESDel>("glTexCoord3bvOES", getProcAddress);
            glTexCoord3dPtr = LoadProcByName<glTexCoord3dDel>("glTexCoord3d", getProcAddress);
            glTexCoord3dvPtr = LoadProcByName<glTexCoord3dvDel>("glTexCoord3dv", getProcAddress);
            glTexCoord3fPtr = LoadProcByName<glTexCoord3fDel>("glTexCoord3f", getProcAddress);
            glTexCoord3fvPtr = LoadProcByName<glTexCoord3fvDel>("glTexCoord3fv", getProcAddress);
            glTexCoord3hNVPtr = LoadProcByName<glTexCoord3hNVDel>("glTexCoord3hNV", getProcAddress);
            glTexCoord3hvNVPtr = LoadProcByName<glTexCoord3hvNVDel>("glTexCoord3hvNV", getProcAddress);
            glTexCoord3iPtr = LoadProcByName<glTexCoord3iDel>("glTexCoord3i", getProcAddress);
            glTexCoord3ivPtr = LoadProcByName<glTexCoord3ivDel>("glTexCoord3iv", getProcAddress);
            glTexCoord3sPtr = LoadProcByName<glTexCoord3sDel>("glTexCoord3s", getProcAddress);
            glTexCoord3svPtr = LoadProcByName<glTexCoord3svDel>("glTexCoord3sv", getProcAddress);
            glTexCoord3xOESPtr = LoadProcByName<glTexCoord3xOESDel>("glTexCoord3xOES", getProcAddress);
            glTexCoord3xvOESPtr = LoadProcByName<glTexCoord3xvOESDel>("glTexCoord3xvOES", getProcAddress);
            glTexCoord4bOESPtr = LoadProcByName<glTexCoord4bOESDel>("glTexCoord4bOES", getProcAddress);
            glTexCoord4bvOESPtr = LoadProcByName<glTexCoord4bvOESDel>("glTexCoord4bvOES", getProcAddress);
            glTexCoord4dPtr = LoadProcByName<glTexCoord4dDel>("glTexCoord4d", getProcAddress);
            glTexCoord4dvPtr = LoadProcByName<glTexCoord4dvDel>("glTexCoord4dv", getProcAddress);
            glTexCoord4fPtr = LoadProcByName<glTexCoord4fDel>("glTexCoord4f", getProcAddress);
            glTexCoord4fColor4fNormal3fVertex4fSUNPtr = LoadProcByName<glTexCoord4fColor4fNormal3fVertex4fSUNDel>("glTexCoord4fColor4fNormal3fVertex4fSUN", getProcAddress);
            glTexCoord4fColor4fNormal3fVertex4fvSUNPtr = LoadProcByName<glTexCoord4fColor4fNormal3fVertex4fvSUNDel>("glTexCoord4fColor4fNormal3fVertex4fvSUN", getProcAddress);
            glTexCoord4fVertex4fSUNPtr = LoadProcByName<glTexCoord4fVertex4fSUNDel>("glTexCoord4fVertex4fSUN", getProcAddress);
            glTexCoord4fVertex4fvSUNPtr = LoadProcByName<glTexCoord4fVertex4fvSUNDel>("glTexCoord4fVertex4fvSUN", getProcAddress);
            glTexCoord4fvPtr = LoadProcByName<glTexCoord4fvDel>("glTexCoord4fv", getProcAddress);
            glTexCoord4hNVPtr = LoadProcByName<glTexCoord4hNVDel>("glTexCoord4hNV", getProcAddress);
            glTexCoord4hvNVPtr = LoadProcByName<glTexCoord4hvNVDel>("glTexCoord4hvNV", getProcAddress);
            glTexCoord4iPtr = LoadProcByName<glTexCoord4iDel>("glTexCoord4i", getProcAddress);
            glTexCoord4ivPtr = LoadProcByName<glTexCoord4ivDel>("glTexCoord4iv", getProcAddress);
            glTexCoord4sPtr = LoadProcByName<glTexCoord4sDel>("glTexCoord4s", getProcAddress);
            glTexCoord4svPtr = LoadProcByName<glTexCoord4svDel>("glTexCoord4sv", getProcAddress);
            glTexCoord4xOESPtr = LoadProcByName<glTexCoord4xOESDel>("glTexCoord4xOES", getProcAddress);
            glTexCoord4xvOESPtr = LoadProcByName<glTexCoord4xvOESDel>("glTexCoord4xvOES", getProcAddress);
            glTexCoordFormatNVPtr = LoadProcByName<glTexCoordFormatNVDel>("glTexCoordFormatNV", getProcAddress);
            glTexCoordP1uiPtr = LoadProcByName<glTexCoordP1uiDel>("glTexCoordP1ui", getProcAddress);
            glTexCoordP1uivPtr = LoadProcByName<glTexCoordP1uivDel>("glTexCoordP1uiv", getProcAddress);
            glTexCoordP2uiPtr = LoadProcByName<glTexCoordP2uiDel>("glTexCoordP2ui", getProcAddress);
            glTexCoordP2uivPtr = LoadProcByName<glTexCoordP2uivDel>("glTexCoordP2uiv", getProcAddress);
            glTexCoordP3uiPtr = LoadProcByName<glTexCoordP3uiDel>("glTexCoordP3ui", getProcAddress);
            glTexCoordP3uivPtr = LoadProcByName<glTexCoordP3uivDel>("glTexCoordP3uiv", getProcAddress);
            glTexCoordP4uiPtr = LoadProcByName<glTexCoordP4uiDel>("glTexCoordP4ui", getProcAddress);
            glTexCoordP4uivPtr = LoadProcByName<glTexCoordP4uivDel>("glTexCoordP4uiv", getProcAddress);
            glTexCoordPointerPtr = LoadProcByName<glTexCoordPointerDel>("glTexCoordPointer", getProcAddress);
            glTexCoordPointerEXTPtr = LoadProcByName<glTexCoordPointerEXTDel>("glTexCoordPointerEXT", getProcAddress);
            glTexCoordPointerListIBMPtr = LoadProcByName<glTexCoordPointerListIBMDel>("glTexCoordPointerListIBM", getProcAddress);
            glTexCoordPointervINTELPtr = LoadProcByName<glTexCoordPointervINTELDel>("glTexCoordPointervINTEL", getProcAddress);
            glTexEnvfPtr = LoadProcByName<glTexEnvfDel>("glTexEnvf", getProcAddress);
            glTexEnvfvPtr = LoadProcByName<glTexEnvfvDel>("glTexEnvfv", getProcAddress);
            glTexEnviPtr = LoadProcByName<glTexEnviDel>("glTexEnvi", getProcAddress);
            glTexEnvivPtr = LoadProcByName<glTexEnvivDel>("glTexEnviv", getProcAddress);
            glTexEnvxPtr = LoadProcByName<glTexEnvxDel>("glTexEnvx", getProcAddress);
            glTexEnvxOESPtr = LoadProcByName<glTexEnvxOESDel>("glTexEnvxOES", getProcAddress);
            glTexEnvxvPtr = LoadProcByName<glTexEnvxvDel>("glTexEnvxv", getProcAddress);
            glTexEnvxvOESPtr = LoadProcByName<glTexEnvxvOESDel>("glTexEnvxvOES", getProcAddress);
            glTexEstimateMotionQCOMPtr = LoadProcByName<glTexEstimateMotionQCOMDel>("glTexEstimateMotionQCOM", getProcAddress);
            glTexEstimateMotionRegionsQCOMPtr = LoadProcByName<glTexEstimateMotionRegionsQCOMDel>("glTexEstimateMotionRegionsQCOM", getProcAddress);
            glTexFilterFuncSGISPtr = LoadProcByName<glTexFilterFuncSGISDel>("glTexFilterFuncSGIS", getProcAddress);
            glTexGendPtr = LoadProcByName<glTexGendDel>("glTexGend", getProcAddress);
            glTexGendvPtr = LoadProcByName<glTexGendvDel>("glTexGendv", getProcAddress);
            glTexGenfPtr = LoadProcByName<glTexGenfDel>("glTexGenf", getProcAddress);
            glTexGenfOESPtr = LoadProcByName<glTexGenfOESDel>("glTexGenfOES", getProcAddress);
            glTexGenfvPtr = LoadProcByName<glTexGenfvDel>("glTexGenfv", getProcAddress);
            glTexGenfvOESPtr = LoadProcByName<glTexGenfvOESDel>("glTexGenfvOES", getProcAddress);
            glTexGeniPtr = LoadProcByName<glTexGeniDel>("glTexGeni", getProcAddress);
            glTexGeniOESPtr = LoadProcByName<glTexGeniOESDel>("glTexGeniOES", getProcAddress);
            glTexGenivPtr = LoadProcByName<glTexGenivDel>("glTexGeniv", getProcAddress);
            glTexGenivOESPtr = LoadProcByName<glTexGenivOESDel>("glTexGenivOES", getProcAddress);
            glTexGenxOESPtr = LoadProcByName<glTexGenxOESDel>("glTexGenxOES", getProcAddress);
            glTexGenxvOESPtr = LoadProcByName<glTexGenxvOESDel>("glTexGenxvOES", getProcAddress);
            glTexImage1DPtr = LoadProcByName<glTexImage1DDel>("glTexImage1D", getProcAddress);
            glTexImage2DPtr = LoadProcByName<glTexImage2DDel>("glTexImage2D", getProcAddress);
            glTexImage2DMultisamplePtr = LoadProcByName<glTexImage2DMultisampleDel>("glTexImage2DMultisample", getProcAddress);
            glTexImage2DMultisampleCoverageNVPtr = LoadProcByName<glTexImage2DMultisampleCoverageNVDel>("glTexImage2DMultisampleCoverageNV", getProcAddress);
            glTexImage3DPtr = LoadProcByName<glTexImage3DDel>("glTexImage3D", getProcAddress);
            glTexImage3DEXTPtr = LoadProcByName<glTexImage3DEXTDel>("glTexImage3DEXT", getProcAddress);
            glTexImage3DMultisamplePtr = LoadProcByName<glTexImage3DMultisampleDel>("glTexImage3DMultisample", getProcAddress);
            glTexImage3DMultisampleCoverageNVPtr = LoadProcByName<glTexImage3DMultisampleCoverageNVDel>("glTexImage3DMultisampleCoverageNV", getProcAddress);
            glTexImage3DOESPtr = LoadProcByName<glTexImage3DOESDel>("glTexImage3DOES", getProcAddress);
            glTexImage4DSGISPtr = LoadProcByName<glTexImage4DSGISDel>("glTexImage4DSGIS", getProcAddress);
            glTexPageCommitmentARBPtr = LoadProcByName<glTexPageCommitmentARBDel>("glTexPageCommitmentARB", getProcAddress);
            glTexPageCommitmentEXTPtr = LoadProcByName<glTexPageCommitmentEXTDel>("glTexPageCommitmentEXT", getProcAddress);
            glTexParameterIivPtr = LoadProcByName<glTexParameterIivDel>("glTexParameterIiv", getProcAddress);
            glTexParameterIivEXTPtr = LoadProcByName<glTexParameterIivEXTDel>("glTexParameterIivEXT", getProcAddress);
            glTexParameterIivOESPtr = LoadProcByName<glTexParameterIivOESDel>("glTexParameterIivOES", getProcAddress);
            glTexParameterIuivPtr = LoadProcByName<glTexParameterIuivDel>("glTexParameterIuiv", getProcAddress);
            glTexParameterIuivEXTPtr = LoadProcByName<glTexParameterIuivEXTDel>("glTexParameterIuivEXT", getProcAddress);
            glTexParameterIuivOESPtr = LoadProcByName<glTexParameterIuivOESDel>("glTexParameterIuivOES", getProcAddress);
            glTexParameterfPtr = LoadProcByName<glTexParameterfDel>("glTexParameterf", getProcAddress);
            glTexParameterfvPtr = LoadProcByName<glTexParameterfvDel>("glTexParameterfv", getProcAddress);
            glTexParameteriPtr = LoadProcByName<glTexParameteriDel>("glTexParameteri", getProcAddress);
            glTexParameterivPtr = LoadProcByName<glTexParameterivDel>("glTexParameteriv", getProcAddress);
            glTexParameterxPtr = LoadProcByName<glTexParameterxDel>("glTexParameterx", getProcAddress);
            glTexParameterxOESPtr = LoadProcByName<glTexParameterxOESDel>("glTexParameterxOES", getProcAddress);
            glTexParameterxvPtr = LoadProcByName<glTexParameterxvDel>("glTexParameterxv", getProcAddress);
            glTexParameterxvOESPtr = LoadProcByName<glTexParameterxvOESDel>("glTexParameterxvOES", getProcAddress);
            glTexRenderbufferNVPtr = LoadProcByName<glTexRenderbufferNVDel>("glTexRenderbufferNV", getProcAddress);
            glTexStorage1DPtr = LoadProcByName<glTexStorage1DDel>("glTexStorage1D", getProcAddress);
            glTexStorage1DEXTPtr = LoadProcByName<glTexStorage1DEXTDel>("glTexStorage1DEXT", getProcAddress);
            glTexStorage2DPtr = LoadProcByName<glTexStorage2DDel>("glTexStorage2D", getProcAddress);
            glTexStorage2DEXTPtr = LoadProcByName<glTexStorage2DEXTDel>("glTexStorage2DEXT", getProcAddress);
            glTexStorage2DMultisamplePtr = LoadProcByName<glTexStorage2DMultisampleDel>("glTexStorage2DMultisample", getProcAddress);
            glTexStorage3DPtr = LoadProcByName<glTexStorage3DDel>("glTexStorage3D", getProcAddress);
            glTexStorage3DEXTPtr = LoadProcByName<glTexStorage3DEXTDel>("glTexStorage3DEXT", getProcAddress);
            glTexStorage3DMultisamplePtr = LoadProcByName<glTexStorage3DMultisampleDel>("glTexStorage3DMultisample", getProcAddress);
            glTexStorage3DMultisampleOESPtr = LoadProcByName<glTexStorage3DMultisampleOESDel>("glTexStorage3DMultisampleOES", getProcAddress);
            glTexStorageMem1DEXTPtr = LoadProcByName<glTexStorageMem1DEXTDel>("glTexStorageMem1DEXT", getProcAddress);
            glTexStorageMem2DEXTPtr = LoadProcByName<glTexStorageMem2DEXTDel>("glTexStorageMem2DEXT", getProcAddress);
            glTexStorageMem2DMultisampleEXTPtr = LoadProcByName<glTexStorageMem2DMultisampleEXTDel>("glTexStorageMem2DMultisampleEXT", getProcAddress);
            glTexStorageMem3DEXTPtr = LoadProcByName<glTexStorageMem3DEXTDel>("glTexStorageMem3DEXT", getProcAddress);
            glTexStorageMem3DMultisampleEXTPtr = LoadProcByName<glTexStorageMem3DMultisampleEXTDel>("glTexStorageMem3DMultisampleEXT", getProcAddress);
            glTexStorageSparseAMDPtr = LoadProcByName<glTexStorageSparseAMDDel>("glTexStorageSparseAMD", getProcAddress);
            glTexSubImage1DPtr = LoadProcByName<glTexSubImage1DDel>("glTexSubImage1D", getProcAddress);
            glTexSubImage1DEXTPtr = LoadProcByName<glTexSubImage1DEXTDel>("glTexSubImage1DEXT", getProcAddress);
            glTexSubImage2DPtr = LoadProcByName<glTexSubImage2DDel>("glTexSubImage2D", getProcAddress);
            glTexSubImage2DEXTPtr = LoadProcByName<glTexSubImage2DEXTDel>("glTexSubImage2DEXT", getProcAddress);
            glTexSubImage3DPtr = LoadProcByName<glTexSubImage3DDel>("glTexSubImage3D", getProcAddress);
            glTexSubImage3DEXTPtr = LoadProcByName<glTexSubImage3DEXTDel>("glTexSubImage3DEXT", getProcAddress);
            glTexSubImage3DOESPtr = LoadProcByName<glTexSubImage3DOESDel>("glTexSubImage3DOES", getProcAddress);
            glTexSubImage4DSGISPtr = LoadProcByName<glTexSubImage4DSGISDel>("glTexSubImage4DSGIS", getProcAddress);
            glTextureAttachMemoryNVPtr = LoadProcByName<glTextureAttachMemoryNVDel>("glTextureAttachMemoryNV", getProcAddress);
            glTextureBarrierPtr = LoadProcByName<glTextureBarrierDel>("glTextureBarrier", getProcAddress);
            glTextureBarrierNVPtr = LoadProcByName<glTextureBarrierNVDel>("glTextureBarrierNV", getProcAddress);
            glTextureBufferPtr = LoadProcByName<glTextureBufferDel>("glTextureBuffer", getProcAddress);
            glTextureBufferEXTPtr = LoadProcByName<glTextureBufferEXTDel>("glTextureBufferEXT", getProcAddress);
            glTextureBufferRangePtr = LoadProcByName<glTextureBufferRangeDel>("glTextureBufferRange", getProcAddress);
            glTextureBufferRangeEXTPtr = LoadProcByName<glTextureBufferRangeEXTDel>("glTextureBufferRangeEXT", getProcAddress);
            glTextureColorMaskSGISPtr = LoadProcByName<glTextureColorMaskSGISDel>("glTextureColorMaskSGIS", getProcAddress);
            glTextureFoveationParametersQCOMPtr = LoadProcByName<glTextureFoveationParametersQCOMDel>("glTextureFoveationParametersQCOM", getProcAddress);
            glTextureImage1DEXTPtr = LoadProcByName<glTextureImage1DEXTDel>("glTextureImage1DEXT", getProcAddress);
            glTextureImage2DEXTPtr = LoadProcByName<glTextureImage2DEXTDel>("glTextureImage2DEXT", getProcAddress);
            glTextureImage2DMultisampleCoverageNVPtr = LoadProcByName<glTextureImage2DMultisampleCoverageNVDel>("glTextureImage2DMultisampleCoverageNV", getProcAddress);
            glTextureImage2DMultisampleNVPtr = LoadProcByName<glTextureImage2DMultisampleNVDel>("glTextureImage2DMultisampleNV", getProcAddress);
            glTextureImage3DEXTPtr = LoadProcByName<glTextureImage3DEXTDel>("glTextureImage3DEXT", getProcAddress);
            glTextureImage3DMultisampleCoverageNVPtr = LoadProcByName<glTextureImage3DMultisampleCoverageNVDel>("glTextureImage3DMultisampleCoverageNV", getProcAddress);
            glTextureImage3DMultisampleNVPtr = LoadProcByName<glTextureImage3DMultisampleNVDel>("glTextureImage3DMultisampleNV", getProcAddress);
            glTextureLightEXTPtr = LoadProcByName<glTextureLightEXTDel>("glTextureLightEXT", getProcAddress);
            glTextureMaterialEXTPtr = LoadProcByName<glTextureMaterialEXTDel>("glTextureMaterialEXT", getProcAddress);
            glTextureNormalEXTPtr = LoadProcByName<glTextureNormalEXTDel>("glTextureNormalEXT", getProcAddress);
            glTexturePageCommitmentEXTPtr = LoadProcByName<glTexturePageCommitmentEXTDel>("glTexturePageCommitmentEXT", getProcAddress);
            glTextureParameterIivPtr = LoadProcByName<glTextureParameterIivDel>("glTextureParameterIiv", getProcAddress);
            glTextureParameterIivEXTPtr = LoadProcByName<glTextureParameterIivEXTDel>("glTextureParameterIivEXT", getProcAddress);
            glTextureParameterIuivPtr = LoadProcByName<glTextureParameterIuivDel>("glTextureParameterIuiv", getProcAddress);
            glTextureParameterIuivEXTPtr = LoadProcByName<glTextureParameterIuivEXTDel>("glTextureParameterIuivEXT", getProcAddress);
            glTextureParameterfPtr = LoadProcByName<glTextureParameterfDel>("glTextureParameterf", getProcAddress);
            glTextureParameterfEXTPtr = LoadProcByName<glTextureParameterfEXTDel>("glTextureParameterfEXT", getProcAddress);
            glTextureParameterfvPtr = LoadProcByName<glTextureParameterfvDel>("glTextureParameterfv", getProcAddress);
            glTextureParameterfvEXTPtr = LoadProcByName<glTextureParameterfvEXTDel>("glTextureParameterfvEXT", getProcAddress);
            glTextureParameteriPtr = LoadProcByName<glTextureParameteriDel>("glTextureParameteri", getProcAddress);
            glTextureParameteriEXTPtr = LoadProcByName<glTextureParameteriEXTDel>("glTextureParameteriEXT", getProcAddress);
            glTextureParameterivPtr = LoadProcByName<glTextureParameterivDel>("glTextureParameteriv", getProcAddress);
            glTextureParameterivEXTPtr = LoadProcByName<glTextureParameterivEXTDel>("glTextureParameterivEXT", getProcAddress);
            glTextureRangeAPPLEPtr = LoadProcByName<glTextureRangeAPPLEDel>("glTextureRangeAPPLE", getProcAddress);
            glTextureRenderbufferEXTPtr = LoadProcByName<glTextureRenderbufferEXTDel>("glTextureRenderbufferEXT", getProcAddress);
            glTextureStorage1DPtr = LoadProcByName<glTextureStorage1DDel>("glTextureStorage1D", getProcAddress);
            glTextureStorage1DEXTPtr = LoadProcByName<glTextureStorage1DEXTDel>("glTextureStorage1DEXT", getProcAddress);
            glTextureStorage2DPtr = LoadProcByName<glTextureStorage2DDel>("glTextureStorage2D", getProcAddress);
            glTextureStorage2DEXTPtr = LoadProcByName<glTextureStorage2DEXTDel>("glTextureStorage2DEXT", getProcAddress);
            glTextureStorage2DMultisamplePtr = LoadProcByName<glTextureStorage2DMultisampleDel>("glTextureStorage2DMultisample", getProcAddress);
            glTextureStorage2DMultisampleEXTPtr = LoadProcByName<glTextureStorage2DMultisampleEXTDel>("glTextureStorage2DMultisampleEXT", getProcAddress);
            glTextureStorage3DPtr = LoadProcByName<glTextureStorage3DDel>("glTextureStorage3D", getProcAddress);
            glTextureStorage3DEXTPtr = LoadProcByName<glTextureStorage3DEXTDel>("glTextureStorage3DEXT", getProcAddress);
            glTextureStorage3DMultisamplePtr = LoadProcByName<glTextureStorage3DMultisampleDel>("glTextureStorage3DMultisample", getProcAddress);
            glTextureStorage3DMultisampleEXTPtr = LoadProcByName<glTextureStorage3DMultisampleEXTDel>("glTextureStorage3DMultisampleEXT", getProcAddress);
            glTextureStorageMem1DEXTPtr = LoadProcByName<glTextureStorageMem1DEXTDel>("glTextureStorageMem1DEXT", getProcAddress);
            glTextureStorageMem2DEXTPtr = LoadProcByName<glTextureStorageMem2DEXTDel>("glTextureStorageMem2DEXT", getProcAddress);
            glTextureStorageMem2DMultisampleEXTPtr = LoadProcByName<glTextureStorageMem2DMultisampleEXTDel>("glTextureStorageMem2DMultisampleEXT", getProcAddress);
            glTextureStorageMem3DEXTPtr = LoadProcByName<glTextureStorageMem3DEXTDel>("glTextureStorageMem3DEXT", getProcAddress);
            glTextureStorageMem3DMultisampleEXTPtr = LoadProcByName<glTextureStorageMem3DMultisampleEXTDel>("glTextureStorageMem3DMultisampleEXT", getProcAddress);
            glTextureStorageSparseAMDPtr = LoadProcByName<glTextureStorageSparseAMDDel>("glTextureStorageSparseAMD", getProcAddress);
            glTextureSubImage1DPtr = LoadProcByName<glTextureSubImage1DDel>("glTextureSubImage1D", getProcAddress);
            glTextureSubImage1DEXTPtr = LoadProcByName<glTextureSubImage1DEXTDel>("glTextureSubImage1DEXT", getProcAddress);
            glTextureSubImage2DPtr = LoadProcByName<glTextureSubImage2DDel>("glTextureSubImage2D", getProcAddress);
            glTextureSubImage2DEXTPtr = LoadProcByName<glTextureSubImage2DEXTDel>("glTextureSubImage2DEXT", getProcAddress);
            glTextureSubImage3DPtr = LoadProcByName<glTextureSubImage3DDel>("glTextureSubImage3D", getProcAddress);
            glTextureSubImage3DEXTPtr = LoadProcByName<glTextureSubImage3DEXTDel>("glTextureSubImage3DEXT", getProcAddress);
            glTextureViewPtr = LoadProcByName<glTextureViewDel>("glTextureView", getProcAddress);
            glTextureViewEXTPtr = LoadProcByName<glTextureViewEXTDel>("glTextureViewEXT", getProcAddress);
            glTextureViewOESPtr = LoadProcByName<glTextureViewOESDel>("glTextureViewOES", getProcAddress);
            glTrackMatrixNVPtr = LoadProcByName<glTrackMatrixNVDel>("glTrackMatrixNV", getProcAddress);
            glTransformFeedbackAttribsNVPtr = LoadProcByName<glTransformFeedbackAttribsNVDel>("glTransformFeedbackAttribsNV", getProcAddress);
            glTransformFeedbackBufferBasePtr = LoadProcByName<glTransformFeedbackBufferBaseDel>("glTransformFeedbackBufferBase", getProcAddress);
            glTransformFeedbackBufferRangePtr = LoadProcByName<glTransformFeedbackBufferRangeDel>("glTransformFeedbackBufferRange", getProcAddress);
            glTransformFeedbackStreamAttribsNVPtr = LoadProcByName<glTransformFeedbackStreamAttribsNVDel>("glTransformFeedbackStreamAttribsNV", getProcAddress);
            glTransformFeedbackVaryingsPtr = LoadProcByName<glTransformFeedbackVaryingsDel>("glTransformFeedbackVaryings", getProcAddress);
            glTransformFeedbackVaryingsEXTPtr = LoadProcByName<glTransformFeedbackVaryingsEXTDel>("glTransformFeedbackVaryingsEXT", getProcAddress);
            glTransformFeedbackVaryingsNVPtr = LoadProcByName<glTransformFeedbackVaryingsNVDel>("glTransformFeedbackVaryingsNV", getProcAddress);
            glTransformPathNVPtr = LoadProcByName<glTransformPathNVDel>("glTransformPathNV", getProcAddress);
            glTranslatedPtr = LoadProcByName<glTranslatedDel>("glTranslated", getProcAddress);
            glTranslatefPtr = LoadProcByName<glTranslatefDel>("glTranslatef", getProcAddress);
            glTranslatexPtr = LoadProcByName<glTranslatexDel>("glTranslatex", getProcAddress);
            glTranslatexOESPtr = LoadProcByName<glTranslatexOESDel>("glTranslatexOES", getProcAddress);
            glUniform1dPtr = LoadProcByName<glUniform1dDel>("glUniform1d", getProcAddress);
            glUniform1dvPtr = LoadProcByName<glUniform1dvDel>("glUniform1dv", getProcAddress);
            glUniform1fPtr = LoadProcByName<glUniform1fDel>("glUniform1f", getProcAddress);
            glUniform1fARBPtr = LoadProcByName<glUniform1fARBDel>("glUniform1fARB", getProcAddress);
            glUniform1fvPtr = LoadProcByName<glUniform1fvDel>("glUniform1fv", getProcAddress);
            glUniform1fvARBPtr = LoadProcByName<glUniform1fvARBDel>("glUniform1fvARB", getProcAddress);
            glUniform1iPtr = LoadProcByName<glUniform1iDel>("glUniform1i", getProcAddress);
            glUniform1i64ARBPtr = LoadProcByName<glUniform1i64ARBDel>("glUniform1i64ARB", getProcAddress);
            glUniform1i64NVPtr = LoadProcByName<glUniform1i64NVDel>("glUniform1i64NV", getProcAddress);
            glUniform1i64vARBPtr = LoadProcByName<glUniform1i64vARBDel>("glUniform1i64vARB", getProcAddress);
            glUniform1i64vNVPtr = LoadProcByName<glUniform1i64vNVDel>("glUniform1i64vNV", getProcAddress);
            glUniform1iARBPtr = LoadProcByName<glUniform1iARBDel>("glUniform1iARB", getProcAddress);
            glUniform1ivPtr = LoadProcByName<glUniform1ivDel>("glUniform1iv", getProcAddress);
            glUniform1ivARBPtr = LoadProcByName<glUniform1ivARBDel>("glUniform1ivARB", getProcAddress);
            glUniform1uiPtr = LoadProcByName<glUniform1uiDel>("glUniform1ui", getProcAddress);
            glUniform1ui64ARBPtr = LoadProcByName<glUniform1ui64ARBDel>("glUniform1ui64ARB", getProcAddress);
            glUniform1ui64NVPtr = LoadProcByName<glUniform1ui64NVDel>("glUniform1ui64NV", getProcAddress);
            glUniform1ui64vARBPtr = LoadProcByName<glUniform1ui64vARBDel>("glUniform1ui64vARB", getProcAddress);
            glUniform1ui64vNVPtr = LoadProcByName<glUniform1ui64vNVDel>("glUniform1ui64vNV", getProcAddress);
            glUniform1uiEXTPtr = LoadProcByName<glUniform1uiEXTDel>("glUniform1uiEXT", getProcAddress);
            glUniform1uivPtr = LoadProcByName<glUniform1uivDel>("glUniform1uiv", getProcAddress);
            glUniform1uivEXTPtr = LoadProcByName<glUniform1uivEXTDel>("glUniform1uivEXT", getProcAddress);
            glUniform2dPtr = LoadProcByName<glUniform2dDel>("glUniform2d", getProcAddress);
            glUniform2dvPtr = LoadProcByName<glUniform2dvDel>("glUniform2dv", getProcAddress);
            glUniform2fPtr = LoadProcByName<glUniform2fDel>("glUniform2f", getProcAddress);
            glUniform2fARBPtr = LoadProcByName<glUniform2fARBDel>("glUniform2fARB", getProcAddress);
            glUniform2fvPtr = LoadProcByName<glUniform2fvDel>("glUniform2fv", getProcAddress);
            glUniform2fvARBPtr = LoadProcByName<glUniform2fvARBDel>("glUniform2fvARB", getProcAddress);
            glUniform2iPtr = LoadProcByName<glUniform2iDel>("glUniform2i", getProcAddress);
            glUniform2i64ARBPtr = LoadProcByName<glUniform2i64ARBDel>("glUniform2i64ARB", getProcAddress);
            glUniform2i64NVPtr = LoadProcByName<glUniform2i64NVDel>("glUniform2i64NV", getProcAddress);
            glUniform2i64vARBPtr = LoadProcByName<glUniform2i64vARBDel>("glUniform2i64vARB", getProcAddress);
            glUniform2i64vNVPtr = LoadProcByName<glUniform2i64vNVDel>("glUniform2i64vNV", getProcAddress);
            glUniform2iARBPtr = LoadProcByName<glUniform2iARBDel>("glUniform2iARB", getProcAddress);
            glUniform2ivPtr = LoadProcByName<glUniform2ivDel>("glUniform2iv", getProcAddress);
            glUniform2ivARBPtr = LoadProcByName<glUniform2ivARBDel>("glUniform2ivARB", getProcAddress);
            glUniform2uiPtr = LoadProcByName<glUniform2uiDel>("glUniform2ui", getProcAddress);
            glUniform2ui64ARBPtr = LoadProcByName<glUniform2ui64ARBDel>("glUniform2ui64ARB", getProcAddress);
            glUniform2ui64NVPtr = LoadProcByName<glUniform2ui64NVDel>("glUniform2ui64NV", getProcAddress);
            glUniform2ui64vARBPtr = LoadProcByName<glUniform2ui64vARBDel>("glUniform2ui64vARB", getProcAddress);
            glUniform2ui64vNVPtr = LoadProcByName<glUniform2ui64vNVDel>("glUniform2ui64vNV", getProcAddress);
            glUniform2uiEXTPtr = LoadProcByName<glUniform2uiEXTDel>("glUniform2uiEXT", getProcAddress);
            glUniform2uivPtr = LoadProcByName<glUniform2uivDel>("glUniform2uiv", getProcAddress);
            glUniform2uivEXTPtr = LoadProcByName<glUniform2uivEXTDel>("glUniform2uivEXT", getProcAddress);
            glUniform3dPtr = LoadProcByName<glUniform3dDel>("glUniform3d", getProcAddress);
            glUniform3dvPtr = LoadProcByName<glUniform3dvDel>("glUniform3dv", getProcAddress);
            glUniform3fPtr = LoadProcByName<glUniform3fDel>("glUniform3f", getProcAddress);
            glUniform3fARBPtr = LoadProcByName<glUniform3fARBDel>("glUniform3fARB", getProcAddress);
            glUniform3fvPtr = LoadProcByName<glUniform3fvDel>("glUniform3fv", getProcAddress);
            glUniform3fvARBPtr = LoadProcByName<glUniform3fvARBDel>("glUniform3fvARB", getProcAddress);
            glUniform3iPtr = LoadProcByName<glUniform3iDel>("glUniform3i", getProcAddress);
            glUniform3i64ARBPtr = LoadProcByName<glUniform3i64ARBDel>("glUniform3i64ARB", getProcAddress);
            glUniform3i64NVPtr = LoadProcByName<glUniform3i64NVDel>("glUniform3i64NV", getProcAddress);
            glUniform3i64vARBPtr = LoadProcByName<glUniform3i64vARBDel>("glUniform3i64vARB", getProcAddress);
            glUniform3i64vNVPtr = LoadProcByName<glUniform3i64vNVDel>("glUniform3i64vNV", getProcAddress);
            glUniform3iARBPtr = LoadProcByName<glUniform3iARBDel>("glUniform3iARB", getProcAddress);
            glUniform3ivPtr = LoadProcByName<glUniform3ivDel>("glUniform3iv", getProcAddress);
            glUniform3ivARBPtr = LoadProcByName<glUniform3ivARBDel>("glUniform3ivARB", getProcAddress);
            glUniform3uiPtr = LoadProcByName<glUniform3uiDel>("glUniform3ui", getProcAddress);
            glUniform3ui64ARBPtr = LoadProcByName<glUniform3ui64ARBDel>("glUniform3ui64ARB", getProcAddress);
            glUniform3ui64NVPtr = LoadProcByName<glUniform3ui64NVDel>("glUniform3ui64NV", getProcAddress);
            glUniform3ui64vARBPtr = LoadProcByName<glUniform3ui64vARBDel>("glUniform3ui64vARB", getProcAddress);
            glUniform3ui64vNVPtr = LoadProcByName<glUniform3ui64vNVDel>("glUniform3ui64vNV", getProcAddress);
            glUniform3uiEXTPtr = LoadProcByName<glUniform3uiEXTDel>("glUniform3uiEXT", getProcAddress);
            glUniform3uivPtr = LoadProcByName<glUniform3uivDel>("glUniform3uiv", getProcAddress);
            glUniform3uivEXTPtr = LoadProcByName<glUniform3uivEXTDel>("glUniform3uivEXT", getProcAddress);
            glUniform4dPtr = LoadProcByName<glUniform4dDel>("glUniform4d", getProcAddress);
            glUniform4dvPtr = LoadProcByName<glUniform4dvDel>("glUniform4dv", getProcAddress);
            glUniform4fPtr = LoadProcByName<glUniform4fDel>("glUniform4f", getProcAddress);
            glUniform4fARBPtr = LoadProcByName<glUniform4fARBDel>("glUniform4fARB", getProcAddress);
            glUniform4fvPtr = LoadProcByName<glUniform4fvDel>("glUniform4fv", getProcAddress);
            glUniform4fvARBPtr = LoadProcByName<glUniform4fvARBDel>("glUniform4fvARB", getProcAddress);
            glUniform4iPtr = LoadProcByName<glUniform4iDel>("glUniform4i", getProcAddress);
            glUniform4i64ARBPtr = LoadProcByName<glUniform4i64ARBDel>("glUniform4i64ARB", getProcAddress);
            glUniform4i64NVPtr = LoadProcByName<glUniform4i64NVDel>("glUniform4i64NV", getProcAddress);
            glUniform4i64vARBPtr = LoadProcByName<glUniform4i64vARBDel>("glUniform4i64vARB", getProcAddress);
            glUniform4i64vNVPtr = LoadProcByName<glUniform4i64vNVDel>("glUniform4i64vNV", getProcAddress);
            glUniform4iARBPtr = LoadProcByName<glUniform4iARBDel>("glUniform4iARB", getProcAddress);
            glUniform4ivPtr = LoadProcByName<glUniform4ivDel>("glUniform4iv", getProcAddress);
            glUniform4ivARBPtr = LoadProcByName<glUniform4ivARBDel>("glUniform4ivARB", getProcAddress);
            glUniform4uiPtr = LoadProcByName<glUniform4uiDel>("glUniform4ui", getProcAddress);
            glUniform4ui64ARBPtr = LoadProcByName<glUniform4ui64ARBDel>("glUniform4ui64ARB", getProcAddress);
            glUniform4ui64NVPtr = LoadProcByName<glUniform4ui64NVDel>("glUniform4ui64NV", getProcAddress);
            glUniform4ui64vARBPtr = LoadProcByName<glUniform4ui64vARBDel>("glUniform4ui64vARB", getProcAddress);
            glUniform4ui64vNVPtr = LoadProcByName<glUniform4ui64vNVDel>("glUniform4ui64vNV", getProcAddress);
            glUniform4uiEXTPtr = LoadProcByName<glUniform4uiEXTDel>("glUniform4uiEXT", getProcAddress);
            glUniform4uivPtr = LoadProcByName<glUniform4uivDel>("glUniform4uiv", getProcAddress);
            glUniform4uivEXTPtr = LoadProcByName<glUniform4uivEXTDel>("glUniform4uivEXT", getProcAddress);
            glUniformBlockBindingPtr = LoadProcByName<glUniformBlockBindingDel>("glUniformBlockBinding", getProcAddress);
            glUniformBufferEXTPtr = LoadProcByName<glUniformBufferEXTDel>("glUniformBufferEXT", getProcAddress);
            glUniformHandleui64ARBPtr = LoadProcByName<glUniformHandleui64ARBDel>("glUniformHandleui64ARB", getProcAddress);
            glUniformHandleui64IMGPtr = LoadProcByName<glUniformHandleui64IMGDel>("glUniformHandleui64IMG", getProcAddress);
            glUniformHandleui64NVPtr = LoadProcByName<glUniformHandleui64NVDel>("glUniformHandleui64NV", getProcAddress);
            glUniformHandleui64vARBPtr = LoadProcByName<glUniformHandleui64vARBDel>("glUniformHandleui64vARB", getProcAddress);
            glUniformHandleui64vIMGPtr = LoadProcByName<glUniformHandleui64vIMGDel>("glUniformHandleui64vIMG", getProcAddress);
            glUniformHandleui64vNVPtr = LoadProcByName<glUniformHandleui64vNVDel>("glUniformHandleui64vNV", getProcAddress);
            glUniformMatrix2dvPtr = LoadProcByName<glUniformMatrix2dvDel>("glUniformMatrix2dv", getProcAddress);
            glUniformMatrix2fvPtr = LoadProcByName<glUniformMatrix2fvDel>("glUniformMatrix2fv", getProcAddress);
            glUniformMatrix2fvARBPtr = LoadProcByName<glUniformMatrix2fvARBDel>("glUniformMatrix2fvARB", getProcAddress);
            glUniformMatrix2x3dvPtr = LoadProcByName<glUniformMatrix2x3dvDel>("glUniformMatrix2x3dv", getProcAddress);
            glUniformMatrix2x3fvPtr = LoadProcByName<glUniformMatrix2x3fvDel>("glUniformMatrix2x3fv", getProcAddress);
            glUniformMatrix2x3fvNVPtr = LoadProcByName<glUniformMatrix2x3fvNVDel>("glUniformMatrix2x3fvNV", getProcAddress);
            glUniformMatrix2x4dvPtr = LoadProcByName<glUniformMatrix2x4dvDel>("glUniformMatrix2x4dv", getProcAddress);
            glUniformMatrix2x4fvPtr = LoadProcByName<glUniformMatrix2x4fvDel>("glUniformMatrix2x4fv", getProcAddress);
            glUniformMatrix2x4fvNVPtr = LoadProcByName<glUniformMatrix2x4fvNVDel>("glUniformMatrix2x4fvNV", getProcAddress);
            glUniformMatrix3dvPtr = LoadProcByName<glUniformMatrix3dvDel>("glUniformMatrix3dv", getProcAddress);
            glUniformMatrix3fvPtr = LoadProcByName<glUniformMatrix3fvDel>("glUniformMatrix3fv", getProcAddress);
            glUniformMatrix3fvARBPtr = LoadProcByName<glUniformMatrix3fvARBDel>("glUniformMatrix3fvARB", getProcAddress);
            glUniformMatrix3x2dvPtr = LoadProcByName<glUniformMatrix3x2dvDel>("glUniformMatrix3x2dv", getProcAddress);
            glUniformMatrix3x2fvPtr = LoadProcByName<glUniformMatrix3x2fvDel>("glUniformMatrix3x2fv", getProcAddress);
            glUniformMatrix3x2fvNVPtr = LoadProcByName<glUniformMatrix3x2fvNVDel>("glUniformMatrix3x2fvNV", getProcAddress);
            glUniformMatrix3x4dvPtr = LoadProcByName<glUniformMatrix3x4dvDel>("glUniformMatrix3x4dv", getProcAddress);
            glUniformMatrix3x4fvPtr = LoadProcByName<glUniformMatrix3x4fvDel>("glUniformMatrix3x4fv", getProcAddress);
            glUniformMatrix3x4fvNVPtr = LoadProcByName<glUniformMatrix3x4fvNVDel>("glUniformMatrix3x4fvNV", getProcAddress);
            glUniformMatrix4dvPtr = LoadProcByName<glUniformMatrix4dvDel>("glUniformMatrix4dv", getProcAddress);
            glUniformMatrix4fvPtr = LoadProcByName<glUniformMatrix4fvDel>("glUniformMatrix4fv", getProcAddress);
            glUniformMatrix4fvARBPtr = LoadProcByName<glUniformMatrix4fvARBDel>("glUniformMatrix4fvARB", getProcAddress);
            glUniformMatrix4x2dvPtr = LoadProcByName<glUniformMatrix4x2dvDel>("glUniformMatrix4x2dv", getProcAddress);
            glUniformMatrix4x2fvPtr = LoadProcByName<glUniformMatrix4x2fvDel>("glUniformMatrix4x2fv", getProcAddress);
            glUniformMatrix4x2fvNVPtr = LoadProcByName<glUniformMatrix4x2fvNVDel>("glUniformMatrix4x2fvNV", getProcAddress);
            glUniformMatrix4x3dvPtr = LoadProcByName<glUniformMatrix4x3dvDel>("glUniformMatrix4x3dv", getProcAddress);
            glUniformMatrix4x3fvPtr = LoadProcByName<glUniformMatrix4x3fvDel>("glUniformMatrix4x3fv", getProcAddress);
            glUniformMatrix4x3fvNVPtr = LoadProcByName<glUniformMatrix4x3fvNVDel>("glUniformMatrix4x3fvNV", getProcAddress);
            glUniformSubroutinesuivPtr = LoadProcByName<glUniformSubroutinesuivDel>("glUniformSubroutinesuiv", getProcAddress);
            glUniformui64NVPtr = LoadProcByName<glUniformui64NVDel>("glUniformui64NV", getProcAddress);
            glUniformui64vNVPtr = LoadProcByName<glUniformui64vNVDel>("glUniformui64vNV", getProcAddress);
            glUnlockArraysEXTPtr = LoadProcByName<glUnlockArraysEXTDel>("glUnlockArraysEXT", getProcAddress);
            glUnmapBufferPtr = LoadProcByName<glUnmapBufferDel>("glUnmapBuffer", getProcAddress);
            glUnmapBufferARBPtr = LoadProcByName<glUnmapBufferARBDel>("glUnmapBufferARB", getProcAddress);
            glUnmapBufferOESPtr = LoadProcByName<glUnmapBufferOESDel>("glUnmapBufferOES", getProcAddress);
            glUnmapNamedBufferPtr = LoadProcByName<glUnmapNamedBufferDel>("glUnmapNamedBuffer", getProcAddress);
            glUnmapNamedBufferEXTPtr = LoadProcByName<glUnmapNamedBufferEXTDel>("glUnmapNamedBufferEXT", getProcAddress);
            glUnmapObjectBufferATIPtr = LoadProcByName<glUnmapObjectBufferATIDel>("glUnmapObjectBufferATI", getProcAddress);
            glUnmapTexture2DINTELPtr = LoadProcByName<glUnmapTexture2DINTELDel>("glUnmapTexture2DINTEL", getProcAddress);
            glUpdateObjectBufferATIPtr = LoadProcByName<glUpdateObjectBufferATIDel>("glUpdateObjectBufferATI", getProcAddress);
            glUploadGpuMaskNVXPtr = LoadProcByName<glUploadGpuMaskNVXDel>("glUploadGpuMaskNVX", getProcAddress);
            glUseProgramPtr = LoadProcByName<glUseProgramDel>("glUseProgram", getProcAddress);
            glUseProgramObjectARBPtr = LoadProcByName<glUseProgramObjectARBDel>("glUseProgramObjectARB", getProcAddress);
            glUseProgramStagesPtr = LoadProcByName<glUseProgramStagesDel>("glUseProgramStages", getProcAddress);
            glUseProgramStagesEXTPtr = LoadProcByName<glUseProgramStagesEXTDel>("glUseProgramStagesEXT", getProcAddress);
            glUseShaderProgramEXTPtr = LoadProcByName<glUseShaderProgramEXTDel>("glUseShaderProgramEXT", getProcAddress);
            glVDPAUFiniNVPtr = LoadProcByName<glVDPAUFiniNVDel>("glVDPAUFiniNV", getProcAddress);
            glVDPAUGetSurfaceivNVPtr = LoadProcByName<glVDPAUGetSurfaceivNVDel>("glVDPAUGetSurfaceivNV", getProcAddress);
            glVDPAUInitNVPtr = LoadProcByName<glVDPAUInitNVDel>("glVDPAUInitNV", getProcAddress);
            glVDPAUIsSurfaceNVPtr = LoadProcByName<glVDPAUIsSurfaceNVDel>("glVDPAUIsSurfaceNV", getProcAddress);
            glVDPAUMapSurfacesNVPtr = LoadProcByName<glVDPAUMapSurfacesNVDel>("glVDPAUMapSurfacesNV", getProcAddress);
            glVDPAURegisterOutputSurfaceNVPtr = LoadProcByName<glVDPAURegisterOutputSurfaceNVDel>("glVDPAURegisterOutputSurfaceNV", getProcAddress);
            glVDPAURegisterVideoSurfaceNVPtr = LoadProcByName<glVDPAURegisterVideoSurfaceNVDel>("glVDPAURegisterVideoSurfaceNV", getProcAddress);
            glVDPAURegisterVideoSurfaceWithPictureStructureNVPtr = LoadProcByName<glVDPAURegisterVideoSurfaceWithPictureStructureNVDel>("glVDPAURegisterVideoSurfaceWithPictureStructureNV", getProcAddress);
            glVDPAUSurfaceAccessNVPtr = LoadProcByName<glVDPAUSurfaceAccessNVDel>("glVDPAUSurfaceAccessNV", getProcAddress);
            glVDPAUUnmapSurfacesNVPtr = LoadProcByName<glVDPAUUnmapSurfacesNVDel>("glVDPAUUnmapSurfacesNV", getProcAddress);
            glVDPAUUnregisterSurfaceNVPtr = LoadProcByName<glVDPAUUnregisterSurfaceNVDel>("glVDPAUUnregisterSurfaceNV", getProcAddress);
            glValidateProgramPtr = LoadProcByName<glValidateProgramDel>("glValidateProgram", getProcAddress);
            glValidateProgramARBPtr = LoadProcByName<glValidateProgramARBDel>("glValidateProgramARB", getProcAddress);
            glValidateProgramPipelinePtr = LoadProcByName<glValidateProgramPipelineDel>("glValidateProgramPipeline", getProcAddress);
            glValidateProgramPipelineEXTPtr = LoadProcByName<glValidateProgramPipelineEXTDel>("glValidateProgramPipelineEXT", getProcAddress);
            glVariantArrayObjectATIPtr = LoadProcByName<glVariantArrayObjectATIDel>("glVariantArrayObjectATI", getProcAddress);
            glVariantPointerEXTPtr = LoadProcByName<glVariantPointerEXTDel>("glVariantPointerEXT", getProcAddress);
            glVariantbvEXTPtr = LoadProcByName<glVariantbvEXTDel>("glVariantbvEXT", getProcAddress);
            glVariantdvEXTPtr = LoadProcByName<glVariantdvEXTDel>("glVariantdvEXT", getProcAddress);
            glVariantfvEXTPtr = LoadProcByName<glVariantfvEXTDel>("glVariantfvEXT", getProcAddress);
            glVariantivEXTPtr = LoadProcByName<glVariantivEXTDel>("glVariantivEXT", getProcAddress);
            glVariantsvEXTPtr = LoadProcByName<glVariantsvEXTDel>("glVariantsvEXT", getProcAddress);
            glVariantubvEXTPtr = LoadProcByName<glVariantubvEXTDel>("glVariantubvEXT", getProcAddress);
            glVariantuivEXTPtr = LoadProcByName<glVariantuivEXTDel>("glVariantuivEXT", getProcAddress);
            glVariantusvEXTPtr = LoadProcByName<glVariantusvEXTDel>("glVariantusvEXT", getProcAddress);
            glVertex2bOESPtr = LoadProcByName<glVertex2bOESDel>("glVertex2bOES", getProcAddress);
            glVertex2bvOESPtr = LoadProcByName<glVertex2bvOESDel>("glVertex2bvOES", getProcAddress);
            glVertex2dPtr = LoadProcByName<glVertex2dDel>("glVertex2d", getProcAddress);
            glVertex2dvPtr = LoadProcByName<glVertex2dvDel>("glVertex2dv", getProcAddress);
            glVertex2fPtr = LoadProcByName<glVertex2fDel>("glVertex2f", getProcAddress);
            glVertex2fvPtr = LoadProcByName<glVertex2fvDel>("glVertex2fv", getProcAddress);
            glVertex2hNVPtr = LoadProcByName<glVertex2hNVDel>("glVertex2hNV", getProcAddress);
            glVertex2hvNVPtr = LoadProcByName<glVertex2hvNVDel>("glVertex2hvNV", getProcAddress);
            glVertex2iPtr = LoadProcByName<glVertex2iDel>("glVertex2i", getProcAddress);
            glVertex2ivPtr = LoadProcByName<glVertex2ivDel>("glVertex2iv", getProcAddress);
            glVertex2sPtr = LoadProcByName<glVertex2sDel>("glVertex2s", getProcAddress);
            glVertex2svPtr = LoadProcByName<glVertex2svDel>("glVertex2sv", getProcAddress);
            glVertex2xOESPtr = LoadProcByName<glVertex2xOESDel>("glVertex2xOES", getProcAddress);
            glVertex2xvOESPtr = LoadProcByName<glVertex2xvOESDel>("glVertex2xvOES", getProcAddress);
            glVertex3bOESPtr = LoadProcByName<glVertex3bOESDel>("glVertex3bOES", getProcAddress);
            glVertex3bvOESPtr = LoadProcByName<glVertex3bvOESDel>("glVertex3bvOES", getProcAddress);
            glVertex3dPtr = LoadProcByName<glVertex3dDel>("glVertex3d", getProcAddress);
            glVertex3dvPtr = LoadProcByName<glVertex3dvDel>("glVertex3dv", getProcAddress);
            glVertex3fPtr = LoadProcByName<glVertex3fDel>("glVertex3f", getProcAddress);
            glVertex3fvPtr = LoadProcByName<glVertex3fvDel>("glVertex3fv", getProcAddress);
            glVertex3hNVPtr = LoadProcByName<glVertex3hNVDel>("glVertex3hNV", getProcAddress);
            glVertex3hvNVPtr = LoadProcByName<glVertex3hvNVDel>("glVertex3hvNV", getProcAddress);
            glVertex3iPtr = LoadProcByName<glVertex3iDel>("glVertex3i", getProcAddress);
            glVertex3ivPtr = LoadProcByName<glVertex3ivDel>("glVertex3iv", getProcAddress);
            glVertex3sPtr = LoadProcByName<glVertex3sDel>("glVertex3s", getProcAddress);
            glVertex3svPtr = LoadProcByName<glVertex3svDel>("glVertex3sv", getProcAddress);
            glVertex3xOESPtr = LoadProcByName<glVertex3xOESDel>("glVertex3xOES", getProcAddress);
            glVertex3xvOESPtr = LoadProcByName<glVertex3xvOESDel>("glVertex3xvOES", getProcAddress);
            glVertex4bOESPtr = LoadProcByName<glVertex4bOESDel>("glVertex4bOES", getProcAddress);
            glVertex4bvOESPtr = LoadProcByName<glVertex4bvOESDel>("glVertex4bvOES", getProcAddress);
            glVertex4dPtr = LoadProcByName<glVertex4dDel>("glVertex4d", getProcAddress);
            glVertex4dvPtr = LoadProcByName<glVertex4dvDel>("glVertex4dv", getProcAddress);
            glVertex4fPtr = LoadProcByName<glVertex4fDel>("glVertex4f", getProcAddress);
            glVertex4fvPtr = LoadProcByName<glVertex4fvDel>("glVertex4fv", getProcAddress);
            glVertex4hNVPtr = LoadProcByName<glVertex4hNVDel>("glVertex4hNV", getProcAddress);
            glVertex4hvNVPtr = LoadProcByName<glVertex4hvNVDel>("glVertex4hvNV", getProcAddress);
            glVertex4iPtr = LoadProcByName<glVertex4iDel>("glVertex4i", getProcAddress);
            glVertex4ivPtr = LoadProcByName<glVertex4ivDel>("glVertex4iv", getProcAddress);
            glVertex4sPtr = LoadProcByName<glVertex4sDel>("glVertex4s", getProcAddress);
            glVertex4svPtr = LoadProcByName<glVertex4svDel>("glVertex4sv", getProcAddress);
            glVertex4xOESPtr = LoadProcByName<glVertex4xOESDel>("glVertex4xOES", getProcAddress);
            glVertex4xvOESPtr = LoadProcByName<glVertex4xvOESDel>("glVertex4xvOES", getProcAddress);
            glVertexArrayAttribBindingPtr = LoadProcByName<glVertexArrayAttribBindingDel>("glVertexArrayAttribBinding", getProcAddress);
            glVertexArrayAttribFormatPtr = LoadProcByName<glVertexArrayAttribFormatDel>("glVertexArrayAttribFormat", getProcAddress);
            glVertexArrayAttribIFormatPtr = LoadProcByName<glVertexArrayAttribIFormatDel>("glVertexArrayAttribIFormat", getProcAddress);
            glVertexArrayAttribLFormatPtr = LoadProcByName<glVertexArrayAttribLFormatDel>("glVertexArrayAttribLFormat", getProcAddress);
            glVertexArrayBindVertexBufferEXTPtr = LoadProcByName<glVertexArrayBindVertexBufferEXTDel>("glVertexArrayBindVertexBufferEXT", getProcAddress);
            glVertexArrayBindingDivisorPtr = LoadProcByName<glVertexArrayBindingDivisorDel>("glVertexArrayBindingDivisor", getProcAddress);
            glVertexArrayColorOffsetEXTPtr = LoadProcByName<glVertexArrayColorOffsetEXTDel>("glVertexArrayColorOffsetEXT", getProcAddress);
            glVertexArrayEdgeFlagOffsetEXTPtr = LoadProcByName<glVertexArrayEdgeFlagOffsetEXTDel>("glVertexArrayEdgeFlagOffsetEXT", getProcAddress);
            glVertexArrayElementBufferPtr = LoadProcByName<glVertexArrayElementBufferDel>("glVertexArrayElementBuffer", getProcAddress);
            glVertexArrayFogCoordOffsetEXTPtr = LoadProcByName<glVertexArrayFogCoordOffsetEXTDel>("glVertexArrayFogCoordOffsetEXT", getProcAddress);
            glVertexArrayIndexOffsetEXTPtr = LoadProcByName<glVertexArrayIndexOffsetEXTDel>("glVertexArrayIndexOffsetEXT", getProcAddress);
            glVertexArrayMultiTexCoordOffsetEXTPtr = LoadProcByName<glVertexArrayMultiTexCoordOffsetEXTDel>("glVertexArrayMultiTexCoordOffsetEXT", getProcAddress);
            glVertexArrayNormalOffsetEXTPtr = LoadProcByName<glVertexArrayNormalOffsetEXTDel>("glVertexArrayNormalOffsetEXT", getProcAddress);
            glVertexArrayParameteriAPPLEPtr = LoadProcByName<glVertexArrayParameteriAPPLEDel>("glVertexArrayParameteriAPPLE", getProcAddress);
            glVertexArrayRangeAPPLEPtr = LoadProcByName<glVertexArrayRangeAPPLEDel>("glVertexArrayRangeAPPLE", getProcAddress);
            glVertexArrayRangeNVPtr = LoadProcByName<glVertexArrayRangeNVDel>("glVertexArrayRangeNV", getProcAddress);
            glVertexArraySecondaryColorOffsetEXTPtr = LoadProcByName<glVertexArraySecondaryColorOffsetEXTDel>("glVertexArraySecondaryColorOffsetEXT", getProcAddress);
            glVertexArrayTexCoordOffsetEXTPtr = LoadProcByName<glVertexArrayTexCoordOffsetEXTDel>("glVertexArrayTexCoordOffsetEXT", getProcAddress);
            glVertexArrayVertexAttribBindingEXTPtr = LoadProcByName<glVertexArrayVertexAttribBindingEXTDel>("glVertexArrayVertexAttribBindingEXT", getProcAddress);
            glVertexArrayVertexAttribDivisorEXTPtr = LoadProcByName<glVertexArrayVertexAttribDivisorEXTDel>("glVertexArrayVertexAttribDivisorEXT", getProcAddress);
            glVertexArrayVertexAttribFormatEXTPtr = LoadProcByName<glVertexArrayVertexAttribFormatEXTDel>("glVertexArrayVertexAttribFormatEXT", getProcAddress);
            glVertexArrayVertexAttribIFormatEXTPtr = LoadProcByName<glVertexArrayVertexAttribIFormatEXTDel>("glVertexArrayVertexAttribIFormatEXT", getProcAddress);
            glVertexArrayVertexAttribIOffsetEXTPtr = LoadProcByName<glVertexArrayVertexAttribIOffsetEXTDel>("glVertexArrayVertexAttribIOffsetEXT", getProcAddress);
            glVertexArrayVertexAttribLFormatEXTPtr = LoadProcByName<glVertexArrayVertexAttribLFormatEXTDel>("glVertexArrayVertexAttribLFormatEXT", getProcAddress);
            glVertexArrayVertexAttribLOffsetEXTPtr = LoadProcByName<glVertexArrayVertexAttribLOffsetEXTDel>("glVertexArrayVertexAttribLOffsetEXT", getProcAddress);
            glVertexArrayVertexAttribOffsetEXTPtr = LoadProcByName<glVertexArrayVertexAttribOffsetEXTDel>("glVertexArrayVertexAttribOffsetEXT", getProcAddress);
            glVertexArrayVertexBindingDivisorEXTPtr = LoadProcByName<glVertexArrayVertexBindingDivisorEXTDel>("glVertexArrayVertexBindingDivisorEXT", getProcAddress);
            glVertexArrayVertexBufferPtr = LoadProcByName<glVertexArrayVertexBufferDel>("glVertexArrayVertexBuffer", getProcAddress);
            glVertexArrayVertexBuffersPtr = LoadProcByName<glVertexArrayVertexBuffersDel>("glVertexArrayVertexBuffers", getProcAddress);
            glVertexArrayVertexOffsetEXTPtr = LoadProcByName<glVertexArrayVertexOffsetEXTDel>("glVertexArrayVertexOffsetEXT", getProcAddress);
            glVertexAttrib1dPtr = LoadProcByName<glVertexAttrib1dDel>("glVertexAttrib1d", getProcAddress);
            glVertexAttrib1dARBPtr = LoadProcByName<glVertexAttrib1dARBDel>("glVertexAttrib1dARB", getProcAddress);
            glVertexAttrib1dNVPtr = LoadProcByName<glVertexAttrib1dNVDel>("glVertexAttrib1dNV", getProcAddress);
            glVertexAttrib1dvPtr = LoadProcByName<glVertexAttrib1dvDel>("glVertexAttrib1dv", getProcAddress);
            glVertexAttrib1dvARBPtr = LoadProcByName<glVertexAttrib1dvARBDel>("glVertexAttrib1dvARB", getProcAddress);
            glVertexAttrib1dvNVPtr = LoadProcByName<glVertexAttrib1dvNVDel>("glVertexAttrib1dvNV", getProcAddress);
            glVertexAttrib1fPtr = LoadProcByName<glVertexAttrib1fDel>("glVertexAttrib1f", getProcAddress);
            glVertexAttrib1fARBPtr = LoadProcByName<glVertexAttrib1fARBDel>("glVertexAttrib1fARB", getProcAddress);
            glVertexAttrib1fNVPtr = LoadProcByName<glVertexAttrib1fNVDel>("glVertexAttrib1fNV", getProcAddress);
            glVertexAttrib1fvPtr = LoadProcByName<glVertexAttrib1fvDel>("glVertexAttrib1fv", getProcAddress);
            glVertexAttrib1fvARBPtr = LoadProcByName<glVertexAttrib1fvARBDel>("glVertexAttrib1fvARB", getProcAddress);
            glVertexAttrib1fvNVPtr = LoadProcByName<glVertexAttrib1fvNVDel>("glVertexAttrib1fvNV", getProcAddress);
            glVertexAttrib1hNVPtr = LoadProcByName<glVertexAttrib1hNVDel>("glVertexAttrib1hNV", getProcAddress);
            glVertexAttrib1hvNVPtr = LoadProcByName<glVertexAttrib1hvNVDel>("glVertexAttrib1hvNV", getProcAddress);
            glVertexAttrib1sPtr = LoadProcByName<glVertexAttrib1sDel>("glVertexAttrib1s", getProcAddress);
            glVertexAttrib1sARBPtr = LoadProcByName<glVertexAttrib1sARBDel>("glVertexAttrib1sARB", getProcAddress);
            glVertexAttrib1sNVPtr = LoadProcByName<glVertexAttrib1sNVDel>("glVertexAttrib1sNV", getProcAddress);
            glVertexAttrib1svPtr = LoadProcByName<glVertexAttrib1svDel>("glVertexAttrib1sv", getProcAddress);
            glVertexAttrib1svARBPtr = LoadProcByName<glVertexAttrib1svARBDel>("glVertexAttrib1svARB", getProcAddress);
            glVertexAttrib1svNVPtr = LoadProcByName<glVertexAttrib1svNVDel>("glVertexAttrib1svNV", getProcAddress);
            glVertexAttrib2dPtr = LoadProcByName<glVertexAttrib2dDel>("glVertexAttrib2d", getProcAddress);
            glVertexAttrib2dARBPtr = LoadProcByName<glVertexAttrib2dARBDel>("glVertexAttrib2dARB", getProcAddress);
            glVertexAttrib2dNVPtr = LoadProcByName<glVertexAttrib2dNVDel>("glVertexAttrib2dNV", getProcAddress);
            glVertexAttrib2dvPtr = LoadProcByName<glVertexAttrib2dvDel>("glVertexAttrib2dv", getProcAddress);
            glVertexAttrib2dvARBPtr = LoadProcByName<glVertexAttrib2dvARBDel>("glVertexAttrib2dvARB", getProcAddress);
            glVertexAttrib2dvNVPtr = LoadProcByName<glVertexAttrib2dvNVDel>("glVertexAttrib2dvNV", getProcAddress);
            glVertexAttrib2fPtr = LoadProcByName<glVertexAttrib2fDel>("glVertexAttrib2f", getProcAddress);
            glVertexAttrib2fARBPtr = LoadProcByName<glVertexAttrib2fARBDel>("glVertexAttrib2fARB", getProcAddress);
            glVertexAttrib2fNVPtr = LoadProcByName<glVertexAttrib2fNVDel>("glVertexAttrib2fNV", getProcAddress);
            glVertexAttrib2fvPtr = LoadProcByName<glVertexAttrib2fvDel>("glVertexAttrib2fv", getProcAddress);
            glVertexAttrib2fvARBPtr = LoadProcByName<glVertexAttrib2fvARBDel>("glVertexAttrib2fvARB", getProcAddress);
            glVertexAttrib2fvNVPtr = LoadProcByName<glVertexAttrib2fvNVDel>("glVertexAttrib2fvNV", getProcAddress);
            glVertexAttrib2hNVPtr = LoadProcByName<glVertexAttrib2hNVDel>("glVertexAttrib2hNV", getProcAddress);
            glVertexAttrib2hvNVPtr = LoadProcByName<glVertexAttrib2hvNVDel>("glVertexAttrib2hvNV", getProcAddress);
            glVertexAttrib2sPtr = LoadProcByName<glVertexAttrib2sDel>("glVertexAttrib2s", getProcAddress);
            glVertexAttrib2sARBPtr = LoadProcByName<glVertexAttrib2sARBDel>("glVertexAttrib2sARB", getProcAddress);
            glVertexAttrib2sNVPtr = LoadProcByName<glVertexAttrib2sNVDel>("glVertexAttrib2sNV", getProcAddress);
            glVertexAttrib2svPtr = LoadProcByName<glVertexAttrib2svDel>("glVertexAttrib2sv", getProcAddress);
            glVertexAttrib2svARBPtr = LoadProcByName<glVertexAttrib2svARBDel>("glVertexAttrib2svARB", getProcAddress);
            glVertexAttrib2svNVPtr = LoadProcByName<glVertexAttrib2svNVDel>("glVertexAttrib2svNV", getProcAddress);
            glVertexAttrib3dPtr = LoadProcByName<glVertexAttrib3dDel>("glVertexAttrib3d", getProcAddress);
            glVertexAttrib3dARBPtr = LoadProcByName<glVertexAttrib3dARBDel>("glVertexAttrib3dARB", getProcAddress);
            glVertexAttrib3dNVPtr = LoadProcByName<glVertexAttrib3dNVDel>("glVertexAttrib3dNV", getProcAddress);
            glVertexAttrib3dvPtr = LoadProcByName<glVertexAttrib3dvDel>("glVertexAttrib3dv", getProcAddress);
            glVertexAttrib3dvARBPtr = LoadProcByName<glVertexAttrib3dvARBDel>("glVertexAttrib3dvARB", getProcAddress);
            glVertexAttrib3dvNVPtr = LoadProcByName<glVertexAttrib3dvNVDel>("glVertexAttrib3dvNV", getProcAddress);
            glVertexAttrib3fPtr = LoadProcByName<glVertexAttrib3fDel>("glVertexAttrib3f", getProcAddress);
            glVertexAttrib3fARBPtr = LoadProcByName<glVertexAttrib3fARBDel>("glVertexAttrib3fARB", getProcAddress);
            glVertexAttrib3fNVPtr = LoadProcByName<glVertexAttrib3fNVDel>("glVertexAttrib3fNV", getProcAddress);
            glVertexAttrib3fvPtr = LoadProcByName<glVertexAttrib3fvDel>("glVertexAttrib3fv", getProcAddress);
            glVertexAttrib3fvARBPtr = LoadProcByName<glVertexAttrib3fvARBDel>("glVertexAttrib3fvARB", getProcAddress);
            glVertexAttrib3fvNVPtr = LoadProcByName<glVertexAttrib3fvNVDel>("glVertexAttrib3fvNV", getProcAddress);
            glVertexAttrib3hNVPtr = LoadProcByName<glVertexAttrib3hNVDel>("glVertexAttrib3hNV", getProcAddress);
            glVertexAttrib3hvNVPtr = LoadProcByName<glVertexAttrib3hvNVDel>("glVertexAttrib3hvNV", getProcAddress);
            glVertexAttrib3sPtr = LoadProcByName<glVertexAttrib3sDel>("glVertexAttrib3s", getProcAddress);
            glVertexAttrib3sARBPtr = LoadProcByName<glVertexAttrib3sARBDel>("glVertexAttrib3sARB", getProcAddress);
            glVertexAttrib3sNVPtr = LoadProcByName<glVertexAttrib3sNVDel>("glVertexAttrib3sNV", getProcAddress);
            glVertexAttrib3svPtr = LoadProcByName<glVertexAttrib3svDel>("glVertexAttrib3sv", getProcAddress);
            glVertexAttrib3svARBPtr = LoadProcByName<glVertexAttrib3svARBDel>("glVertexAttrib3svARB", getProcAddress);
            glVertexAttrib3svNVPtr = LoadProcByName<glVertexAttrib3svNVDel>("glVertexAttrib3svNV", getProcAddress);
            glVertexAttrib4NbvPtr = LoadProcByName<glVertexAttrib4NbvDel>("glVertexAttrib4Nbv", getProcAddress);
            glVertexAttrib4NbvARBPtr = LoadProcByName<glVertexAttrib4NbvARBDel>("glVertexAttrib4NbvARB", getProcAddress);
            glVertexAttrib4NivPtr = LoadProcByName<glVertexAttrib4NivDel>("glVertexAttrib4Niv", getProcAddress);
            glVertexAttrib4NivARBPtr = LoadProcByName<glVertexAttrib4NivARBDel>("glVertexAttrib4NivARB", getProcAddress);
            glVertexAttrib4NsvPtr = LoadProcByName<glVertexAttrib4NsvDel>("glVertexAttrib4Nsv", getProcAddress);
            glVertexAttrib4NsvARBPtr = LoadProcByName<glVertexAttrib4NsvARBDel>("glVertexAttrib4NsvARB", getProcAddress);
            glVertexAttrib4NubPtr = LoadProcByName<glVertexAttrib4NubDel>("glVertexAttrib4Nub", getProcAddress);
            glVertexAttrib4NubARBPtr = LoadProcByName<glVertexAttrib4NubARBDel>("glVertexAttrib4NubARB", getProcAddress);
            glVertexAttrib4NubvPtr = LoadProcByName<glVertexAttrib4NubvDel>("glVertexAttrib4Nubv", getProcAddress);
            glVertexAttrib4NubvARBPtr = LoadProcByName<glVertexAttrib4NubvARBDel>("glVertexAttrib4NubvARB", getProcAddress);
            glVertexAttrib4NuivPtr = LoadProcByName<glVertexAttrib4NuivDel>("glVertexAttrib4Nuiv", getProcAddress);
            glVertexAttrib4NuivARBPtr = LoadProcByName<glVertexAttrib4NuivARBDel>("glVertexAttrib4NuivARB", getProcAddress);
            glVertexAttrib4NusvPtr = LoadProcByName<glVertexAttrib4NusvDel>("glVertexAttrib4Nusv", getProcAddress);
            glVertexAttrib4NusvARBPtr = LoadProcByName<glVertexAttrib4NusvARBDel>("glVertexAttrib4NusvARB", getProcAddress);
            glVertexAttrib4bvPtr = LoadProcByName<glVertexAttrib4bvDel>("glVertexAttrib4bv", getProcAddress);
            glVertexAttrib4bvARBPtr = LoadProcByName<glVertexAttrib4bvARBDel>("glVertexAttrib4bvARB", getProcAddress);
            glVertexAttrib4dPtr = LoadProcByName<glVertexAttrib4dDel>("glVertexAttrib4d", getProcAddress);
            glVertexAttrib4dARBPtr = LoadProcByName<glVertexAttrib4dARBDel>("glVertexAttrib4dARB", getProcAddress);
            glVertexAttrib4dNVPtr = LoadProcByName<glVertexAttrib4dNVDel>("glVertexAttrib4dNV", getProcAddress);
            glVertexAttrib4dvPtr = LoadProcByName<glVertexAttrib4dvDel>("glVertexAttrib4dv", getProcAddress);
            glVertexAttrib4dvARBPtr = LoadProcByName<glVertexAttrib4dvARBDel>("glVertexAttrib4dvARB", getProcAddress);
            glVertexAttrib4dvNVPtr = LoadProcByName<glVertexAttrib4dvNVDel>("glVertexAttrib4dvNV", getProcAddress);
            glVertexAttrib4fPtr = LoadProcByName<glVertexAttrib4fDel>("glVertexAttrib4f", getProcAddress);
            glVertexAttrib4fARBPtr = LoadProcByName<glVertexAttrib4fARBDel>("glVertexAttrib4fARB", getProcAddress);
            glVertexAttrib4fNVPtr = LoadProcByName<glVertexAttrib4fNVDel>("glVertexAttrib4fNV", getProcAddress);
            glVertexAttrib4fvPtr = LoadProcByName<glVertexAttrib4fvDel>("glVertexAttrib4fv", getProcAddress);
            glVertexAttrib4fvARBPtr = LoadProcByName<glVertexAttrib4fvARBDel>("glVertexAttrib4fvARB", getProcAddress);
            glVertexAttrib4fvNVPtr = LoadProcByName<glVertexAttrib4fvNVDel>("glVertexAttrib4fvNV", getProcAddress);
            glVertexAttrib4hNVPtr = LoadProcByName<glVertexAttrib4hNVDel>("glVertexAttrib4hNV", getProcAddress);
            glVertexAttrib4hvNVPtr = LoadProcByName<glVertexAttrib4hvNVDel>("glVertexAttrib4hvNV", getProcAddress);
            glVertexAttrib4ivPtr = LoadProcByName<glVertexAttrib4ivDel>("glVertexAttrib4iv", getProcAddress);
            glVertexAttrib4ivARBPtr = LoadProcByName<glVertexAttrib4ivARBDel>("glVertexAttrib4ivARB", getProcAddress);
            glVertexAttrib4sPtr = LoadProcByName<glVertexAttrib4sDel>("glVertexAttrib4s", getProcAddress);
            glVertexAttrib4sARBPtr = LoadProcByName<glVertexAttrib4sARBDel>("glVertexAttrib4sARB", getProcAddress);
            glVertexAttrib4sNVPtr = LoadProcByName<glVertexAttrib4sNVDel>("glVertexAttrib4sNV", getProcAddress);
            glVertexAttrib4svPtr = LoadProcByName<glVertexAttrib4svDel>("glVertexAttrib4sv", getProcAddress);
            glVertexAttrib4svARBPtr = LoadProcByName<glVertexAttrib4svARBDel>("glVertexAttrib4svARB", getProcAddress);
            glVertexAttrib4svNVPtr = LoadProcByName<glVertexAttrib4svNVDel>("glVertexAttrib4svNV", getProcAddress);
            glVertexAttrib4ubNVPtr = LoadProcByName<glVertexAttrib4ubNVDel>("glVertexAttrib4ubNV", getProcAddress);
            glVertexAttrib4ubvPtr = LoadProcByName<glVertexAttrib4ubvDel>("glVertexAttrib4ubv", getProcAddress);
            glVertexAttrib4ubvARBPtr = LoadProcByName<glVertexAttrib4ubvARBDel>("glVertexAttrib4ubvARB", getProcAddress);
            glVertexAttrib4ubvNVPtr = LoadProcByName<glVertexAttrib4ubvNVDel>("glVertexAttrib4ubvNV", getProcAddress);
            glVertexAttrib4uivPtr = LoadProcByName<glVertexAttrib4uivDel>("glVertexAttrib4uiv", getProcAddress);
            glVertexAttrib4uivARBPtr = LoadProcByName<glVertexAttrib4uivARBDel>("glVertexAttrib4uivARB", getProcAddress);
            glVertexAttrib4usvPtr = LoadProcByName<glVertexAttrib4usvDel>("glVertexAttrib4usv", getProcAddress);
            glVertexAttrib4usvARBPtr = LoadProcByName<glVertexAttrib4usvARBDel>("glVertexAttrib4usvARB", getProcAddress);
            glVertexAttribArrayObjectATIPtr = LoadProcByName<glVertexAttribArrayObjectATIDel>("glVertexAttribArrayObjectATI", getProcAddress);
            glVertexAttribBindingPtr = LoadProcByName<glVertexAttribBindingDel>("glVertexAttribBinding", getProcAddress);
            glVertexAttribDivisorPtr = LoadProcByName<glVertexAttribDivisorDel>("glVertexAttribDivisor", getProcAddress);
            glVertexAttribDivisorANGLEPtr = LoadProcByName<glVertexAttribDivisorANGLEDel>("glVertexAttribDivisorANGLE", getProcAddress);
            glVertexAttribDivisorARBPtr = LoadProcByName<glVertexAttribDivisorARBDel>("glVertexAttribDivisorARB", getProcAddress);
            glVertexAttribDivisorEXTPtr = LoadProcByName<glVertexAttribDivisorEXTDel>("glVertexAttribDivisorEXT", getProcAddress);
            glVertexAttribDivisorNVPtr = LoadProcByName<glVertexAttribDivisorNVDel>("glVertexAttribDivisorNV", getProcAddress);
            glVertexAttribFormatPtr = LoadProcByName<glVertexAttribFormatDel>("glVertexAttribFormat", getProcAddress);
            glVertexAttribFormatNVPtr = LoadProcByName<glVertexAttribFormatNVDel>("glVertexAttribFormatNV", getProcAddress);
            glVertexAttribI1iPtr = LoadProcByName<glVertexAttribI1iDel>("glVertexAttribI1i", getProcAddress);
            glVertexAttribI1iEXTPtr = LoadProcByName<glVertexAttribI1iEXTDel>("glVertexAttribI1iEXT", getProcAddress);
            glVertexAttribI1ivPtr = LoadProcByName<glVertexAttribI1ivDel>("glVertexAttribI1iv", getProcAddress);
            glVertexAttribI1ivEXTPtr = LoadProcByName<glVertexAttribI1ivEXTDel>("glVertexAttribI1ivEXT", getProcAddress);
            glVertexAttribI1uiPtr = LoadProcByName<glVertexAttribI1uiDel>("glVertexAttribI1ui", getProcAddress);
            glVertexAttribI1uiEXTPtr = LoadProcByName<glVertexAttribI1uiEXTDel>("glVertexAttribI1uiEXT", getProcAddress);
            glVertexAttribI1uivPtr = LoadProcByName<glVertexAttribI1uivDel>("glVertexAttribI1uiv", getProcAddress);
            glVertexAttribI1uivEXTPtr = LoadProcByName<glVertexAttribI1uivEXTDel>("glVertexAttribI1uivEXT", getProcAddress);
            glVertexAttribI2iPtr = LoadProcByName<glVertexAttribI2iDel>("glVertexAttribI2i", getProcAddress);
            glVertexAttribI2iEXTPtr = LoadProcByName<glVertexAttribI2iEXTDel>("glVertexAttribI2iEXT", getProcAddress);
            glVertexAttribI2ivPtr = LoadProcByName<glVertexAttribI2ivDel>("glVertexAttribI2iv", getProcAddress);
            glVertexAttribI2ivEXTPtr = LoadProcByName<glVertexAttribI2ivEXTDel>("glVertexAttribI2ivEXT", getProcAddress);
            glVertexAttribI2uiPtr = LoadProcByName<glVertexAttribI2uiDel>("glVertexAttribI2ui", getProcAddress);
            glVertexAttribI2uiEXTPtr = LoadProcByName<glVertexAttribI2uiEXTDel>("glVertexAttribI2uiEXT", getProcAddress);
            glVertexAttribI2uivPtr = LoadProcByName<glVertexAttribI2uivDel>("glVertexAttribI2uiv", getProcAddress);
            glVertexAttribI2uivEXTPtr = LoadProcByName<glVertexAttribI2uivEXTDel>("glVertexAttribI2uivEXT", getProcAddress);
            glVertexAttribI3iPtr = LoadProcByName<glVertexAttribI3iDel>("glVertexAttribI3i", getProcAddress);
            glVertexAttribI3iEXTPtr = LoadProcByName<glVertexAttribI3iEXTDel>("glVertexAttribI3iEXT", getProcAddress);
            glVertexAttribI3ivPtr = LoadProcByName<glVertexAttribI3ivDel>("glVertexAttribI3iv", getProcAddress);
            glVertexAttribI3ivEXTPtr = LoadProcByName<glVertexAttribI3ivEXTDel>("glVertexAttribI3ivEXT", getProcAddress);
            glVertexAttribI3uiPtr = LoadProcByName<glVertexAttribI3uiDel>("glVertexAttribI3ui", getProcAddress);
            glVertexAttribI3uiEXTPtr = LoadProcByName<glVertexAttribI3uiEXTDel>("glVertexAttribI3uiEXT", getProcAddress);
            glVertexAttribI3uivPtr = LoadProcByName<glVertexAttribI3uivDel>("glVertexAttribI3uiv", getProcAddress);
            glVertexAttribI3uivEXTPtr = LoadProcByName<glVertexAttribI3uivEXTDel>("glVertexAttribI3uivEXT", getProcAddress);
            glVertexAttribI4bvPtr = LoadProcByName<glVertexAttribI4bvDel>("glVertexAttribI4bv", getProcAddress);
            glVertexAttribI4bvEXTPtr = LoadProcByName<glVertexAttribI4bvEXTDel>("glVertexAttribI4bvEXT", getProcAddress);
            glVertexAttribI4iPtr = LoadProcByName<glVertexAttribI4iDel>("glVertexAttribI4i", getProcAddress);
            glVertexAttribI4iEXTPtr = LoadProcByName<glVertexAttribI4iEXTDel>("glVertexAttribI4iEXT", getProcAddress);
            glVertexAttribI4ivPtr = LoadProcByName<glVertexAttribI4ivDel>("glVertexAttribI4iv", getProcAddress);
            glVertexAttribI4ivEXTPtr = LoadProcByName<glVertexAttribI4ivEXTDel>("glVertexAttribI4ivEXT", getProcAddress);
            glVertexAttribI4svPtr = LoadProcByName<glVertexAttribI4svDel>("glVertexAttribI4sv", getProcAddress);
            glVertexAttribI4svEXTPtr = LoadProcByName<glVertexAttribI4svEXTDel>("glVertexAttribI4svEXT", getProcAddress);
            glVertexAttribI4ubvPtr = LoadProcByName<glVertexAttribI4ubvDel>("glVertexAttribI4ubv", getProcAddress);
            glVertexAttribI4ubvEXTPtr = LoadProcByName<glVertexAttribI4ubvEXTDel>("glVertexAttribI4ubvEXT", getProcAddress);
            glVertexAttribI4uiPtr = LoadProcByName<glVertexAttribI4uiDel>("glVertexAttribI4ui", getProcAddress);
            glVertexAttribI4uiEXTPtr = LoadProcByName<glVertexAttribI4uiEXTDel>("glVertexAttribI4uiEXT", getProcAddress);
            glVertexAttribI4uivPtr = LoadProcByName<glVertexAttribI4uivDel>("glVertexAttribI4uiv", getProcAddress);
            glVertexAttribI4uivEXTPtr = LoadProcByName<glVertexAttribI4uivEXTDel>("glVertexAttribI4uivEXT", getProcAddress);
            glVertexAttribI4usvPtr = LoadProcByName<glVertexAttribI4usvDel>("glVertexAttribI4usv", getProcAddress);
            glVertexAttribI4usvEXTPtr = LoadProcByName<glVertexAttribI4usvEXTDel>("glVertexAttribI4usvEXT", getProcAddress);
            glVertexAttribIFormatPtr = LoadProcByName<glVertexAttribIFormatDel>("glVertexAttribIFormat", getProcAddress);
            glVertexAttribIFormatNVPtr = LoadProcByName<glVertexAttribIFormatNVDel>("glVertexAttribIFormatNV", getProcAddress);
            glVertexAttribIPointerPtr = LoadProcByName<glVertexAttribIPointerDel>("glVertexAttribIPointer", getProcAddress);
            glVertexAttribIPointerEXTPtr = LoadProcByName<glVertexAttribIPointerEXTDel>("glVertexAttribIPointerEXT", getProcAddress);
            glVertexAttribL1dPtr = LoadProcByName<glVertexAttribL1dDel>("glVertexAttribL1d", getProcAddress);
            glVertexAttribL1dEXTPtr = LoadProcByName<glVertexAttribL1dEXTDel>("glVertexAttribL1dEXT", getProcAddress);
            glVertexAttribL1dvPtr = LoadProcByName<glVertexAttribL1dvDel>("glVertexAttribL1dv", getProcAddress);
            glVertexAttribL1dvEXTPtr = LoadProcByName<glVertexAttribL1dvEXTDel>("glVertexAttribL1dvEXT", getProcAddress);
            glVertexAttribL1i64NVPtr = LoadProcByName<glVertexAttribL1i64NVDel>("glVertexAttribL1i64NV", getProcAddress);
            glVertexAttribL1i64vNVPtr = LoadProcByName<glVertexAttribL1i64vNVDel>("glVertexAttribL1i64vNV", getProcAddress);
            glVertexAttribL1ui64ARBPtr = LoadProcByName<glVertexAttribL1ui64ARBDel>("glVertexAttribL1ui64ARB", getProcAddress);
            glVertexAttribL1ui64NVPtr = LoadProcByName<glVertexAttribL1ui64NVDel>("glVertexAttribL1ui64NV", getProcAddress);
            glVertexAttribL1ui64vARBPtr = LoadProcByName<glVertexAttribL1ui64vARBDel>("glVertexAttribL1ui64vARB", getProcAddress);
            glVertexAttribL1ui64vNVPtr = LoadProcByName<glVertexAttribL1ui64vNVDel>("glVertexAttribL1ui64vNV", getProcAddress);
            glVertexAttribL2dPtr = LoadProcByName<glVertexAttribL2dDel>("glVertexAttribL2d", getProcAddress);
            glVertexAttribL2dEXTPtr = LoadProcByName<glVertexAttribL2dEXTDel>("glVertexAttribL2dEXT", getProcAddress);
            glVertexAttribL2dvPtr = LoadProcByName<glVertexAttribL2dvDel>("glVertexAttribL2dv", getProcAddress);
            glVertexAttribL2dvEXTPtr = LoadProcByName<glVertexAttribL2dvEXTDel>("glVertexAttribL2dvEXT", getProcAddress);
            glVertexAttribL2i64NVPtr = LoadProcByName<glVertexAttribL2i64NVDel>("glVertexAttribL2i64NV", getProcAddress);
            glVertexAttribL2i64vNVPtr = LoadProcByName<glVertexAttribL2i64vNVDel>("glVertexAttribL2i64vNV", getProcAddress);
            glVertexAttribL2ui64NVPtr = LoadProcByName<glVertexAttribL2ui64NVDel>("glVertexAttribL2ui64NV", getProcAddress);
            glVertexAttribL2ui64vNVPtr = LoadProcByName<glVertexAttribL2ui64vNVDel>("glVertexAttribL2ui64vNV", getProcAddress);
            glVertexAttribL3dPtr = LoadProcByName<glVertexAttribL3dDel>("glVertexAttribL3d", getProcAddress);
            glVertexAttribL3dEXTPtr = LoadProcByName<glVertexAttribL3dEXTDel>("glVertexAttribL3dEXT", getProcAddress);
            glVertexAttribL3dvPtr = LoadProcByName<glVertexAttribL3dvDel>("glVertexAttribL3dv", getProcAddress);
            glVertexAttribL3dvEXTPtr = LoadProcByName<glVertexAttribL3dvEXTDel>("glVertexAttribL3dvEXT", getProcAddress);
            glVertexAttribL3i64NVPtr = LoadProcByName<glVertexAttribL3i64NVDel>("glVertexAttribL3i64NV", getProcAddress);
            glVertexAttribL3i64vNVPtr = LoadProcByName<glVertexAttribL3i64vNVDel>("glVertexAttribL3i64vNV", getProcAddress);
            glVertexAttribL3ui64NVPtr = LoadProcByName<glVertexAttribL3ui64NVDel>("glVertexAttribL3ui64NV", getProcAddress);
            glVertexAttribL3ui64vNVPtr = LoadProcByName<glVertexAttribL3ui64vNVDel>("glVertexAttribL3ui64vNV", getProcAddress);
            glVertexAttribL4dPtr = LoadProcByName<glVertexAttribL4dDel>("glVertexAttribL4d", getProcAddress);
            glVertexAttribL4dEXTPtr = LoadProcByName<glVertexAttribL4dEXTDel>("glVertexAttribL4dEXT", getProcAddress);
            glVertexAttribL4dvPtr = LoadProcByName<glVertexAttribL4dvDel>("glVertexAttribL4dv", getProcAddress);
            glVertexAttribL4dvEXTPtr = LoadProcByName<glVertexAttribL4dvEXTDel>("glVertexAttribL4dvEXT", getProcAddress);
            glVertexAttribL4i64NVPtr = LoadProcByName<glVertexAttribL4i64NVDel>("glVertexAttribL4i64NV", getProcAddress);
            glVertexAttribL4i64vNVPtr = LoadProcByName<glVertexAttribL4i64vNVDel>("glVertexAttribL4i64vNV", getProcAddress);
            glVertexAttribL4ui64NVPtr = LoadProcByName<glVertexAttribL4ui64NVDel>("glVertexAttribL4ui64NV", getProcAddress);
            glVertexAttribL4ui64vNVPtr = LoadProcByName<glVertexAttribL4ui64vNVDel>("glVertexAttribL4ui64vNV", getProcAddress);
            glVertexAttribLFormatPtr = LoadProcByName<glVertexAttribLFormatDel>("glVertexAttribLFormat", getProcAddress);
            glVertexAttribLFormatNVPtr = LoadProcByName<glVertexAttribLFormatNVDel>("glVertexAttribLFormatNV", getProcAddress);
            glVertexAttribLPointerPtr = LoadProcByName<glVertexAttribLPointerDel>("glVertexAttribLPointer", getProcAddress);
            glVertexAttribLPointerEXTPtr = LoadProcByName<glVertexAttribLPointerEXTDel>("glVertexAttribLPointerEXT", getProcAddress);
            glVertexAttribP1uiPtr = LoadProcByName<glVertexAttribP1uiDel>("glVertexAttribP1ui", getProcAddress);
            glVertexAttribP1uivPtr = LoadProcByName<glVertexAttribP1uivDel>("glVertexAttribP1uiv", getProcAddress);
            glVertexAttribP2uiPtr = LoadProcByName<glVertexAttribP2uiDel>("glVertexAttribP2ui", getProcAddress);
            glVertexAttribP2uivPtr = LoadProcByName<glVertexAttribP2uivDel>("glVertexAttribP2uiv", getProcAddress);
            glVertexAttribP3uiPtr = LoadProcByName<glVertexAttribP3uiDel>("glVertexAttribP3ui", getProcAddress);
            glVertexAttribP3uivPtr = LoadProcByName<glVertexAttribP3uivDel>("glVertexAttribP3uiv", getProcAddress);
            glVertexAttribP4uiPtr = LoadProcByName<glVertexAttribP4uiDel>("glVertexAttribP4ui", getProcAddress);
            glVertexAttribP4uivPtr = LoadProcByName<glVertexAttribP4uivDel>("glVertexAttribP4uiv", getProcAddress);
            glVertexAttribParameteriAMDPtr = LoadProcByName<glVertexAttribParameteriAMDDel>("glVertexAttribParameteriAMD", getProcAddress);
            glVertexAttribPointerPtr = LoadProcByName<glVertexAttribPointerDel>("glVertexAttribPointer", getProcAddress);
            glVertexAttribPointerARBPtr = LoadProcByName<glVertexAttribPointerARBDel>("glVertexAttribPointerARB", getProcAddress);
            glVertexAttribPointerNVPtr = LoadProcByName<glVertexAttribPointerNVDel>("glVertexAttribPointerNV", getProcAddress);
            glVertexAttribs1dvNVPtr = LoadProcByName<glVertexAttribs1dvNVDel>("glVertexAttribs1dvNV", getProcAddress);
            glVertexAttribs1fvNVPtr = LoadProcByName<glVertexAttribs1fvNVDel>("glVertexAttribs1fvNV", getProcAddress);
            glVertexAttribs1hvNVPtr = LoadProcByName<glVertexAttribs1hvNVDel>("glVertexAttribs1hvNV", getProcAddress);
            glVertexAttribs1svNVPtr = LoadProcByName<glVertexAttribs1svNVDel>("glVertexAttribs1svNV", getProcAddress);
            glVertexAttribs2dvNVPtr = LoadProcByName<glVertexAttribs2dvNVDel>("glVertexAttribs2dvNV", getProcAddress);
            glVertexAttribs2fvNVPtr = LoadProcByName<glVertexAttribs2fvNVDel>("glVertexAttribs2fvNV", getProcAddress);
            glVertexAttribs2hvNVPtr = LoadProcByName<glVertexAttribs2hvNVDel>("glVertexAttribs2hvNV", getProcAddress);
            glVertexAttribs2svNVPtr = LoadProcByName<glVertexAttribs2svNVDel>("glVertexAttribs2svNV", getProcAddress);
            glVertexAttribs3dvNVPtr = LoadProcByName<glVertexAttribs3dvNVDel>("glVertexAttribs3dvNV", getProcAddress);
            glVertexAttribs3fvNVPtr = LoadProcByName<glVertexAttribs3fvNVDel>("glVertexAttribs3fvNV", getProcAddress);
            glVertexAttribs3hvNVPtr = LoadProcByName<glVertexAttribs3hvNVDel>("glVertexAttribs3hvNV", getProcAddress);
            glVertexAttribs3svNVPtr = LoadProcByName<glVertexAttribs3svNVDel>("glVertexAttribs3svNV", getProcAddress);
            glVertexAttribs4dvNVPtr = LoadProcByName<glVertexAttribs4dvNVDel>("glVertexAttribs4dvNV", getProcAddress);
            glVertexAttribs4fvNVPtr = LoadProcByName<glVertexAttribs4fvNVDel>("glVertexAttribs4fvNV", getProcAddress);
            glVertexAttribs4hvNVPtr = LoadProcByName<glVertexAttribs4hvNVDel>("glVertexAttribs4hvNV", getProcAddress);
            glVertexAttribs4svNVPtr = LoadProcByName<glVertexAttribs4svNVDel>("glVertexAttribs4svNV", getProcAddress);
            glVertexAttribs4ubvNVPtr = LoadProcByName<glVertexAttribs4ubvNVDel>("glVertexAttribs4ubvNV", getProcAddress);
            glVertexBindingDivisorPtr = LoadProcByName<glVertexBindingDivisorDel>("glVertexBindingDivisor", getProcAddress);
            glVertexBlendARBPtr = LoadProcByName<glVertexBlendARBDel>("glVertexBlendARB", getProcAddress);
            glVertexBlendEnvfATIPtr = LoadProcByName<glVertexBlendEnvfATIDel>("glVertexBlendEnvfATI", getProcAddress);
            glVertexBlendEnviATIPtr = LoadProcByName<glVertexBlendEnviATIDel>("glVertexBlendEnviATI", getProcAddress);
            glVertexFormatNVPtr = LoadProcByName<glVertexFormatNVDel>("glVertexFormatNV", getProcAddress);
            glVertexP2uiPtr = LoadProcByName<glVertexP2uiDel>("glVertexP2ui", getProcAddress);
            glVertexP2uivPtr = LoadProcByName<glVertexP2uivDel>("glVertexP2uiv", getProcAddress);
            glVertexP3uiPtr = LoadProcByName<glVertexP3uiDel>("glVertexP3ui", getProcAddress);
            glVertexP3uivPtr = LoadProcByName<glVertexP3uivDel>("glVertexP3uiv", getProcAddress);
            glVertexP4uiPtr = LoadProcByName<glVertexP4uiDel>("glVertexP4ui", getProcAddress);
            glVertexP4uivPtr = LoadProcByName<glVertexP4uivDel>("glVertexP4uiv", getProcAddress);
            glVertexPointerPtr = LoadProcByName<glVertexPointerDel>("glVertexPointer", getProcAddress);
            glVertexPointerEXTPtr = LoadProcByName<glVertexPointerEXTDel>("glVertexPointerEXT", getProcAddress);
            glVertexPointerListIBMPtr = LoadProcByName<glVertexPointerListIBMDel>("glVertexPointerListIBM", getProcAddress);
            glVertexPointervINTELPtr = LoadProcByName<glVertexPointervINTELDel>("glVertexPointervINTEL", getProcAddress);
            glVertexStream1dATIPtr = LoadProcByName<glVertexStream1dATIDel>("glVertexStream1dATI", getProcAddress);
            glVertexStream1dvATIPtr = LoadProcByName<glVertexStream1dvATIDel>("glVertexStream1dvATI", getProcAddress);
            glVertexStream1fATIPtr = LoadProcByName<glVertexStream1fATIDel>("glVertexStream1fATI", getProcAddress);
            glVertexStream1fvATIPtr = LoadProcByName<glVertexStream1fvATIDel>("glVertexStream1fvATI", getProcAddress);
            glVertexStream1iATIPtr = LoadProcByName<glVertexStream1iATIDel>("glVertexStream1iATI", getProcAddress);
            glVertexStream1ivATIPtr = LoadProcByName<glVertexStream1ivATIDel>("glVertexStream1ivATI", getProcAddress);
            glVertexStream1sATIPtr = LoadProcByName<glVertexStream1sATIDel>("glVertexStream1sATI", getProcAddress);
            glVertexStream1svATIPtr = LoadProcByName<glVertexStream1svATIDel>("glVertexStream1svATI", getProcAddress);
            glVertexStream2dATIPtr = LoadProcByName<glVertexStream2dATIDel>("glVertexStream2dATI", getProcAddress);
            glVertexStream2dvATIPtr = LoadProcByName<glVertexStream2dvATIDel>("glVertexStream2dvATI", getProcAddress);
            glVertexStream2fATIPtr = LoadProcByName<glVertexStream2fATIDel>("glVertexStream2fATI", getProcAddress);
            glVertexStream2fvATIPtr = LoadProcByName<glVertexStream2fvATIDel>("glVertexStream2fvATI", getProcAddress);
            glVertexStream2iATIPtr = LoadProcByName<glVertexStream2iATIDel>("glVertexStream2iATI", getProcAddress);
            glVertexStream2ivATIPtr = LoadProcByName<glVertexStream2ivATIDel>("glVertexStream2ivATI", getProcAddress);
            glVertexStream2sATIPtr = LoadProcByName<glVertexStream2sATIDel>("glVertexStream2sATI", getProcAddress);
            glVertexStream2svATIPtr = LoadProcByName<glVertexStream2svATIDel>("glVertexStream2svATI", getProcAddress);
            glVertexStream3dATIPtr = LoadProcByName<glVertexStream3dATIDel>("glVertexStream3dATI", getProcAddress);
            glVertexStream3dvATIPtr = LoadProcByName<glVertexStream3dvATIDel>("glVertexStream3dvATI", getProcAddress);
            glVertexStream3fATIPtr = LoadProcByName<glVertexStream3fATIDel>("glVertexStream3fATI", getProcAddress);
            glVertexStream3fvATIPtr = LoadProcByName<glVertexStream3fvATIDel>("glVertexStream3fvATI", getProcAddress);
            glVertexStream3iATIPtr = LoadProcByName<glVertexStream3iATIDel>("glVertexStream3iATI", getProcAddress);
            glVertexStream3ivATIPtr = LoadProcByName<glVertexStream3ivATIDel>("glVertexStream3ivATI", getProcAddress);
            glVertexStream3sATIPtr = LoadProcByName<glVertexStream3sATIDel>("glVertexStream3sATI", getProcAddress);
            glVertexStream3svATIPtr = LoadProcByName<glVertexStream3svATIDel>("glVertexStream3svATI", getProcAddress);
            glVertexStream4dATIPtr = LoadProcByName<glVertexStream4dATIDel>("glVertexStream4dATI", getProcAddress);
            glVertexStream4dvATIPtr = LoadProcByName<glVertexStream4dvATIDel>("glVertexStream4dvATI", getProcAddress);
            glVertexStream4fATIPtr = LoadProcByName<glVertexStream4fATIDel>("glVertexStream4fATI", getProcAddress);
            glVertexStream4fvATIPtr = LoadProcByName<glVertexStream4fvATIDel>("glVertexStream4fvATI", getProcAddress);
            glVertexStream4iATIPtr = LoadProcByName<glVertexStream4iATIDel>("glVertexStream4iATI", getProcAddress);
            glVertexStream4ivATIPtr = LoadProcByName<glVertexStream4ivATIDel>("glVertexStream4ivATI", getProcAddress);
            glVertexStream4sATIPtr = LoadProcByName<glVertexStream4sATIDel>("glVertexStream4sATI", getProcAddress);
            glVertexStream4svATIPtr = LoadProcByName<glVertexStream4svATIDel>("glVertexStream4svATI", getProcAddress);
            glVertexWeightPointerEXTPtr = LoadProcByName<glVertexWeightPointerEXTDel>("glVertexWeightPointerEXT", getProcAddress);
            glVertexWeightfEXTPtr = LoadProcByName<glVertexWeightfEXTDel>("glVertexWeightfEXT", getProcAddress);
            glVertexWeightfvEXTPtr = LoadProcByName<glVertexWeightfvEXTDel>("glVertexWeightfvEXT", getProcAddress);
            glVertexWeighthNVPtr = LoadProcByName<glVertexWeighthNVDel>("glVertexWeighthNV", getProcAddress);
            glVertexWeighthvNVPtr = LoadProcByName<glVertexWeighthvNVDel>("glVertexWeighthvNV", getProcAddress);
            glVideoCaptureNVPtr = LoadProcByName<glVideoCaptureNVDel>("glVideoCaptureNV", getProcAddress);
            glVideoCaptureStreamParameterdvNVPtr = LoadProcByName<glVideoCaptureStreamParameterdvNVDel>("glVideoCaptureStreamParameterdvNV", getProcAddress);
            glVideoCaptureStreamParameterfvNVPtr = LoadProcByName<glVideoCaptureStreamParameterfvNVDel>("glVideoCaptureStreamParameterfvNV", getProcAddress);
            glVideoCaptureStreamParameterivNVPtr = LoadProcByName<glVideoCaptureStreamParameterivNVDel>("glVideoCaptureStreamParameterivNV", getProcAddress);
            glViewportPtr = LoadProcByName<glViewportDel>("glViewport", getProcAddress);
            glViewportArrayvPtr = LoadProcByName<glViewportArrayvDel>("glViewportArrayv", getProcAddress);
            glViewportArrayvNVPtr = LoadProcByName<glViewportArrayvNVDel>("glViewportArrayvNV", getProcAddress);
            glViewportArrayvOESPtr = LoadProcByName<glViewportArrayvOESDel>("glViewportArrayvOES", getProcAddress);
            glViewportIndexedfPtr = LoadProcByName<glViewportIndexedfDel>("glViewportIndexedf", getProcAddress);
            glViewportIndexedfOESPtr = LoadProcByName<glViewportIndexedfOESDel>("glViewportIndexedfOES", getProcAddress);
            glViewportIndexedfNVPtr = LoadProcByName<glViewportIndexedfNVDel>("glViewportIndexedfNV", getProcAddress);
            glViewportIndexedfvPtr = LoadProcByName<glViewportIndexedfvDel>("glViewportIndexedfv", getProcAddress);
            glViewportIndexedfvOESPtr = LoadProcByName<glViewportIndexedfvOESDel>("glViewportIndexedfvOES", getProcAddress);
            glViewportIndexedfvNVPtr = LoadProcByName<glViewportIndexedfvNVDel>("glViewportIndexedfvNV", getProcAddress);
            glViewportPositionWScaleNVPtr = LoadProcByName<glViewportPositionWScaleNVDel>("glViewportPositionWScaleNV", getProcAddress);
            glViewportSwizzleNVPtr = LoadProcByName<glViewportSwizzleNVDel>("glViewportSwizzleNV", getProcAddress);
            glWaitSemaphoreEXTPtr = LoadProcByName<glWaitSemaphoreEXTDel>("glWaitSemaphoreEXT", getProcAddress);
            glWaitSemaphoreui64NVXPtr = LoadProcByName<glWaitSemaphoreui64NVXDel>("glWaitSemaphoreui64NVX", getProcAddress);
            glWaitSyncPtr = LoadProcByName<glWaitSyncDel>("glWaitSync", getProcAddress);
            glWaitSyncAPPLEPtr = LoadProcByName<glWaitSyncAPPLEDel>("glWaitSyncAPPLE", getProcAddress);
            glWeightPathsNVPtr = LoadProcByName<glWeightPathsNVDel>("glWeightPathsNV", getProcAddress);
            glWeightPointerARBPtr = LoadProcByName<glWeightPointerARBDel>("glWeightPointerARB", getProcAddress);
            glWeightPointerOESPtr = LoadProcByName<glWeightPointerOESDel>("glWeightPointerOES", getProcAddress);
            glWeightbvARBPtr = LoadProcByName<glWeightbvARBDel>("glWeightbvARB", getProcAddress);
            glWeightdvARBPtr = LoadProcByName<glWeightdvARBDel>("glWeightdvARB", getProcAddress);
            glWeightfvARBPtr = LoadProcByName<glWeightfvARBDel>("glWeightfvARB", getProcAddress);
            glWeightivARBPtr = LoadProcByName<glWeightivARBDel>("glWeightivARB", getProcAddress);
            glWeightsvARBPtr = LoadProcByName<glWeightsvARBDel>("glWeightsvARB", getProcAddress);
            glWeightubvARBPtr = LoadProcByName<glWeightubvARBDel>("glWeightubvARB", getProcAddress);
            glWeightuivARBPtr = LoadProcByName<glWeightuivARBDel>("glWeightuivARB", getProcAddress);
            glWeightusvARBPtr = LoadProcByName<glWeightusvARBDel>("glWeightusvARB", getProcAddress);
            glWindowPos2dPtr = LoadProcByName<glWindowPos2dDel>("glWindowPos2d", getProcAddress);
            glWindowPos2dARBPtr = LoadProcByName<glWindowPos2dARBDel>("glWindowPos2dARB", getProcAddress);
            glWindowPos2dMESAPtr = LoadProcByName<glWindowPos2dMESADel>("glWindowPos2dMESA", getProcAddress);
            glWindowPos2dvPtr = LoadProcByName<glWindowPos2dvDel>("glWindowPos2dv", getProcAddress);
            glWindowPos2dvARBPtr = LoadProcByName<glWindowPos2dvARBDel>("glWindowPos2dvARB", getProcAddress);
            glWindowPos2dvMESAPtr = LoadProcByName<glWindowPos2dvMESADel>("glWindowPos2dvMESA", getProcAddress);
            glWindowPos2fPtr = LoadProcByName<glWindowPos2fDel>("glWindowPos2f", getProcAddress);
            glWindowPos2fARBPtr = LoadProcByName<glWindowPos2fARBDel>("glWindowPos2fARB", getProcAddress);
            glWindowPos2fMESAPtr = LoadProcByName<glWindowPos2fMESADel>("glWindowPos2fMESA", getProcAddress);
            glWindowPos2fvPtr = LoadProcByName<glWindowPos2fvDel>("glWindowPos2fv", getProcAddress);
            glWindowPos2fvARBPtr = LoadProcByName<glWindowPos2fvARBDel>("glWindowPos2fvARB", getProcAddress);
            glWindowPos2fvMESAPtr = LoadProcByName<glWindowPos2fvMESADel>("glWindowPos2fvMESA", getProcAddress);
            glWindowPos2iPtr = LoadProcByName<glWindowPos2iDel>("glWindowPos2i", getProcAddress);
            glWindowPos2iARBPtr = LoadProcByName<glWindowPos2iARBDel>("glWindowPos2iARB", getProcAddress);
            glWindowPos2iMESAPtr = LoadProcByName<glWindowPos2iMESADel>("glWindowPos2iMESA", getProcAddress);
            glWindowPos2ivPtr = LoadProcByName<glWindowPos2ivDel>("glWindowPos2iv", getProcAddress);
            glWindowPos2ivARBPtr = LoadProcByName<glWindowPos2ivARBDel>("glWindowPos2ivARB", getProcAddress);
            glWindowPos2ivMESAPtr = LoadProcByName<glWindowPos2ivMESADel>("glWindowPos2ivMESA", getProcAddress);
            glWindowPos2sPtr = LoadProcByName<glWindowPos2sDel>("glWindowPos2s", getProcAddress);
            glWindowPos2sARBPtr = LoadProcByName<glWindowPos2sARBDel>("glWindowPos2sARB", getProcAddress);
            glWindowPos2sMESAPtr = LoadProcByName<glWindowPos2sMESADel>("glWindowPos2sMESA", getProcAddress);
            glWindowPos2svPtr = LoadProcByName<glWindowPos2svDel>("glWindowPos2sv", getProcAddress);
            glWindowPos2svARBPtr = LoadProcByName<glWindowPos2svARBDel>("glWindowPos2svARB", getProcAddress);
            glWindowPos2svMESAPtr = LoadProcByName<glWindowPos2svMESADel>("glWindowPos2svMESA", getProcAddress);
            glWindowPos3dPtr = LoadProcByName<glWindowPos3dDel>("glWindowPos3d", getProcAddress);
            glWindowPos3dARBPtr = LoadProcByName<glWindowPos3dARBDel>("glWindowPos3dARB", getProcAddress);
            glWindowPos3dMESAPtr = LoadProcByName<glWindowPos3dMESADel>("glWindowPos3dMESA", getProcAddress);
            glWindowPos3dvPtr = LoadProcByName<glWindowPos3dvDel>("glWindowPos3dv", getProcAddress);
            glWindowPos3dvARBPtr = LoadProcByName<glWindowPos3dvARBDel>("glWindowPos3dvARB", getProcAddress);
            glWindowPos3dvMESAPtr = LoadProcByName<glWindowPos3dvMESADel>("glWindowPos3dvMESA", getProcAddress);
            glWindowPos3fPtr = LoadProcByName<glWindowPos3fDel>("glWindowPos3f", getProcAddress);
            glWindowPos3fARBPtr = LoadProcByName<glWindowPos3fARBDel>("glWindowPos3fARB", getProcAddress);
            glWindowPos3fMESAPtr = LoadProcByName<glWindowPos3fMESADel>("glWindowPos3fMESA", getProcAddress);
            glWindowPos3fvPtr = LoadProcByName<glWindowPos3fvDel>("glWindowPos3fv", getProcAddress);
            glWindowPos3fvARBPtr = LoadProcByName<glWindowPos3fvARBDel>("glWindowPos3fvARB", getProcAddress);
            glWindowPos3fvMESAPtr = LoadProcByName<glWindowPos3fvMESADel>("glWindowPos3fvMESA", getProcAddress);
            glWindowPos3iPtr = LoadProcByName<glWindowPos3iDel>("glWindowPos3i", getProcAddress);
            glWindowPos3iARBPtr = LoadProcByName<glWindowPos3iARBDel>("glWindowPos3iARB", getProcAddress);
            glWindowPos3iMESAPtr = LoadProcByName<glWindowPos3iMESADel>("glWindowPos3iMESA", getProcAddress);
            glWindowPos3ivPtr = LoadProcByName<glWindowPos3ivDel>("glWindowPos3iv", getProcAddress);
            glWindowPos3ivARBPtr = LoadProcByName<glWindowPos3ivARBDel>("glWindowPos3ivARB", getProcAddress);
            glWindowPos3ivMESAPtr = LoadProcByName<glWindowPos3ivMESADel>("glWindowPos3ivMESA", getProcAddress);
            glWindowPos3sPtr = LoadProcByName<glWindowPos3sDel>("glWindowPos3s", getProcAddress);
            glWindowPos3sARBPtr = LoadProcByName<glWindowPos3sARBDel>("glWindowPos3sARB", getProcAddress);
            glWindowPos3sMESAPtr = LoadProcByName<glWindowPos3sMESADel>("glWindowPos3sMESA", getProcAddress);
            glWindowPos3svPtr = LoadProcByName<glWindowPos3svDel>("glWindowPos3sv", getProcAddress);
            glWindowPos3svARBPtr = LoadProcByName<glWindowPos3svARBDel>("glWindowPos3svARB", getProcAddress);
            glWindowPos3svMESAPtr = LoadProcByName<glWindowPos3svMESADel>("glWindowPos3svMESA", getProcAddress);
            glWindowPos4dMESAPtr = LoadProcByName<glWindowPos4dMESADel>("glWindowPos4dMESA", getProcAddress);
            glWindowPos4dvMESAPtr = LoadProcByName<glWindowPos4dvMESADel>("glWindowPos4dvMESA", getProcAddress);
            glWindowPos4fMESAPtr = LoadProcByName<glWindowPos4fMESADel>("glWindowPos4fMESA", getProcAddress);
            glWindowPos4fvMESAPtr = LoadProcByName<glWindowPos4fvMESADel>("glWindowPos4fvMESA", getProcAddress);
            glWindowPos4iMESAPtr = LoadProcByName<glWindowPos4iMESADel>("glWindowPos4iMESA", getProcAddress);
            glWindowPos4ivMESAPtr = LoadProcByName<glWindowPos4ivMESADel>("glWindowPos4ivMESA", getProcAddress);
            glWindowPos4sMESAPtr = LoadProcByName<glWindowPos4sMESADel>("glWindowPos4sMESA", getProcAddress);
            glWindowPos4svMESAPtr = LoadProcByName<glWindowPos4svMESADel>("glWindowPos4svMESA", getProcAddress);
            glWindowRectanglesEXTPtr = LoadProcByName<glWindowRectanglesEXTDel>("glWindowRectanglesEXT", getProcAddress);
            glWriteMaskEXTPtr = LoadProcByName<glWriteMaskEXTDel>("glWriteMaskEXT", getProcAddress);
            glDrawVkImageNVPtr = LoadProcByName<glDrawVkImageNVDel>("glDrawVkImageNV", getProcAddress);
            glGetVkProcAddrNVPtr = LoadProcByName<glGetVkProcAddrNVDel>("glGetVkProcAddrNV", getProcAddress);
            glWaitVkSemaphoreNVPtr = LoadProcByName<glWaitVkSemaphoreNVDel>("glWaitVkSemaphoreNV", getProcAddress);
            glSignalVkSemaphoreNVPtr = LoadProcByName<glSignalVkSemaphoreNVDel>("glSignalVkSemaphoreNV", getProcAddress);
            glSignalVkFenceNVPtr = LoadProcByName<glSignalVkFenceNVDel>("glSignalVkFenceNV", getProcAddress);
            glFramebufferParameteriMESAPtr = LoadProcByName<glFramebufferParameteriMESADel>("glFramebufferParameteriMESA", getProcAddress);
            glGetFramebufferParameterivMESAPtr = LoadProcByName<glGetFramebufferParameterivMESADel>("glGetFramebufferParameterivMESA", getProcAddress);
        }

        private static T LoadProcByName<T>(string procName, Func<string,IntPtr> getProcAddress) where T: Delegate
        {
            var ptr = getProcAddress.Invoke(procName);
            return ptr != IntPtr.Zero ? Marshal.GetDelegateForFunctionPointer<T>(ptr) : null;
        }

        #endregion

    }
}
